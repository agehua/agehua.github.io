{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/icon.png","path":"images/icon.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/particle.js","path":"js/particle.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"source/images/blogimages/2016/ThreadLocal.png","path":"images/blogimages/2016/ThreadLocal.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/androidart_broadcastreceiver1.png","path":"images/blogimages/2016/androidart_broadcastreceiver1.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/avg_warning.PNG","path":"images/blogimages/2016/avg_warning.PNG","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/google_servcie_ads.PNG","path":"images/blogimages/2016/google_servcie_ads.PNG","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/gradle_structure1.png","path":"images/blogimages/2016/gradle_structure1.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/gradle_structure2.png","path":"images/blogimages/2016/gradle_structure2.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/jni_structure.png","path":"images/blogimages/2016/jni_structure.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/gradle_task.png","path":"images/blogimages/2016/gradle_task.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/PackageManagerService.png","path":"images/blogimages/2017/PackageManagerService.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/apt_processor.png","path":"images/blogimages/2017/apt_processor.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-02.png","path":"images/blogimages/2017/binder-02.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-01.png","path":"images/blogimages/2017/binder-01.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-open-drive.png","path":"images/blogimages/2017/binder-open-drive.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-service-manager.png","path":"images/blogimages/2017/binder-service-manager.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-system-service.png","path":"images/blogimages/2017/binder-system-service.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/device-number.png","path":"images/blogimages/2017/device-number.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/clipboard-ipc-process.png","path":"images/blogimages/2017/clipboard-ipc-process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/funny_pic.jpg","path":"images/blogimages/2017/funny_pic.jpg","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/getStrongProxyForHandle.png","path":"images/blogimages/2017/getStrongProxyForHandle.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/ibinder-binder.png","path":"images/blogimages/2017/ibinder-binder.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/processor_jar.png","path":"images/blogimages/2017/processor_jar.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/servicemanager-find-service.png","path":"images/blogimages/2017/servicemanager-find-service.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/transact-binder.png","path":"images/blogimages/2017/transact-binder.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar0.png","path":"css/images/avatar0.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar1.png","path":"css/images/avatar1.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"source/images/blogimages/2016/androidart_service1.png","path":"images/blogimages/2016/androidart_service1.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/androidart_broadcastreceiver2.png","path":"images/blogimages/2016/androidart_broadcastreceiver2.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/Initialize_for_purchase_data.png","path":"images/blogimages/2017/Initialize_for_purchase_data.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/Initialize_for_purchase.png","path":"images/blogimages/2017/Initialize_for_purchase.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/activity-start-process.png","path":"images/blogimages/2017/activity-start-process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/Initialize_for_purchase_responce.png","path":"images/blogimages/2017/Initialize_for_purchase_responce.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/android_build_process.png","path":"images/blogimages/2017/android_build_process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/ams_binder_process.png","path":"images/blogimages/2017/ams_binder_process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-drive-principle.png","path":"images/blogimages/2017/binder-drive-principle.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-principle.png","path":"images/blogimages/2017/binder-principle.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/hook-clipboard-process.png","path":"images/blogimages/2017/hook-clipboard-process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/listview_recyclebin.png","path":"images/blogimages/2017/listview_recyclebin.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/multi-Application-flow-chart.png","path":"images/blogimages/2017/multi-Application-flow-chart.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/process-ipc-structure.png","path":"images/blogimages/2017/process-ipc-structure.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/servicemanager-add-service.png","path":"images/blogimages/2017/servicemanager-add-service.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/service-proxy-common.png","path":"images/blogimages/2017/service-proxy-common.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/servicemanager-init.png","path":"images/blogimages/2017/servicemanager-init.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/androidart_activity.png","path":"images/blogimages/2016/androidart_activity.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/androidart_contentprovider.png","path":"images/blogimages/2016/androidart_contentprovider.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/EIT-form.png","path":"images/blogimages/2017/EIT-form.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/IPC-data-format.png","path":"images/blogimages/2017/IPC-data-format.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/android_lint.png","path":"images/blogimages/2017/android_lint.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/aosp_make_single_module.png","path":"images/blogimages/2017/aosp_make_single_module.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-EIT-onTransact.png","path":"images/blogimages/2017/binder-EIT-onTransact.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-EIT.png","path":"images/blogimages/2017/binder-EIT.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-example-media.png","path":"images/blogimages/2017/binder-example-media.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_layer.png","path":"images/blogimages/2017/im_company_abroad/im_layer.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/js/js_function_construction.png","path":"images/blogimages/2017/js/js_function_construction.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/js/js_function_construction_1.png","path":"images/blogimages/2017/js/js_function_construction_1.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/js/js_function_construction_2.png","path":"images/blogimages/2017/js/js_function_construction_2.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/pin_verify.png","path":"images/blogimages/2017/pin_verify.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Adobe_Connect_Online_Store.png","path":"images/blogimages/cisco/Adobe_Connect_Online_Store.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Cisco_WebEx_Meetings_Pricing.png","path":"images/blogimages/cisco/Cisco_WebEx_Meetings_Pricing.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/VC5_5_1.png","path":"images/blogimages/cisco/VC5_5_1.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"source/images/blogimages/2016/androidart_ipc.png","path":"images/blogimages/2016/androidart_ipc.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2016/androidart_service2.png","path":"images/blogimages/2016/androidart_service2.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/communication-timing.png","path":"images/blogimages/2017/communication-timing.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_layer_email.png","path":"images/blogimages/2017/im_company_abroad/im_layer_email.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_quickblox.png","path":"images/blogimages/2017/im_company_abroad/im_quickblox.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_snich.png","path":"images/blogimages/2017/im_company_abroad/im_snich.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/media-server-process.png","path":"images/blogimages/2017/media-server-process.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/system-service-register-process.png","path":"images/blogimages/2017/system-service-register-process.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/blogimages/2017/binder-example-media-detail.png","path":"images/blogimages/2017/binder-example-media-detail.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_applozic.png","path":"images/blogimages/2017/im_company_abroad/im_applozic.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_sendbird.png","path":"images/blogimages/2017/im_company_abroad/im_sendbird.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Hybrid_-_Cisco.png","path":"images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Hybrid_-_Cisco.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Adobe_web_conferencing_software.png","path":"images/blogimages/cisco/Adobe_web_conferencing_software.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/blogimages/2017/aosp_monitor_position.png","path":"images/blogimages/2017/aosp_monitor_position.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Premises_-_Cisco.png","path":"images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Premises_-_Cisco.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/VC5_5_3.png","path":"images/blogimages/cisco/VC5_5_3.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/zoom_cloud_hybrid.png","path":"images/blogimages/cisco/zoom_cloud_hybrid.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/binder-summary.png","path":"images/blogimages/2017/binder-summary.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/service-manager-activity.png","path":"images/blogimages/2017/service-manager-activity.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Collaboration_Products_and_Solutions.png","path":"images/blogimages/cisco/Collaboration_Products_and_Solutions.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/blogimages/cisco/VC5_5_4.png","path":"images/blogimages/cisco/VC5_5_4.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/cmr_introduction.png","path":"images/blogimages/cisco/cmr_introduction.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Adobe-Connect-Store.png","path":"images/blogimages/cisco/Adobe-Connect-Store.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/mx-700.png","path":"images/blogimages/cisco/mx-700.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/cisco/Web_Conferencing__Video_Conferencing_Fuze.png","path":"images/blogimages/cisco/Web_Conferencing__Video_Conferencing_Fuze.png","modified":0,"renderable":0},{"_id":"source/images/blogimages/2017/im_company_abroad/im_comparation.png","path":"images/blogimages/2017/im_company_abroad/im_comparation.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"c4df42ac1b4d900e085609523fdcb82bcbd5c194","modified":1511491524000},{"_id":"themes/icarus/.DS_Store","hash":"74c354f5bf3e340b4878e552486208a29c6659de","modified":1511427035000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1480496898000},{"_id":"themes/icarus/README.md","hash":"1501a086a770310f7ac75c4a1dd511baee73912b","modified":1511429639000},{"_id":"themes/icarus/_config.yml","hash":"65a3eb16f412a9d2fcd4134122aaaaa16b468213","modified":1512628352000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1480496898000},{"_id":"source/_posts/2014-12-23-hello-world.md","hash":"e1eb3094eba0f04d413117d7e417cae8e5708023","modified":1511166985000},{"_id":"source/_posts/2015-01-27-android-open-sources.md","hash":"3b92ce38349dd8088fbd996e0d8f7a7d625eb387","modified":1511421825000},{"_id":"source/_posts/2015-03-16-java-multithreading-concurrent.md","hash":"5972b69d61a4df94aee93d09fd3e393d816e072c","modified":1511420322000},{"_id":"source/_posts/2015-11-06-book-list-of-2015.md","hash":"8197f40fe16803ebd29ce8213f63b58103256706","modified":1482748875000},{"_id":"source/_posts/2016-03-01-android-googlemap-summary.md","hash":"2c119bbc28223c99ec77d54061cdfa7f27f60637","modified":1511421836000},{"_id":"source/_posts/2016-03-15-facebook-google+signin.md","hash":"91af959e69f3402137458d3b0ad8b2789902e1fc","modified":1511421839000},{"_id":"source/_posts/2016-03-20-android-new-knowledge-summary.md","hash":"7cfa066a5219fcc3cae3aedff114f3941f253224","modified":1512455631000},{"_id":"source/_posts/2016-03-20-android-books-reading-.md","hash":"5cb78852de1031a0a96011318d2cc1a039a71605","modified":1511421843000},{"_id":"source/_posts/2016-05-12-GCM-Azure_summary.md","hash":"710656060c843b64690188d154960f2e835f173d","modified":1511421850000},{"_id":"source/_posts/2016-05-18-javaString-and-bytes.md","hash":"7e74d49a00c83d1a3623e488c2b5b31dacfce7a7","modified":1511420659000},{"_id":"source/_posts/2016-05-24-JNI-Learning.md","hash":"dbb1e27c6be08b36b8ee0444500c490c3c456cf3","modified":1511420674000},{"_id":"source/_posts/2016-05-24-JNI-Learning0.md","hash":"0bdcd2891d5d6d949be57c8f0d6ebdb997bcf823","modified":1511420709000},{"_id":"source/_posts/2016-06-08-gson-summary.md","hash":"6cd7ac6dddf71e3fdf7cbc6673d8636dcd17462f","modified":1511420738000},{"_id":"source/_posts/2016-05-28-qiniu-android-summary.md","hash":"d56b562fdbeeffa19316fa2651fdb1f17f320085","modified":1511421859000},{"_id":"source/_posts/2016-07-25-android-webview-summary.md","hash":"5dfc557c32325d20523e79950a6eceadf91772e4","modified":1511421864000},{"_id":"source/_posts/2016-08-03-android-LocationListener.md","hash":"8c468ca1fc63250d5bfec12ba032ba1c7a4951b4","modified":1511421867000},{"_id":"source/_posts/2016-08-16-RxAndroid-Learning.md","hash":"2a4c3a895205d7987f072907a7394bab646f8197","modified":1511420784000},{"_id":"source/_posts/2016-09-05-ThreadLocal-HandlerThread-Looper.md","hash":"7a1932dd14875c7578983577390ebbfaf9bbf762","modified":1511420802000},{"_id":"source/_posts/2016-09-20-AVG-unwanted-software.md","hash":"f90da273632d7a46b7968e006fe94f075564cf75","modified":1511421886000},{"_id":"source/_posts/2016-09-20-android-design-pattern-singleton.md","hash":"6e3fe27628e2fcc2e9332ffe0ad5709360454d28","modified":1511421882000},{"_id":"source/_posts/2016-09-22-JNI-get-publickey.md","hash":"54abc064a92d87e5e8e086e3435562fd16c9a532","modified":1511420898000},{"_id":"source/_posts/2016-10-12-gradle-learning.md","hash":"48078e8e15883a46ecc1f4c68ef1df83ffb799e1","modified":1511420966000},{"_id":"source/_posts/2016-09-22-quit-whole-application.md","hash":"1727b4e0ccfa8926cc6b41f90aa4806b35629b2b","modified":1511421892000},{"_id":"source/_posts/2016-09-28-Android-interview-questions.md","hash":"96327f4d9e7f0af33edcffbf1834340816cf2386","modified":1511421895000},{"_id":"source/_posts/2016-11-03-hexo-mac-module-not-found.md","hash":"531997acd6408c06d6c50b9e4e113b179fd86410","modified":1511420986000},{"_id":"source/_posts/2016-10-13-gradle-learning2.md","hash":"164ab15eb78cb7248efb09e4eea9e1cf5bfb3d9f","modified":1511420973000},{"_id":"source/_posts/2016-11-21-Difference_between-T-E-K-V.md","hash":"45ae07766ede0435b1e9ac458789e369f6b0bd28","modified":1511421079000},{"_id":"source/_posts/2016-12-06-hexo-learning1.md","hash":"a099c19126aef6f8880bc57b556669fdac730da5","modified":1511421107000},{"_id":"source/_posts/2016-12-04-hexo-learning0.md","hash":"ed12ca2781d145b43300cf160a193b0393785f8f","modified":1511421093000},{"_id":"source/_posts/2016-12-11-ThreadLocal-usage.md","hash":"44aef0847becbd58254e010a1648bbe07defa9e4","modified":1511421122000},{"_id":"source/_posts/2017-01-13-abroad-IM-service-company.md","hash":"764ff04003cb0a424df1d40dc05b915e27ca273d","modified":1511421167000},{"_id":"source/_posts/2016-12-20-Android-patch-update.md","hash":"8fbad0e5edcbefa74f1b7812ede13f1a5f7c5261","modified":1511421912000},{"_id":"source/_posts/2017-02-12-iterm2-to-linux.md","hash":"d94326c2ba75ddeb588a367daf4a9fa7dee79bbf","modified":1511421189000},{"_id":"source/_posts/2017-02-21-Multi-Process-Dispatch.md","hash":"9d08b4a2ebc6ca53aaece2aff6099e6511510ef9","modified":1511421919000},{"_id":"source/_posts/2017-03-20-SVN-server-linux.md","hash":"5f912aaca2232a6960305c64a69aec3ac7e503a1","modified":1511421245000},{"_id":"source/_posts/2017-03-09-Https-Questions.md","hash":"73cc1a816351366e1584a943e20e47997aa73e40","modified":1511421209000},{"_id":"source/_posts/2017-03-14-JAVA-CDI-Assertion.md","hash":"ccd6b413d9bf4c76b35853579e1236df0e605687","modified":1511421235000},{"_id":"source/_posts/2017-04-10-Annotation-Android-usage.md","hash":"a19f2859d7af1fcb2563d058b31df58080af40fd","modified":1511421929000},{"_id":"source/_posts/2017-05-11-Object-Oriented.md","hash":"141b8824f45086f68c0ff94f718b9cffd17e9c56","modified":1511421317000},{"_id":"source/_posts/2017-07-12-android-noroot-hook.md","hash":"e9643d071d870580925136bc8241770d5ab9fd51","modified":1511421944000},{"_id":"source/_posts/2017-05-18-handler-replace-timertask.md","hash":"139e9e8baba52b979e609adfd8c34919fcf6d248","modified":1511421328000},{"_id":"source/_posts/2017-07-08-android-binder-principle.md","hash":"ebe05051768e1cc19ba52663b7e65d9187b0324f","modified":1511421337000},{"_id":"source/_posts/2017-08-01-aosp-compile.md","hash":"e0e1895ce24316eb6be13b268e7b95c9b79f8f0f","modified":1512454879000},{"_id":"source/_posts/2017-07-10-android-binder-principle2.md","hash":"dbb804b4606715bb259477e2b2fadc4bd53702ef","modified":1511421348000},{"_id":"source/_posts/2017-08-02-activity-start-process.md","hash":"d8f8ff509d579343d7730d17692aec51cd915c57","modified":1511421601000},{"_id":"source/_posts/2017-08-17-IntervieweeQuestions.md","hash":"907bd0fc9d7a22f591c26b664180e3ac29944171","modified":1511492515000},{"_id":"source/_posts/2017-09-21-PBOCKonwledgeCode.md","hash":"4a64eb34b2161c264c007c4a6e133ea8bd7f4923","modified":1512628483000},{"_id":"source/_posts/2017-09-12-PBOCKonwledge.md","hash":"e66b7bcda4f72494f08142fe3c2ba21ee0983017","modified":1512628503000},{"_id":"source/_posts/2017-10-22-Buildcross-platform-desktop-apps.md","hash":"bba80b238050276d1b664ea162fd5a0c92c127e5","modified":1512629179000},{"_id":"source/about/index.md","hash":"a20e731a33e6ce7ad90c801b136e6fb42f5b3ee9","modified":1489389942000},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1482748875000},{"_id":"source/_posts/2017-10-22-JavaScript-knowledge.md","hash":"69e36664e2f51c5b7e3d8d030f0445ce66647060","modified":1512630360000},{"_id":"source/images/.DS_Store","hash":"1f8fdf96d0f618f08d32cb78b496dd949f51c65d","modified":1510121179000},{"_id":"source/images/avatar.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1482748875000},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1500363327000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1511423656000},{"_id":"themes/icarus/.git/COMMIT_EDITMSG","hash":"6d12db47b17cafb6861f99403a7769cba0407991","modified":1511430074000},{"_id":"themes/icarus/.git/ORIG_HEAD","hash":"435fde90cb49bdded78a567c87068633f1888ab6","modified":1511429639000},{"_id":"themes/icarus/.git/FETCH_HEAD","hash":"bd8b43d5492bbee4f7435ccb4248958d10cbf8af","modified":1511429639000},{"_id":"themes/icarus/.git/config","hash":"2788131ffcd313983161072e7540e5be4ceb9926","modified":1511424914000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1511423656000},{"_id":"themes/icarus/.git/index","hash":"265910861e586e8e630a3bd71d9cd692b2ed1ec4","modified":1512628382000},{"_id":"themes/icarus/_source/.DS_Store","hash":"2b56d4cc3f23c20ad6ec6722b6232c801c1248f3","modified":1511424136000},{"_id":"themes/icarus/gallery/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1480595851000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1480496898000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1480496898000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1480496898000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1480496898000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1480496898000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1480496898000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1480496898000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1480496898000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1480496898000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1480496898000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1480496898000},{"_id":"themes/icarus/layout/.DS_Store","hash":"aec64551d1069c963cc8379910a24dc9a8d228e7","modified":1495509051000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1480496898000},{"_id":"themes/icarus/layout/about.ejs","hash":"96f4047eaafef54708dc3581c32542620f157251","modified":1489389901000},{"_id":"themes/icarus/layout/archive.ejs","hash":"838b964491b580b2243f54782f4899ade56cc822","modified":1500363065000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1480496898000},{"_id":"themes/icarus/layout/index.ejs","hash":"b5a0144d28aade461773376d987fd0e51bedf87a","modified":1489388794000},{"_id":"themes/icarus/layout/layout.ejs","hash":"b24c3cdc1b82e21c086847324680e12293c57fa3","modified":1511418897000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1480496898000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1480496898000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1480496898000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1480496898000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1480496898000},{"_id":"themes/icarus/layout/tags.ejs","hash":"d9f4ad20ce3e80de0898c8e3747c3e21cda80fa9","modified":1500360418000},{"_id":"themes/icarus/source/.DS_Store","hash":"39d1d308dd6d7887019d88cb625c5ba4f52fb469","modified":1511423285000},{"_id":"source/_posts/2016-12-03-nodejs-learning-getting-started.md","hash":"358ea9a0168841377dd11f46092689e2f046b06f","modified":1511421012000},{"_id":"source/images/icon.png","hash":"342e89a86946e3178b4ff79b6cbb64b33d787814","modified":1500356731000},{"_id":"source/images/blogimages/.DS_Store","hash":"d89267ec052c123dc0dfa82ac46467722fbfdbc2","modified":1512633870000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"30d535af785d92858ce32401b4a3e4112a43333f","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"5cec52bb8a03dbc279920c46261751252e0ac96d","modified":1511423656000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1511423656000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1511423656000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"69675ef6c9c6231bb428df0d2a8ae45c8e35971c","modified":1511430074000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1480496898000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1480496898000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1480496898000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1480496898000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"5033b804adeb15f5a2db06cae73f2ac96b436d69","modified":1495523649000},{"_id":"themes/icarus/layout/comment/commentit.ejs","hash":"102e61482aa89c85478d090b96c26ce3457d4a4d","modified":1494488354000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1491956064000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1480496898000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"8e7686b5d9671cf20b22b7747b3a1b73548e2255","modified":1495526900000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1491956064000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"2edc671fe6712cefca3a56e769cb508cc79a3fc5","modified":1495523361000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1491956064000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"266b58604af33a64e5d61b4f11909aa05a0cc7b9","modified":1495508758000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"91c34df596a77b09e999d20112eddde814552b2d","modified":1495520128000},{"_id":"themes/icarus/layout/common/.DS_Store","hash":"fe3a1b2077d038bf1c41e6251a1ecc40f9440fd1","modified":1482902599000},{"_id":"themes/icarus/layout/common/category1.ejs","hash":"60c571b602dd84e2ea4b040a35f8a3a33fe969be","modified":1487128351000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"f7fc813a1835baecd5c7596c393c5a05b415ad34","modified":1511419408000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1480496898000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"cc7b168c338181dca06e8aa4582dd786c3168a96","modified":1511344650000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c4d986352522524860908cc5887bca08cf1f2b12","modified":1511254889000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1480496898000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0bdf655752c28fbc9b66bd5ca3e27ba7f9158b9d","modified":1511429891000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1480496898000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1480496898000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"300a2d5b3dd2524739aedef5b8fe127e423bdda2","modified":1512628120000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"4fdb85e6730530f2d262041b41d1ead1b87dfd88","modified":1480496898000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1480496898000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1480496898000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1480496898000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1480496898000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1480496898000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1480496898000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1480496898000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1480496898000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1480496898000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1480496898000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1480496898000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1480496898000},{"_id":"themes/icarus/layout/widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486362350000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1480496898000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"9034e27649a433dcc4ba1c3edf88a1e894bde643","modified":1486362836000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1480496898000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1480496898000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1480496898000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1512628381000},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"afe15f602d6b9d789791fe9060f32e8288845f54","modified":1512628347000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1480496898000},{"_id":"themes/icarus/source/css/.DS_Store","hash":"3399f1cc05511d38c954f9357ab3d0a99ece2147","modified":1511239251000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"54cd0e2d8708350517b4be5982244c32395e6959","modified":1511257955000},{"_id":"themes/icarus/source/css/style.styl","hash":"82aa42f9826dc14e9e0d6443af6e253029e7fee6","modified":1480496898000},{"_id":"themes/icarus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1482718102000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1480496898000},{"_id":"themes/icarus/source/images/avatar.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1480497902000},{"_id":"themes/icarus/source/images/favicon.ico","hash":"e64542caa1b7a07484925304cd99c93129dfce8e","modified":1482718701000},{"_id":"themes/icarus/source/js/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1486207168000},{"_id":"themes/icarus/source/js/main.js","hash":"80cde22d84fad8be4d7dc77c0cdf8eb8f01f8903","modified":1511342235000},{"_id":"themes/icarus/source/libs/.DS_Store","hash":"3878ce27bacf56c19657c95e20a7658642bd1ed2","modified":1511423285000},{"_id":"themes/icarus/source/css/bootstrap.min.css","hash":"c200606a34a69549ed093b29ec81b9008d8658f2","modified":1511244198000},{"_id":"source/images/blogimages/2016/ThreadLocal.png","hash":"29a37aefd8f9aa455e5f5e41d56d374184c8694b","modified":1482977555000},{"_id":"source/images/blogimages/2016/androidart_broadcastreceiver1.png","hash":"dc4a97d2b8ef1f6592717204788d9f716117fdee","modified":1482748875000},{"_id":"source/images/blogimages/2016/avg_warning.PNG","hash":"1b8817b076f48cf8217439e0265cb4216abb3d17","modified":1482748875000},{"_id":"source/images/blogimages/2016/google_servcie_ads.PNG","hash":"10c107e578bcfb28ee9f38c247f62cb99f14ea1a","modified":1482748875000},{"_id":"source/images/blogimages/2016/gradle_structure1.png","hash":"0b8c1f213bb88852ecb0fd8a50b60f310d6a23e8","modified":1482748875000},{"_id":"source/images/blogimages/2016/gradle_structure2.png","hash":"6a8aefb3577950beeba2900f507e749dd518345e","modified":1482748875000},{"_id":"source/images/blogimages/2016/jni_structure.png","hash":"312696c9a056a734ff63d9457ff0bb83f356f057","modified":1482748875000},{"_id":"source/images/blogimages/2016/gradle_task.png","hash":"6890da207d5772a6f141024267547db56e9bec38","modified":1482748875000},{"_id":"source/images/blogimages/2017/.DS_Store","hash":"27ba3c2b25d479eab8a67e68616116f714272c65","modified":1510121216000},{"_id":"source/images/blogimages/2017/PackageManagerService.png","hash":"c796723407d80b2252667add5e2734f7f80f5cd0","modified":1499665537000},{"_id":"source/images/blogimages/2017/apt_processor.png","hash":"9b75b07d395db890bef153daf95f0f4a365e4576","modified":1491809767000},{"_id":"source/images/blogimages/2017/binder-02.png","hash":"014d8a4c1061ae8186a59095694eafbc96aad029","modified":1503649151000},{"_id":"source/images/blogimages/2017/binder-01.png","hash":"cdedd11dc6e75fe0a5cef7d313624ae31be881d3","modified":1503648592000},{"_id":"source/images/blogimages/2017/binder-open-drive.png","hash":"0ef23b58ba4f06233d0f3cfef4fbccf27e2dbdf3","modified":1499739342000},{"_id":"source/images/blogimages/2017/binder-service-manager.png","hash":"b99d44d9bf79a26bff169c7ece70abf7dc6fb3de","modified":1499736581000},{"_id":"source/images/blogimages/2017/binder-system-service.png","hash":"d388f2e4cdd90e1e7ebcf4ad85c0af6c98427c74","modified":1499667374000},{"_id":"source/images/blogimages/2017/device-number.png","hash":"50005dc453a70edab64d828508b2ba139c0df338","modified":1499739087000},{"_id":"source/images/blogimages/2017/clipboard-ipc-process.png","hash":"2419837d48fca339b19e6a3a6d053301699e20c4","modified":1499760915000},{"_id":"source/images/blogimages/2017/funny_pic.jpg","hash":"fd45920ce6bdb70e1af2a56998700b8ce717d06f","modified":1487742804000},{"_id":"source/images/blogimages/2017/getStrongProxyForHandle.png","hash":"e3f3167645262e911feabc39e8fc4431c1fb5027","modified":1499738051000},{"_id":"source/images/blogimages/2017/ibinder-binder.png","hash":"844df893c87e22eae853536204010d88a9df745f","modified":1498808414000},{"_id":"source/images/blogimages/2017/processor_jar.png","hash":"f1b9bb1ab096157303f4cb9c50904f485add7782","modified":1491792208000},{"_id":"source/images/blogimages/2017/servicemanager-find-service.png","hash":"ea408c25c09bc94103d68ed23941a3cebd8c18f9","modified":1499736754000},{"_id":"source/images/blogimages/2017/transact-binder.png","hash":"49129266297f97d7883900dda0304c3a2f5cc3a7","modified":1499739421000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"b1147ee86a529ed7adf2e25ca93d0ba7b2ffc15c","modified":1511430074000},{"_id":"themes/icarus/.git/objects/00/2c5777e2314e5f1893034868b9e5dc81a87c70","hash":"2e226d3d995ba56aedc6587afa705b8102338f7a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/03/0636ccc4c9056d0332006ba69266d1a8dd2ff1","hash":"6b93db8fb1d8277083e7f747c57f92fc1f46f164","modified":1511424067000},{"_id":"themes/icarus/.git/objects/01/571d0a938d80178868b266063246b0fca2c1d8","hash":"4f9ee4b6ca0ea1f5038114fcc26b097bdd357271","modified":1511424067000},{"_id":"themes/icarus/.git/objects/03/b166f8bf40ccfd6056b004f5ba0289188d4648","hash":"31851f0894b13d44bf722268813f5841748581be","modified":1511424067000},{"_id":"themes/icarus/.git/objects/00/c99364e50d82189b7894fed6c6dda039cb1930","hash":"83215bd18b782b959629fda28a9db12bb7a3ad62","modified":1511424067000},{"_id":"themes/icarus/.git/objects/06/8fdb3cbb032d5cb0f10359bf02590ad99b275d","hash":"0c20f8c308286463474d3c64b302cab08e805f95","modified":1511424067000},{"_id":"themes/icarus/.git/objects/05/d77b13ea022fb04edd3f786633ceb40cc7722f","hash":"e807bcdc8179067d5410dd47b62686fc968fb53a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0a/d84077e73345a9f7ca0bda4fd23985ec58b3f6","hash":"215e0d5e216e7e17dcdfc9f1bab96f0d83891528","modified":1511424067000},{"_id":"themes/icarus/.git/objects/06/00e9c0ddf3203e64506822dff38fc8afd34a07","hash":"917f0dfb801d8644f16ae84baa34db350eb329ac","modified":1511425581000},{"_id":"themes/icarus/.git/objects/09/ae4e1f0c28b933cbe80945c2eecec7358eed66","hash":"0f132967643d17a5bca0d1ee240ec57e5a44807a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0c/00b9ba1edda04312265f1c62323483230fe74c","hash":"826f0fce7e7a0f0c3ed403ac973d9f624535e533","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0b/5a66eb4ca09f9562bbec0f01a11c271eb1ede3","hash":"10755d1701861c7771f998f8687766b6d0322512","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0c/633e06023b6223d4c2e5b4816e1b45727e64ca","hash":"6deedf1b06a40974b79726ed4e253e553b892009","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0b/24ef63b75049df31ba6f7aa2d585af399c2e8e","hash":"392950829c351987ec5727ce8bf631239d34e069","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0c/e57137902d91d27e6db61ff19ac9cf2e130d5d","hash":"1519e89be7ec729ff951f1fa2caf9305521d9289","modified":1511424067000},{"_id":"themes/icarus/.git/objects/0d/3373bb5c995f3a810f9275351bb7de2a56d6ca","hash":"4fb36ab87fe55e4be8da340a6ad9681fc5a498ed","modified":1511424067000},{"_id":"themes/icarus/.git/objects/10/6d16dba2711c3408ae8ebcc78e7b9b1868afdf","hash":"1eec1784ba4db6e87252e1a8dcd8ef2a68f59c3d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/10/84d52c2e11c679ca81ef3628266b203f905cf1","hash":"e43913ab091e25b825561a55e19ededde4cff7d0","modified":1511424067000},{"_id":"themes/icarus/.git/objects/12/ed67c1f63d095899faa81ee4ab1a4ae641736d","hash":"9ac07e80e3979a58813e99f0ffffa35b84e8fcc6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/10/a76f047fe6d3bfa302f2be9a8bff143bcb4a5f","hash":"10d8fff71ed0c04a15805c3f072b59ca105ce270","modified":1511424010000},{"_id":"themes/icarus/.git/objects/0e/ab8a89c770d46b9f1e8f837ec8be3d03f4e54c","hash":"cd8d3dbd8e01eb1000a25505edeb2db93061ff6a","modified":1511429639000},{"_id":"themes/icarus/.git/objects/1c/1b0669f22604858fd5d116455b109dc03782c6","hash":"4eddfd7e25365cad73aceb7c5e69c15804d7b8db","modified":1511429547000},{"_id":"themes/icarus/.git/objects/1c/fd9363aafc9ff0126e2966e647d689a170ea40","hash":"477e4a94d7a3ecf0f91bd0d10865bc5aac289add","modified":1511429639000},{"_id":"themes/icarus/.git/objects/0f/e620040a7c99ef3013968943b53032226a2dd8","hash":"e45c05e6aba825d70da78229a86064373c1ac554","modified":1511424088000},{"_id":"themes/icarus/.git/objects/0f/1eeae6cc213d641514885c2efd0438f8b88724","hash":"b4e07b54afb676f5697f04ae8668f773b130cdab","modified":1511424067000},{"_id":"themes/icarus/.git/objects/16/636e4ebbcea913a219450fa6ff7b641efe636d","hash":"df8169955599a35dcf2b078b788210338190d0de","modified":1511424067000},{"_id":"themes/icarus/.git/objects/19/d364ea1c0dc751ac14f6955d223ee97eca024e","hash":"38abfe2735f1f984a08ce8a82674c704c509557c","modified":1511429639000},{"_id":"themes/icarus/.git/objects/1f/6141d5e4be7bd7708193b3c332da9e83433973","hash":"02391be456a8e5a9236374b04c2f19f550de9a94","modified":1511429639000},{"_id":"themes/icarus/.git/objects/1f/d235c2d3d30c5a545048785f9db2ea1eb6adbb","hash":"9e9459eab14d30b7e28709153bcdb7abc6735dc4","modified":1511424067000},{"_id":"themes/icarus/.git/objects/19/df2cb185b28796f812764a55c2db4168ed0c58","hash":"b1add0c734c1edb9b9cee2f31245bf40111ff0c3","modified":1511425967000},{"_id":"themes/icarus/.git/objects/1e/96c0b5efc5bc7550c508f088c443b29180dd42","hash":"f33ae328db89367053f9b81dd1afbae61d48680a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/24/9b3467d7ddd8fc8a709bf80f7d1c351b383674","hash":"c25f3a2046592e660b641594612750341ab6bdce","modified":1511426171000},{"_id":"themes/icarus/.git/objects/26/23fdbccd4a5a3515d3a736c7143ba3a6576616","hash":"89720a8da6db904859fb65398e625ef6c434253e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/24/fd8a6a200cf15d224c2aa2348fe21f3c36e869","hash":"ba627beaaeaf99526a40e4724b443bbeb7a08882","modified":1511429639000},{"_id":"themes/icarus/.git/objects/26/a4df1f0a8e574b14d72cd53ada21a1edf408fa","hash":"08468bb54076a68779d898b76df14a28973fd6df","modified":1511429606000},{"_id":"themes/icarus/.git/objects/22/3b6a9318e95a427c244c4e51aa69dd06e4ff13","hash":"32906097ba02975f30324903abd872770d22d7b6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/29/2a45b780e07d52bc0489594ed38cac762bc091","hash":"6b1013ec0ead94dcb0694ca5ace935dd947c4638","modified":1511424067000},{"_id":"themes/icarus/.git/objects/22/b1a1ff7046c565f2bc81350f00d64205919dc2","hash":"b01e1968f567b084b8410a64da5e8b285b4f891b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/25/714ed29ab6fcf0355da4b45ac602fac0154efb","hash":"333809419ce99e47ee80ea6c61bd6361b2dd4f6a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/27/b30b9e473877be6e5584618d2fe755ef4089f7","hash":"289439ebb374d627548815fa3995722463663be7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/28/018e97628224a6f3ac18b6d2a21a5f5918ac88","hash":"894eee8674a99c109efcd31aa0714a89b8df4b15","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2a/6cedc8af07e7c613ccb34bfa803726e6d8d7f1","hash":"12858b15f5ddaafa56a1a6f2fbd367c6b413d9db","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2b/0c58a48d486c4172dee02720c0b005693f9fff","hash":"8f09eae3ce543468b0979992900efbd7c3545d4a","modified":1511429547000},{"_id":"themes/icarus/.git/objects/2b/9bfb8171ef34274aabae99db518a2cf5510932","hash":"6a4c47f5d13cc6d7b548df204d76a5ba148f3fa5","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2c/84b0865d2b764c202811aa0c3428e9a40912de","hash":"f20c2c422f45472de1901398e1efa894ddf7f7ce","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2c/5810d5c4b166eb635cd31bf3b637cd281bcbcb","hash":"b0f4f89e337644a351ac39f885f67e2c49a69796","modified":1511424067000},{"_id":"themes/icarus/.git/objects/1d/718e03854f61b23b60635e80066d883fc214fb","hash":"7e1eb955892ca3b49023d0143ed1b129ed4ac523","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2b/8aa922581378d4b37b84bdf73b6b0779e1ec4a","hash":"7c54cab56cd1d0dafc6b31c88efc164e20d15744","modified":1511429639000},{"_id":"themes/icarus/.git/objects/2e/c09b8af9d908548ca8aecb735e7758c264022c","hash":"90f4951d102cbb444405d2f2f276f0a18e091256","modified":1511424067000},{"_id":"themes/icarus/.git/objects/2e/8094d3f21eb7e607d83cb3f89bba8833b48f28","hash":"06a3db28c80aa621a4ffbb4c23a111e048fc1a9d","modified":1511429639000},{"_id":"themes/icarus/.git/objects/2d/fa2f2a4a7de5719220e59cf1cfc92321aa3670","hash":"aa22656bd8a795193787da4746a53837307b95d9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/30/8755bbe32d0f460d0b6d8e098696f2269f6ee2","hash":"7b5c95597bbe22ebd94dfc1d57138d3d9e84a503","modified":1511430044000},{"_id":"themes/icarus/.git/objects/2d/ed6583c40d155cbd7c8186887c0eacd421b5ae","hash":"67cca088fac5d560d8e6326a47094f3bd5bea90e","modified":1511429639000},{"_id":"themes/icarus/.git/objects/34/ef86946527afad9a16e59c9521ad155ab7680d","hash":"3c5831916376083145d28967c9761bc929ac1a33","modified":1511424067000},{"_id":"themes/icarus/.git/objects/32/47ac515ba8e9a82e2d63ce3c47321c79058909","hash":"bffe38ab06e4dc8a7e3da3aae276e9ef469f67ef","modified":1511424067000},{"_id":"themes/icarus/.git/objects/32/e6455538e980eaf05d93ca3b47fe96585e8bb7","hash":"db8e0117d7c393a09dfb79a0d006a90e66b19758","modified":1511424067000},{"_id":"themes/icarus/.git/objects/33/1b4007e171e7b664e0da8a22c9b694d60a3383","hash":"74ef9eecc2f8a9e04eeb45ef7d49a5c507ab5646","modified":1511423747000},{"_id":"themes/icarus/.git/objects/32/f24138a83bc7b154b22322d12ca961cb5432f9","hash":"96e72c28f68bc3c1af1be1a443d19777d5557b58","modified":1511424088000},{"_id":"themes/icarus/.git/objects/33/12f5c354f6f87e3b7dead838e2f1bed38760df","hash":"1458c3ea2322c6c0e28853bc7beb93aac2f632a6","modified":1511429639000},{"_id":"themes/icarus/.git/objects/31/7ff5a1ada5987be7a94de0e638f488d48f142d","hash":"34d5f80d05192eee1ec2347b16a5b4adf235980b","modified":1511429639000},{"_id":"themes/icarus/.git/objects/36/3eedbf59dd05d511f6e5adbae9f74d12dc1028","hash":"361c23d57bbebbec96e322d154dc10af6fdd30d0","modified":1511424067000},{"_id":"themes/icarus/.git/objects/36/1d6d35cd91e5cce616de342aa0f2cbb22715ae","hash":"39f9b41491826402dfbad2b4dc4e51b4ab2367e4","modified":1511424067000},{"_id":"themes/icarus/.git/objects/38/13903dbf9fa7b1fb5bd11d9534c06667d9056f","hash":"5ac60f42d253df324a5a06aacc6c0a07ef9eb0f9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/38/5e3e557033f796093d7e3c6e95d3d8794de0e4","hash":"45a9a05a17bcc30e25ca6b96da07de802247a976","modified":1511429639000},{"_id":"themes/icarus/.git/objects/3a/2d930af88243ae09c94831542762b82590a277","hash":"f10a295810033c1046cea255d574f2b5a414003c","modified":1511425701000},{"_id":"themes/icarus/.git/objects/3a/3dd3cf2e920df91b604ec2f37d2af4e030148b","hash":"02a0872a0d24b02c5777c843932c59e30037b7d9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/3a/85457142ce871e51473b784661b9cf78b859b3","hash":"b10c1ee3643806016d5d699d4337b3551505d383","modified":1511424067000},{"_id":"themes/icarus/.git/objects/3a/82b4b3e0cb8eea59f58ea6e8971dd09749a6ac","hash":"995dd086ed7e87a300e4e5453f7c39a21a99093c","modified":1511429639000},{"_id":"themes/icarus/.git/objects/37/31614923e8577417079ec583767d0a37376992","hash":"af3a2d79517a9519236474bdc9c9c4f087e25b57","modified":1511429639000},{"_id":"themes/icarus/.git/objects/3b/966012ecdfb6651f1c67d4a6e7542c92da760d","hash":"81b67c21446e898dd14897fe097d2c1ab5b31dce","modified":1511424067000},{"_id":"themes/icarus/.git/objects/3f/a874a6a704694a9864e05ce16efd1a7e858cf1","hash":"45cde044cfc18629490a1e20bef03b7554321543","modified":1511424067000},{"_id":"themes/icarus/.git/objects/41/11b36671a856ae9c79c24e0b9c1250604c1064","hash":"62e8d1939cd2bc5f43c126d2e2e696d94e5e3152","modified":1511424067000},{"_id":"themes/icarus/.git/objects/44/d3bd81c8f9659c6757bf471f8a7bce93cfcbd0","hash":"f72bfc08741a7f7b647f668cb4891c171dd54c08","modified":1511424067000},{"_id":"themes/icarus/.git/objects/44/fd827fac26f47d554a754068e4b722659e68e3","hash":"d1218441be6ae8009a9952f35c8c699150bca9ce","modified":1511424067000},{"_id":"themes/icarus/.git/objects/40/1b941bde01cb40b6d82778c706098321846dec","hash":"152958bd4d40133324b519fca988364392270607","modified":1511423828000},{"_id":"themes/icarus/.git/objects/3d/cfbc606f7eadb4791b407a18963cd396eeb9cc","hash":"551bf61b66232808ff4abf020a304bde1b1615b5","modified":1511429639000},{"_id":"themes/icarus/.git/objects/45/614921c67f1e2dee0f3434c6e0343d441323e8","hash":"ef027458201e25b7f9d1684cf8d89bd95e4d9df1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/46/86dba02b31f47bbb8a826e3c75cd06fdb98da2","hash":"8b353031b46f44f4bee38c1ba6b2255d81d6d425","modified":1511429639000},{"_id":"themes/icarus/.git/objects/4b/825dc642cb6eb9a060e54bf8d69288fbee4904","hash":"f9acaead3e977c3d0fb7ad604631d5d838950772","modified":1511424010000},{"_id":"themes/icarus/.git/objects/47/e6c62570ed5edabea5810c31925076307fce1b","hash":"fad9adc5022a0b8d4942392e384103aa9298605e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/48/93540369aae6874662e910323239852ecd3fa5","hash":"ecc0a6559c4564294a59e6ecc0d2e89e34b6dad7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/4b/f876ebd0a3e8a7eb62aefa30100c3024eaf471","hash":"3ae0d36d650b70d8b989a2f0f3e5037055c52417","modified":1511429639000},{"_id":"themes/icarus/.git/objects/48/306000440b5fb93cd847bdf20a5b5edd059335","hash":"c88f74ef258eb5a6cab9d75804ebf8d722eaa7d6","modified":1511429639000},{"_id":"themes/icarus/.git/objects/4d/00ca22e4792f896fac742ae67480de1846f8e2","hash":"805399e61b4260f7031ad3066e8b462b8b4ea1f3","modified":1511424067000},{"_id":"themes/icarus/.git/objects/4c/af5a96ce3a770e460fc268b80f0ed7e212839a","hash":"f39fcfde3ef912ccf4a60faf0ca2401613402eda","modified":1511424067000},{"_id":"themes/icarus/.git/objects/4c/4d9b2b604dec46576dfaf25fe065bf9c9d9b12","hash":"553d813ebb312ae3c33a304349cdb437dd9caaba","modified":1511429639000},{"_id":"themes/icarus/.git/objects/4e/0bd5dcc9065505a762e414558f95d3a812b88a","hash":"26961872dc1c61b2f2c2ef9d24682da85c25f075","modified":1511424067000},{"_id":"themes/icarus/.git/objects/4e/49c7e3cc50632a4405769b7dc3d0a70e3d72f9","hash":"66dd1e40189ffdc04ea0779d522ceaf83a3d7f88","modified":1511424067000},{"_id":"themes/icarus/.git/objects/4e/c922351c57dac2c1dc879d42971eafe938c6e8","hash":"4a445700d7f46dfd8c46511ecb8044e977613cb6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/53/45d1a8068c0324a154f518f027230e60133be0","hash":"a0ff2c7a962a668b609dec2c757d8aaa410a3ff4","modified":1511424067000},{"_id":"themes/icarus/.git/objects/50/d09904d2242f6aa40e51fc4d1b5835cd3e2e98","hash":"8bfba079be5d2f1fe8223748b7df5bf50b33414d","modified":1511430074000},{"_id":"themes/icarus/.git/objects/4f/889139b7dec7b68770c22798a892288a918a09","hash":"fc29a1382857bcc6796fdcde6769d397e7bc6124","modified":1511424067000},{"_id":"themes/icarus/.git/objects/52/87058cf90dd427ca8ad6e330cd339bd257dd9c","hash":"b6549696666ec79c40bf2beb9610673b94b84b0d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/51/16ee65119a9d9d88059d39b62884b19286345b","hash":"ee9b3964ee7aabad1d5ec5a606aad92b53e55f7b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/54/0d0063784d2bd0b49a5c34923270dc3b91d532","hash":"8567b8d35818fc19fc9e4948be8af92e267faa04","modified":1511424067000},{"_id":"themes/icarus/.git/objects/51/264c4fda25feadb007e30ab69bf9b0ddfc1cee","hash":"89ea3e04f852a41832f39300784851dd932b36ca","modified":1511424067000},{"_id":"themes/icarus/.git/objects/54/3f1ba590010c22f642042feb1fc23727ecbe7f","hash":"900ada34da7917d6e5f45f8409366cfedcf652d3","modified":1511424088000},{"_id":"themes/icarus/.git/objects/51/9b4bd6e9c0e6b9aa72438fc70d6a6890b9912f","hash":"1a0b33bbd3186d2010a52dc2730835f431bcb18f","modified":1511429639000},{"_id":"themes/icarus/.git/objects/55/b535060668fd35604a0d88d4afac2e290d050e","hash":"4d3db26f92e2079e59714177382fd66b1f167015","modified":1511424067000},{"_id":"themes/icarus/.git/objects/55/cab16caa03a43643b53566e6304b85691479e2","hash":"2d546390d218efdf3899bf7c60825bab90a18a52","modified":1511424067000},{"_id":"themes/icarus/.git/objects/54/5bf27f36a5d0234d357155bd03ccbdcb831a20","hash":"afaf9a4aa1c8e45fe16d8e7ca1f50d5b16d1f976","modified":1511430074000},{"_id":"themes/icarus/.git/objects/57/8d4627a85f791ee19c8b84c61601ca12efe1ea","hash":"1331ed792a9d74c96c361264f41dc78a9ea8bab9","modified":1511423828000},{"_id":"themes/icarus/.git/objects/56/fa8fb03db67ce54588b8332d132d0fa544b2b6","hash":"2bc92c0986c2c2e462d0cd453bea06a1ec6abe19","modified":1511424067000},{"_id":"themes/icarus/.git/objects/55/fc7709c8c1a3967f5e76c1e766b97e2ea780f7","hash":"b8478744491f60432c9098c908611726db2de34e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/58/77f98bd182c58be248373267ffd24eb5f035f7","hash":"604cfe8da7c8a52764736094e0f91de944d6daa6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/58/adf1f523e1c2bbbb37122cdcaeb8fe58536519","hash":"9b42d7bf346d64a877d92708d5d0be446e1e2cfc","modified":1511425699000},{"_id":"themes/icarus/.git/objects/5c/95357ce239706b6b7598f677e6051ec8eba971","hash":"3db19efaa600fcbe0e2237119094a2a3dd37d655","modified":1511429639000},{"_id":"themes/icarus/.git/objects/58/95b54c15d50620f2e4a730afc7cae2ea80d05a","hash":"67428ee981e86e9c2a0a64270c8619ea2410a0e2","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5c/5ee5c82df07de8c96fe1eea7f90b911f26ce91","hash":"b53726690ce615aa4e7329ff3a02afc192b3c05c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5a/536ec45f62798f8a5e25340bb3e6502a43cc55","hash":"9eba76652cd9b22da2812df27b8c1a97f6e72ef7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5a/9d6b12f7480cc153c851aa75ccd26a056922b1","hash":"10f1824fcc787477fdeea7d8de0817112d3712e4","modified":1511424067000},{"_id":"themes/icarus/.git/objects/59/c930f98667c73a42ccb46045d9878b1cd5cdc3","hash":"9cd85ce5e296ba7a4b8d55f766b3508961c6e21b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5d/83113afa029f3e8055785decc96b82fff45e7b","hash":"d84be0538df865a2372c254b18c1e7630c8777c7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5d/d5b5eba2ce389d384da0dddcf951792614bd88","hash":"81a259fa37d9266387b86a64e988a9751af58cbc","modified":1511424067000},{"_id":"themes/icarus/.git/objects/61/d2a4e54958dd3371ef7d3019f283381927b663","hash":"55b565bbee045e96e1348b8f9b7db20a985e25d7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5f/a6f2ecdf8aa3526d7fb42d8b2ea5cb6c7bf7b7","hash":"9eb2a27a77593a4e5d5247242dc20f0208b4b6eb","modified":1511425701000},{"_id":"themes/icarus/.git/objects/61/15cd0934a3c711140afd051f199d1fcf48fa65","hash":"3a7b297c5f62fdafb3a43165d2dfea530e2c437e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5f/bea1306a6c883bd1cbdf52700ee39607023e04","hash":"52ff4191d011bcd40b669326f3e96be7b33ddc22","modified":1511424088000},{"_id":"themes/icarus/.git/objects/5e/9b5528dc19a7f3fbd46c6570fda2b8ba2a25fc","hash":"399d8b5bc1f8633f84257e68e689a855a5fc0418","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5e/0e1bc127397c6d5427201137acc1a7aca758b0","hash":"537ba2799079b25d13d1e0c4f30bd68b46f7112c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5e/4754e95a91d800e06caface6c154e86b9d7723","hash":"05a783e9439572f13fd007dd93b3c92db794f9f4","modified":1511425967000},{"_id":"themes/icarus/.git/objects/5e/9cdab8bfc6ac10e2ba3bda7b5577ee7166d98b","hash":"f75a1eda6cae0892a921982ec5a4e461ca1eeb32","modified":1511424088000},{"_id":"themes/icarus/.git/objects/63/53cb84e0fafaed3a5b5710faf27821cd880825","hash":"2dc74aa47ff4847f1ac9ebc0141edd1f21e87f94","modified":1511424067000},{"_id":"themes/icarus/.git/objects/5e/9e8bf5ce10f13e5f90b5ebea86845df221e3ea","hash":"ed3d1826b3c6b64c253d910cdd069dd72d776a2c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/63/f4c613a57fa683b6168b10b9b3056c203b54cf","hash":"279638b31e654b83054a721c58405b40380fc6ed","modified":1511424067000},{"_id":"themes/icarus/.git/objects/66/071c97dbc6f7e9cbae5ee3d5175bc042bb7670","hash":"c91debd07e7a3778c4d5aca6839c7c8d4428c255","modified":1511424067000},{"_id":"themes/icarus/.git/objects/69/091a79aba19f018d3c3913b010f9cdfd10322c","hash":"556162407861291cbee82857324b9bd000cd4c05","modified":1511430074000},{"_id":"themes/icarus/.git/objects/67/af155bb8eb9d4a090068aca56ccd45cab91735","hash":"201f7700b6c15ce7b55e8fbd2a32b49d8633242a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/64/bae5ccb338ce197f52c9377f0560eb1a55c0da","hash":"f47a248fe6570259b1200281fa5a53126d065a05","modified":1511424067000},{"_id":"themes/icarus/.git/objects/6b/18d55dce10306fddb5e8c360781d4ab3c20431","hash":"559e7228a7eb39423f68f94a267f20926124239d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/68/0b944f84597be9360c5c946b38e6ae838ed88c","hash":"ef18193ccbad228262316912d75256bf24cfaf85","modified":1511424067000},{"_id":"themes/icarus/.git/objects/6b/dc98ef8d892fd1b49a90ac3461e46e56779f08","hash":"d49a3eb1de1bd83547b595e72e294b3846e368f8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/68/ed0d4368ccb18a377e954a3630bbca76bff33f","hash":"429cb0807725dac057ff258a9f32993f1aef02c2","modified":1511429639000},{"_id":"themes/icarus/.git/objects/6b/33ce25bc4d91a324d9843f42eb7bd7cc5a2917","hash":"1cac4eec510568304337f3ade8fd5342cb1f5ad8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/6a/0bdc3ad7200fd5e7e6192cd612ed4853020f93","hash":"8dc9059cbfa929fc51c152ef4ee017e6c237c1d7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/6d/e33a57d1d8987a313e42cd79314e95393cb593","hash":"227d2e7c86c0940abfd756165379c37e39d3b266","modified":1511429639000},{"_id":"themes/icarus/.git/objects/6f/c4b15f8ddee773129cfce170a84f653045cd50","hash":"a7f2a6a1b4bfe6c73e1c460b2e9ca4a994363e28","modified":1511424067000},{"_id":"themes/icarus/.git/objects/6f/6a4f5604f35e5f87987fa0a5e7e0229b28226d","hash":"c1cb92bbc86f2cdbe44638046d9b5e715cb51f30","modified":1511429639000},{"_id":"themes/icarus/.git/objects/71/a84167b4e7ac7a347d584a59374d3966ee2d17","hash":"17ecc13a92d4d276b0c46f4183edd89ac6fc38bd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/71/0cc96b70959edd8c27584b45d8c7140c02b7ca","hash":"26d79c89dc7b49da4cfe95573b0bce3f97d1f6b6","modified":1511429639000},{"_id":"themes/icarus/.git/objects/70/19bcecdeca35bd60e7acad1f50b4255d3be5b7","hash":"83155532fd3b64a8d67794d31c29917e0bb1b21b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/70/b187f799dba4a8def4e1025befaabf2159e12e","hash":"c434a08931c0849f33d4d1ead017a8fd725d97fd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/70/b7dd42e120524e2dc7d85f7e0e720f5784c3e3","hash":"489f18757d2f585310b083d83bf22724a7855d12","modified":1511424067000},{"_id":"themes/icarus/.git/objects/70/f301a60747b1a86e19c1dc35ac34b5b80e0b11","hash":"053c22c9dd0353eb692a41f7eb3d9bd12e5fc117","modified":1511423747000},{"_id":"themes/icarus/.git/objects/72/208f35fbd5bd86d461e5ca4aa98e2b67c3c37b","hash":"430af2a4c921ff46cc980404786494ecca7c4b12","modified":1511424067000},{"_id":"themes/icarus/.git/objects/72/18dbaec3ecae218faa71b869f575b1c6a17b0f","hash":"367f24dd8f9346548789138961e73792e2b017be","modified":1511424067000},{"_id":"themes/icarus/.git/objects/74/97b1af71a26d242e3caff599dd750b6b81fb2c","hash":"fe08571eeaaf5046889cf058332e343d9a8c9326","modified":1511424067000},{"_id":"themes/icarus/.git/objects/72/2bd7339a1842ca272ddcccd00dcdbfa492902e","hash":"914675785b12cd70624b7d9e1750c231b2b6f044","modified":1511424067000},{"_id":"themes/icarus/.git/objects/75/11d36cbbaaf07a733d2d7276cfb8c8c04cde7a","hash":"67b5eb2d446bf09607f5a4bc8809d9fef9b2837b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/74/09c3cffac596e05e1acbb1772e0f62a97d18fa","hash":"a8e1c353059de01d65163abc0da42a5efc7d6445","modified":1511429639000},{"_id":"themes/icarus/.git/objects/74/e77d0ebc3efc364c8fb0e4bf651f0866ce4b15","hash":"8b3aad46763af45a7869ec5fb239201d51b67f61","modified":1511424067000},{"_id":"themes/icarus/.git/objects/74/04fba0f15a13cee7efe2237b6221e1b438dfee","hash":"1020156d8b7208ab9a02bc3b2efc8794aa39c6a6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/77/5d4dea89be8d6fb257b14f8c3cf4dd785a07c0","hash":"c157889b7faea918ffca52f33db809e893cf0e8a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/78/f1ea638ca7a0a0e1d63cfa12a39e6eff29c61f","hash":"32b4df93e8d0989cf516c47c629f9f37f51ccec1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/75/1cd8d6be70b9c82f68e2d88b1da755a80ad05f","hash":"66c2e96122c0aa9282fdc915480ccb950beff21e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/79/71f534272003bfb4031ad881aab0b2158f28d6","hash":"ccdc41fc52b9eb4fe0807f1976125f59f4dabcda","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7b/60af411dd4a5a500ad63e2d41278c0cdef26ae","hash":"2608b250d4977bf72c323d5690540b72642d216c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7a/847bc8c539d2b9ba8cadc122672e4362986664","hash":"29acf124593c9fee054efcaf8562fcee17e846de","modified":1511424067000},{"_id":"themes/icarus/.git/objects/75/a408231ed9da30cb86f3a64bc6a8f2ce2d0136","hash":"35a461fe7607f4d91de3adf7b641c2c6380908f1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7d/ac38b6f943f9e6d85dd341f88c5849eac90695","hash":"d927efb108c6fb0eeddb64003ed68bd8cf30ea8b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7d/7766c2eb617b83e68c5db8e7b3d2b646d9716c","hash":"bb107be89037d19862bdbf6d70a681fc7b256b97","modified":1511429639000},{"_id":"themes/icarus/.git/objects/7d/c5a9c4cb7b5b07859c8b067ce40d0ad6e2285c","hash":"ecba8ff34fa48824f7d537e596352f504ed879d9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/84/3b3440ee33166ea24582cc21bf943d5bf50880","hash":"1494f7dc7157e8d116b5ec066cb505e8ca306ae3","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7e/013919c538dc2fc08f1bf0c1ee0189aa9dcde9","hash":"c7807de55b9d71398cc3b2323444375d50240b07","modified":1511424067000},{"_id":"themes/icarus/.git/objects/84/dae84196b0f958bad8e6a144c58e454a9a0ef9","hash":"772baf3d073035b52383b0cf79f880e28ac34b6d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/85/1996a2378b7a0b06d35dbb1d72a95c3b3c9e7c","hash":"23d639cfaec83f7102102ecc9c4736ce7a5208b3","modified":1511424067000},{"_id":"themes/icarus/.git/objects/84/4447b1883af52c02b9a8ddf8d8c705734a8a36","hash":"43d5be2fd91d7c33874c0683a5ae445179866000","modified":1511424067000},{"_id":"themes/icarus/.git/objects/80/33afb89d366471357344a65d183a5e11b96752","hash":"af3886bb11a15bc144531254a26d748a7937b99f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/80/e54920dfe42db5036e47beda32986e2922a403","hash":"f21726411331e2a43108f16e7758d88a7ba540cd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/80/646cd59921064b1bfe75aa48c962ebfcc6cb5e","hash":"9d5b6e46bf6bf5cfe72e814be763faf9f1e32613","modified":1511425967000},{"_id":"themes/icarus/.git/objects/86/3e437985e25f6ffd01c89a6980b920467ab80e","hash":"b901ae2f33f41077842847b213bea66079df528d","modified":1511423747000},{"_id":"themes/icarus/.git/objects/86/e8e47adb39a0569d254f03fb8070c727251697","hash":"1d7f28d8377916906c016952aa7f0bd8e0c73abd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/88/a5b05204a37c40b1f6af7e3c5f9c23aece7dd3","hash":"2a4d2e340905996767a1bc72f1c1a4a5af151d68","modified":1511424067000},{"_id":"themes/icarus/.git/objects/88/31f5c4977fe5d74cc9b903bfce567d2c344cc1","hash":"f7e4269e026f6091f1b869ec2891cb3f4627af79","modified":1511424067000},{"_id":"themes/icarus/.git/objects/80/dd7ca9d9b769bb6040bd9378e6ae4f10d0313b","hash":"5b229a90fee800be19d8799a273561f50856f6ef","modified":1511429639000},{"_id":"themes/icarus/.git/objects/87/2660f76d939f4fb03b44c47e297622cab0f765","hash":"4a2298b61344b16911e5ff6e935ad26bf607e1b1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/89/6117f91b3303735e8b485efba406266e2417fb","hash":"2ff65454ec94d7ad84d5aeaf5fbb4f39a1a86514","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8a/d81996ef9e77235081cad58d7c138c320b4487","hash":"922bebe0214d3c8dcb73c2e23c97d3a4f23ef4ea","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8b/38631e9e3a8ba579e359f0f96195a2c7bf1cf6","hash":"968f66a1e28bbcfea291bb44c95e1b549b043b5c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8a/47bb60123e166f7fbd711d79f3d2e230f805e8","hash":"dc731561ddfebb6c83f9394d76646fbd2d87da8b","modified":1511425581000},{"_id":"themes/icarus/.git/objects/89/e158f092b46aaa088d512e8c32ece66649a8c8","hash":"dde3ebd1c4dd17e9ecbbc5fbdcc44187e074c61b","modified":1511429639000},{"_id":"themes/icarus/.git/objects/8b/4a6bf9324a0a800ee44f7b15ebb8afbab69111","hash":"ec1970c426ace881b1c3d8f328bfaa26d31aab54","modified":1511424067000},{"_id":"themes/icarus/.git/objects/89/93a4de6b39e4c3aa3ca12546700362fd25764d","hash":"f8c83c87afa585efc0286569c03aaf814cb6cf84","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8b/4688132aa032c0cbb306843c06364c8a68ba6a","hash":"84f53634f20ea6b6e0ddd3bb124082e27855eb2e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/83/850ff4e2d5ef00807c768a7d7a47036eed8561","hash":"2364096019fe6ce88ba1b2ace802fefd96a07e73","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8d/150cee1adec926f819aa44a0448225cf0a81b5","hash":"8dbd1d0daaf42af0976e0b9a00a8ca4002cf9509","modified":1511424067000},{"_id":"themes/icarus/.git/objects/83/6be3e2bab9dece81a9c79f7284b4eb28e7c457","hash":"2f7c182014c860003587e67208dc032cc6c9e5a2","modified":1511429639000},{"_id":"themes/icarus/.git/objects/8e/87fbcb0d7154a68c7de4b71ba0b1f50c9213ec","hash":"35d5383d7ac94c98c3595ef94d9d6d2af7bfb1e9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8d/d0129a162a980d285615bcb4e7b017e3881b5c","hash":"d930a3c8578c426bd9c32fe9db9619aaa87ce7f6","modified":1511424088000},{"_id":"themes/icarus/.git/objects/8e/220c2f5307f7250e32ddce8f18c57f900ad80c","hash":"b5bdf520039aade1c4cfc1c642dd5d90cdedf117","modified":1511424067000},{"_id":"themes/icarus/.git/objects/93/73e6ac7d893c3900c13ea1285452e202bde5f8","hash":"9c54885c60feecc9c352b231643d51071e989cbe","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8f/d5e05a8db1243d7766fdee73a8f3e2e268cf88","hash":"037bdf44edf6d50d64382dd7f1e8adfa313f8168","modified":1511429639000},{"_id":"themes/icarus/.git/objects/94/13d8acfe1d5c86603ca6a953516c8ef7c8c1aa","hash":"92e8f6bd6eacd55a7aaa8e84c02feb5ef362bc49","modified":1511424067000},{"_id":"themes/icarus/.git/objects/95/6e9790a0e2c079b3d568348ff3accd1d9cac30","hash":"dec7555f7553d486f9d5f53d34d5b9491cc0ec10","modified":1511424067000},{"_id":"themes/icarus/.git/objects/8e/b990b9d623da355bc0b2dc49c0bceca69771f4","hash":"51fed9af493f32f9e03122346fb0824b4a29fa18","modified":1511424067000},{"_id":"themes/icarus/.git/objects/94/be181d08c557bc7cb6586b361ff6ddf89a29fc","hash":"fcce223b8e0e57e92e7fc4cf8e2c3370a959bd00","modified":1511429639000},{"_id":"themes/icarus/.git/objects/96/9529b150783f0c50830c3a9bd06841b404e06d","hash":"b29dc9de48b7e827f80a9252b9a11ab6179e4826","modified":1511424067000},{"_id":"themes/icarus/.git/objects/9a/8fa11ebfa883a26b71a60c76306de4970a71c9","hash":"e66f45bdf9838d82f1c20f20e64fcda35ff74642","modified":1511424067000},{"_id":"themes/icarus/.git/objects/9b/76b5f57e7ae01a2b9b3efbee4ca88bc3fc041f","hash":"7dac52d942273ca5b76834788bccbfb955214ba8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/97/af2592f2181ec1c18d1cb7aed4aa5c096f0238","hash":"6bcd33ab3d7c88efed8d8884e181b710408fc758","modified":1511424067000},{"_id":"themes/icarus/.git/objects/99/a89f965fa214ae69c819dc933442c5f5a588b3","hash":"84145ccde6b8287aa6b1e4316d999b1f19913315","modified":1511424067000},{"_id":"themes/icarus/.git/objects/9b/61177fb4824ca5051aa5441d2fbf92134a7f56","hash":"0d76e619076cb7151c64b8f448392e7b44f62960","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a1/0e53e7fbd4fd000c71b6f779a2b16a4638e602","hash":"33dbca20193a2994db7d93195b4bfe7f5f7bb29f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a1/059ab10a22c7e4a4cb4512025d0d2ed0d9eeea","hash":"202ea497a11a2064874e836b1062255136345d30","modified":1511429639000},{"_id":"themes/icarus/.git/objects/9c/07d4ab40b6d77e90ff69f0012bcd33b21d31c3","hash":"9c449cf271535ef1c97ee5e1e2d8558a041a5516","modified":1511424067000},{"_id":"themes/icarus/.git/objects/99/410093b4adef562416e79310fc844c507e36d6","hash":"78d978a6ec669eb6125c17bd2462b183570fd6a9","modified":1511429639000},{"_id":"themes/icarus/.git/objects/a2/1b01bd922a86152d49fee1d9a76b77e2bb71ef","hash":"9c07b764f0b40609cb1bec2c17776008af73b96b","modified":1511425581000},{"_id":"themes/icarus/.git/objects/a3/5ef8bfd5793e5c967dd3f7fc791fee271e0366","hash":"4e26829288d489c3dabb44abaf8cd714e29721cc","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a3/634585d7955b9683ec18d9a262db09f86f3ed1","hash":"029b73d119b174311f670db754aaf58bfc1e3965","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a5/7e99c7e2389f094f39255a18ce2c4b8539e314","hash":"604410300f8b5fb0395c50256deb682f47c90852","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a5/3fba6713a4dd3899228c5691b57236e0ab20f0","hash":"9c5a297d3dd1dc30a72f00b9828e59a255bafb4b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a3/e11312beeb3dae515c3cdc1716731b044f1ade","hash":"2a1a1490ee0eed8cc715f2a7ef515d2e514e70fd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a8/0062ff8d7b29cf636533d36153b629e5b61090","hash":"18b45c19f7f407cef0f0165946effd7e8f1957ce","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a8/fab5258be87a31d7e79898ca34f7de859aa5b4","hash":"a530bf5aadaff22eab1542ed3d781ee70786e50d","modified":1511424088000},{"_id":"themes/icarus/.git/objects/a9/6abfcd3490523387b037eabd865f820ac537c3","hash":"7bdb308ad88639c7dac217177fa8acbf6810273a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a9/c1a866052614a2a764554833a53d7db36b7dfa","hash":"d3a433014da3fb9fcc245017a66b74b0d0961e3e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a6/a1fecb8f011b20ab08bd8684d78fb4d2a056f9","hash":"c160f3469b84254f766d3eb854cd5195e8b4753e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/a7/39e6ab026cd8995672413966200e07bebd2d14","hash":"c97dccd6388041ba29994e3644194aed4f67880e","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ad/4e4eac53cee8941d3a76d04fabfe8b5abb8c86","hash":"c9481ed2b497d10afa2186977443eb14d1c43cc9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ab/14ccb036a531897697ef0ed70ecd8392c97f49","hash":"63a44bf4c193efc1d914cec47975787ac9cc7061","modified":1511424067000},{"_id":"themes/icarus/.git/objects/aa/456ac4ca98f79c8c92d251cf0cd1fbe537f3a3","hash":"ce19425e508f197e8aa8f428bebe87bb971dfa9a","modified":1511429662000},{"_id":"themes/icarus/.git/objects/aa/4bb52adc619444ef62f35cabf8fc03437879e0","hash":"e9ac33de6373a8f30a17f09179e21a4cfa0b2cb0","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b1/12ea0a0e8aeeca40711eb600c92ab520941676","hash":"5d9c74a55b37ff46cb24d960af534c799ddfb479","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ac/423326b3e4e5a1c3dfbdfbc85bbd4e09574aae","hash":"19ff7fa11c937f8f4c3097700c99656db9f2c0c9","modified":1511424689000},{"_id":"themes/icarus/.git/objects/b2/4d502b5cceb47b4ab7d16d20c31a7bcb599087","hash":"d0d20ec537bdc1196e091d47d60d5799f2da32d7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b2/17008cd564e5b84da8d90f8617075ba8859d74","hash":"cbfce800cdac5f4dd96ef771925491d09291e064","modified":1511429639000},{"_id":"themes/icarus/.git/objects/b6/f0faffb9e6e377f07d39b956ec7fba62499e94","hash":"3abdc7429694df71bd8b13783909d042b6b92a75","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b1/644ca0b30d2e921fbcaf07da4c9fae845211da","hash":"cafc4f5b89cb9143c3482d78d8ede85bcc44b776","modified":1511429639000},{"_id":"themes/icarus/.git/objects/b7/d58f5b39ee984348929aae215f163efac18e41","hash":"36d904804eb93c2d3dfd709a1509ababe7ad46cf","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b7/d64a9ed3a220702364cc7eb4ec4258cbf8080f","hash":"361fe695c49ece18a9fbeeeaf212361121692c19","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b8/c50d9ac06011faaa0be107ce86e721319d153f","hash":"337c3a9559a5d83161c2217cf8c545d9b46b7a5f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b6/24a90e916260ce3a6e15c20fc64419479c8c7c","hash":"d67834292bab327baa12499fd879d0eacf2cf9dd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/af/3fbe603d3c92342e32579a4e977d86bd65a8a7","hash":"4c260bb274006860e9ba09e5bfd702f348580bc3","modified":1511424067000},{"_id":"themes/icarus/.git/objects/af/a214afaeea6b49fee62492833cfb1db90d49e0","hash":"3870eb4a5198f2199b96c338dce63ec46ef3b8ae","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ba/38c79a6bf1465a5585724c440a634f4a0fc5c0","hash":"d80f9a98150bb2568a581f52bd439ad2bce7814d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b9/cecfe47d40f0551510fba7fd8d886f0d168d31","hash":"bd809b9535695e13e82264557ca3bc40da2852e8","modified":1511429639000},{"_id":"themes/icarus/.git/objects/ba/4a56616baa1b1acaa15ebd138647ca7c7c615f","hash":"fdb7cc7d54443b8be1c9bbd7207eb6a88f4f32bf","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ba/8d20ef371c3851063e3455b4738c89212da5e6","hash":"c4604e6b32ea2aec7734967e308fe40d518a56b8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ba/94920acbf0f3c4cfc7f36306dfd5e46dfbda97","hash":"0d038b8e9b5eacfa971d3bd44082708ddcfa180f","modified":1511429639000},{"_id":"themes/icarus/.git/objects/bd/5181f104c9f6cc92498ce9355889ad85a66086","hash":"fb34c3108eb75cfb1532076eddd9d9272c52b831","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ba/fcabe12b8d7d19ff50a3b8172cec403247c428","hash":"6b4c1c7060ffe1afafbddd3f1e9e77730ad09c9f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ba/8db2d6f294f9a8fcfeacb21daa8f2e23e16cb8","hash":"444fbaebadbe113357ccf66acd1cc16d64ab550c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/bb/839640b3100c6ced6813030794877a2671cd99","hash":"8bfeaf7461108b577a3713b2c1f197466a865ef8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/bb/845920dd11a428e038a3805513890f7d00a94e","hash":"e2c0287c9527ce71a6b42662dbefec225b1f9144","modified":1511424067000},{"_id":"themes/icarus/.git/objects/bb/98ecd5169efcd64763c67d74f3d585e947d8d3","hash":"901dd83664d86e5a24f5e2ff8babc04df90ad1d8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/bf/53ca3861c085ec5d7215df3c87c802f6e2a55e","hash":"9778a1ab04f9bf3d8500c2f0a8b5323e89217518","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c0/51f4f3ef1da1ada78521ff0df00bc31fb0c8e6","hash":"10fec77e19cab44564b60f490f045de27c95cbaa","modified":1511424067000},{"_id":"themes/icarus/.git/objects/be/4c667790a23a81e96df663e59827b30d399923","hash":"024db9298834166e9cc8f53690a2800cbae34e0f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c0/cfaf4f4b624c2e80982858d4349f211f32dbe2","hash":"04b56be368b650b409c0734f8c67592afa2eed6d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/bc/ca277a7e3e733e16e505fd69a26749d127bf15","hash":"108664a700ee7163ebdcbb9040ebd55542290640","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c9/267854c96dd8c3e0cf399beefbdce9333bfc60","hash":"d2ef7df96675a64ada2763bdbd9cad4df2e7fd01","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c9/9d896bb30bd5d7530b6db3e92927534f8cdec3","hash":"543a02031cacb61802ff77e1a1d8bbbf9e21db6d","modified":1511429639000},{"_id":"themes/icarus/.git/objects/ca/04dcbdcc5f3b08d7dfae34e14e3b82301f844c","hash":"ecb96b923f47f7150cabccf081b02f1dd8340391","modified":1511424067000},{"_id":"themes/icarus/.git/objects/cd/d6013b31a494ecb30e164686766251689e0df4","hash":"6685bf077c79ff7168cc48a5012d2b95f1524685","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ce/17576a1380cd239e3df773eb3baa3d1feba996","hash":"37151cd11bb067135734f0257fe3d24eccce03ed","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ce/f9c82b4b6a52f7661d0d0bcee2c5d609f1dcf8","hash":"6d09ae163bffc1c9bd6031b0df0fefda2302184a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/cf/8031d11496cf164ccb2bc9c988adc6772d6762","hash":"fb78b33120586af270efcfc73c92fdd35d4cf2b8","modified":1511424067000},{"_id":"themes/icarus/.git/objects/b4/5ab6e3c5bdf4fb2582f26e7464a479e4883d52","hash":"182222cf2a4b04f54c7b2cd6d6ae030b4443eff4","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d1/49c116f8a72ef0e8486ff663485e2effcd33f6","hash":"17de6889069b3dc327e5b870720dd85a0ee1e62d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d4/6cef123f4ff3c0ba8f092ff6b8c313708c1f28","hash":"dd22df832a2e9398fe7698ca40f7c620c345205f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d3/bbc80623da993b708d7a8b313fcd674453c53f","hash":"6fa2e40a93072df6655a92e84da74068560440ea","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c2/287eb30a16e86ec6a69c1558094f8f36163f29","hash":"64ac71cbf9bbd1168768dced4c60ecf189d2c20d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/cd/471286244ed636f4fab73efc03187934dd6f86","hash":"984365cb58ba8f06573637c7f2ea56bb53c6c8f5","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d0/bd5c4a191d981ed044670896615b1c32bbfb60","hash":"91411d88b9f9508ee54bf8bb17a5d25750dd520b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d6/9f6ee40a490e3eefb0dc0189b10f3a5e635971","hash":"bbd450a0f8a83b80c20fa16739b34ae91af51db9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d5/8386990fc81166d64ccb14e9376e3fdbc8b0c5","hash":"37129e8197e17d11b0e46fa66efed6fe890e0247","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d6/e8dbcfa24f23d481d9eca933acc2d670538e88","hash":"b0f20d1d28d5517b028530a62379ba10532e3718","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d5/39aeb5ea8bdf502aa3181296b57ec7e6749b3f","hash":"02d280f0dc1eaf8233121c0e72c6a1c0ddd08c1c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d7/77b7ec1b3ee3a8cf6d0e226315351d3315bf94","hash":"e5df6f5aef5d0436aaa9a801f1b2507cd4b37081","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d9/2169061b715003da1960423080aca058ea151d","hash":"a5ce3457b6349b728c2e55ca2c671d37b865b02a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/21/89334c78cbd8a60f591c8d97cc5056793e899f","hash":"eb53badac2234332026957856f6e154b2f76f17d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/20/6ba6ae5d073fdae637d489cb785264fea482d1","hash":"fc8a032d2faf2c75b2e3ee188263735bd80a443c","modified":1511426171000},{"_id":"themes/icarus/.git/objects/d9/bfe1695b98c24b7788b575878acfa770c2efa7","hash":"3c875c7617f089a8a97d025bace60ae0648e5d80","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d9/8ff6054dee550d713288ed87dc95c9532d0a7f","hash":"ce20d3e6e9294fe8d7b00e93a78d99ceab1f0ba3","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d9/92f1aeb727be76939e9d93a02f43f366b9695d","hash":"fa7b2512de6908a0e2ce43de6ab87af47f5fd516","modified":1511429639000},{"_id":"themes/icarus/.git/objects/dc/6323025c4ee842d6c6127ea0342d507b1bc9ce","hash":"522fe861a583b994a7bd06cb93d68cd74daa9fe7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/db/3e258a9b5fe8602b3c004ba12828399644bb5e","hash":"d87867d5389ccd7f062dcbbf3ee075cacb6acf1f","modified":1511429639000},{"_id":"themes/icarus/.git/objects/de/717bb45ccda5abea506f1a58beeb17f33223c9","hash":"7ca64bda9f69caf4cebbe662471057e76cc89fc7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/dd/30d9b810706bbf2adb48487b30e26de7ecdd16","hash":"2d1c8a6b93cccddad548838c74c76490614b7d61","modified":1511424067000},{"_id":"themes/icarus/.git/objects/dc/fd0071efdf6d94c17bebc8a9de58417ec75995","hash":"ec03d80ee99fc0d390c591be0c106deb58b92ff1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/de/da323eb4b4bd74b8ecf5e532607076590d41ea","hash":"011eee48d8bc0c7c2bc427af6da306ec8fdf94cf","modified":1511430044000},{"_id":"themes/icarus/.git/objects/dd/14f33225e29d7983bf1f1cd24af3e04980d5ea","hash":"c7606bfc76c35833fa7e0c9b0d784484b0c4ef90","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e1/ec3b436ba89cb1becb60f6ff976fd1e9e9deab","hash":"de58823cb6871025260478d5fbffaf7c5445dba0","modified":1511424067000},{"_id":"themes/icarus/.git/objects/df/ebb91fd6bc08644c7f576c6ac295c0cd8d1cd6","hash":"62bb6a72916b8072fccb7e7b4ff69cb3e4bb388a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e2/059b051712a0ef786c2333c5da17f43ef3db18","hash":"eddd02e0f66d4949c1d0d5fb482e1ee407fdc7a0","modified":1511424088000},{"_id":"themes/icarus/.git/objects/e4/0b785aca5f04fad160dddb3636f8521a808f99","hash":"6d5cbcfc0ebc2d6c2b1116bbde1af0cb8b6b0187","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e7/cab5b2a79ade57aeffc7b72d6ade557afe3234","hash":"76d93be41bfafe4a3c767a4f183732d88270388a","modified":1511430074000},{"_id":"themes/icarus/.git/objects/e3/a81ce356667cf27eb7b39d6f0440aa932ea7e5","hash":"33fb125a2403afd7badc49f67e4865635e6a0218","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e9/c90674a67b21e3c2216bc2d1ead7753131303f","hash":"fe8349334686f4bbfc2a10c1915334adbc6f432f","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ea/28ed1c95302cdc42f8dc97af9db6b1f8b1e7fb","hash":"4a116096378efbd353e99e7a45d5116f4abfc4f9","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e7/5be928d7a6efb3c19a8df027e720dfce492e50","hash":"6995004cccaba72d5505228d5bfd17111bbc5548","modified":1511429639000},{"_id":"themes/icarus/.git/objects/e9/b77ee23c8f50564a77fd0dd4de8f52a9703ace","hash":"52ed53cbe829552dbd765215fb806909bd6b8a44","modified":1511424067000},{"_id":"themes/icarus/.git/objects/e6/5e335248dd4831a90c778272c8699c28bae82d","hash":"cbfd31a1d960a333475a502b9be5fa288d348698","modified":1511429639000},{"_id":"themes/icarus/.git/objects/eb/8069adcad29710fae6b17b04f8efee1ec2b6b6","hash":"b1b498040f93b0a8dc217fc530d2321a518d6f0d","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ed/6706f67993803b4031dd7ffa6328b95c0e5167","hash":"a1560973861063869b6e0d929586a8a879c7c8cb","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ec/1cac6f1f00916c5543cb6aaa4805628dca574e","hash":"c51f87cf5601beb25d4eff2b55e4fcba0ed394cc","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ec/25fc417c37cfc8c039d04c6954b93caed5365a","hash":"8e246264577f489b680f5cacc45b9f3290c12d0a","modified":1511425569000},{"_id":"themes/icarus/.git/objects/ed/153db9fe998ba58b6e5062f0c057d7c690b066","hash":"0b40e7703746d46b83dee48ecbc31fc37f0b16f1","modified":1511423828000},{"_id":"themes/icarus/.git/objects/ed/c383b85ee8da903c2e7104646dcab8e09b7499","hash":"9eaa245b118b0de9d5e1b30a8b49c12a4a973c1e","modified":1511429639000},{"_id":"themes/icarus/.git/objects/ef/bd43761f0157cabdb7d1a56dfbf10de8776179","hash":"f1789fd9d1f3041487ec7d67fa0f0edcf5c1f632","modified":1511429639000},{"_id":"themes/icarus/.git/objects/ef/c37741efe3af1b2d29458a7631d00f592c5964","hash":"6b64e84e935c4306095c761c8ed1de6e4ab2dfd2","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ef/e2359544f3d13d9f9b6cdaf2eddfc44e3915dd","hash":"99e9efecdeca284dac75601bfed4b407bbc06f54","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f1/b154ef473ef5ccc91cc61bc36e9fd05656e78b","hash":"49c776dcefeffbe83890f27ad6921247e5b316f6","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ed/d5135277320fc605717c4a68785a9c3591d792","hash":"b4f058e3299b6af2ab5ce509564a77389ec1d22f","modified":1511429639000},{"_id":"themes/icarus/.git/objects/ef/7d245724640e1596fa23504c4e0988de32b2f2","hash":"8a90781e2a0c6354c9fc58c5c55d93c08eff8c27","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f2/b7294b602a574a46e3b602e0e4d2dc39a7d9ae","hash":"b4017680bb64a1afa498962feee5299e080e077b","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f4/c231081967b5528a31b3d03837d74360a0c4ba","hash":"5d9e5a50fb2b348f7236e25e9475e52be1e5289a","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f6/1471fd5dea6966f2555e8b686f44b6d4968a24","hash":"d012e3fc8b3fc723284c804294838174238bd840","modified":1511424067000},{"_id":"themes/icarus/.git/objects/ee/1a42cb6ee89af135ac4d8875404364b1e9b5ce","hash":"8f33a9da8eca7c08ba5fcfa1620b9b7fe5436897","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fa/b4218aeff36f97f0fe6c699b0b553ce31a7f06","hash":"370ccb811dc260ff361e46fe22d0b701ef7fd7a1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fb/eeedae747df31b3085a7aeb0349dead48e8c66","hash":"257264fbf6c22206e79ffb3038fa39923b5aac91","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f8/51b04722cc63c0913fbc2f15ab71c796fd2d18","hash":"cea61c070947ab1b754036a8e6af9ed315d8395b","modified":1511429606000},{"_id":"themes/icarus/.git/objects/fa/f9ded7fa68e9020b9feef6cc76f0ee35680756","hash":"84119d7053c0bfda70038cc7b85af384a10a9f3c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fa/eb252089c982fa5c5230750c55cbfbcda8df31","hash":"66b7b489b7539c102dc45d2248fad79938cefac1","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fd/15ab6365d4f1f4ed4ae57030f53a2d8e5de73a","hash":"0f91600eb3a5be7e1e01babd89afc5f035f2ef48","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f2/e38b81bc7222e10523bae6b39158374b0b13ff","hash":"275e66fadb89d23eb17784731a91fc7761e0fb05","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fd/9e0c7ee6d5a7fee29e6940ef639decc9238d5b","hash":"1fd55afe1369cf87dc807e5b934a452fc45953dd","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fc/8efef1395d0c26a3727868bf5b8986b4b54151","hash":"77cfb63e173da412e952f8a63e47ca3d59082477","modified":1511424067000},{"_id":"themes/icarus/.git/objects/fe/a2f5ab3fa329d626557bcd9651e3d80f78304d","hash":"58981438ab7f39219a1cf5e8b43d1d295288dee0","modified":1511424067000},{"_id":"themes/icarus/gallery/WechatIMG79.png","hash":"a30bb3112ab05f31ac049dd6e11dea0bad7f3e5d","modified":1511426162000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1480496898000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1480496898000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1480496898000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1480496898000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1480496898000},{"_id":"themes/icarus/.git/objects/f9/1f0a6c1db7a60f99e2461331e5c953a9f05e2f","hash":"ec425883bbf1598f9537c73cdf4167449c48311c","modified":1511424067000},{"_id":"themes/icarus/layout/common/post/toc.ejs","hash":"a74774e114875c10b2060b103e45a294d68cad0f","modified":1511168675000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1480496898000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"bc35983c35ed62106a06889454506770f5525f81","modified":1511166721000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"f7fc39f88173804ef6092698171b2d756135b8c9","modified":1511341715000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fbdb4b243edef65dfe52f91c9ede1eb76cdcb72f","modified":1511428796000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1480496898000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1480496898000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1480496898000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1480496898000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"941000e3f2114d01cbb956939f1230b301ded5e6","modified":1511331403000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1480497902000},{"_id":"themes/icarus/source/css/images/avatar0.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1480504864000},{"_id":"themes/icarus/source/css/images/avatar1.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1480504872000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1480496898000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1480496898000},{"_id":"themes/icarus/source/libs/font-awesome/.DS_Store","hash":"71de49345b332e02516e8cd5f553d3a97c7c0bf7","modified":1482902630000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1480496898000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1480496898000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1480496898000},{"_id":"source/images/blogimages/2016/androidart_service1.png","hash":"30b35c17a3e468fcbbaab25990439bad304acfa1","modified":1482748875000},{"_id":"source/images/blogimages/2016/androidart_broadcastreceiver2.png","hash":"173269356b75bfe4213c28374a19e3a4938fd36b","modified":1482748875000},{"_id":"source/images/blogimages/2017/Initialize_for_purchase_data.png","hash":"2676a64fa51614baa48f40cede53b9a38d2680ec","modified":1510121346000},{"_id":"source/images/blogimages/2017/Initialize_for_purchase.png","hash":"c72e1a7b86d6ef66846d3bfcd92f7bbf30d1a324","modified":1510121154000},{"_id":"source/images/blogimages/2017/activity-start-process.png","hash":"7fbf542e56930c7eae863a729c9b127400b13a41","modified":1500537740000},{"_id":"source/images/blogimages/2017/Initialize_for_purchase_responce.png","hash":"a1d12d2d387552617b945c40158b53a63d3e1bd2","modified":1510122206000},{"_id":"source/images/blogimages/2017/android_build_process.png","hash":"14d311115864fa5a4606bb7cb8b592460ad46480","modified":1503650098000},{"_id":"source/images/blogimages/2017/ams_binder_process.png","hash":"5c9581165c33f271fa7e4d49e29b1b5ed4b90f3d","modified":1502076236000},{"_id":"source/images/blogimages/2017/binder-drive-principle.png","hash":"b6ef539c56f52e63b0b587916efbf363aebd7551","modified":1499739191000},{"_id":"source/images/blogimages/2017/binder-principle.png","hash":"e380ac2add90a07fbe5168f20e165f224d76d099","modified":1499655678000},{"_id":"source/images/blogimages/2017/hook-clipboard-process.png","hash":"320b490fd9d38bcc5bf1615d5d2bff20d766d51a","modified":1499907912000},{"_id":"source/images/blogimages/2017/listview_recyclebin.png","hash":"b90022a471f8339162107f2d57a744d1d0c9654c","modified":1503649962000},{"_id":"source/images/blogimages/2017/multi-Application-flow-chart.png","hash":"c319d32184bc3fdaf97faa83f6568723b29f193a","modified":1489373941000},{"_id":"source/images/blogimages/2017/process-ipc-structure.png","hash":"4488ffef5b4655dd72d1ad77c765b57ce1f83341","modified":1498807277000},{"_id":"source/images/blogimages/2017/servicemanager-add-service.png","hash":"338c7fb1a3208538ebbc1e9fd00b5387a2a688d0","modified":1499736690000},{"_id":"source/images/blogimages/2017/service-proxy-common.png","hash":"49eea6c0ea05522d586dffe8e29da9448708fa08","modified":1499761747000},{"_id":"source/images/blogimages/2017/servicemanager-init.png","hash":"e6acdb9b04ae085a6d6d0f45bc089447758a0082","modified":1499736274000},{"_id":"themes/icarus/.git/objects/6e/7483cf61b490c08ed644d6ef802c69472eb247","hash":"ae17bd66c3acbaf92a512cbbe5c6ef4c71dba949","modified":1511424067000},{"_id":"themes/icarus/.git/objects/7e/b74fd127ee5eddf3b95fee6a20dc1684b0963b","hash":"901183e4b1fbea66f7ced4e2a357818e18d81a5c","modified":1511424067000},{"_id":"themes/icarus/.git/objects/c7/b00d2ba8896fd29de846b19f89fcf0d56ad152","hash":"308942f59b85636f0112af02176ff46bd134e8ff","modified":1511424067000},{"_id":"themes/icarus/.git/objects/d4/de13e832d567ff29c5b4e9561b8c370348cc9c","hash":"234e443d96b470841f79a3cfffa7eb2c8091e5c7","modified":1511424067000},{"_id":"themes/icarus/.git/objects/f2/21e50a2ef60738ba30932d834530cdfe55cb3e","hash":"40f763ec1633722c931913ef755fce7c2826ce5d","modified":1511424067000},{"_id":"themes/icarus/gallery/blog_hexo_screenshot_Agehua.png","hash":"7a729cd2d48c69e20121dd43ebc5affd5e563d72","modified":1511425938000},{"_id":"themes/icarus/source/css/_highlight/bootstrap.min.css","hash":"b67828261df0a6bd411c8452ad4d3291c90a466b","modified":1511234675000},{"_id":"source/images/blogimages/2016/androidart_activity.png","hash":"9d8bda879c62adc0b71cd26262603850ca16ab05","modified":1482748875000},{"_id":"source/images/blogimages/2016/androidart_contentprovider.png","hash":"9dbe7f17e629d0f36218b5dd3c3941cd8aa320f0","modified":1482748875000},{"_id":"source/images/blogimages/2017/EIT-form.png","hash":"edb86938e964f0602d2fcaa5676dc67bcbce5b26","modified":1498616237000},{"_id":"source/images/blogimages/2017/IPC-data-format.png","hash":"6bda10ce15610da9102e67cbf763ecfb8a088e83","modified":1499739265000},{"_id":"source/images/blogimages/2017/android_lint.png","hash":"fdf172859ab1ce584d06c6a5ff040d85d578b3f5","modified":1503650997000},{"_id":"source/images/blogimages/2017/aosp_make_single_module.png","hash":"e18bcd65212b1f74330a4154671a40d2f3923f1b","modified":1501663727000},{"_id":"source/images/blogimages/2017/binder-EIT-onTransact.png","hash":"3c10e03250b8f501385e44785ebd470a54bc63b5","modified":1498809293000},{"_id":"source/images/blogimages/2017/binder-EIT.png","hash":"1193bf7dbc3228cd60447548c412dce6644fff09","modified":1498809023000},{"_id":"source/images/blogimages/2017/binder-example-media.png","hash":"ca53f947f638cc270027476b1476f1546c463855","modified":1498811313000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_layer.png","hash":"e69ec76db290bbd351ec49389d0a44df18726b17","modified":1487039161000},{"_id":"source/images/blogimages/2017/js/js_function_construction.png","hash":"72ec55ea431e8c476d2d869d3ffc1b4baec759c7","modified":1512354230000},{"_id":"source/images/blogimages/2017/js/js_function_construction_1.png","hash":"44ff70eb69c068ab96cee3491c4851af5a5b3d75","modified":1512354230000},{"_id":"source/images/blogimages/2017/js/js_function_construction_2.png","hash":"725ded11bd192c5c3887e66d4773026105d479ac","modified":1512355143000},{"_id":"source/images/blogimages/2017/pin_verify.png","hash":"a18ac663b5ad7d78659a7998b3a56bc6fc05a0a7","modified":1510125743000},{"_id":"source/images/blogimages/cisco/Adobe_Connect_Online_Store.png","hash":"e915a2be8e8e3bf922f4256be6e3264b2a564e11","modified":1512095672000},{"_id":"source/images/blogimages/cisco/Cisco_WebEx_Meetings_Pricing.png","hash":"807bc9239bff4322f98c6f5610be7c7a168ac45d","modified":1510714677000},{"_id":"source/images/blogimages/cisco/VC5_5_1.png","hash":"c67ade2c767fea92ffedf66e04dd4cbe6683f3c6","modified":1510723607000},{"_id":"themes/icarus/.git/refs/remotes/origin/master","hash":"b1147ee86a529ed7adf2e25ca93d0ba7b2ffc15c","modified":1511430089000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"8cf77ce91108e4d261cb91e55849437770f02a66","modified":1511430074000},{"_id":"themes/icarus/.git/objects/8b/66187fe067c3aa389ce8c98108f349ceae159c","hash":"12cd5f248df0246e058ccbf184f5eeb8f6456b09","modified":1511424067000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1480496898000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1480496898000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1480496898000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1480496898000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1480496898000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1480496898000},{"_id":"source/images/blogimages/2016/androidart_ipc.png","hash":"3f3a0ead6d747386983ab5618f46a2f0c33bd84e","modified":1482748875000},{"_id":"source/images/blogimages/2016/androidart_service2.png","hash":"afdf0ded0d671ec79a03fddbd253de15eb5248ea","modified":1482748875000},{"_id":"source/images/blogimages/2017/communication-timing.png","hash":"d1eeb3d916b557902714e42604eb428e8820e1d8","modified":1499739494000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_layer_email.png","hash":"1ba76d94651319eca5c6b701403c627c50c4e85b","modified":1487127003000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_quickblox.png","hash":"d52b5c41e3771e0bba78fad79d26153da63b3d61","modified":1487038960000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_snich.png","hash":"45a22cb7867faf9c223ffa52cad7f74171f79fe1","modified":1487038831000},{"_id":"source/images/blogimages/2017/media-server-process.png","hash":"43c087cbbcde726dca7c9db58f46f7fb33153a55","modified":1499738220000},{"_id":"source/images/blogimages/2017/system-service-register-process.png","hash":"a0f5a638c157a8cad7be85e1e232d15ecb8ac5de","modified":1499738409000},{"_id":"themes/icarus/.git/objects/ff/1d63b50ca0024630f66e13ef49002d30d858ba","hash":"7136445309f8c622b4fd69a7efd53f3bb90d5b71","modified":1511426169000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480496898000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480496898000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480496898000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480496898000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480496898000},{"_id":"source/images/blogimages/2017/binder-example-media-detail.png","hash":"1b250dc477539c98519b7f752f5816edf6cecf98","modified":1498811362000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_applozic.png","hash":"fc0a0a0145e92182e93048d2f48cfd0b2886af88","modified":1487039222000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_sendbird.png","hash":"541226b66fbf291d61d3d52c5c030b2f41ec8f94","modified":1487039177000},{"_id":"source/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Hybrid_-_Cisco.png","hash":"cb3f157655946b3b3609804e39a4596470d99f0d","modified":1510729433000},{"_id":"source/images/blogimages/cisco/Adobe_web_conferencing_software.png","hash":"adcf5f49b46dce8457f5b32acad726995c750b2e","modified":1510885610000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/master","hash":"5460d1cd90d28bca4cf2e722d0da017f267910a5","modified":1511430089000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480496898000},{"_id":"source/images/blogimages/2017/aosp_monitor_position.png","hash":"ac98da872053c9a6e5637304b33077727c7f29f2","modified":1501734152000},{"_id":"source/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Premises_-_Cisco.png","hash":"3d2108f0c5cb9020d58e19fe77c47e594e07eb82","modified":1510728774000},{"_id":"source/images/blogimages/cisco/VC5_5_3.png","hash":"25f7bbc61cec17c1c0b701f82fd18c0a9c070b89","modified":1510723650000},{"_id":"source/images/blogimages/cisco/zoom_cloud_hybrid.png","hash":"006d3089661e40e800bd8b24f960412a81875181","modified":1511142080000},{"_id":"themes/icarus/.git/objects/3a/df8661057de311bea7f0942339e2916c8896ae","hash":"e78a9d076ea055b9e6c13af9299b2296155afdcb","modified":1511425965000},{"_id":"source/images/blogimages/2017/binder-summary.png","hash":"0cc9038284ccce38e566e75459aa512fa2eccb75","modified":1499739747000},{"_id":"source/images/blogimages/2017/service-manager-activity.png","hash":"1e98a4ac00ef83968c28d1df7c84b0fa9fbdd100","modified":1499738275000},{"_id":"source/images/blogimages/cisco/Collaboration_Products_and_Solutions.png","hash":"85a88cd7196fd068952dfbe1eba2e7743b4b3fd8","modified":1510725408000},{"_id":"themes/icarus/.git/objects/bd/5236ab0d5c0f617c9e72be795c66ed8c6a108d","hash":"67cbe1d483bf53746178ac39a55586edf95df499","modified":1511425965000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480496898000},{"_id":"source/images/blogimages/cisco/VC5_5_4.png","hash":"9ce30296a85f313e2eecd16f876a48003c3fbb41","modified":1510723697000},{"_id":"source/images/blogimages/cisco/cmr_introduction.png","hash":"53bc162a868da6dc1f432caf5f58c302acd5693d","modified":1510192288000},{"_id":"source/images/blogimages/cisco/Adobe-Connect-Store.png","hash":"903d8df197da17ff185d835d7f5c61f1a021bad1","modified":1512095032000},{"_id":"source/images/blogimages/cisco/mx-700.png","hash":"8a6d2096c6e1c559558bfb65b7f27bfdcd293f88","modified":1510304336000},{"_id":"source/images/blogimages/cisco/Web_Conferencing__Video_Conferencing_Fuze.png","hash":"9d9e57804f57786b62aae008af1978d98a362bae","modified":1511144979000},{"_id":"themes/icarus/gallery/two_children_2.jpg","hash":"8044dafd28feb4c6aca2f5d48719385684ae9270","modified":1389073946000},{"_id":"themes/icarus/.git/objects/70/1ab9b31b9cd802c963f4c0ab87799b32e4fdf5","hash":"21b4ca56eb4660fb85d2834f14d3ad170197bfaa","modified":1511424067000},{"_id":"source/images/blogimages/2017/im_company_abroad/im_comparation.png","hash":"7251d4e152770b0ce93f9000e44a71d5b5ccf9e5","modified":1487040178000},{"_id":"themes/icarus/.git/objects/42/87278be119ecdd9d7256c0876ac99193f7d477","hash":"687a894c81527792bfd458d74ad4dcd482eac7d1","modified":1511425569000},{"_id":"themes/icarus/.git/objects/00/c9a22f0d5871f98a5be409ebe16278429bd8a2","hash":"b53a93fc1651659f190cc774b68d5b30368c5fc4","modified":1511425569000},{"_id":"public/baidusitemap.xml","hash":"43fdf16482e002dcb90e23b99f5eb259573d9461","modified":1512634290839},{"_id":"public/content.json","hash":"c6b4fdb10d9fe3c5782c0dee033840f626f65bbe","modified":1512634292804},{"_id":"public/sitemap.xml","hash":"45157fd7b04fa54750ee8a6d4dd439c123d1108b","modified":1512634293138},{"_id":"public/about/index.html","hash":"e73d9eb01e7a62057f4ff17fc659b5a9bf22bcdd","modified":1512634293321},{"_id":"public/categories/index.html","hash":"5fa80b86ad706d80ae102af7969cdc28eb35ce6f","modified":1512634293321},{"_id":"public/tags/index.html","hash":"6d2298fa20d8093c8f31dfbc5c0d3dd30caf9e60","modified":1512634293321},{"_id":"public/2017/10/22/JavaScript-knowledge/index.html","hash":"f9f111dbba633fa30e03203619a0bb41476bd4b3","modified":1512634293321},{"_id":"public/2017/10/22/Buildcross-platform-desktop-apps/index.html","hash":"4797e7202f345540e91a8da9da3e408e9ea75ad0","modified":1512634293321},{"_id":"public/2017/09/21/PBOCKonwledgeCode/index.html","hash":"107132dfb6313a1ee7938a11902626d8733a4b4b","modified":1512634293321},{"_id":"public/2017/09/12/PBOCKonwledge/index.html","hash":"85870935b4984ea2e1dc1865b1c630fe627bae35","modified":1512634293321},{"_id":"public/2017/08/17/IntervieweeQuestions/index.html","hash":"0b6846e0a33b145cc447ca2691c5cb446de1f5f9","modified":1512634293321},{"_id":"public/2017/08/02/activity-start-process/index.html","hash":"12b63a07095566a35e0b7241e4046e21a52f0ddc","modified":1512634293322},{"_id":"public/2017/08/01/aosp-compile/index.html","hash":"4c6d9126b594502457dd49189e039f9f58b9f8b4","modified":1512634293322},{"_id":"public/2017/07/12/android-noroot-hook/index.html","hash":"41a45674dc7ee7134f2286d0c59fee683e7d9c77","modified":1512634293322},{"_id":"public/2017/07/10/android-binder-principle2/index.html","hash":"c94bd0b2a56ee34f811e0e32aad852db7f81ba8e","modified":1512634293322},{"_id":"public/2017/07/08/android-binder-principle/index.html","hash":"a7814678c022fec897ab85cbb1dbb0c24c0bea4f","modified":1512634293322},{"_id":"public/2017/05/18/handler-replace-timertask/index.html","hash":"44c096e4c63920dbf8e07f58f68f543c3de64df8","modified":1512634293322},{"_id":"public/2017/05/11/Object-Oriented/index.html","hash":"77c8f23a495c50b26b18d0ace79e4a9e1e3734a5","modified":1512634293322},{"_id":"public/2017/04/10/Annotation-Android-usage/index.html","hash":"3c745ece4e8a73e012264d090785f8f063008f8c","modified":1512634293322},{"_id":"public/2017/03/20/SVN-server-linux/index.html","hash":"a97414a64c2569cbc46f6c19eccb310d10eb9506","modified":1512634293322},{"_id":"public/2017/03/14/JAVA-CDI-Assertion/index.html","hash":"5b89713bc88cc4b2fe60b1c418f1697617b92214","modified":1512634293322},{"_id":"public/2017/03/09/Https-Questions/index.html","hash":"8028fef69d8a2067686e4b9d93fc523bb70d3caf","modified":1512634293322},{"_id":"public/2017/02/21/Multi-Process-Dispatch/index.html","hash":"e714d04ff17bcfdabce76bf2f43caa389dc2b7a6","modified":1512634293322},{"_id":"public/2017/02/12/iterm2-to-linux/index.html","hash":"163667c884a6db4dab1b70c4ade3bb9d4bba3199","modified":1512634293323},{"_id":"public/2017/01/13/abroad-IM-service-company/index.html","hash":"2d4cf777002f1cc080c8ce7afaa191924fd4d39c","modified":1512634293323},{"_id":"public/2016/12/20/Android-patch-update/index.html","hash":"c9ef2bf4e42ad92aa896a6643a3a76d592e9ac13","modified":1512634293323},{"_id":"public/2016/12/11/ThreadLocal-usage/index.html","hash":"007e58f8aa9ecb9098914731aa87c6262c6aab0d","modified":1512634293323},{"_id":"public/2016/12/06/hexo-learning1/index.html","hash":"1f0cf3a961c6afa23d19c96e6451e29d6dab0e11","modified":1512634293323},{"_id":"public/2016/12/04/hexo-learning0/index.html","hash":"df1faac290a717b59c51d99d434446e02ed5ed00","modified":1512634293323},{"_id":"public/2016/12/03/nodejs-learning-getting-started/index.html","hash":"eaaf027db6d330ee267476cbdded7724af898a98","modified":1512634293323},{"_id":"public/2016/11/21/Difference_between-T-E-K-V/index.html","hash":"d4db66e635657c2f2d54169ff657755470b79fb1","modified":1512634293323},{"_id":"public/2016/11/03/hexo-mac-module-not-found/index.html","hash":"4d760f281a3e2ca7dcfdff344d9a02f6acbabe27","modified":1512634293323},{"_id":"public/2016/10/13/gradle-learning2/index.html","hash":"86f95419f31b517253b2490aafeeb50606301959","modified":1512634293323},{"_id":"public/2016/10/12/gradle-learning/index.html","hash":"21f0f6b63c8d0563c156d7e87b642ec589b283df","modified":1512634293323},{"_id":"public/2016/09/28/Android-interview-questions/index.html","hash":"f7eb3e7bddaa37e2295828d5332e4528fdf11f1b","modified":1512634293323},{"_id":"public/2016/09/22/JNI-get-publickey/index.html","hash":"0adaabb309e5e6b0d11ff5088f5114d744aa50cd","modified":1512634293323},{"_id":"public/2016/09/22/quit-whole-application/index.html","hash":"4e16a3f2d41ba9b7f342557a1ff24a3db8be2992","modified":1512634293323},{"_id":"public/2016/09/20/android-design-pattern-singleton/index.html","hash":"d33f451b20784c03e3df39e93de909d04f98e5d0","modified":1512634293323},{"_id":"public/2016/09/20/AVG-unwanted-software/index.html","hash":"1b23c4784d97d2ad2544b9280d626d45d5e95467","modified":1512634293324},{"_id":"public/2016/09/05/ThreadLocal-HandlerThread-Looper/index.html","hash":"e4ae83255546e3a25976c568e0e2b01865ea7796","modified":1512634293324},{"_id":"public/2016/08/16/RxAndroid-Learning/index.html","hash":"d510421a972fd2561768c49eeb6ef05391c660be","modified":1512634293324},{"_id":"public/2016/08/03/android-LocationListener/index.html","hash":"a3848bf0f2b4f41058ff1e8205f273026c04b7f4","modified":1512634293325},{"_id":"public/2016/07/25/android-webview-summary/index.html","hash":"086d618442a6dc0739ee042afd0003c5ddf7745f","modified":1512634293325},{"_id":"public/2016/06/08/gson-summary/index.html","hash":"f2fbce9256713161882e08e570aeb5a3fbd6516d","modified":1512634293326},{"_id":"public/2016/05/28/qiniu-android-summary/index.html","hash":"4acf8886b0c824368c65e3659d9b603f1c77d675","modified":1512634293326},{"_id":"public/2016/05/24/JNI-Learning/index.html","hash":"b33bd8380592051870b6e032922d6618ab6d3e0c","modified":1512634293327},{"_id":"public/2016/05/24/JNI-Learning0/index.html","hash":"13cc8936167b8f8a1e36f76ed0c48bad8e30fe81","modified":1512634293327},{"_id":"public/2016/05/18/javaString-and-bytes/index.html","hash":"bb63dfb2018946ca2d882e4e10181c59c44323de","modified":1512634293329},{"_id":"public/2016/05/12/GCM-Azure_summary/index.html","hash":"e9b9d57b706f341d3daaa1ee98d193214c8e7ced","modified":1512634293329},{"_id":"public/2016/03/20/android-books-reading-/index.html","hash":"5001f6255cd5c979551d604e3f73ab3a2539763d","modified":1512634293329},{"_id":"public/2016/03/20/android-new-knowledge-summary/index.html","hash":"2f5413cca133cc73168d23c731f08fdc128cfd00","modified":1512634293330},{"_id":"public/2016/03/15/facebook-google+signin/index.html","hash":"8c5fe49851b599b801c1dc34caa1922eb2572225","modified":1512634293331},{"_id":"public/2016/03/01/android-googlemap-summary/index.html","hash":"6ef0983553e2e7179216672e732a831142a1c573","modified":1512634293331},{"_id":"public/2015/11/06/book-list-of-2015/index.html","hash":"0f365cb3161af4d1d72698ea955df94aa32dbba7","modified":1512634293331},{"_id":"public/2015/03/16/java-multithreading-concurrent/index.html","hash":"9724305bd3b9331a47124e8b105fb49799f78d33","modified":1512634293331},{"_id":"public/2015/01/27/android-open-sources/index.html","hash":"626cc05754f3d6ed3c82a1176030b02760e81664","modified":1512634293331},{"_id":"public/2014/12/23/hello-world/index.html","hash":"fb599e126418a845ae8ba54aad7d73940c66ffa3","modified":1512634293331},{"_id":"public/archives/index.html","hash":"aca3d085d4172bc93c7af97a65874a889194657b","modified":1512634293331},{"_id":"public/archives/page/2/index.html","hash":"b71c6b75cd694bfc0413682eb6f448f593e286d7","modified":1512634293331},{"_id":"public/archives/page/3/index.html","hash":"d297f305c5df8d45992a97586f6c6a7dfb681463","modified":1512634293331},{"_id":"public/archives/page/4/index.html","hash":"87320ec58b5560b069945d4e7dd48a2d1da6ee8e","modified":1512634293332},{"_id":"public/archives/page/5/index.html","hash":"5c633956c5e32ba18bef95aeb44ec50e768b5eb1","modified":1512634293332},{"_id":"public/archives/page/6/index.html","hash":"b5237df9947e9845f08541702536f12ace628b5d","modified":1512634293332},{"_id":"public/archives/page/7/index.html","hash":"e28b1708edae6a8de093943f8e65c492283282f4","modified":1512634293332},{"_id":"public/archives/2014/index.html","hash":"da4f070ef0d903de635e9baaaf3e68b4bd5d55c6","modified":1512634293332},{"_id":"public/archives/2014/12/index.html","hash":"5a15f4726e9f725f1bebf33a92fd9f3262031f10","modified":1512634293332},{"_id":"public/archives/2015/index.html","hash":"62513ef0848fc95693b3fd58402bd87784717f15","modified":1512634293332},{"_id":"public/archives/2015/01/index.html","hash":"ca0bc0a656780a41573ec31ce7c6647ea0b4309d","modified":1512634293332},{"_id":"public/archives/2015/03/index.html","hash":"6befcac75cffed992859489ac228f52a82e1d0fc","modified":1512634293332},{"_id":"public/archives/2015/11/index.html","hash":"8c516a6d1e14ab6c85e521ea8c9d812deea798ae","modified":1512634293332},{"_id":"public/archives/2016/index.html","hash":"b21bf4016d2018e5035c32fb5e9b5b89068f4dee","modified":1512634293332},{"_id":"public/archives/2016/page/2/index.html","hash":"aaeee43aba8b5fbd1bf26e6bb48d05faf49541c2","modified":1512634293332},{"_id":"public/archives/2016/page/3/index.html","hash":"ae171d16b264882603e88de9192f9b2252a8d787","modified":1512634293332},{"_id":"public/archives/2016/page/4/index.html","hash":"f7933c83a98d8e84cda38665ede5b7d3aeaf4372","modified":1512634293333},{"_id":"public/archives/2016/03/index.html","hash":"25a69112d714719021bb509091c4e7782ea38183","modified":1512634293333},{"_id":"public/archives/2016/05/index.html","hash":"cc028eb5803023275388b08da2e904924d03b9ea","modified":1512634293333},{"_id":"public/archives/2016/06/index.html","hash":"b78e50a24299771ffb706860ba83e803e133f9e6","modified":1512634293333},{"_id":"public/archives/2016/07/index.html","hash":"5ba7cd20fdc614cf6f221e8c44e409480e5a99ec","modified":1512634293333},{"_id":"public/archives/2016/08/index.html","hash":"542d0c43b3ad5c4d0fec3bbdbab61228e2d9b511","modified":1512634293333},{"_id":"public/archives/2016/09/index.html","hash":"e22c83cd7597272a2d537cc60efd7eddee6625c1","modified":1512634293333},{"_id":"public/archives/2016/10/index.html","hash":"48417c489c3a7a1d19d643d2c1df5cfa8d67adad","modified":1512634293333},{"_id":"public/archives/2016/11/index.html","hash":"b36a10f2f519daeed98899c218437c8448ad911c","modified":1512634293333},{"_id":"public/archives/2016/12/index.html","hash":"241e46c57d6f70ccfacbae17eb3caa20728460d9","modified":1512634293333},{"_id":"public/archives/2017/index.html","hash":"a3b84d6523480e1f536a2b08cccb6f303c879361","modified":1512634293333},{"_id":"public/archives/2017/page/2/index.html","hash":"8bcaa44564def07a91a5a80f04500c53e008921e","modified":1512634293333},{"_id":"public/archives/2017/page/3/index.html","hash":"16e6975325e60bb507a49135fcce14daeb6e64c8","modified":1512634293333},{"_id":"public/archives/2017/01/index.html","hash":"ebbdef96c778ffcfeaff94cc00b7c83da7c45e69","modified":1512634293333},{"_id":"public/archives/2017/02/index.html","hash":"053311be17c001abb2fbc49326cf96f861afff92","modified":1512634293334},{"_id":"public/archives/2017/03/index.html","hash":"6204b46164dd3bc784763822232074ecf8fdda02","modified":1512634293334},{"_id":"public/archives/2017/04/index.html","hash":"64c986536ecb111d6327620989055d8d23611354","modified":1512634293334},{"_id":"public/archives/2017/05/index.html","hash":"2f6b614a7d724cfe97ae7d8cdca3535c2066297f","modified":1512634293334},{"_id":"public/archives/2017/07/index.html","hash":"a1b52ea6b01fb4f91f2b83cc3de1008049af7577","modified":1512634293334},{"_id":"public/archives/2017/08/index.html","hash":"50d0bc9a44c8304eb242daf6eaa4bf3a888e33a4","modified":1512634293334},{"_id":"public/archives/2017/09/index.html","hash":"cbe803f1cf0bd778caf816d0188772e7f4ce55cb","modified":1512634293334},{"_id":"public/archives/2017/10/index.html","hash":"ddce4f030ef3f42cd2e1d25db10a30deca672c6a","modified":1512634293334},{"_id":"public/categories/accumulation/index.html","hash":"e706310117205cdce5d404f056389a920e5bf519","modified":1512634293334},{"_id":"public/categories/accumulation/page/2/index.html","hash":"eee6a7a46357de5c1102461ca7b6dbc6e9b6585f","modified":1512634293334},{"_id":"public/categories/accumulation/page/3/index.html","hash":"226d9340049e278a4d4d5af1e335414f2416b94e","modified":1512634293334},{"_id":"public/categories/accumulation/page/4/index.html","hash":"d5f740f23255704a1b380ba1023fcfe379f12ed8","modified":1512634293334},{"_id":"public/categories/accumulation/page/5/index.html","hash":"bf4ff669f0f7a252bf413ba804af4efba3ac5665","modified":1512634293334},{"_id":"public/categories/accumulation/page/6/index.html","hash":"e4295c0057a4815754524f62135d3547d9aefbda","modified":1512634293335},{"_id":"public/categories/read/index.html","hash":"005ed52c96eedb09b470540de9b40089b0c06253","modified":1512634293335},{"_id":"public/categories/technology/index.html","hash":"230e5983d6148a5cbe49b0e6680c9b2d267439f1","modified":1512634293335},{"_id":"public/categories/investigation/index.html","hash":"cc7cd8f7ff90308aafcd3825e08ae4aab894ef6a","modified":1512634293335},{"_id":"public/index.html","hash":"97b2bd080d8717709ffb8aec2a259c966c7d03d7","modified":1512634293335},{"_id":"public/page/2/index.html","hash":"70b9cc55b33887c26a50584315c817219b5ba2e0","modified":1512634293335},{"_id":"public/page/3/index.html","hash":"d1f12f54e34cbc1823ec71c2a0bf4b807624efe2","modified":1512634293335},{"_id":"public/page/4/index.html","hash":"26a61f94f33cb07d3fd36f342625b57a8e9b50ab","modified":1512634293335},{"_id":"public/page/5/index.html","hash":"c15b742ac7128c434bc633ebfdcfabfd04efa1a8","modified":1512634293335},{"_id":"public/page/6/index.html","hash":"362e1c75b1f1cee1b7a727865e52fdcfc71f14cb","modified":1512634293335},{"_id":"public/page/7/index.html","hash":"c4c5351343ca4be56c24dcf65785da7d2e3b2ba0","modified":1512634293335},{"_id":"public/tags/android/index.html","hash":"f1de10236f7f013816467120b5bf09a9a5391fa9","modified":1512634293335},{"_id":"public/tags/android/page/2/index.html","hash":"03524ecce626d2c390aeedf6ddd89eca38e164ae","modified":1512634293335},{"_id":"public/tags/android/page/3/index.html","hash":"4e2a5054f9416f24d02a209b58a741b1f3673b69","modified":1512634293335},{"_id":"public/tags/open-souces/index.html","hash":"e8ea3c76ebbcc82f11dbbe30223a3015461c9055","modified":1512634293335},{"_id":"public/tags/java/index.html","hash":"c5a04973c4a90b29d9b54451b6c9483511aba695","modified":1512634293335},{"_id":"public/tags/multi-thread/index.html","hash":"c101612994fd2bda8b3dd76d5bf4b6760e3189ee","modified":1512634293335},{"_id":"public/tags/interview-knowledge/index.html","hash":"a3be8f4b8befbf31e19d5ce1f48c982045f111f7","modified":1512634293336},{"_id":"public/tags/read/index.html","hash":"61f6c2a322a0a007132b94dbf861972abd7bfa92","modified":1512634293336},{"_id":"public/tags/google-map/index.html","hash":"577cfa0b88990cafdc905adf0b0bee71f4173f12","modified":1512634293336},{"_id":"public/tags/third-party-signin/index.html","hash":"efab8f3d5389c3f3774f572c86990683b86176b2","modified":1512634293336},{"_id":"public/tags/new-features/index.html","hash":"7237abc946f61f4c1c590dd6134624033f1440e3","modified":1512634293336},{"_id":"public/tags/basic-knowledge/index.html","hash":"54f24d2ec632a39663926dde886b7a94a55eb439","modified":1512634293336},{"_id":"public/tags/reading/index.html","hash":"4f1714bb0fa0eafe5ee404901a1ae55541807d96","modified":1512634293336},{"_id":"public/tags/gcm/index.html","hash":"bb15730cb58808e15a3d5ab2dd68556e518be501","modified":1512634293336},{"_id":"public/tags/azure/index.html","hash":"90474d4f60d4677c1e6d39a78a126f477a848894","modified":1512634293336},{"_id":"public/tags/notification/index.html","hash":"c08d752c4d2411fe840197616002161d51a80c84","modified":1512634293336},{"_id":"public/tags/byte/index.html","hash":"519871bbf70e4bab98eae5ac1509136dca584e85","modified":1512634293336},{"_id":"public/tags/jni/index.html","hash":"b1b5304443abcebde93a0c02908bf867a5c507e4","modified":1512634293336},{"_id":"public/tags/aes/index.html","hash":"51db347a7e5867ca465b6234e1a1620652043c77","modified":1512634293336},{"_id":"public/tags/android-source-code/index.html","hash":"e17a409b1f54073c61914923c695521f05bcd648","modified":1512634293336},{"_id":"public/tags/gson/index.html","hash":"180e94eeca2989e29c33a742fca6ba22fd866ed3","modified":1512634293336},{"_id":"public/tags/qiniu/index.html","hash":"2f4fd64843114f0d9f9a49169dc22078f1a34c86","modified":1512634293336},{"_id":"public/tags/webview/index.html","hash":"caa488e52a0cb494c43f09ce4daf3da6cbad2578","modified":1512634293338},{"_id":"public/tags/locationlistener/index.html","hash":"4965d56cbd7a09f15421404f32a74eae1b239447","modified":1512634293338},{"_id":"public/tags/rxjava/index.html","hash":"09acfbc7523a4a0174ae484bd23cecbf195c9260","modified":1512634293338},{"_id":"public/tags/rxandroid/index.html","hash":"692adaad63d7e85fd0445de08e148821021b264d","modified":1512634293338},{"_id":"public/tags/threadlocal/index.html","hash":"5f0d27e4c9f2525891753ecc0f72a618d2d563d6","modified":1512634293338},{"_id":"public/tags/handlerthread/index.html","hash":"b12e7a878783a2b539c0f3baa6e1712c196af50f","modified":1512634293338},{"_id":"public/tags/looper/index.html","hash":"2950bc9898545584ff20ddbbabd098595edaac12","modified":1512634293339},{"_id":"public/tags/remove-admob/index.html","hash":"e9909d3720a858905119a13ccbe802421d3092e5","modified":1512634293339},{"_id":"public/tags/singleton/index.html","hash":"44421acab9c452063a0e49d6663326cbda0dd7bb","modified":1512634293339},{"_id":"public/tags/publickey/index.html","hash":"c7ae2b5b3a4e5726a4145ddfbc31ff3d7434689b","modified":1512634293339},{"_id":"public/tags/gradle/index.html","hash":"af7b7ebf7bb89daf7216e82943e5cb951e0e33cc","modified":1512634293339},{"_id":"public/tags/exitapplication/index.html","hash":"5a6e8bb54d1d4c13d8a4f6768e73b2d9e3305e5c","modified":1512634293339},{"_id":"public/tags/hexo/index.html","hash":"fb9be6b41ad5e03a31a7b63a70e5e10a4b1373e5","modified":1512634293339},{"_id":"public/tags/genericity/index.html","hash":"aeaa8a35d16534dd368fcbe844ce39032c213934","modified":1512634293339},{"_id":"public/tags/hexo-structure/index.html","hash":"365fca839b8fbe7713ef114a888cb34cbc66ff23","modified":1512634293339},{"_id":"public/tags/ejs/index.html","hash":"a0ad2826611c468cfa2fb08c9795fe4e255a9e73","modified":1512634293339},{"_id":"public/tags/im-company/index.html","hash":"b61ef08adf08a88673fd67948f181442fa9e7fbd","modified":1512634293339},{"_id":"public/tags/patch-update/index.html","hash":"e5088d2cfbb51aedb34bf61f04e9f10673cfb94d","modified":1512634293339},{"_id":"public/tags/linux/index.html","hash":"d261ecfc367a20421b2a6e536258527927a66bcc","modified":1512634293339},{"_id":"public/tags/iterm/index.html","hash":"89c30da138e50af4632f9f3c3e336a46307abf87","modified":1512634293339},{"_id":"public/tags/scp/index.html","hash":"575681e245cacd48b5c8466d0490514c67314b84","modified":1512634293340},{"_id":"public/tags/multi-process/index.html","hash":"166dbc0e998f771490ae4fb40c56e37efb03469e","modified":1512634293340},{"_id":"public/tags/svn-server/index.html","hash":"aeb2c50cb0be8dec3726fb0cdae2d820f91bd2c9","modified":1512634293340},{"_id":"public/tags/https/index.html","hash":"c26e9fef0c1cd42d66d2adaeee7550793b908df3","modified":1512634293340},{"_id":"public/tags/injection/index.html","hash":"178a50dfc7012aeee65e65be65e914040a4d6d63","modified":1512634293340},{"_id":"public/tags/assertion/index.html","hash":"a8f522ab759f1f51d3851bec60e6c18f84bab58f","modified":1512634293340},{"_id":"public/tags/annotation/index.html","hash":"a858cabae91717a0f4b6f31eda4dd0db526c8ddf","modified":1512634293340},{"_id":"public/tags/android-framework/index.html","hash":"5c0652d72bfa25b12a3efbbf46cbf3748d32cb11","modified":1512634293340},{"_id":"public/tags/eit/index.html","hash":"7da270e6447786da94a6f4e24f1ed0acd84016c4","modified":1512634293340},{"_id":"public/tags/object-oriented/index.html","hash":"dbcfe5e820a82081539039313536f1e6ec0d0cce","modified":1512634293340},{"_id":"public/tags/hook/index.html","hash":"712881c5c34885748caa34630807ab8afcd4309a","modified":1512634293340},{"_id":"public/tags/android-system-service/index.html","hash":"54f1bffdf41bf25eb541976985565b20c73173d1","modified":1512634293340},{"_id":"public/tags/binder/index.html","hash":"760b055c74acfe0ade5a1999780ecb8c0538994f","modified":1512634293340},{"_id":"public/tags/timertask/index.html","hash":"96f7b62c1b51307c032debabbee65750117a5bad","modified":1512634293341},{"_id":"public/tags/handler/index.html","hash":"0ff269f93ee7aadc291b7a42328be1c1d36d3f1d","modified":1512634293341},{"_id":"public/tags/aidl/index.html","hash":"1d4ed6fdb91a0a2a0392c55cf240da1b57568b87","modified":1512634293341},{"_id":"public/tags/aosp/index.html","hash":"8ef07e91c2409eed1ed2433d9b3a31780f9d660c","modified":1512634293341},{"_id":"public/tags/sdk-compile/index.html","hash":"4297247ed10a26078f8df6175e2127a49082ddb6","modified":1512634293341},{"_id":"public/tags/ams/index.html","hash":"d8e29e2f56696d9148404cb39b51c28851ec1744","modified":1512634293341},{"_id":"public/tags/pboc/index.html","hash":"20200567b4747028b9f20ce99337b55c6aaf6304","modified":1512634293342},{"_id":"public/tags/pboc-2-0/index.html","hash":"7be26194745dd11f4f3c0eaa9e7d3a412ddff411","modified":1512634293342},{"_id":"public/tags/alfred-workflow/index.html","hash":"12e0d0537121100b8c5c0fcf0ad52a2843f0dcd3","modified":1512634293342},{"_id":"public/tags/electron/index.html","hash":"8144a415d59545377b824dd963abe2dfce4c48a0","modified":1512634293342},{"_id":"public/tags/javascript/index.html","hash":"9907a40089f81ffff3d4ba41172460d8cf09ab21","modified":1512634293342},{"_id":"public/tags/nodejs/index.html","hash":"4b097bc9d1d28382ff8e516929b40fa08325825c","modified":1512634293342},{"_id":"public/images/avatar.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1512634293385},{"_id":"public/images/favicon.ico","hash":"e64542caa1b7a07484925304cd99c93129dfce8e","modified":1512634293385},{"_id":"public/images/blogimages/2016/ThreadLocal.png","hash":"29a37aefd8f9aa455e5f5e41d56d374184c8694b","modified":1512634293385},{"_id":"public/images/blogimages/2016/androidart_broadcastreceiver1.png","hash":"dc4a97d2b8ef1f6592717204788d9f716117fdee","modified":1512634293385},{"_id":"public/images/blogimages/2016/avg_warning.PNG","hash":"1b8817b076f48cf8217439e0265cb4216abb3d17","modified":1512634293385},{"_id":"public/images/blogimages/2016/google_servcie_ads.PNG","hash":"10c107e578bcfb28ee9f38c247f62cb99f14ea1a","modified":1512634293385},{"_id":"public/images/blogimages/2016/gradle_structure1.png","hash":"0b8c1f213bb88852ecb0fd8a50b60f310d6a23e8","modified":1512634293385},{"_id":"public/images/blogimages/2016/gradle_structure2.png","hash":"6a8aefb3577950beeba2900f507e749dd518345e","modified":1512634293385},{"_id":"public/images/blogimages/2016/jni_structure.png","hash":"312696c9a056a734ff63d9457ff0bb83f356f057","modified":1512634293385},{"_id":"public/images/blogimages/2016/gradle_task.png","hash":"6890da207d5772a6f141024267547db56e9bec38","modified":1512634293385},{"_id":"public/images/blogimages/2017/PackageManagerService.png","hash":"c796723407d80b2252667add5e2734f7f80f5cd0","modified":1512634293385},{"_id":"public/images/blogimages/2017/apt_processor.png","hash":"9b75b07d395db890bef153daf95f0f4a365e4576","modified":1512634293385},{"_id":"public/images/blogimages/2017/binder-02.png","hash":"014d8a4c1061ae8186a59095694eafbc96aad029","modified":1512634293385},{"_id":"public/images/blogimages/2017/binder-01.png","hash":"cdedd11dc6e75fe0a5cef7d313624ae31be881d3","modified":1512634293385},{"_id":"public/images/blogimages/2017/binder-open-drive.png","hash":"0ef23b58ba4f06233d0f3cfef4fbccf27e2dbdf3","modified":1512634293385},{"_id":"public/images/blogimages/2017/binder-service-manager.png","hash":"b99d44d9bf79a26bff169c7ece70abf7dc6fb3de","modified":1512634293385},{"_id":"public/images/blogimages/2017/device-number.png","hash":"50005dc453a70edab64d828508b2ba139c0df338","modified":1512634293385},{"_id":"public/images/blogimages/2017/binder-system-service.png","hash":"d388f2e4cdd90e1e7ebcf4ad85c0af6c98427c74","modified":1512634293386},{"_id":"public/images/blogimages/2017/clipboard-ipc-process.png","hash":"2419837d48fca339b19e6a3a6d053301699e20c4","modified":1512634293386},{"_id":"public/images/blogimages/2017/funny_pic.jpg","hash":"fd45920ce6bdb70e1af2a56998700b8ce717d06f","modified":1512634293386},{"_id":"public/images/blogimages/2017/getStrongProxyForHandle.png","hash":"e3f3167645262e911feabc39e8fc4431c1fb5027","modified":1512634293386},{"_id":"public/images/blogimages/2017/ibinder-binder.png","hash":"844df893c87e22eae853536204010d88a9df745f","modified":1512634293386},{"_id":"public/images/blogimages/2017/processor_jar.png","hash":"f1b9bb1ab096157303f4cb9c50904f485add7782","modified":1512634293386},{"_id":"public/images/blogimages/2017/transact-binder.png","hash":"49129266297f97d7883900dda0304c3a2f5cc3a7","modified":1512634293387},{"_id":"public/images/blogimages/2017/servicemanager-find-service.png","hash":"ea408c25c09bc94103d68ed23941a3cebd8c18f9","modified":1512634293387},{"_id":"public/css/images/avatar.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1512634293387},{"_id":"public/css/images/avatar0.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1512634293387},{"_id":"public/css/images/avatar1.png","hash":"2daa0d02ee54bee9a6968e098013fb37a7fab7bc","modified":1512634293387},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1512634293387},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1512634293387},{"_id":"public/images/blogimages/2017/im_company_abroad/im_layer.png","hash":"e69ec76db290bbd351ec49389d0a44df18726b17","modified":1512634293387},{"_id":"public/images/blogimages/2017/js/js_function_construction.png","hash":"72ec55ea431e8c476d2d869d3ffc1b4baec759c7","modified":1512634293387},{"_id":"public/images/blogimages/2017/js/js_function_construction_1.png","hash":"44ff70eb69c068ab96cee3491c4851af5a5b3d75","modified":1512634293387},{"_id":"public/images/blogimages/2017/js/js_function_construction_2.png","hash":"725ded11bd192c5c3887e66d4773026105d479ac","modified":1512634293387},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1512634293387},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1512634293387},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1512634293387},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1512634293387},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1512634293387},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1512634293387},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1512634293388},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1512634293388},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1512634293388},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1512634293388},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1512634293388},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1512634293389},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1512634293389},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1512634293389},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1512634293389},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1512634293389},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1512634293389},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1512634293389},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1512634293389},{"_id":"public/images/icon.png","hash":"342e89a86946e3178b4ff79b6cbb64b33d787814","modified":1512634295098},{"_id":"public/images/blogimages/2016/androidart_service1.png","hash":"30b35c17a3e468fcbbaab25990439bad304acfa1","modified":1512634295098},{"_id":"public/images/blogimages/2016/androidart_broadcastreceiver2.png","hash":"173269356b75bfe4213c28374a19e3a4938fd36b","modified":1512634295115},{"_id":"public/images/blogimages/2017/Initialize_for_purchase_data.png","hash":"2676a64fa51614baa48f40cede53b9a38d2680ec","modified":1512634295115},{"_id":"public/images/blogimages/2017/Initialize_for_purchase.png","hash":"c72e1a7b86d6ef66846d3bfcd92f7bbf30d1a324","modified":1512634295115},{"_id":"public/images/blogimages/2017/activity-start-process.png","hash":"7fbf542e56930c7eae863a729c9b127400b13a41","modified":1512634295115},{"_id":"public/images/blogimages/2017/Initialize_for_purchase_responce.png","hash":"a1d12d2d387552617b945c40158b53a63d3e1bd2","modified":1512634295115},{"_id":"public/images/blogimages/2017/android_build_process.png","hash":"14d311115864fa5a4606bb7cb8b592460ad46480","modified":1512634295115},{"_id":"public/images/blogimages/2017/ams_binder_process.png","hash":"5c9581165c33f271fa7e4d49e29b1b5ed4b90f3d","modified":1512634295115},{"_id":"public/images/blogimages/2017/binder-drive-principle.png","hash":"b6ef539c56f52e63b0b587916efbf363aebd7551","modified":1512634295115},{"_id":"public/images/blogimages/2017/binder-principle.png","hash":"e380ac2add90a07fbe5168f20e165f224d76d099","modified":1512634295116},{"_id":"public/images/blogimages/2017/hook-clipboard-process.png","hash":"320b490fd9d38bcc5bf1615d5d2bff20d766d51a","modified":1512634295116},{"_id":"public/images/blogimages/2017/listview_recyclebin.png","hash":"b90022a471f8339162107f2d57a744d1d0c9654c","modified":1512634295116},{"_id":"public/images/blogimages/2017/multi-Application-flow-chart.png","hash":"c319d32184bc3fdaf97faa83f6568723b29f193a","modified":1512634295116},{"_id":"public/images/blogimages/2017/process-ipc-structure.png","hash":"4488ffef5b4655dd72d1ad77c765b57ce1f83341","modified":1512634295116},{"_id":"public/images/blogimages/2017/servicemanager-add-service.png","hash":"338c7fb1a3208538ebbc1e9fd00b5387a2a688d0","modified":1512634295116},{"_id":"public/images/blogimages/2017/service-proxy-common.png","hash":"49eea6c0ea05522d586dffe8e29da9448708fa08","modified":1512634295116},{"_id":"public/images/blogimages/2017/servicemanager-init.png","hash":"e6acdb9b04ae085a6d6d0f45bc089447758a0082","modified":1512634295116},{"_id":"public/images/blogimages/2017/im_company_abroad/im_layer_email.png","hash":"1ba76d94651319eca5c6b701403c627c50c4e85b","modified":1512634295116},{"_id":"public/images/blogimages/2017/im_company_abroad/im_quickblox.png","hash":"d52b5c41e3771e0bba78fad79d26153da63b3d61","modified":1512634295116},{"_id":"public/images/blogimages/2017/im_company_abroad/im_snich.png","hash":"45a22cb7867faf9c223ffa52cad7f74171f79fe1","modified":1512634295117},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1512634295117},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1512634295117},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1512634295117},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1512634295117},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1512634295138},{"_id":"public/js/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1512634295138},{"_id":"public/js/main.js","hash":"80cde22d84fad8be4d7dc77c0cdf8eb8f01f8903","modified":1512634295138},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1512634295138},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1512634295138},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1512634295138},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1512634295138},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1512634295138},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1512634295139},{"_id":"public/css/style.css","hash":"b73cb3186dea6cbdb7a47fd7f6fa73c717fddf1e","modified":1512634295139},{"_id":"public/css/bootstrap.min.css","hash":"94e5838701e98ced38fdc85bca1e3543a1870393","modified":1512634295139},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1512634295139},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1512634295139},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1512634295139},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1512634295139},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1512634295139},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1512634295139},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1512634295139},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1512634295140},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1512634295140},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1512634295140},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1512634295140},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512634295140},{"_id":"public/images/blogimages/2016/androidart_activity.png","hash":"9d8bda879c62adc0b71cd26262603850ca16ab05","modified":1512634295140},{"_id":"public/images/blogimages/2016/androidart_contentprovider.png","hash":"9dbe7f17e629d0f36218b5dd3c3941cd8aa320f0","modified":1512634295140},{"_id":"public/images/blogimages/2017/EIT-form.png","hash":"edb86938e964f0602d2fcaa5676dc67bcbce5b26","modified":1512634295140},{"_id":"public/images/blogimages/2017/IPC-data-format.png","hash":"6bda10ce15610da9102e67cbf763ecfb8a088e83","modified":1512634295140},{"_id":"public/images/blogimages/2017/android_lint.png","hash":"fdf172859ab1ce584d06c6a5ff040d85d578b3f5","modified":1512634295140},{"_id":"public/images/blogimages/2017/aosp_make_single_module.png","hash":"e18bcd65212b1f74330a4154671a40d2f3923f1b","modified":1512634295140},{"_id":"public/images/blogimages/2017/binder-EIT.png","hash":"1193bf7dbc3228cd60447548c412dce6644fff09","modified":1512634295140},{"_id":"public/images/blogimages/2017/binder-EIT-onTransact.png","hash":"3c10e03250b8f501385e44785ebd470a54bc63b5","modified":1512634295140},{"_id":"public/images/blogimages/2017/binder-example-media.png","hash":"ca53f947f638cc270027476b1476f1546c463855","modified":1512634295140},{"_id":"public/images/blogimages/2017/pin_verify.png","hash":"a18ac663b5ad7d78659a7998b3a56bc6fc05a0a7","modified":1512634295140},{"_id":"public/images/blogimages/cisco/Adobe_Connect_Online_Store.png","hash":"e915a2be8e8e3bf922f4256be6e3264b2a564e11","modified":1512634295141},{"_id":"public/images/blogimages/cisco/Cisco_WebEx_Meetings_Pricing.png","hash":"807bc9239bff4322f98c6f5610be7c7a168ac45d","modified":1512634295141},{"_id":"public/images/blogimages/cisco/VC5_5_1.png","hash":"c67ade2c767fea92ffedf66e04dd4cbe6683f3c6","modified":1512634295141},{"_id":"public/images/blogimages/2017/im_company_abroad/im_sendbird.png","hash":"541226b66fbf291d61d3d52c5c030b2f41ec8f94","modified":1512634295141},{"_id":"public/images/blogimages/2017/im_company_abroad/im_applozic.png","hash":"fc0a0a0145e92182e93048d2f48cfd0b2886af88","modified":1512634295141},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1512634295141},{"_id":"public/images/blogimages/2016/androidart_service2.png","hash":"afdf0ded0d671ec79a03fddbd253de15eb5248ea","modified":1512634295170},{"_id":"public/images/blogimages/2016/androidart_ipc.png","hash":"3f3a0ead6d747386983ab5618f46a2f0c33bd84e","modified":1512634295170},{"_id":"public/images/blogimages/2017/communication-timing.png","hash":"d1eeb3d916b557902714e42604eb428e8820e1d8","modified":1512634295171},{"_id":"public/images/blogimages/2017/media-server-process.png","hash":"43c087cbbcde726dca7c9db58f46f7fb33153a55","modified":1512634295171},{"_id":"public/images/blogimages/2017/system-service-register-process.png","hash":"a0f5a638c157a8cad7be85e1e232d15ecb8ac5de","modified":1512634295171},{"_id":"public/images/blogimages/2017/binder-example-media-detail.png","hash":"1b250dc477539c98519b7f752f5816edf6cecf98","modified":1512634295202},{"_id":"public/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Hybrid_-_Cisco.png","hash":"cb3f157655946b3b3609804e39a4596470d99f0d","modified":1512634295202},{"_id":"public/images/blogimages/cisco/Adobe_web_conferencing_software.png","hash":"adcf5f49b46dce8457f5b32acad726995c750b2e","modified":1512634295202},{"_id":"public/images/blogimages/2017/aosp_monitor_position.png","hash":"ac98da872053c9a6e5637304b33077727c7f29f2","modified":1512634295242},{"_id":"public/images/blogimages/cisco/Cisco_Collaboration_Meeting_Rooms_Premises_-_Cisco.png","hash":"3d2108f0c5cb9020d58e19fe77c47e594e07eb82","modified":1512634295243},{"_id":"public/images/blogimages/cisco/zoom_cloud_hybrid.png","hash":"006d3089661e40e800bd8b24f960412a81875181","modified":1512634295245},{"_id":"public/images/blogimages/cisco/VC5_5_3.png","hash":"25f7bbc61cec17c1c0b701f82fd18c0a9c070b89","modified":1512634295246},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1512634295246},{"_id":"public/images/blogimages/2017/binder-summary.png","hash":"0cc9038284ccce38e566e75459aa512fa2eccb75","modified":1512634295331},{"_id":"public/images/blogimages/2017/service-manager-activity.png","hash":"1e98a4ac00ef83968c28d1df7c84b0fa9fbdd100","modified":1512634295331},{"_id":"public/images/blogimages/cisco/Collaboration_Products_and_Solutions.png","hash":"85a88cd7196fd068952dfbe1eba2e7743b4b3fd8","modified":1512634295332},{"_id":"public/images/blogimages/cisco/VC5_5_4.png","hash":"9ce30296a85f313e2eecd16f876a48003c3fbb41","modified":1512634295410},{"_id":"public/images/blogimages/cisco/cmr_introduction.png","hash":"53bc162a868da6dc1f432caf5f58c302acd5693d","modified":1512634295410},{"_id":"public/images/blogimages/cisco/Adobe-Connect-Store.png","hash":"903d8df197da17ff185d835d7f5c61f1a021bad1","modified":1512634295418},{"_id":"public/images/blogimages/cisco/mx-700.png","hash":"8a6d2096c6e1c559558bfb65b7f27bfdcd293f88","modified":1512634295446},{"_id":"public/images/blogimages/cisco/Web_Conferencing__Video_Conferencing_Fuze.png","hash":"9d9e57804f57786b62aae008af1978d98a362bae","modified":1512634295449},{"_id":"public/images/blogimages/2017/im_company_abroad/im_comparation.png","hash":"7251d4e152770b0ce93f9000e44a71d5b5ccf9e5","modified":1512634295452}],"Category":[{"name":"accumulation","_id":"cjaw7ebvd0006d6yklfnfvm1k"},{"name":"read","_id":"cjaw7ebwd000gd6yktaurin3d"},{"name":"technology","_id":"cjaw7ebxh0011d6ykvpmfiasa"},{"name":"Investigation","_id":"cjaw7ec03002nd6ykv1w4bk0x"}],"Data":[],"Page":[{"title":"人不逍遥，名逍遥","layout":"about","_content":"","source":"about/index.md","raw":"title: \"人不逍遥，名逍遥\"\nlayout: \"about\"\n---\n","date":"2017-03-13T07:25:42.000Z","updated":"2017-03-13T07:25:42.000Z","path":"about/index.html","comments":1,"_id":"cjaw7ebuu0001d6ykyytt8pxu","content":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/about/index.html\">http://agehua.github.io/about/index.html</a></p>\n","readingTime":{"text":"1 min read","minutes":0.01,"time":600,"words":2},"excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/about/index.html\">http://agehua.github.io/about/index.html</a></p>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2016-12-26T10:41:15.000Z","updated":"2016-12-26T10:41:15.000Z","path":"categories/index.html","comments":1,"_id":"cjaw7ebv20003d6yk6hyxsy7m","content":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/categories/index.html\">http://agehua.github.io/categories/index.html</a></p>\n","readingTime":{"text":"1 min read","minutes":0.01,"time":600,"words":2},"excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/categories/index.html\">http://agehua.github.io/categories/index.html</a></p>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2017-07-18T07:35:27.000Z","updated":"2017-07-18T07:35:27.000Z","path":"tags/index.html","comments":1,"_id":"cjaw7ebv80005d6yk9atoyens","content":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/tags/index.html\">http://agehua.github.io/tags/index.html</a></p>\n","readingTime":{"text":"1 min read","minutes":0.01,"time":600,"words":2},"excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/tags/index.html\">http://agehua.github.io/tags/index.html</a></p>\n"}],"Post":[{"layout":"post","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n<!--more-->\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2014-12-23-hello-world.md","raw":"---\nlayout: post\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\n<!--more-->\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2014-12-22T16:00:00.000Z","updated":"2017-11-20T08:36:25.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebum0000d6ykpeyqwj9f","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2014/12/23/hello-world/\">http://agehua.github.io/2014/12/23/hello-world/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.59,"time":35400,"words":118},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2014/12/23/hello-world/\">http://agehua.github.io/2014/12/23/hello-world/</a></p>"},{"layout":"post","title":"Android优秀开源项目【持续更新】","keywords":"Android","description":"Android优秀开源项目收集","banner":"http://obxk8w81b.bkt.clouddn.com/At%20the%20Foot%20of%20the%20Mountains.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/At%20the%20Foot%20of%20the%20Mountains.jpg","_content":"\n一直想找些Android经典的开源项目学习一下，大健发现了这么一篇帖子，不少好东西，分享在此。希望能够对[Android开发](http://android.eoe.cn/)的同学有所帮助。感谢作者的整理和分享。[tisa007](http://my.eoe.cn/123581)\n原帖在[这里。](http://www.eoeandroid.com/thread-272453-1-1.html)\n\n### 项目篇：\n- [Apollo音乐播放器](https://github.com/Splitter/android_packages_apps_apolloMod)：就一个播放器，但是实现的很好\n- [oschina客户端](https://github.com/oschina/android-app)：oschina网站的客户端哦，wp版，iOS版都有开源\n- [xabber实时聊天工具（基于xmpp协议）](https://github.com/redsolution/xabber-android)：不评价了，反正算是同类中比较好的了\n- [四次元新浪微博客户端](https://github.com/qii/weiciyuan)：今天才知道是开源的，赶紧收藏\n- [Google IO](https://code.google.com/p/iosched/)：谷歌开发者大会应用，虽然有点难懂，还是很有参考价值（比如其中的图片加载）\n- [eoe客户端](https://github.com/eoecn/android-app/)：eoe网站Android客户端也开源咯，嘿嘿\n\n\n<!--more-->\n\n### 软件篇：\n- [Android-Flip](https://github.com/openaphid/android-flip)：可以实现类似FlipBoard那种华丽丽的翻页\n- [Drag-Sort-Listview](https://github.com/bauerca/drag-sort-listview)：可以拖动item重新排序的listview，效果非常赞\n- [HoloEveryWhere](https://github.com/Prototik/HoloEverywhere)：咳咳，有些同学非常喜欢Android的holo风格，这个项目绝对让你happy\n- [Universal-ImageLoader](https://github.com/tisa007/Android-Universal-Image-Loader)：这个经典的异步图片加载，不多说了\n- [JazzyViewPager](https://github.com/jfeinstein10/JazzyViewPager)：这玩意可以让ViewPager翻起来更酷，谁用谁知道~~\n- [SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)：这个是抽屉界面（就是facebook那种）的各种实现版本中，最好的，木有之一！\n- [StickyListHeaders](https://github.com/emilsjolander/StickyListHeaders)：iPhone上经常有这个，就是listview的……不知道怎么解释，自己下载看看吧\n- [Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)：下拉刷新，挺常用的一个组件\n- [StaggeredGridView](https://github.com/maurycyw/StaggeredGridView)：这是一个瀑布流布局的实现，还不是很完善，但作为学习的案例或者在其基础上扩展还是不错的\n- [android-async-http](https://github.com/loopj/android-async-http)：android的异步请求组件，我个人习惯使用asynctask，不过这个实现还是很优秀的，也推荐给大家\n- [ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock?source=cr)：大家熟知的ActionBar在2.x上的兼容性方案；类似的兼容性组件还有许多，有时间为大家一一列出；\n- [facebook-android-sdk](https://github.com/facebook/facebook-android-sdk/)：不止是一个SDK那么简单哦，比某浪和某人的SDK强几个数量级；\n- [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids)：想在2.xSDK上使用Android 3.0新增的动画API，那就是它了；没用过的同学一定要试试哦，非常方便~\n- [android-swipelistview](https://github.com/47deg/android-swipelistview)：让listview的item可以向右滑动，新版Gmail和Pocket里面有用到哦~\n- [DataDroid](https://github.com/foxykeep/DataDroid)：Android的RESTful封装，没听过RESTful？你去死吧\n- [EventBus](https://github.com/greenrobot/EventBus)：和上面的DataDroid同样属于美化底层代码的，这个lib简化了不同组件之间的事件传递\n- [android-switch-backport](https://github.com/BoD/android-switch-backport)：Android3.0以上才有的switch，有好心人给迁移到2.x上了，哈\n- [PagerSlidingTabStrip](https://github.com/astuetz/PagerSlidingTabStrip)：最新版的GooglePlay的那个tab效果，可炫可炫了\n- [chromeview](https://github.com/pwnall/chromeview)：我们都知道webview，也知道Android的chrome又自己的内核，这个项目就是把chrome的内核给导出来做成一个chromeview了，大家可以在自己的项目里用，有兴趣的可以玩玩\n- [picasso](https://github.com/square/picasso)：来自square的图片异步加载，好像是最近才开源的，API风格很独特，哥很喜欢~\n\n### 顺便推荐大家几个网站：\n\n- [github](https://github.com/)：各种项目很多，就是不容易挖掘，但是开发者必备\n- [oschina](http://www.oschina.net/)：曾经一般，现在越做越好了，很多开源项目；\n- [eoeandroid](http://www.eoe.cn/code/android.html)：经过一番整理，现在非常强大；小作品居多；\n- [AndroidViews](http://www.androidviews.net/)：我曾经想做这么一个网站来着，很多开源组件的集合，嘿嘿\n- vogella:国外的一个教程网站，不是逗小孩玩的那种哦~\n\n大家都说github上面的项目不容易发现，但其实还是有办法的，比如：\n关注java项目排名：大家戳 [这个网址](https://github.com/languages/Java/most_watched)\n搜索“Android”，并按star排序：戳 [这里](https://github.com/search?q=android&type=Repositories&s=stars) 直达\n最后，还有一招，就是关注些牛人，他们通常会关注或fork一些很有水平的项目。\n","source":"_posts/2015-01-27-android-open-sources.md","raw":"---\nlayout: post\ntitle: Android优秀开源项目【持续更新】\ncategory: accumulation\ntags:\n  - ANDROID\n  - Open souces\nkeywords: Android\ndescription: Android优秀开源项目收集\nbanner: http://obxk8w81b.bkt.clouddn.com/At%20the%20Foot%20of%20the%20Mountains.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/At%20the%20Foot%20of%20the%20Mountains.jpg\n---\n\n一直想找些Android经典的开源项目学习一下，大健发现了这么一篇帖子，不少好东西，分享在此。希望能够对[Android开发](http://android.eoe.cn/)的同学有所帮助。感谢作者的整理和分享。[tisa007](http://my.eoe.cn/123581)\n原帖在[这里。](http://www.eoeandroid.com/thread-272453-1-1.html)\n\n### 项目篇：\n- [Apollo音乐播放器](https://github.com/Splitter/android_packages_apps_apolloMod)：就一个播放器，但是实现的很好\n- [oschina客户端](https://github.com/oschina/android-app)：oschina网站的客户端哦，wp版，iOS版都有开源\n- [xabber实时聊天工具（基于xmpp协议）](https://github.com/redsolution/xabber-android)：不评价了，反正算是同类中比较好的了\n- [四次元新浪微博客户端](https://github.com/qii/weiciyuan)：今天才知道是开源的，赶紧收藏\n- [Google IO](https://code.google.com/p/iosched/)：谷歌开发者大会应用，虽然有点难懂，还是很有参考价值（比如其中的图片加载）\n- [eoe客户端](https://github.com/eoecn/android-app/)：eoe网站Android客户端也开源咯，嘿嘿\n\n\n<!--more-->\n\n### 软件篇：\n- [Android-Flip](https://github.com/openaphid/android-flip)：可以实现类似FlipBoard那种华丽丽的翻页\n- [Drag-Sort-Listview](https://github.com/bauerca/drag-sort-listview)：可以拖动item重新排序的listview，效果非常赞\n- [HoloEveryWhere](https://github.com/Prototik/HoloEverywhere)：咳咳，有些同学非常喜欢Android的holo风格，这个项目绝对让你happy\n- [Universal-ImageLoader](https://github.com/tisa007/Android-Universal-Image-Loader)：这个经典的异步图片加载，不多说了\n- [JazzyViewPager](https://github.com/jfeinstein10/JazzyViewPager)：这玩意可以让ViewPager翻起来更酷，谁用谁知道~~\n- [SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)：这个是抽屉界面（就是facebook那种）的各种实现版本中，最好的，木有之一！\n- [StickyListHeaders](https://github.com/emilsjolander/StickyListHeaders)：iPhone上经常有这个，就是listview的……不知道怎么解释，自己下载看看吧\n- [Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)：下拉刷新，挺常用的一个组件\n- [StaggeredGridView](https://github.com/maurycyw/StaggeredGridView)：这是一个瀑布流布局的实现，还不是很完善，但作为学习的案例或者在其基础上扩展还是不错的\n- [android-async-http](https://github.com/loopj/android-async-http)：android的异步请求组件，我个人习惯使用asynctask，不过这个实现还是很优秀的，也推荐给大家\n- [ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock?source=cr)：大家熟知的ActionBar在2.x上的兼容性方案；类似的兼容性组件还有许多，有时间为大家一一列出；\n- [facebook-android-sdk](https://github.com/facebook/facebook-android-sdk/)：不止是一个SDK那么简单哦，比某浪和某人的SDK强几个数量级；\n- [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids)：想在2.xSDK上使用Android 3.0新增的动画API，那就是它了；没用过的同学一定要试试哦，非常方便~\n- [android-swipelistview](https://github.com/47deg/android-swipelistview)：让listview的item可以向右滑动，新版Gmail和Pocket里面有用到哦~\n- [DataDroid](https://github.com/foxykeep/DataDroid)：Android的RESTful封装，没听过RESTful？你去死吧\n- [EventBus](https://github.com/greenrobot/EventBus)：和上面的DataDroid同样属于美化底层代码的，这个lib简化了不同组件之间的事件传递\n- [android-switch-backport](https://github.com/BoD/android-switch-backport)：Android3.0以上才有的switch，有好心人给迁移到2.x上了，哈\n- [PagerSlidingTabStrip](https://github.com/astuetz/PagerSlidingTabStrip)：最新版的GooglePlay的那个tab效果，可炫可炫了\n- [chromeview](https://github.com/pwnall/chromeview)：我们都知道webview，也知道Android的chrome又自己的内核，这个项目就是把chrome的内核给导出来做成一个chromeview了，大家可以在自己的项目里用，有兴趣的可以玩玩\n- [picasso](https://github.com/square/picasso)：来自square的图片异步加载，好像是最近才开源的，API风格很独特，哥很喜欢~\n\n### 顺便推荐大家几个网站：\n\n- [github](https://github.com/)：各种项目很多，就是不容易挖掘，但是开发者必备\n- [oschina](http://www.oschina.net/)：曾经一般，现在越做越好了，很多开源项目；\n- [eoeandroid](http://www.eoe.cn/code/android.html)：经过一番整理，现在非常强大；小作品居多；\n- [AndroidViews](http://www.androidviews.net/)：我曾经想做这么一个网站来着，很多开源组件的集合，嘿嘿\n- vogella:国外的一个教程网站，不是逗小孩玩的那种哦~\n\n大家都说github上面的项目不容易发现，但其实还是有办法的，比如：\n关注java项目排名：大家戳 [这个网址](https://github.com/languages/Java/most_watched)\n搜索“Android”，并按star排序：戳 [这里](https://github.com/search?q=android&type=Repositories&s=stars) 直达\n最后，还有一招，就是关注些牛人，他们通常会关注或fork一些很有水平的项目。\n","slug":"android-open-sources","published":1,"date":"2015-01-26T16:00:00.000Z","updated":"2017-11-23T07:23:45.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebuy0002d6yk1k3u5h9m","content":"<p>一直想找些Android经典的开源项目学习一下，大健发现了这么一篇帖子，不少好东西，分享在此。希望能够对<a href=\"http://android.eoe.cn/\" target=\"_blank\" rel=\"external\">Android开发</a>的同学有所帮助。感谢作者的整理和分享。<a href=\"http://my.eoe.cn/123581\" target=\"_blank\" rel=\"external\">tisa007</a><br>原帖在<a href=\"http://www.eoeandroid.com/thread-272453-1-1.html\" target=\"_blank\" rel=\"external\">这里。</a></p>\n<h3 id=\"项目篇：\"><a href=\"#项目篇：\" class=\"headerlink\" title=\"项目篇：\"></a>项目篇：</h3><ul>\n<li><a href=\"https://github.com/Splitter/android_packages_apps_apolloMod\" target=\"_blank\" rel=\"external\">Apollo音乐播放器</a>：就一个播放器，但是实现的很好</li>\n<li><a href=\"https://github.com/oschina/android-app\" target=\"_blank\" rel=\"external\">oschina客户端</a>：oschina网站的客户端哦，wp版，iOS版都有开源</li>\n<li><a href=\"https://github.com/redsolution/xabber-android\" target=\"_blank\" rel=\"external\">xabber实时聊天工具（基于xmpp协议）</a>：不评价了，反正算是同类中比较好的了</li>\n<li><a href=\"https://github.com/qii/weiciyuan\" target=\"_blank\" rel=\"external\">四次元新浪微博客户端</a>：今天才知道是开源的，赶紧收藏</li>\n<li><a href=\"https://code.google.com/p/iosched/\" target=\"_blank\" rel=\"external\">Google IO</a>：谷歌开发者大会应用，虽然有点难懂，还是很有参考价值（比如其中的图片加载）</li>\n<li><a href=\"https://github.com/eoecn/android-app/\" target=\"_blank\" rel=\"external\">eoe客户端</a>：eoe网站Android客户端也开源咯，嘿嘿</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"软件篇：\"><a href=\"#软件篇：\" class=\"headerlink\" title=\"软件篇：\"></a>软件篇：</h3><ul>\n<li><a href=\"https://github.com/openaphid/android-flip\" target=\"_blank\" rel=\"external\">Android-Flip</a>：可以实现类似FlipBoard那种华丽丽的翻页</li>\n<li><a href=\"https://github.com/bauerca/drag-sort-listview\" target=\"_blank\" rel=\"external\">Drag-Sort-Listview</a>：可以拖动item重新排序的listview，效果非常赞</li>\n<li><a href=\"https://github.com/Prototik/HoloEverywhere\" target=\"_blank\" rel=\"external\">HoloEveryWhere</a>：咳咳，有些同学非常喜欢Android的holo风格，这个项目绝对让你happy</li>\n<li><a href=\"https://github.com/tisa007/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">Universal-ImageLoader</a>：这个经典的异步图片加载，不多说了</li>\n<li><a href=\"https://github.com/jfeinstein10/JazzyViewPager\" target=\"_blank\" rel=\"external\">JazzyViewPager</a>：这玩意可以让ViewPager翻起来更酷，谁用谁知道~~</li>\n<li><a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">SlidingMenu</a>：这个是抽屉界面（就是facebook那种）的各种实现版本中，最好的，木有之一！</li>\n<li><a href=\"https://github.com/emilsjolander/StickyListHeaders\" target=\"_blank\" rel=\"external\">StickyListHeaders</a>：iPhone上经常有这个，就是listview的……不知道怎么解释，自己下载看看吧</li>\n<li><a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">Android-PullToRefresh</a>：下拉刷新，挺常用的一个组件</li>\n<li><a href=\"https://github.com/maurycyw/StaggeredGridView\" target=\"_blank\" rel=\"external\">StaggeredGridView</a>：这是一个瀑布流布局的实现，还不是很完善，但作为学习的案例或者在其基础上扩展还是不错的</li>\n<li><a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">android-async-http</a>：android的异步请求组件，我个人习惯使用asynctask，不过这个实现还是很优秀的，也推荐给大家</li>\n<li><a href=\"https://github.com/JakeWharton/ActionBarSherlock?source=cr\" target=\"_blank\" rel=\"external\">ActionBarSherlock</a>：大家熟知的ActionBar在2.x上的兼容性方案；类似的兼容性组件还有许多，有时间为大家一一列出；</li>\n<li><a href=\"https://github.com/facebook/facebook-android-sdk/\" target=\"_blank\" rel=\"external\">facebook-android-sdk</a>：不止是一个SDK那么简单哦，比某浪和某人的SDK强几个数量级；</li>\n<li><a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">NineOldAndroids</a>：想在2.xSDK上使用Android 3.0新增的动画API，那就是它了；没用过的同学一定要试试哦，非常方便~</li>\n<li><a href=\"https://github.com/47deg/android-swipelistview\" target=\"_blank\" rel=\"external\">android-swipelistview</a>：让listview的item可以向右滑动，新版Gmail和Pocket里面有用到哦~</li>\n<li><a href=\"https://github.com/foxykeep/DataDroid\" target=\"_blank\" rel=\"external\">DataDroid</a>：Android的RESTful封装，没听过RESTful？你去死吧</li>\n<li><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">EventBus</a>：和上面的DataDroid同样属于美化底层代码的，这个lib简化了不同组件之间的事件传递</li>\n<li><a href=\"https://github.com/BoD/android-switch-backport\" target=\"_blank\" rel=\"external\">android-switch-backport</a>：Android3.0以上才有的switch，有好心人给迁移到2.x上了，哈</li>\n<li><a href=\"https://github.com/astuetz/PagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">PagerSlidingTabStrip</a>：最新版的GooglePlay的那个tab效果，可炫可炫了</li>\n<li><a href=\"https://github.com/pwnall/chromeview\" target=\"_blank\" rel=\"external\">chromeview</a>：我们都知道webview，也知道Android的chrome又自己的内核，这个项目就是把chrome的内核给导出来做成一个chromeview了，大家可以在自己的项目里用，有兴趣的可以玩玩</li>\n<li><a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">picasso</a>：来自square的图片异步加载，好像是最近才开源的，API风格很独特，哥很喜欢~</li>\n</ul>\n<h3 id=\"顺便推荐大家几个网站：\"><a href=\"#顺便推荐大家几个网站：\" class=\"headerlink\" title=\"顺便推荐大家几个网站：\"></a>顺便推荐大家几个网站：</h3><ul>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>：各种项目很多，就是不容易挖掘，但是开发者必备</li>\n<li><a href=\"http://www.oschina.net/\" target=\"_blank\" rel=\"external\">oschina</a>：曾经一般，现在越做越好了，很多开源项目；</li>\n<li><a href=\"http://www.eoe.cn/code/android.html\" target=\"_blank\" rel=\"external\">eoeandroid</a>：经过一番整理，现在非常强大；小作品居多；</li>\n<li><a href=\"http://www.androidviews.net/\" target=\"_blank\" rel=\"external\">AndroidViews</a>：我曾经想做这么一个网站来着，很多开源组件的集合，嘿嘿</li>\n<li>vogella:国外的一个教程网站，不是逗小孩玩的那种哦~</li>\n</ul>\n<p>大家都说github上面的项目不容易发现，但其实还是有办法的，比如：<br>关注java项目排名：大家戳 <a href=\"https://github.com/languages/Java/most_watched\" target=\"_blank\" rel=\"external\">这个网址</a><br>搜索“Android”，并按star排序：戳 <a href=\"https://github.com/search?q=android&amp;type=Repositories&amp;s=stars\" target=\"_blank\" rel=\"external\">这里</a> 直达<br>最后，还有一招，就是关注些牛人，他们通常会关注或fork一些很有水平的项目。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2015/01/27/android-open-sources/\">http://agehua.github.io/2015/01/27/android-open-sources/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.485,"time":29099.999999999996,"words":97},"excerpt":"<p>一直想找些Android经典的开源项目学习一下，大健发现了这么一篇帖子，不少好东西，分享在此。希望能够对<a href=\"http://android.eoe.cn/\">Android开发</a>的同学有所帮助。感谢作者的整理和分享。<a href=\"http://my.eoe.cn/123581\">tisa007</a><br>原帖在<a href=\"http://www.eoeandroid.com/thread-272453-1-1.html\">这里。</a></p>\n<h3 id=\"项目篇：\"><a href=\"#项目篇：\" class=\"headerlink\" title=\"项目篇：\"></a>项目篇：</h3><ul>\n<li><a href=\"https://github.com/Splitter/android_packages_apps_apolloMod\">Apollo音乐播放器</a>：就一个播放器，但是实现的很好</li>\n<li><a href=\"https://github.com/oschina/android-app\">oschina客户端</a>：oschina网站的客户端哦，wp版，iOS版都有开源</li>\n<li><a href=\"https://github.com/redsolution/xabber-android\">xabber实时聊天工具（基于xmpp协议）</a>：不评价了，反正算是同类中比较好的了</li>\n<li><a href=\"https://github.com/qii/weiciyuan\">四次元新浪微博客户端</a>：今天才知道是开源的，赶紧收藏</li>\n<li><a href=\"https://code.google.com/p/iosched/\">Google IO</a>：谷歌开发者大会应用，虽然有点难懂，还是很有参考价值（比如其中的图片加载）</li>\n<li><a href=\"https://github.com/eoecn/android-app/\">eoe客户端</a>：eoe网站Android客户端也开源咯，嘿嘿</li>\n</ul>","more":"<h3 id=\"软件篇：\"><a href=\"#软件篇：\" class=\"headerlink\" title=\"软件篇：\"></a>软件篇：</h3><ul>\n<li><a href=\"https://github.com/openaphid/android-flip\">Android-Flip</a>：可以实现类似FlipBoard那种华丽丽的翻页</li>\n<li><a href=\"https://github.com/bauerca/drag-sort-listview\">Drag-Sort-Listview</a>：可以拖动item重新排序的listview，效果非常赞</li>\n<li><a href=\"https://github.com/Prototik/HoloEverywhere\">HoloEveryWhere</a>：咳咳，有些同学非常喜欢Android的holo风格，这个项目绝对让你happy</li>\n<li><a href=\"https://github.com/tisa007/Android-Universal-Image-Loader\">Universal-ImageLoader</a>：这个经典的异步图片加载，不多说了</li>\n<li><a href=\"https://github.com/jfeinstein10/JazzyViewPager\">JazzyViewPager</a>：这玩意可以让ViewPager翻起来更酷，谁用谁知道~~</li>\n<li><a href=\"https://github.com/jfeinstein10/SlidingMenu\">SlidingMenu</a>：这个是抽屉界面（就是facebook那种）的各种实现版本中，最好的，木有之一！</li>\n<li><a href=\"https://github.com/emilsjolander/StickyListHeaders\">StickyListHeaders</a>：iPhone上经常有这个，就是listview的……不知道怎么解释，自己下载看看吧</li>\n<li><a href=\"https://github.com/chrisbanes/Android-PullToRefresh\">Android-PullToRefresh</a>：下拉刷新，挺常用的一个组件</li>\n<li><a href=\"https://github.com/maurycyw/StaggeredGridView\">StaggeredGridView</a>：这是一个瀑布流布局的实现，还不是很完善，但作为学习的案例或者在其基础上扩展还是不错的</li>\n<li><a href=\"https://github.com/loopj/android-async-http\">android-async-http</a>：android的异步请求组件，我个人习惯使用asynctask，不过这个实现还是很优秀的，也推荐给大家</li>\n<li><a href=\"https://github.com/JakeWharton/ActionBarSherlock?source=cr\">ActionBarSherlock</a>：大家熟知的ActionBar在2.x上的兼容性方案；类似的兼容性组件还有许多，有时间为大家一一列出；</li>\n<li><a href=\"https://github.com/facebook/facebook-android-sdk/\">facebook-android-sdk</a>：不止是一个SDK那么简单哦，比某浪和某人的SDK强几个数量级；</li>\n<li><a href=\"https://github.com/JakeWharton/NineOldAndroids\">NineOldAndroids</a>：想在2.xSDK上使用Android 3.0新增的动画API，那就是它了；没用过的同学一定要试试哦，非常方便~</li>\n<li><a href=\"https://github.com/47deg/android-swipelistview\">android-swipelistview</a>：让listview的item可以向右滑动，新版Gmail和Pocket里面有用到哦~</li>\n<li><a href=\"https://github.com/foxykeep/DataDroid\">DataDroid</a>：Android的RESTful封装，没听过RESTful？你去死吧</li>\n<li><a href=\"https://github.com/greenrobot/EventBus\">EventBus</a>：和上面的DataDroid同样属于美化底层代码的，这个lib简化了不同组件之间的事件传递</li>\n<li><a href=\"https://github.com/BoD/android-switch-backport\">android-switch-backport</a>：Android3.0以上才有的switch，有好心人给迁移到2.x上了，哈</li>\n<li><a href=\"https://github.com/astuetz/PagerSlidingTabStrip\">PagerSlidingTabStrip</a>：最新版的GooglePlay的那个tab效果，可炫可炫了</li>\n<li><a href=\"https://github.com/pwnall/chromeview\">chromeview</a>：我们都知道webview，也知道Android的chrome又自己的内核，这个项目就是把chrome的内核给导出来做成一个chromeview了，大家可以在自己的项目里用，有兴趣的可以玩玩</li>\n<li><a href=\"https://github.com/square/picasso\">picasso</a>：来自square的图片异步加载，好像是最近才开源的，API风格很独特，哥很喜欢~</li>\n</ul>\n<h3 id=\"顺便推荐大家几个网站：\"><a href=\"#顺便推荐大家几个网站：\" class=\"headerlink\" title=\"顺便推荐大家几个网站：\"></a>顺便推荐大家几个网站：</h3><ul>\n<li><a href=\"https://github.com/\">github</a>：各种项目很多，就是不容易挖掘，但是开发者必备</li>\n<li><a href=\"http://www.oschina.net/\">oschina</a>：曾经一般，现在越做越好了，很多开源项目；</li>\n<li><a href=\"http://www.eoe.cn/code/android.html\">eoeandroid</a>：经过一番整理，现在非常强大；小作品居多；</li>\n<li><a href=\"http://www.androidviews.net/\">AndroidViews</a>：我曾经想做这么一个网站来着，很多开源组件的集合，嘿嘿</li>\n<li>vogella:国外的一个教程网站，不是逗小孩玩的那种哦~</li>\n</ul>\n<p>大家都说github上面的项目不容易发现，但其实还是有办法的，比如：<br>关注java项目排名：大家戳 <a href=\"https://github.com/languages/Java/most_watched\">这个网址</a><br>搜索“Android”，并按star排序：戳 <a href=\"https://github.com/search?q=android&amp;type=Repositories&amp;s=stars\">这里</a> 直达<br>最后，还有一招，就是关注些牛人，他们通常会关注或fork一些很有水平的项目。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2015/01/27/android-open-sources/\">http://agehua.github.io/2015/01/27/android-open-sources/</a></p>"},{"layout":"post","title":"java多线程和并发面试问答","keywords":"java, 多线程, 并发","description":null,"banner":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%203.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%203.jpg","_content":"\n本文基于**酷勤网关于java多线程和并发面试题的文**章，进行了少量的整理和补充。[原文在这](http://www.kuqin.com/shuoit/20140708/341091.html)。\n\n------\n\n以下是正文：\n\n多线程和并发问题是Java技术面试中面试官比较喜欢问的问题之一。在这里，从面试的角度列出了大部分重要的问题，但是你仍然应该牢固的掌握Java多线程基础知识来对应日后碰到的问题。\n\n<!--more-->\n\n# Java多线程面试问题\n\n### 1. 什么是进程和线程？\n进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程；同一个进程中的多个线程之间可以并发执行。相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。在串行程序基础上引入线程和进程是为了提高程序的并发度，从而提高程序运行效率和响应时间。\n\n### 2. 进程和线程之间有什么不同？\n一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。\n\n- 简而言之,一个程序至少有一个进程,一个进程至少有一个线程。\n- 线程的划分尺度小于进程，使得多线程程序的并发性高。\n- 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，极大地提高了程序的运行效率。\n- 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n- 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。\n\n> 形象的讲，进程就是一个项目组，每个程序员就是里面的线程呀！当然一个程序员也可以叫做一个项目组，对应的就是一个进程只有一个线程。公司里面的任务是分配给项目组级别的，干活的就是其中的程序员。总的意思就是，进程和线程没有什么区别。\n吐槽的话：我的意思就是进程干不过来了，那就多开几个线程呀！from [JacobK](https://www.zhihu.com/question/21535820/answer/19120563)\n\n\n### 3. 多线程编程的好处是什么？\n- 在进程内创建、终止线程比创建、终止进程要快；\n- 同一进程内的线程间切换比进程间的切换要快,尤其是用户级线程间的切换。\n\n在多线程程序中，多个线程被并发的执行以提高程序的效率，CPU不会因为某个线程需要等待资源而进入空闲状态。多个线程共享堆内存(heap memory)，因此创建多个线程去执行一些任务会比创建多个进程更好。举个例子，Servlets比CGI更好，是因为Servlets支持多线程而CGI不支持。\n\n### 4. 用户线程和守护线程有什么区别？\n当我们在Java程序中创建一个线程，它就被称为用户线程。一个守护线程是在后台执行并且不会阻止JVM终止的线程。当没有用户线程在运行的时候，JVM关闭程序并且退出（与守护线程是否在运行没有关系）。一个守护线程创建的子线程依然是守护线程。**守护线程应用背景**：后台线程，比如可以收集某些系统状态的线程，发送email的线程，等不希望影响JVM的事情。\n\n### 5. 我们如何创建一个线程？\n有两种创建线程的方法：一是实现Runnable接口，然后将它传递给Thread的构造函数，创建一个Thread对象；二是直接继承Thread类。[Read more...](http://www.journaldev.com/1016/java-thread-example-extending-thread-class-and-implementing-runnable-interface)\n\n### 6. 有哪些不同的线程生命周期？\n当我们在Java程序中新建一个线程时，它的状态是New。当我们调用线程的start()方法时，状态被改变为Runnable。线程调度器会为Runnable线程池中的线程分配CPU时间并且讲它们的状态改变为Running。其他的线程状态还有Waiting，Blocked和Dead。[Read more...](http://www.journaldev.com/1044/life-cycle-of-thread-understanding-thread-states-in-java)\n\n- **新建（new Thread）**：当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。例如：`Thread  t1=new Thread()`;\n- **就绪（runnable）**：线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：`t1.start()`;\n- **运行（running）**：线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。\n- **死亡（dead）**：当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。\n- **自然终止**：正常运行run()方法后终止\n- **异常终止**：调用stop()方法让一个线程终止运行\n- **堵塞（blocked）**：由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。\n- **正在睡眠**：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。\n- **正在等待**：调用wait()方法。（调用motify()方法回到就绪状态）\n- **被另一个线程所阻塞**：调用suspend()方法。（调用resume()方法恢复）\n\n### 7. 可以直接调用Thread类的run()方法么？\n可以，但是如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread。start()方法。\n\n### 8. 如何让正在运行的线程暂停一段时间？\n我们可以使用Thread类的Sleep()方法让线程暂停一段时间。需要注意的是，这并不会让线程终止，一旦从休眠中唤醒线程，线程的状态将会被改变为Runnable，并且根据线程调度，它将得到执行。\n\n### 9. 你对线程优先级的理解是什么？\n线程的优先级越高，那么就可以分占相对多的CPU时间片。每个进程都有相应的优先级，**线程优先级决定它何时运行和占用CPU时间**。最终的优先级共分32级。是从0到31的数值，称为 **基本优先级别**。OS调度的是线程，**真正具有优先级的是线程**，而进程优先级是作为一个优先级Class存在。一个线程创建的时候，会继承进程的优先级。 外线程优先级可以用SetThreadPriority来进行微调。常用的桌面系统，都是分时操调度，根据线程的优先级来分配调度时间。我们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线程前执行。\n\n### 10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？\n线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。时间分片是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者线程等待的时间。线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。\n\n### 11. 在多线程中，什么是上下文切换(context-switching)？\n上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。\n\n### 12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？\n我们可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束。[Read more...](http://www.journaldev.com/1024/java-thread-join-example-with-explanation)\n> 线程实例的方法join()方法可以使得一个线程在另一个线程结束后再执行。如果join()方法在一个线程实例上调用，当前运行着的线程将阻塞直到这个线程实例完成了执行。在join()方法内设定超时，使得join()方法的影响在特定超时后无效。当超时时，主方法和任务线程申请运行的时候是平等的。然而，当涉及sleep时，join()方法依靠操作系统计时，所以你不应该假定join()方法将会等待你指定的时间。\n\n### 13.线程之间是如何通信的？\n线程间通信有三种方式：\n\na. 使用全局变量。进程中的线程间内存共享，这是比较常用的通信方式和交互方式。主要由于多个线程可能更改全局变量，因此全局变量最好声明为violate\n\nb. 使用消息实现通信。在Windows程序设计中，每一个线程都可以拥有自己的消息队列（UI线程默认自带消息队列和消息循环，工作线程需要手动实现消息循环），因此可以采用消息进行线程间通信sendMessage,postMessage。\n\n```\n1)定义消息#define WM_THREAD_SENDMSG=WM_USER+20;  \n2)添加消息函数声明afx_msg int OnTSendmsg();\n3)添加消息映射ON_MESSAGE(WM_THREAD_SENDMSG,OnTSM)\n4)添加OnTSM()的实现函数；\n5)在线程函数中添加PostMessage消息Post函数\n```\n\nc. 使用事件CEvent类实现线程间通信。Event对象有两种状态：有信号和无信号，线程可以监视处于有信号状态的事件，以便在适当的时候执行对事件的操作。\n\n```\n1)创建一个CEvent类的对象：CEvent threadStart;它默认处在未通信状态；\n2)threadStart.SetEvent();使其处于通信状态；\n3)调用WaitForSingleObject()来监视CEvent对象\n```\n\n当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait()notify()notifyAll()方法可以用于线程间通信关于资源的锁的状态。[Read more](http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example)\n\n### 14. 进程间通信方式及特点？\n进程是转入内存并准备执行的程序，每个程序都有私有的虚拟地址空间，由代码，数据以及它可利用的系统资源(如文件，管道)组成。多进程/多线程是windows操作系统的一个基本特征。Linux系统一般都统称为进程。\n\n由于不同的进程运行在各自不同的内存空间中，其中一个进程对于变量的修改另一方是无法感知的，因此，进程之间的消息传递不能通过变量或其他数据结构直接进行，只能通过进程间通信来完成。进程间通信是指**不同进程间进行数据共享和数据交换**。\n\n进程间通信方式：**文件和记录锁定，管道，有名管道，FIFO，信号量，信号，消息队列，共享内存，套接字**。[^14] [Read Read Read...](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n\n\n### 15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？\nJava的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法\n\n### 16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？\n当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。\n\n### 17. 为什么Thread类的sleep()和yield()方法是静态的？\nThread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。\n\n### 18. 如何确保线程安全？\n在Java中可以有很多方法来保证线程安全——同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile关键字，使用不变类和线程安全类。[Read more](http://www.journaldev.com/1061/java-synchronization-and-thread-safety-tutorial-with-examples)\n\n### 19. volatile关键字在Java中有什么作用？\n当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。\n\n### 20. 同步方法和同步块，哪个是更好的选择？\n同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。\n\n### 21. 如何创建守护线程？\n使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常。\n\n### 22. 什么是ThreadLocal?\nThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。\n\n每个线程都会拥有他们自己的Thread变量，它们可以使用get()set()方法去获取他们的默认值或者在线程内部改变他们的值。ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性。[Read more](http://www.journaldev.com/1076/java-threadlocal-example-to-create-thread-local-variables)。\n\n### 23. 什么是死锁(Deadlock)？如何避免死锁？\n死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。死锁的四个必要条件：\n- **互斥（Mutual exclusion）**：存在这样一种资源，它在某个时刻只能被分配给一个执行绪（也称为线程）使用；\n- **持有（Hold and wait）**：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但无需释放该资源，而且还可以继续请求更多资源；\n- **不可剥夺（No preemption）**：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；\n- **环形等待（Circular wait）**：若干执行绪以不同的次序获取互斥资源，从而形成环形等待的局面，想象在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。\n\n在系统中已经出现死锁后，应该及时检测到死锁的发生，并采取适当的措施来解除死锁。目前处理死锁的方法可归结为[四种](http://blog.csdn.net/joejames/article/details/37960873)\n\n### 24. 什么是线程池？如何创建一个Java线程池？\n一个线程池管理了一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。\n\njava.util.concurrent.Executors提供了一个java.util.concurrent.Executor接口的实现用于创建线程池。[如何创建和使用线程池](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)\n\n# Java并发面试问题\n\n### 1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？\n原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。\n\nint++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。\n\n为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。[Read more](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)。\n\n### 2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？\nLock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的条件对象。它的优势有：\n- 可以使锁更公平\n- 可以使线程在等待锁的时候响应中断\n- 可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间\n- 可以在不同的范围，以不同的顺序获取和释放锁\n\n### 3. 什么是Executors框架？\nExecutor框架同java.util.concurrent.Executor 接口在Java5中被引入。Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。\n\n无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。[Read more](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)\n\n### 4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\njava.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。\n\n阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出NullPointerException。\n\n阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的并发控制。\n\nBlockingQueue接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。[使用阻塞队列实现生产者-消费者问题](http://www.journaldev.com/1034/java-blockingqueue-example-implementing-producer-consumer-problem)。\n\n### 5. 什么是并发容器的实现？\nJava集合类都是快速失败的，这就意味着当集合被改变且一个线程在使用迭代器遍历集合的时候，迭代器的next()方法将抛出ConcurrentModificationException异常。\n\n并发容器支持并发的遍历和并发的更新。\n\n主要的类有ConcurrentHashMap, CopyOnWriteArrayList 和CopyOnWriteArraySet。\n\n### 6. Executors类是什么？\nExecutors为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供了一些工具方法。\n\nExecutors可以用于方便的创建线程池。\n\n# 好文推荐\n\n### [秒杀多线程面试题系列](http://blog.csdn.net/column/details/killthreadseries.html)\n\n### [进程通信方式及特点](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n\n-----\n\n[^1-3]: [进程与线程及其区别](http://blog.chinaunix.net/uid-21411227-id-1826748.html)\n[^14]: [进程通信方式及特点](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n","source":"_posts/2015-03-16-java-multithreading-concurrent.md","raw":"---\nlayout: post\ntitle: java多线程和并发面试问答\ncategory: accumulation\ntags:\n  - Java\n  - multi-thread\n  - Interview Knowledge\nkeywords: java, 多线程, 并发\ndescription:\nbanner: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%203.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%203.jpg\n---\n\n本文基于**酷勤网关于java多线程和并发面试题的文**章，进行了少量的整理和补充。[原文在这](http://www.kuqin.com/shuoit/20140708/341091.html)。\n\n------\n\n以下是正文：\n\n多线程和并发问题是Java技术面试中面试官比较喜欢问的问题之一。在这里，从面试的角度列出了大部分重要的问题，但是你仍然应该牢固的掌握Java多线程基础知识来对应日后碰到的问题。\n\n<!--more-->\n\n# Java多线程面试问题\n\n### 1. 什么是进程和线程？\n进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。\n\n线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程；同一个进程中的多个线程之间可以并发执行。相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。在串行程序基础上引入线程和进程是为了提高程序的并发度，从而提高程序运行效率和响应时间。\n\n### 2. 进程和线程之间有什么不同？\n一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。\n\n- 简而言之,一个程序至少有一个进程,一个进程至少有一个线程。\n- 线程的划分尺度小于进程，使得多线程程序的并发性高。\n- 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，极大地提高了程序的运行效率。\n- 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。\n- 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。\n\n> 形象的讲，进程就是一个项目组，每个程序员就是里面的线程呀！当然一个程序员也可以叫做一个项目组，对应的就是一个进程只有一个线程。公司里面的任务是分配给项目组级别的，干活的就是其中的程序员。总的意思就是，进程和线程没有什么区别。\n吐槽的话：我的意思就是进程干不过来了，那就多开几个线程呀！from [JacobK](https://www.zhihu.com/question/21535820/answer/19120563)\n\n\n### 3. 多线程编程的好处是什么？\n- 在进程内创建、终止线程比创建、终止进程要快；\n- 同一进程内的线程间切换比进程间的切换要快,尤其是用户级线程间的切换。\n\n在多线程程序中，多个线程被并发的执行以提高程序的效率，CPU不会因为某个线程需要等待资源而进入空闲状态。多个线程共享堆内存(heap memory)，因此创建多个线程去执行一些任务会比创建多个进程更好。举个例子，Servlets比CGI更好，是因为Servlets支持多线程而CGI不支持。\n\n### 4. 用户线程和守护线程有什么区别？\n当我们在Java程序中创建一个线程，它就被称为用户线程。一个守护线程是在后台执行并且不会阻止JVM终止的线程。当没有用户线程在运行的时候，JVM关闭程序并且退出（与守护线程是否在运行没有关系）。一个守护线程创建的子线程依然是守护线程。**守护线程应用背景**：后台线程，比如可以收集某些系统状态的线程，发送email的线程，等不希望影响JVM的事情。\n\n### 5. 我们如何创建一个线程？\n有两种创建线程的方法：一是实现Runnable接口，然后将它传递给Thread的构造函数，创建一个Thread对象；二是直接继承Thread类。[Read more...](http://www.journaldev.com/1016/java-thread-example-extending-thread-class-and-implementing-runnable-interface)\n\n### 6. 有哪些不同的线程生命周期？\n当我们在Java程序中新建一个线程时，它的状态是New。当我们调用线程的start()方法时，状态被改变为Runnable。线程调度器会为Runnable线程池中的线程分配CPU时间并且讲它们的状态改变为Running。其他的线程状态还有Waiting，Blocked和Dead。[Read more...](http://www.journaldev.com/1044/life-cycle-of-thread-understanding-thread-states-in-java)\n\n- **新建（new Thread）**：当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。例如：`Thread  t1=new Thread()`;\n- **就绪（runnable）**：线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：`t1.start()`;\n- **运行（running）**：线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。\n- **死亡（dead）**：当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。\n- **自然终止**：正常运行run()方法后终止\n- **异常终止**：调用stop()方法让一个线程终止运行\n- **堵塞（blocked）**：由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。\n- **正在睡眠**：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。\n- **正在等待**：调用wait()方法。（调用motify()方法回到就绪状态）\n- **被另一个线程所阻塞**：调用suspend()方法。（调用resume()方法恢复）\n\n### 7. 可以直接调用Thread类的run()方法么？\n可以，但是如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread。start()方法。\n\n### 8. 如何让正在运行的线程暂停一段时间？\n我们可以使用Thread类的Sleep()方法让线程暂停一段时间。需要注意的是，这并不会让线程终止，一旦从休眠中唤醒线程，线程的状态将会被改变为Runnable，并且根据线程调度，它将得到执行。\n\n### 9. 你对线程优先级的理解是什么？\n线程的优先级越高，那么就可以分占相对多的CPU时间片。每个进程都有相应的优先级，**线程优先级决定它何时运行和占用CPU时间**。最终的优先级共分32级。是从0到31的数值，称为 **基本优先级别**。OS调度的是线程，**真正具有优先级的是线程**，而进程优先级是作为一个优先级Class存在。一个线程创建的时候，会继承进程的优先级。 外线程优先级可以用SetThreadPriority来进行微调。常用的桌面系统，都是分时操调度，根据线程的优先级来分配调度时间。我们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线程前执行。\n\n### 10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？\n线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。时间分片是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者线程等待的时间。线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。\n\n### 11. 在多线程中，什么是上下文切换(context-switching)？\n上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。\n\n### 12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？\n我们可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束。[Read more...](http://www.journaldev.com/1024/java-thread-join-example-with-explanation)\n> 线程实例的方法join()方法可以使得一个线程在另一个线程结束后再执行。如果join()方法在一个线程实例上调用，当前运行着的线程将阻塞直到这个线程实例完成了执行。在join()方法内设定超时，使得join()方法的影响在特定超时后无效。当超时时，主方法和任务线程申请运行的时候是平等的。然而，当涉及sleep时，join()方法依靠操作系统计时，所以你不应该假定join()方法将会等待你指定的时间。\n\n### 13.线程之间是如何通信的？\n线程间通信有三种方式：\n\na. 使用全局变量。进程中的线程间内存共享，这是比较常用的通信方式和交互方式。主要由于多个线程可能更改全局变量，因此全局变量最好声明为violate\n\nb. 使用消息实现通信。在Windows程序设计中，每一个线程都可以拥有自己的消息队列（UI线程默认自带消息队列和消息循环，工作线程需要手动实现消息循环），因此可以采用消息进行线程间通信sendMessage,postMessage。\n\n```\n1)定义消息#define WM_THREAD_SENDMSG=WM_USER+20;  \n2)添加消息函数声明afx_msg int OnTSendmsg();\n3)添加消息映射ON_MESSAGE(WM_THREAD_SENDMSG,OnTSM)\n4)添加OnTSM()的实现函数；\n5)在线程函数中添加PostMessage消息Post函数\n```\n\nc. 使用事件CEvent类实现线程间通信。Event对象有两种状态：有信号和无信号，线程可以监视处于有信号状态的事件，以便在适当的时候执行对事件的操作。\n\n```\n1)创建一个CEvent类的对象：CEvent threadStart;它默认处在未通信状态；\n2)threadStart.SetEvent();使其处于通信状态；\n3)调用WaitForSingleObject()来监视CEvent对象\n```\n\n当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait()notify()notifyAll()方法可以用于线程间通信关于资源的锁的状态。[Read more](http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example)\n\n### 14. 进程间通信方式及特点？\n进程是转入内存并准备执行的程序，每个程序都有私有的虚拟地址空间，由代码，数据以及它可利用的系统资源(如文件，管道)组成。多进程/多线程是windows操作系统的一个基本特征。Linux系统一般都统称为进程。\n\n由于不同的进程运行在各自不同的内存空间中，其中一个进程对于变量的修改另一方是无法感知的，因此，进程之间的消息传递不能通过变量或其他数据结构直接进行，只能通过进程间通信来完成。进程间通信是指**不同进程间进行数据共享和数据交换**。\n\n进程间通信方式：**文件和记录锁定，管道，有名管道，FIFO，信号量，信号，消息队列，共享内存，套接字**。[^14] [Read Read Read...](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n\n\n### 15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？\nJava的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法\n\n### 16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？\n当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。\n\n### 17. 为什么Thread类的sleep()和yield()方法是静态的？\nThread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。\n\n### 18. 如何确保线程安全？\n在Java中可以有很多方法来保证线程安全——同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile关键字，使用不变类和线程安全类。[Read more](http://www.journaldev.com/1061/java-synchronization-and-thread-safety-tutorial-with-examples)\n\n### 19. volatile关键字在Java中有什么作用？\n当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。\n\n### 20. 同步方法和同步块，哪个是更好的选择？\n同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。\n\n### 21. 如何创建守护线程？\n使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常。\n\n### 22. 什么是ThreadLocal?\nThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。\n\n每个线程都会拥有他们自己的Thread变量，它们可以使用get()set()方法去获取他们的默认值或者在线程内部改变他们的值。ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性。[Read more](http://www.journaldev.com/1076/java-threadlocal-example-to-create-thread-local-variables)。\n\n### 23. 什么是死锁(Deadlock)？如何避免死锁？\n死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。死锁的四个必要条件：\n- **互斥（Mutual exclusion）**：存在这样一种资源，它在某个时刻只能被分配给一个执行绪（也称为线程）使用；\n- **持有（Hold and wait）**：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但无需释放该资源，而且还可以继续请求更多资源；\n- **不可剥夺（No preemption）**：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；\n- **环形等待（Circular wait）**：若干执行绪以不同的次序获取互斥资源，从而形成环形等待的局面，想象在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。\n\n在系统中已经出现死锁后，应该及时检测到死锁的发生，并采取适当的措施来解除死锁。目前处理死锁的方法可归结为[四种](http://blog.csdn.net/joejames/article/details/37960873)\n\n### 24. 什么是线程池？如何创建一个Java线程池？\n一个线程池管理了一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。\n\njava.util.concurrent.Executors提供了一个java.util.concurrent.Executor接口的实现用于创建线程池。[如何创建和使用线程池](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)\n\n# Java并发面试问题\n\n### 1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？\n原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。\n\nint++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。\n\n为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。[Read more](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)。\n\n### 2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？\nLock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的条件对象。它的优势有：\n- 可以使锁更公平\n- 可以使线程在等待锁的时候响应中断\n- 可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间\n- 可以在不同的范围，以不同的顺序获取和释放锁\n\n### 3. 什么是Executors框架？\nExecutor框架同java.util.concurrent.Executor 接口在Java5中被引入。Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。\n\n无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。[Read more](http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor)\n\n### 4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\njava.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。\n\n阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出NullPointerException。\n\n阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的并发控制。\n\nBlockingQueue接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。[使用阻塞队列实现生产者-消费者问题](http://www.journaldev.com/1034/java-blockingqueue-example-implementing-producer-consumer-problem)。\n\n### 5. 什么是并发容器的实现？\nJava集合类都是快速失败的，这就意味着当集合被改变且一个线程在使用迭代器遍历集合的时候，迭代器的next()方法将抛出ConcurrentModificationException异常。\n\n并发容器支持并发的遍历和并发的更新。\n\n主要的类有ConcurrentHashMap, CopyOnWriteArrayList 和CopyOnWriteArraySet。\n\n### 6. Executors类是什么？\nExecutors为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供了一些工具方法。\n\nExecutors可以用于方便的创建线程池。\n\n# 好文推荐\n\n### [秒杀多线程面试题系列](http://blog.csdn.net/column/details/killthreadseries.html)\n\n### [进程通信方式及特点](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n\n-----\n\n[^1-3]: [进程与线程及其区别](http://blog.chinaunix.net/uid-21411227-id-1826748.html)\n[^14]: [进程通信方式及特点](http://blog.csdn.net/chenhuajie123/article/details/9315477)\n","slug":"java-multithreading-concurrent","published":1,"date":"2015-03-15T16:00:00.000Z","updated":"2017-11-23T06:58:42.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebv50004d6ykpui4ccos","content":"<p>本文基于<strong>酷勤网关于java多线程和并发面试题的文</strong>章，进行了少量的整理和补充。<a href=\"http://www.kuqin.com/shuoit/20140708/341091.html\" target=\"_blank\" rel=\"external\">原文在这</a>。</p>\n<hr>\n<p>以下是正文：</p>\n<p>多线程和并发问题是Java技术面试中面试官比较喜欢问的问题之一。在这里，从面试的角度列出了大部分重要的问题，但是你仍然应该牢固的掌握Java多线程基础知识来对应日后碰到的问题。</p>\n<a id=\"more\"></a>\n<h1 id=\"Java多线程面试问题\"><a href=\"#Java多线程面试问题\" class=\"headerlink\" title=\"Java多线程面试问题\"></a>Java多线程面试问题</h1><h3 id=\"1-什么是进程和线程？\"><a href=\"#1-什么是进程和线程？\" class=\"headerlink\" title=\"1. 什么是进程和线程？\"></a>1. 什么是进程和线程？</h3><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程；同一个进程中的多个线程之间可以并发执行。相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。在串行程序基础上引入线程和进程是为了提高程序的并发度，从而提高程序运行效率和响应时间。</p>\n<h3 id=\"2-进程和线程之间有什么不同？\"><a href=\"#2-进程和线程之间有什么不同？\" class=\"headerlink\" title=\"2. 进程和线程之间有什么不同？\"></a>2. 进程和线程之间有什么不同？</h3><p>一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。</p>\n<ul>\n<li>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。</li>\n<li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li>\n<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，极大地提高了程序的运行效率。</li>\n<li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li>\n<li>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li>\n</ul>\n<blockquote>\n<p>形象的讲，进程就是一个项目组，每个程序员就是里面的线程呀！当然一个程序员也可以叫做一个项目组，对应的就是一个进程只有一个线程。公司里面的任务是分配给项目组级别的，干活的就是其中的程序员。总的意思就是，进程和线程没有什么区别。<br>吐槽的话：我的意思就是进程干不过来了，那就多开几个线程呀！from <a href=\"https://www.zhihu.com/question/21535820/answer/19120563\" target=\"_blank\" rel=\"external\">JacobK</a></p>\n</blockquote>\n<h3 id=\"3-多线程编程的好处是什么？\"><a href=\"#3-多线程编程的好处是什么？\" class=\"headerlink\" title=\"3. 多线程编程的好处是什么？\"></a>3. 多线程编程的好处是什么？</h3><ul>\n<li>在进程内创建、终止线程比创建、终止进程要快；</li>\n<li>同一进程内的线程间切换比进程间的切换要快,尤其是用户级线程间的切换。</li>\n</ul>\n<p>在多线程程序中，多个线程被并发的执行以提高程序的效率，CPU不会因为某个线程需要等待资源而进入空闲状态。多个线程共享堆内存(heap memory)，因此创建多个线程去执行一些任务会比创建多个进程更好。举个例子，Servlets比CGI更好，是因为Servlets支持多线程而CGI不支持。</p>\n<h3 id=\"4-用户线程和守护线程有什么区别？\"><a href=\"#4-用户线程和守护线程有什么区别？\" class=\"headerlink\" title=\"4. 用户线程和守护线程有什么区别？\"></a>4. 用户线程和守护线程有什么区别？</h3><p>当我们在Java程序中创建一个线程，它就被称为用户线程。一个守护线程是在后台执行并且不会阻止JVM终止的线程。当没有用户线程在运行的时候，JVM关闭程序并且退出（与守护线程是否在运行没有关系）。一个守护线程创建的子线程依然是守护线程。<strong>守护线程应用背景</strong>：后台线程，比如可以收集某些系统状态的线程，发送email的线程，等不希望影响JVM的事情。</p>\n<h3 id=\"5-我们如何创建一个线程？\"><a href=\"#5-我们如何创建一个线程？\" class=\"headerlink\" title=\"5. 我们如何创建一个线程？\"></a>5. 我们如何创建一个线程？</h3><p>有两种创建线程的方法：一是实现Runnable接口，然后将它传递给Thread的构造函数，创建一个Thread对象；二是直接继承Thread类。<a href=\"http://www.journaldev.com/1016/java-thread-example-extending-thread-class-and-implementing-runnable-interface\" target=\"_blank\" rel=\"external\">Read more…</a></p>\n<h3 id=\"6-有哪些不同的线程生命周期？\"><a href=\"#6-有哪些不同的线程生命周期？\" class=\"headerlink\" title=\"6. 有哪些不同的线程生命周期？\"></a>6. 有哪些不同的线程生命周期？</h3><p>当我们在Java程序中新建一个线程时，它的状态是New。当我们调用线程的start()方法时，状态被改变为Runnable。线程调度器会为Runnable线程池中的线程分配CPU时间并且讲它们的状态改变为Running。其他的线程状态还有Waiting，Blocked和Dead。<a href=\"http://www.journaldev.com/1044/life-cycle-of-thread-understanding-thread-states-in-java\" target=\"_blank\" rel=\"external\">Read more…</a></p>\n<ul>\n<li><strong>新建（new Thread）</strong>：当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。例如：<code>Thread  t1=new Thread()</code>;</li>\n<li><strong>就绪（runnable）</strong>：线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：<code>t1.start()</code>;</li>\n<li><strong>运行（running）</strong>：线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。</li>\n<li><strong>死亡（dead）</strong>：当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。</li>\n<li><strong>自然终止</strong>：正常运行run()方法后终止</li>\n<li><strong>异常终止</strong>：调用stop()方法让一个线程终止运行</li>\n<li><strong>堵塞（blocked）</strong>：由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。</li>\n<li><strong>正在睡眠</strong>：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。</li>\n<li><strong>正在等待</strong>：调用wait()方法。（调用motify()方法回到就绪状态）</li>\n<li><strong>被另一个线程所阻塞</strong>：调用suspend()方法。（调用resume()方法恢复）</li>\n</ul>\n<h3 id=\"7-可以直接调用Thread类的run-方法么？\"><a href=\"#7-可以直接调用Thread类的run-方法么？\" class=\"headerlink\" title=\"7. 可以直接调用Thread类的run()方法么？\"></a>7. 可以直接调用Thread类的run()方法么？</h3><p>可以，但是如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread。start()方法。</p>\n<h3 id=\"8-如何让正在运行的线程暂停一段时间？\"><a href=\"#8-如何让正在运行的线程暂停一段时间？\" class=\"headerlink\" title=\"8. 如何让正在运行的线程暂停一段时间？\"></a>8. 如何让正在运行的线程暂停一段时间？</h3><p>我们可以使用Thread类的Sleep()方法让线程暂停一段时间。需要注意的是，这并不会让线程终止，一旦从休眠中唤醒线程，线程的状态将会被改变为Runnable，并且根据线程调度，它将得到执行。</p>\n<h3 id=\"9-你对线程优先级的理解是什么？\"><a href=\"#9-你对线程优先级的理解是什么？\" class=\"headerlink\" title=\"9. 你对线程优先级的理解是什么？\"></a>9. 你对线程优先级的理解是什么？</h3><p>线程的优先级越高，那么就可以分占相对多的CPU时间片。每个进程都有相应的优先级，<strong>线程优先级决定它何时运行和占用CPU时间</strong>。最终的优先级共分32级。是从0到31的数值，称为 <strong>基本优先级别</strong>。OS调度的是线程，<strong>真正具有优先级的是线程</strong>，而进程优先级是作为一个优先级Class存在。一个线程创建的时候，会继承进程的优先级。 外线程优先级可以用SetThreadPriority来进行微调。常用的桌面系统，都是分时操调度，根据线程的优先级来分配调度时间。我们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线程前执行。</p>\n<h3 id=\"10-什么是线程调度器-Thread-Scheduler-和时间分片-Time-Slicing-？\"><a href=\"#10-什么是线程调度器-Thread-Scheduler-和时间分片-Time-Slicing-？\" class=\"headerlink\" title=\"10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？\"></a>10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？</h3><p>线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。时间分片是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者线程等待的时间。线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。</p>\n<h3 id=\"11-在多线程中，什么是上下文切换-context-switching-？\"><a href=\"#11-在多线程中，什么是上下文切换-context-switching-？\" class=\"headerlink\" title=\"11. 在多线程中，什么是上下文切换(context-switching)？\"></a>11. 在多线程中，什么是上下文切换(context-switching)？</h3><p>上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。</p>\n<h3 id=\"12-你如何确保main-方法所在的线程是Java程序最后结束的线程？\"><a href=\"#12-你如何确保main-方法所在的线程是Java程序最后结束的线程？\" class=\"headerlink\" title=\"12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？\"></a>12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？</h3><p>我们可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束。<a href=\"http://www.journaldev.com/1024/java-thread-join-example-with-explanation\" target=\"_blank\" rel=\"external\">Read more…</a></p>\n<blockquote>\n<p>线程实例的方法join()方法可以使得一个线程在另一个线程结束后再执行。如果join()方法在一个线程实例上调用，当前运行着的线程将阻塞直到这个线程实例完成了执行。在join()方法内设定超时，使得join()方法的影响在特定超时后无效。当超时时，主方法和任务线程申请运行的时候是平等的。然而，当涉及sleep时，join()方法依靠操作系统计时，所以你不应该假定join()方法将会等待你指定的时间。</p>\n</blockquote>\n<h3 id=\"13-线程之间是如何通信的？\"><a href=\"#13-线程之间是如何通信的？\" class=\"headerlink\" title=\"13.线程之间是如何通信的？\"></a>13.线程之间是如何通信的？</h3><p>线程间通信有三种方式：</p>\n<p>a. 使用全局变量。进程中的线程间内存共享，这是比较常用的通信方式和交互方式。主要由于多个线程可能更改全局变量，因此全局变量最好声明为violate</p>\n<p>b. 使用消息实现通信。在Windows程序设计中，每一个线程都可以拥有自己的消息队列（UI线程默认自带消息队列和消息循环，工作线程需要手动实现消息循环），因此可以采用消息进行线程间通信sendMessage,postMessage。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1)定义消息#define WM_THREAD_SENDMSG=WM_USER+20;  </div><div class=\"line\">2)添加消息函数声明afx_msg int OnTSendmsg();</div><div class=\"line\">3)添加消息映射ON_MESSAGE(WM_THREAD_SENDMSG,OnTSM)</div><div class=\"line\">4)添加OnTSM()的实现函数；</div><div class=\"line\">5)在线程函数中添加PostMessage消息Post函数</div></pre></td></tr></table></figure>\n<p>c. 使用事件CEvent类实现线程间通信。Event对象有两种状态：有信号和无信号，线程可以监视处于有信号状态的事件，以便在适当的时候执行对事件的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1)创建一个CEvent类的对象：CEvent threadStart;它默认处在未通信状态；</div><div class=\"line\">2)threadStart.SetEvent();使其处于通信状态；</div><div class=\"line\">3)调用WaitForSingleObject()来监视CEvent对象</div></pre></td></tr></table></figure>\n<p>当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait()notify()notifyAll()方法可以用于线程间通信关于资源的锁的状态。<a href=\"http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example\" target=\"_blank\" rel=\"external\">Read more</a></p>\n<h3 id=\"14-进程间通信方式及特点？\"><a href=\"#14-进程间通信方式及特点？\" class=\"headerlink\" title=\"14. 进程间通信方式及特点？\"></a>14. 进程间通信方式及特点？</h3><p>进程是转入内存并准备执行的程序，每个程序都有私有的虚拟地址空间，由代码，数据以及它可利用的系统资源(如文件，管道)组成。多进程/多线程是windows操作系统的一个基本特征。Linux系统一般都统称为进程。</p>\n<p>由于不同的进程运行在各自不同的内存空间中，其中一个进程对于变量的修改另一方是无法感知的，因此，进程之间的消息传递不能通过变量或其他数据结构直接进行，只能通过进程间通信来完成。进程间通信是指<strong>不同进程间进行数据共享和数据交换</strong>。</p>\n<p>进程间通信方式：<strong>文件和记录锁定，管道，有名管道，FIFO，信号量，信号，消息队列，共享内存，套接字</strong>。[^14] <a href=\"http://blog.csdn.net/chenhuajie123/article/details/9315477\" target=\"_blank\" rel=\"external\">Read Read Read…</a></p>\n<h3 id=\"15-为什么线程通信的方法wait-notify-和notifyAll-被定义在Object类里？\"><a href=\"#15-为什么线程通信的方法wait-notify-和notifyAll-被定义在Object类里？\" class=\"headerlink\" title=\"15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？\"></a>15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？</h3><p>Java的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法</p>\n<h3 id=\"16-为什么wait-notify-和notifyAll-必须在同步方法或者同步块中被调用？\"><a href=\"#16-为什么wait-notify-和notifyAll-必须在同步方法或者同步块中被调用？\" class=\"headerlink\" title=\"16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？\"></a>16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？</h3><p>当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。</p>\n<h3 id=\"17-为什么Thread类的sleep-和yield-方法是静态的？\"><a href=\"#17-为什么Thread类的sleep-和yield-方法是静态的？\" class=\"headerlink\" title=\"17. 为什么Thread类的sleep()和yield()方法是静态的？\"></a>17. 为什么Thread类的sleep()和yield()方法是静态的？</h3><p>Thread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。</p>\n<h3 id=\"18-如何确保线程安全？\"><a href=\"#18-如何确保线程安全？\" class=\"headerlink\" title=\"18. 如何确保线程安全？\"></a>18. 如何确保线程安全？</h3><p>在Java中可以有很多方法来保证线程安全——同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile关键字，使用不变类和线程安全类。<a href=\"http://www.journaldev.com/1061/java-synchronization-and-thread-safety-tutorial-with-examples\" target=\"_blank\" rel=\"external\">Read more</a></p>\n<h3 id=\"19-volatile关键字在Java中有什么作用？\"><a href=\"#19-volatile关键字在Java中有什么作用？\" class=\"headerlink\" title=\"19. volatile关键字在Java中有什么作用？\"></a>19. volatile关键字在Java中有什么作用？</h3><p>当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。</p>\n<h3 id=\"20-同步方法和同步块，哪个是更好的选择？\"><a href=\"#20-同步方法和同步块，哪个是更好的选择？\" class=\"headerlink\" title=\"20. 同步方法和同步块，哪个是更好的选择？\"></a>20. 同步方法和同步块，哪个是更好的选择？</h3><p>同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</p>\n<h3 id=\"21-如何创建守护线程？\"><a href=\"#21-如何创建守护线程？\" class=\"headerlink\" title=\"21. 如何创建守护线程？\"></a>21. 如何创建守护线程？</h3><p>使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常。</p>\n<h3 id=\"22-什么是ThreadLocal\"><a href=\"#22-什么是ThreadLocal\" class=\"headerlink\" title=\"22. 什么是ThreadLocal?\"></a>22. 什么是ThreadLocal?</h3><p>ThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。</p>\n<p>每个线程都会拥有他们自己的Thread变量，它们可以使用get()set()方法去获取他们的默认值或者在线程内部改变他们的值。ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性。<a href=\"http://www.journaldev.com/1076/java-threadlocal-example-to-create-thread-local-variables\" target=\"_blank\" rel=\"external\">Read more</a>。</p>\n<h3 id=\"23-什么是死锁-Deadlock-？如何避免死锁？\"><a href=\"#23-什么是死锁-Deadlock-？如何避免死锁？\" class=\"headerlink\" title=\"23. 什么是死锁(Deadlock)？如何避免死锁？\"></a>23. 什么是死锁(Deadlock)？如何避免死锁？</h3><p>死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。死锁的四个必要条件：</p>\n<ul>\n<li><strong>互斥（Mutual exclusion）</strong>：存在这样一种资源，它在某个时刻只能被分配给一个执行绪（也称为线程）使用；</li>\n<li><strong>持有（Hold and wait）</strong>：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但无需释放该资源，而且还可以继续请求更多资源；</li>\n<li><strong>不可剥夺（No preemption）</strong>：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；</li>\n<li><strong>环形等待（Circular wait）</strong>：若干执行绪以不同的次序获取互斥资源，从而形成环形等待的局面，想象在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。</li>\n</ul>\n<p>在系统中已经出现死锁后，应该及时检测到死锁的发生，并采取适当的措施来解除死锁。目前处理死锁的方法可归结为<a href=\"http://blog.csdn.net/joejames/article/details/37960873\" target=\"_blank\" rel=\"external\">四种</a></p>\n<h3 id=\"24-什么是线程池？如何创建一个Java线程池？\"><a href=\"#24-什么是线程池？如何创建一个Java线程池？\" class=\"headerlink\" title=\"24. 什么是线程池？如何创建一个Java线程池？\"></a>24. 什么是线程池？如何创建一个Java线程池？</h3><p>一个线程池管理了一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。</p>\n<p>java.util.concurrent.Executors提供了一个java.util.concurrent.Executor接口的实现用于创建线程池。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\" target=\"_blank\" rel=\"external\">如何创建和使用线程池</a></p>\n<h1 id=\"Java并发面试问题\"><a href=\"#Java并发面试问题\" class=\"headerlink\" title=\"Java并发面试问题\"></a>Java并发面试问题</h1><h3 id=\"1-什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？\"><a href=\"#1-什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？\" class=\"headerlink\" title=\"1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？\"></a>1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？</h3><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。</p>\n<p>int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>\n<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\" target=\"_blank\" rel=\"external\">Read more</a>。</p>\n<h3 id=\"2-Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？\"><a href=\"#2-Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？\" class=\"headerlink\" title=\"2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？\"></a>2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？</h3><p>Lock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的条件对象。它的优势有：</p>\n<ul>\n<li>可以使锁更公平</li>\n<li>可以使线程在等待锁的时候响应中断</li>\n<li>可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间</li>\n<li>可以在不同的范围，以不同的顺序获取和释放锁</li>\n</ul>\n<h3 id=\"3-什么是Executors框架？\"><a href=\"#3-什么是Executors框架？\" class=\"headerlink\" title=\"3. 什么是Executors框架？\"></a>3. 什么是Executors框架？</h3><p>Executor框架同java.util.concurrent.Executor 接口在Java5中被引入。Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。</p>\n<p>无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\" target=\"_blank\" rel=\"external\">Read more</a></p>\n<h3 id=\"4-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\"><a href=\"#4-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\" class=\"headerlink\" title=\"4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\"></a>4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？</h3><p>java.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。</p>\n<p>阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出NullPointerException。</p>\n<p>阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的并发控制。</p>\n<p>BlockingQueue接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。<a href=\"http://www.journaldev.com/1034/java-blockingqueue-example-implementing-producer-consumer-problem\" target=\"_blank\" rel=\"external\">使用阻塞队列实现生产者-消费者问题</a>。</p>\n<h3 id=\"5-什么是并发容器的实现？\"><a href=\"#5-什么是并发容器的实现？\" class=\"headerlink\" title=\"5. 什么是并发容器的实现？\"></a>5. 什么是并发容器的实现？</h3><p>Java集合类都是快速失败的，这就意味着当集合被改变且一个线程在使用迭代器遍历集合的时候，迭代器的next()方法将抛出ConcurrentModificationException异常。</p>\n<p>并发容器支持并发的遍历和并发的更新。</p>\n<p>主要的类有ConcurrentHashMap, CopyOnWriteArrayList 和CopyOnWriteArraySet。</p>\n<h3 id=\"6-Executors类是什么？\"><a href=\"#6-Executors类是什么？\" class=\"headerlink\" title=\"6. Executors类是什么？\"></a>6. Executors类是什么？</h3><p>Executors为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供了一些工具方法。</p>\n<p>Executors可以用于方便的创建线程池。</p>\n<h1 id=\"好文推荐\"><a href=\"#好文推荐\" class=\"headerlink\" title=\"好文推荐\"></a>好文推荐</h1><h3 id=\"秒杀多线程面试题系列\"><a href=\"#秒杀多线程面试题系列\" class=\"headerlink\" title=\"秒杀多线程面试题系列\"></a><a href=\"http://blog.csdn.net/column/details/killthreadseries.html\" target=\"_blank\" rel=\"external\">秒杀多线程面试题系列</a></h3><h3 id=\"进程通信方式及特点\"><a href=\"#进程通信方式及特点\" class=\"headerlink\" title=\"进程通信方式及特点\"></a><a href=\"http://blog.csdn.net/chenhuajie123/article/details/9315477\" target=\"_blank\" rel=\"external\">进程通信方式及特点</a></h3><hr>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2015/03/16/java-multithreading-concurrent/\">http://agehua.github.io/2015/03/16/java-multithreading-concurrent/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.49,"time":89400,"words":298},"excerpt":"<p>本文基于<strong>酷勤网关于java多线程和并发面试题的文</strong>章，进行了少量的整理和补充。<a href=\"http://www.kuqin.com/shuoit/20140708/341091.html\">原文在这</a>。</p>\n<hr>\n<p>以下是正文：</p>\n<p>多线程和并发问题是Java技术面试中面试官比较喜欢问的问题之一。在这里，从面试的角度列出了大部分重要的问题，但是你仍然应该牢固的掌握Java多线程基础知识来对应日后碰到的问题。</p>","more":"<h1 id=\"Java多线程面试问题\"><a href=\"#Java多线程面试问题\" class=\"headerlink\" title=\"Java多线程面试问题\"></a>Java多线程面试问题</h1><h3 id=\"1-什么是进程和线程？\"><a href=\"#1-什么是进程和线程？\" class=\"headerlink\" title=\"1. 什么是进程和线程？\"></a>1. 什么是进程和线程？</h3><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。线程是进程的一个实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p>\n<p>线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程；同一个进程中的多个线程之间可以并发执行。相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。在串行程序基础上引入线程和进程是为了提高程序的并发度，从而提高程序运行效率和响应时间。</p>\n<h3 id=\"2-进程和线程之间有什么不同？\"><a href=\"#2-进程和线程之间有什么不同？\" class=\"headerlink\" title=\"2. 进程和线程之间有什么不同？\"></a>2. 进程和线程之间有什么不同？</h3><p>一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。</p>\n<ul>\n<li>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。</li>\n<li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li>\n<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，极大地提高了程序的运行效率。</li>\n<li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li>\n<li>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li>\n</ul>\n<blockquote>\n<p>形象的讲，进程就是一个项目组，每个程序员就是里面的线程呀！当然一个程序员也可以叫做一个项目组，对应的就是一个进程只有一个线程。公司里面的任务是分配给项目组级别的，干活的就是其中的程序员。总的意思就是，进程和线程没有什么区别。<br>吐槽的话：我的意思就是进程干不过来了，那就多开几个线程呀！from <a href=\"https://www.zhihu.com/question/21535820/answer/19120563\">JacobK</a></p>\n</blockquote>\n<h3 id=\"3-多线程编程的好处是什么？\"><a href=\"#3-多线程编程的好处是什么？\" class=\"headerlink\" title=\"3. 多线程编程的好处是什么？\"></a>3. 多线程编程的好处是什么？</h3><ul>\n<li>在进程内创建、终止线程比创建、终止进程要快；</li>\n<li>同一进程内的线程间切换比进程间的切换要快,尤其是用户级线程间的切换。</li>\n</ul>\n<p>在多线程程序中，多个线程被并发的执行以提高程序的效率，CPU不会因为某个线程需要等待资源而进入空闲状态。多个线程共享堆内存(heap memory)，因此创建多个线程去执行一些任务会比创建多个进程更好。举个例子，Servlets比CGI更好，是因为Servlets支持多线程而CGI不支持。</p>\n<h3 id=\"4-用户线程和守护线程有什么区别？\"><a href=\"#4-用户线程和守护线程有什么区别？\" class=\"headerlink\" title=\"4. 用户线程和守护线程有什么区别？\"></a>4. 用户线程和守护线程有什么区别？</h3><p>当我们在Java程序中创建一个线程，它就被称为用户线程。一个守护线程是在后台执行并且不会阻止JVM终止的线程。当没有用户线程在运行的时候，JVM关闭程序并且退出（与守护线程是否在运行没有关系）。一个守护线程创建的子线程依然是守护线程。<strong>守护线程应用背景</strong>：后台线程，比如可以收集某些系统状态的线程，发送email的线程，等不希望影响JVM的事情。</p>\n<h3 id=\"5-我们如何创建一个线程？\"><a href=\"#5-我们如何创建一个线程？\" class=\"headerlink\" title=\"5. 我们如何创建一个线程？\"></a>5. 我们如何创建一个线程？</h3><p>有两种创建线程的方法：一是实现Runnable接口，然后将它传递给Thread的构造函数，创建一个Thread对象；二是直接继承Thread类。<a href=\"http://www.journaldev.com/1016/java-thread-example-extending-thread-class-and-implementing-runnable-interface\">Read more…</a></p>\n<h3 id=\"6-有哪些不同的线程生命周期？\"><a href=\"#6-有哪些不同的线程生命周期？\" class=\"headerlink\" title=\"6. 有哪些不同的线程生命周期？\"></a>6. 有哪些不同的线程生命周期？</h3><p>当我们在Java程序中新建一个线程时，它的状态是New。当我们调用线程的start()方法时，状态被改变为Runnable。线程调度器会为Runnable线程池中的线程分配CPU时间并且讲它们的状态改变为Running。其他的线程状态还有Waiting，Blocked和Dead。<a href=\"http://www.journaldev.com/1044/life-cycle-of-thread-understanding-thread-states-in-java\">Read more…</a></p>\n<ul>\n<li><strong>新建（new Thread）</strong>：当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。例如：<code>Thread  t1=new Thread()</code>;</li>\n<li><strong>就绪（runnable）</strong>：线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：<code>t1.start()</code>;</li>\n<li><strong>运行（running）</strong>：线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。</li>\n<li><strong>死亡（dead）</strong>：当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。</li>\n<li><strong>自然终止</strong>：正常运行run()方法后终止</li>\n<li><strong>异常终止</strong>：调用stop()方法让一个线程终止运行</li>\n<li><strong>堵塞（blocked）</strong>：由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。</li>\n<li><strong>正在睡眠</strong>：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。</li>\n<li><strong>正在等待</strong>：调用wait()方法。（调用motify()方法回到就绪状态）</li>\n<li><strong>被另一个线程所阻塞</strong>：调用suspend()方法。（调用resume()方法恢复）</li>\n</ul>\n<h3 id=\"7-可以直接调用Thread类的run-方法么？\"><a href=\"#7-可以直接调用Thread类的run-方法么？\" class=\"headerlink\" title=\"7. 可以直接调用Thread类的run()方法么？\"></a>7. 可以直接调用Thread类的run()方法么？</h3><p>可以，但是如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，为了在新的线程中执行我们的代码，必须使用Thread。start()方法。</p>\n<h3 id=\"8-如何让正在运行的线程暂停一段时间？\"><a href=\"#8-如何让正在运行的线程暂停一段时间？\" class=\"headerlink\" title=\"8. 如何让正在运行的线程暂停一段时间？\"></a>8. 如何让正在运行的线程暂停一段时间？</h3><p>我们可以使用Thread类的Sleep()方法让线程暂停一段时间。需要注意的是，这并不会让线程终止，一旦从休眠中唤醒线程，线程的状态将会被改变为Runnable，并且根据线程调度，它将得到执行。</p>\n<h3 id=\"9-你对线程优先级的理解是什么？\"><a href=\"#9-你对线程优先级的理解是什么？\" class=\"headerlink\" title=\"9. 你对线程优先级的理解是什么？\"></a>9. 你对线程优先级的理解是什么？</h3><p>线程的优先级越高，那么就可以分占相对多的CPU时间片。每个进程都有相应的优先级，<strong>线程优先级决定它何时运行和占用CPU时间</strong>。最终的优先级共分32级。是从0到31的数值，称为 <strong>基本优先级别</strong>。OS调度的是线程，<strong>真正具有优先级的是线程</strong>，而进程优先级是作为一个优先级Class存在。一个线程创建的时候，会继承进程的优先级。 外线程优先级可以用SetThreadPriority来进行微调。常用的桌面系统，都是分时操调度，根据线程的优先级来分配调度时间。我们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线程前执行。</p>\n<h3 id=\"10-什么是线程调度器-Thread-Scheduler-和时间分片-Time-Slicing-？\"><a href=\"#10-什么是线程调度器-Thread-Scheduler-和时间分片-Time-Slicing-？\" class=\"headerlink\" title=\"10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？\"></a>10. 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing)？</h3><p>线程调度器是一个操作系统服务，它负责为Runnable状态的线程分配CPU时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。时间分片是指将可用的CPU时间分配给可用的Runnable线程的过程。分配CPU时间可以基于线程优先级或者线程等待的时间。线程调度并不受到Java虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。</p>\n<h3 id=\"11-在多线程中，什么是上下文切换-context-switching-？\"><a href=\"#11-在多线程中，什么是上下文切换-context-switching-？\" class=\"headerlink\" title=\"11. 在多线程中，什么是上下文切换(context-switching)？\"></a>11. 在多线程中，什么是上下文切换(context-switching)？</h3><p>上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。</p>\n<h3 id=\"12-你如何确保main-方法所在的线程是Java程序最后结束的线程？\"><a href=\"#12-你如何确保main-方法所在的线程是Java程序最后结束的线程？\" class=\"headerlink\" title=\"12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？\"></a>12. 你如何确保main()方法所在的线程是Java程序最后结束的线程？</h3><p>我们可以使用Thread类的joint()方法来确保所有程序创建的线程在main()方法退出前结束。<a href=\"http://www.journaldev.com/1024/java-thread-join-example-with-explanation\">Read more…</a></p>\n<blockquote>\n<p>线程实例的方法join()方法可以使得一个线程在另一个线程结束后再执行。如果join()方法在一个线程实例上调用，当前运行着的线程将阻塞直到这个线程实例完成了执行。在join()方法内设定超时，使得join()方法的影响在特定超时后无效。当超时时，主方法和任务线程申请运行的时候是平等的。然而，当涉及sleep时，join()方法依靠操作系统计时，所以你不应该假定join()方法将会等待你指定的时间。</p>\n</blockquote>\n<h3 id=\"13-线程之间是如何通信的？\"><a href=\"#13-线程之间是如何通信的？\" class=\"headerlink\" title=\"13.线程之间是如何通信的？\"></a>13.线程之间是如何通信的？</h3><p>线程间通信有三种方式：</p>\n<p>a. 使用全局变量。进程中的线程间内存共享，这是比较常用的通信方式和交互方式。主要由于多个线程可能更改全局变量，因此全局变量最好声明为violate</p>\n<p>b. 使用消息实现通信。在Windows程序设计中，每一个线程都可以拥有自己的消息队列（UI线程默认自带消息队列和消息循环，工作线程需要手动实现消息循环），因此可以采用消息进行线程间通信sendMessage,postMessage。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1)定义消息#define WM_THREAD_SENDMSG=WM_USER+20;  </div><div class=\"line\">2)添加消息函数声明afx_msg int OnTSendmsg();</div><div class=\"line\">3)添加消息映射ON_MESSAGE(WM_THREAD_SENDMSG,OnTSM)</div><div class=\"line\">4)添加OnTSM()的实现函数；</div><div class=\"line\">5)在线程函数中添加PostMessage消息Post函数</div></pre></td></tr></table></figure>\n<p>c. 使用事件CEvent类实现线程间通信。Event对象有两种状态：有信号和无信号，线程可以监视处于有信号状态的事件，以便在适当的时候执行对事件的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1)创建一个CEvent类的对象：CEvent threadStart;它默认处在未通信状态；</div><div class=\"line\">2)threadStart.SetEvent();使其处于通信状态；</div><div class=\"line\">3)调用WaitForSingleObject()来监视CEvent对象</div></pre></td></tr></table></figure>\n<p>当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object类中wait()notify()notifyAll()方法可以用于线程间通信关于资源的锁的状态。<a href=\"http://www.journaldev.com/1037/java-thread-wait-notify-and-notifyall-example\">Read more</a></p>\n<h3 id=\"14-进程间通信方式及特点？\"><a href=\"#14-进程间通信方式及特点？\" class=\"headerlink\" title=\"14. 进程间通信方式及特点？\"></a>14. 进程间通信方式及特点？</h3><p>进程是转入内存并准备执行的程序，每个程序都有私有的虚拟地址空间，由代码，数据以及它可利用的系统资源(如文件，管道)组成。多进程/多线程是windows操作系统的一个基本特征。Linux系统一般都统称为进程。</p>\n<p>由于不同的进程运行在各自不同的内存空间中，其中一个进程对于变量的修改另一方是无法感知的，因此，进程之间的消息传递不能通过变量或其他数据结构直接进行，只能通过进程间通信来完成。进程间通信是指<strong>不同进程间进行数据共享和数据交换</strong>。</p>\n<p>进程间通信方式：<strong>文件和记录锁定，管道，有名管道，FIFO，信号量，信号，消息队列，共享内存，套接字</strong>。[^14] <a href=\"http://blog.csdn.net/chenhuajie123/article/details/9315477\">Read Read Read…</a></p>\n<h3 id=\"15-为什么线程通信的方法wait-notify-和notifyAll-被定义在Object类里？\"><a href=\"#15-为什么线程通信的方法wait-notify-和notifyAll-被定义在Object类里？\" class=\"headerlink\" title=\"15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？\"></a>15. 为什么线程通信的方法wait(), notify()和notifyAll()被定义在Object类里？</h3><p>Java的每个对象中都有一个锁(monitor，也可以成为监视器) 并且wait()，notify()等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在Java的线程中并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是Object类的一部分，这样Java的每一个类都有用于线程间通信的基本方法</p>\n<h3 id=\"16-为什么wait-notify-和notifyAll-必须在同步方法或者同步块中被调用？\"><a href=\"#16-为什么wait-notify-和notifyAll-必须在同步方法或者同步块中被调用？\" class=\"headerlink\" title=\"16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？\"></a>16. 为什么wait(), notify()和notifyAll()必须在同步方法或者同步块中被调用？</h3><p>当一个线程需要调用对象的wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的notify()方法。同样的，当一个线程需要调用对象的notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。</p>\n<h3 id=\"17-为什么Thread类的sleep-和yield-方法是静态的？\"><a href=\"#17-为什么Thread类的sleep-和yield-方法是静态的？\" class=\"headerlink\" title=\"17. 为什么Thread类的sleep()和yield()方法是静态的？\"></a>17. 为什么Thread类的sleep()和yield()方法是静态的？</h3><p>Thread类的sleep()和yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。</p>\n<h3 id=\"18-如何确保线程安全？\"><a href=\"#18-如何确保线程安全？\" class=\"headerlink\" title=\"18. 如何确保线程安全？\"></a>18. 如何确保线程安全？</h3><p>在Java中可以有很多方法来保证线程安全——同步，使用原子类(atomic concurrent classes)，实现并发锁，使用volatile关键字，使用不变类和线程安全类。<a href=\"http://www.journaldev.com/1061/java-synchronization-and-thread-safety-tutorial-with-examples\">Read more</a></p>\n<h3 id=\"19-volatile关键字在Java中有什么作用？\"><a href=\"#19-volatile关键字在Java中有什么作用？\" class=\"headerlink\" title=\"19. volatile关键字在Java中有什么作用？\"></a>19. volatile关键字在Java中有什么作用？</h3><p>当我们使用volatile关键字去修饰变量的时候，所以线程都会直接读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。</p>\n<h3 id=\"20-同步方法和同步块，哪个是更好的选择？\"><a href=\"#20-同步方法和同步块，哪个是更好的选择？\" class=\"headerlink\" title=\"20. 同步方法和同步块，哪个是更好的选择？\"></a>20. 同步方法和同步块，哪个是更好的选择？</h3><p>同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</p>\n<h3 id=\"21-如何创建守护线程？\"><a href=\"#21-如何创建守护线程？\" class=\"headerlink\" title=\"21. 如何创建守护线程？\"></a>21. 如何创建守护线程？</h3><p>使用Thread类的setDaemon(true)方法可以将线程设置为守护线程，需要注意的是，需要在调用start()方法前调用这个方法，否则会抛出IllegalThreadStateException异常。</p>\n<h3 id=\"22-什么是ThreadLocal\"><a href=\"#22-什么是ThreadLocal\" class=\"headerlink\" title=\"22. 什么是ThreadLocal?\"></a>22. 什么是ThreadLocal?</h3><p>ThreadLocal用于创建线程的本地变量，我们知道一个对象的所有线程会共享它的全局变量，所以这些变量不是线程安全的，我们可以使用同步技术。但是当我们不想使用同步的时候，我们可以选择ThreadLocal变量。</p>\n<p>每个线程都会拥有他们自己的Thread变量，它们可以使用get()set()方法去获取他们的默认值或者在线程内部改变他们的值。ThreadLocal实例通常是希望它们同线程状态关联起来是private static属性。<a href=\"http://www.journaldev.com/1076/java-threadlocal-example-to-create-thread-local-variables\">Read more</a>。</p>\n<h3 id=\"23-什么是死锁-Deadlock-？如何避免死锁？\"><a href=\"#23-什么是死锁-Deadlock-？如何避免死锁？\" class=\"headerlink\" title=\"23. 什么是死锁(Deadlock)？如何避免死锁？\"></a>23. 什么是死锁(Deadlock)？如何避免死锁？</h3><p>死锁是指两个以上的线程永远阻塞的情况，这种情况产生至少需要两个以上的线程和两个以上的资源。死锁的四个必要条件：</p>\n<ul>\n<li><strong>互斥（Mutual exclusion）</strong>：存在这样一种资源，它在某个时刻只能被分配给一个执行绪（也称为线程）使用；</li>\n<li><strong>持有（Hold and wait）</strong>：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但无需释放该资源，而且还可以继续请求更多资源；</li>\n<li><strong>不可剥夺（No preemption）</strong>：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；</li>\n<li><strong>环形等待（Circular wait）</strong>：若干执行绪以不同的次序获取互斥资源，从而形成环形等待的局面，想象在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。</li>\n</ul>\n<p>在系统中已经出现死锁后，应该及时检测到死锁的发生，并采取适当的措施来解除死锁。目前处理死锁的方法可归结为<a href=\"http://blog.csdn.net/joejames/article/details/37960873\">四种</a></p>\n<h3 id=\"24-什么是线程池？如何创建一个Java线程池？\"><a href=\"#24-什么是线程池？如何创建一个Java线程池？\" class=\"headerlink\" title=\"24. 什么是线程池？如何创建一个Java线程池？\"></a>24. 什么是线程池？如何创建一个Java线程池？</h3><p>一个线程池管理了一组工作线程，同时它还包括了一个用于放置等待执行的任务的队列。</p>\n<p>java.util.concurrent.Executors提供了一个java.util.concurrent.Executor接口的实现用于创建线程池。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\">如何创建和使用线程池</a></p>\n<h1 id=\"Java并发面试问题\"><a href=\"#Java并发面试问题\" class=\"headerlink\" title=\"Java并发面试问题\"></a>Java并发面试问题</h1><h3 id=\"1-什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？\"><a href=\"#1-什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？\" class=\"headerlink\" title=\"1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？\"></a>1. 什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？</h3><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。</p>\n<p>int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>\n<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\">Read more</a>。</p>\n<h3 id=\"2-Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？\"><a href=\"#2-Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？\" class=\"headerlink\" title=\"2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？\"></a>2. Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？</h3><p>Lock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的条件对象。它的优势有：</p>\n<ul>\n<li>可以使锁更公平</li>\n<li>可以使线程在等待锁的时候响应中断</li>\n<li>可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间</li>\n<li>可以在不同的范围，以不同的顺序获取和释放锁</li>\n</ul>\n<h3 id=\"3-什么是Executors框架？\"><a href=\"#3-什么是Executors框架？\" class=\"headerlink\" title=\"3. 什么是Executors框架？\"></a>3. 什么是Executors框架？</h3><p>Executor框架同java.util.concurrent.Executor 接口在Java5中被引入。Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。</p>\n<p>无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。<a href=\"http://www.journaldev.com/1069/java-thread-pool-example-using-executors-and-threadpoolexecutor\">Read more</a></p>\n<h3 id=\"4-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\"><a href=\"#4-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\" class=\"headerlink\" title=\"4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？\"></a>4. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？</h3><p>java.util.concurrent.BlockingQueue的特性是：当队列是空的时，从队列中获取或删除元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。</p>\n<p>阻塞队列不接受空值，当你尝试向队列中添加空值的时候，它会抛出NullPointerException。</p>\n<p>阻塞队列的实现都是线程安全的，所有的查询方法都是原子的并且使用了内部锁或者其他形式的并发控制。</p>\n<p>BlockingQueue接口是java collections框架的一部分，它主要用于实现生产者-消费者问题。<a href=\"http://www.journaldev.com/1034/java-blockingqueue-example-implementing-producer-consumer-problem\">使用阻塞队列实现生产者-消费者问题</a>。</p>\n<h3 id=\"5-什么是并发容器的实现？\"><a href=\"#5-什么是并发容器的实现？\" class=\"headerlink\" title=\"5. 什么是并发容器的实现？\"></a>5. 什么是并发容器的实现？</h3><p>Java集合类都是快速失败的，这就意味着当集合被改变且一个线程在使用迭代器遍历集合的时候，迭代器的next()方法将抛出ConcurrentModificationException异常。</p>\n<p>并发容器支持并发的遍历和并发的更新。</p>\n<p>主要的类有ConcurrentHashMap, CopyOnWriteArrayList 和CopyOnWriteArraySet。</p>\n<h3 id=\"6-Executors类是什么？\"><a href=\"#6-Executors类是什么？\" class=\"headerlink\" title=\"6. Executors类是什么？\"></a>6. Executors类是什么？</h3><p>Executors为Executor，ExecutorService，ScheduledExecutorService，ThreadFactory和Callable类提供了一些工具方法。</p>\n<p>Executors可以用于方便的创建线程池。</p>\n<h1 id=\"好文推荐\"><a href=\"#好文推荐\" class=\"headerlink\" title=\"好文推荐\"></a>好文推荐</h1><h3 id=\"秒杀多线程面试题系列\"><a href=\"#秒杀多线程面试题系列\" class=\"headerlink\" title=\"秒杀多线程面试题系列\"></a><a href=\"http://blog.csdn.net/column/details/killthreadseries.html\">秒杀多线程面试题系列</a></h3><h3 id=\"进程通信方式及特点\"><a href=\"#进程通信方式及特点\" class=\"headerlink\" title=\"进程通信方式及特点\"></a><a href=\"http://blog.csdn.net/chenhuajie123/article/details/9315477\">进程通信方式及特点</a></h3><hr>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2015/03/16/java-multithreading-concurrent/\">http://agehua.github.io/2015/03/16/java-multithreading-concurrent/</a></p>"},{"layout":"book","title":"2015阅读书单","keywords":"阅读,书单,2015","books":[{"title":"教父2 The Sicilian","status":"未读","author":"马克·瓦恩加德纳","publisher":"上海译文出版社","language":"中文译","link":"https://book.douban.com/subject/25762007/","cover":"https://img3.doubanio.com/mpic/s27244215.jpg","description":"无感。时势造就了安吉利诺，时势也毁灭了安吉利诺。被最亲密的朋友背叛，令人震惊。"},{"title":"教父复仇 The Godfather's Revenge","status":"未读","author":"马克·瓦恩加德纳","publisher":"上海译文出版社","language":"中文译","link":"http://book.douban.com/subject/4020110/","cover":"http://img3.douban.com/mpic/s4014854.jpg","description":null},{"title":"教父归来 The Godfather Returns","status":"在读","author":"马克·瓦恩加德纳","publisher":"译林出版社","language":"中文译","link":"http://book.douban.com/subject/1959055/","cover":"http://img3.doubanio.com/mpic/s5848649.jpg","description":null},{"title":"教父 The Godfather","status":"已读","author":"马里奥·普佐","publisher":"江苏文艺出版社","language":"中文译","link":"http://book.douban.com/subject/25762009/","cover":"http://img3.douban.com/mpic/s27227804.jpg","description":"教父三部曲第一部，美国出版史上头号畅销书，都说男人必看，果然名不虚传，电影也看了。教父的世界里，友谊，是通行的货币；忠诚，是最好的礼物；缄默，是唯一的规则。他藐视一切价值，不给警告，不虚张声势，不留余地。教父，就是自己的上帝。继续看第二部ing。"},{"title":"追风筝的人 The Kite Runner","status":"已读","author":"卡勒德·胡赛尼","publisher":"上海人民出版社","language":"中文译","link":"http://book.douban.com/subject/1770782/","cover":"http://img3.douban.com/mpic/s1727290.jpg","description":"为你，千千万万遍。念及那些如风往事，冷暖自知。也许谁的生命里都有一只想要挽回的“风筝”，谁没有令自己痛悔的事，谁能保证自己的心灵永在阳光的照耀下？但重回那个被时光深埋的地点，重新面对心灵的考问，不是每个人都有那份勇气，即使，“那儿有再次成为好人的路”。"}],"_content":"","source":"_posts/2015-11-06-book-list-of-2015.md","raw":"---\nlayout: book\ntitle: 2015阅读书单\ncategory: read\ntags: read\nkeywords: 阅读,书单,2015\nbooks:\n    - title: 教父2 The Sicilian\n      status: 未读\n      author: 马克·瓦恩加德纳\n      publisher: 上海译文出版社\n      language: 中文译\n      link: https://book.douban.com/subject/25762007/\n      cover: https://img3.doubanio.com/mpic/s27244215.jpg\n      description: 无感。时势造就了安吉利诺，时势也毁灭了安吉利诺。被最亲密的朋友背叛，令人震惊。\n    - title: 教父复仇 The Godfather's Revenge\n      status: 未读\n      author: 马克·瓦恩加德纳\n      publisher: 上海译文出版社\n      language: 中文译\n      link: http://book.douban.com/subject/4020110/\n      cover: http://img3.douban.com/mpic/s4014854.jpg\n      description:\n    - title: 教父归来 The Godfather Returns\n      status: 在读\n      author: 马克·瓦恩加德纳\n      publisher: 译林出版社\n      language: 中文译\n      link: http://book.douban.com/subject/1959055/\n      cover: http://img3.doubanio.com/mpic/s5848649.jpg\n      description:\n    - title: 教父 The Godfather\n      status: 已读\n      author: 马里奥·普佐\n      publisher: 江苏文艺出版社\n      language: 中文译\n      link: http://book.douban.com/subject/25762009/\n      cover: http://img3.douban.com/mpic/s27227804.jpg\n      description: 教父三部曲第一部，美国出版史上头号畅销书，都说男人必看，果然名不虚传，电影也看了。教父的世界里，友谊，是通行的货币；忠诚，是最好的礼物；缄默，是唯一的规则。他藐视一切价值，不给警告，不虚张声势，不留余地。教父，就是自己的上帝。继续看第二部ing。\n    - title: 追风筝的人 The Kite Runner\n      status: 已读\n      author: 卡勒德·胡赛尼\n      publisher: 上海人民出版社\n      language: 中文译\n      link: http://book.douban.com/subject/1770782/\n      cover: http://img3.douban.com/mpic/s1727290.jpg\n      description: 为你，千千万万遍。念及那些如风往事，冷暖自知。也许谁的生命里都有一只想要挽回的“风筝”，谁没有令自己痛悔的事，谁能保证自己的心灵永在阳光的照耀下？但重回那个被时光深埋的地点，重新面对心灵的考问，不是每个人都有那份勇气，即使，“那儿有再次成为好人的路”。\n---\n","slug":"book-list-of-2015","published":1,"date":"2015-11-05T16:00:00.000Z","updated":"2016-12-26T10:41:15.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebvo0008d6yk6b8vzqxl","content":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/2015/11/06/book-list-of-2015/\">http://agehua.github.io/2015/11/06/book-list-of-2015/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.01,"time":600,"words":2},"excerpt":"","more":"<hr>\n<p>本文链接：<a href=\"http://agehua.github.io/2015/11/06/book-list-of-2015/\">http://agehua.github.io/2015/11/06/book-list-of-2015/</a></p>\n"},{"layout":"post","title":"android Google map使用总结","keywords":"android, google map","description":"google map2.0使用总结","banner":"http://obxk8w81b.bkt.clouddn.com/Chestnut%20Tree%20in%20Blossom.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Chestnut%20Tree%20in%20Blossom.jpg","_content":"\n\n### 1.在代码中编译google map\n要想编译编译google map必须使用Google map api。并在自己的工程中引入google-play-services_lib。两个都需要在SDK Manager中下载。前者要在对应android api中勾选，后者要勾选在Extras下的Google Play Service。\n\n要注意的是map2.0要使用com.google.android.gms包名下的类\n\nGoogle Maps Android API 使用OpenGL ES第2版来渲染地图。如果未安装OpenGL ES第2版，地图将不会出现。可以在 AndroidManifest.xml 中添加以下<uses-feature>元素作为<manifest>元素的子元素来过滤不能支持的手机：\n\n~~~ Java\n<uses-feature\n        android:glEsVersion=\"0x00020000\"\n        android:required=\"true\"/>\n~~~\n\n<!--more-->\n\n### 2.在编码中遇到的问题\n1.可以实现OnCameraChangeListener接口，来实现对相机状态的监听，比如我就记录下了地图缩放的大小\n\n~~~ Java\n@Override\npublic void onCameraChange(CameraPosition arg0) {\n\t// TODO Auto-generated method stub\n\tzoom = arg0.zoom;\n}\n~~~\n\n2.向将处理地图的 Activity 添加 Fragment 对象。 最简单的实现方式是，向Activity 的布局文件添加 <fragment> 元素。\n\n3.实现 OnMapReadyCallback 接口，并使用onMapReady(GoogleMap)回调方法获取GoogleMap对象的句柄。GoogleMap对象是对地图本身的内部表示。如需设置地图的视图选项，可以使用UiSettings设置地图的样式。\n\n4.调用Fragment上的getMapAsync()以注册回调。\n\n5.使用手机定位，定位成功后再map上显示标记：\n\n~~~ Java\nMarkerOptions markerOpt = new MarkerOptions();  \nmarkerOpt.position(new LatLng(geoLat, geoLng));  \nmarkerOpt.draggable(false);  \nmarkerOpt.visible(true);  \nmarkerOpt.anchor(0.5f, 0.5f);//设为图片中心  \nmarkerOpt.icon(BitmapDescriptorFactory  \n\t.fromResource(R.drawable.sos_location_38x53));  \nmMap.addMarker(markerOpt);  \n//将摄影机移动到指定的地理位置  \ncameraPosition = new CameraPosition.Builder()  \n.target(new LatLng(geoLat, geoLng))              // Sets the center of the map to ZINTUN  \n\t.zoom(zoom)                  // 缩放比例  \n\t.bearing(0)                // Sets the orientation of the camera to east  \n\t.build();                  // Creates a CameraPosition from the builder  \nmMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\n~~~   \n\n6.实现地图圆角效果：使用圆角.9图片，中间透明，圆角四周不透明<br>\n详细可以看这个提问：[Is there a way to implement rounded corners to a Mapfragment?](http://stackoverflow.com/questions/14469208/is-there-a-way-to-implement-rounded-corners-to-a-mapfragment)\n\n7.去掉google地图自带的蓝色圆点\nGoogleMap.setMyLocationEnabled(false);\n\n8.解决mapview与scrollview嵌套滑动的问题：\n思路就是使用getParent().requestDisallowInterceptTouchEvent(true);方法，让子类接收到touch事件\n\n~~~ Java\npublic class MyMapView extends MapView {\n    private ViewParent mViewParent;\n\n    public MyMapView(Context context) {\n        super(context);\n    }\n\n    public MyMapView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public MyMapView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    public MyMapView(Context context, GoogleMapOptions options) {\n        super(context, options);\n    }\n\n\n    public void setViewParent(@Nullable final ViewParent viewParent) { //any ViewGroup\n        mViewParent = viewParent;\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(final MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                if (null == mViewParent) {\n                    //设置父类不拦截touch事件，子view可以接收到touch事件\n                    getParent().requestDisallowInterceptTouchEvent(true);\n                } else {\n                    mViewParent.requestDisallowInterceptTouchEvent(true);\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                if (null == mViewParent) {\n                    //让父类拦截touch事件\n                    getParent().requestDisallowInterceptTouchEvent(false);\n                } else {\n                    mViewParent.requestDisallowInterceptTouchEvent(false);\n                }\n                break;\n            default:\n                break;\n        }\n\n        return super.onInterceptTouchEvent(event);\n    }\n}\n~~~\n\n9.LocationListener，一直回调到onProviderDisabled\n\n有可能是因为手机没有开启定位服务，解决办法是：\n\n~~~ Java\n@Override\npublic void onProviderDisabled(String provider) {\n    isLocatedSuccess = false;\n    if (provider.equals(\"network\")) //跳到位置服务设置页面\n        startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\n}\n~~~\n\n### 3.在真机上测试效果\n需要在真机上安装这两个包：com.android.vending.apk（Google play store）和com.google.android.gms.apk（Google play services）\n可以在国内应用市场上去搜索最新版本，也可以使用我上传的文件：\n\n链接：http://pan.baidu.com/s/1i5q8jo5 密码：solm\n\n安装成功以后，再运行自己的程序，查看效果了\n","source":"_posts/2016-03-01-android-googlemap-summary.md","raw":"---\nlayout: post\ntitle: android Google map使用总结\ncategory: accumulation\ntags:\n  - ANDROID\n  - google map\nkeywords: android, google map\ndescription: google map2.0使用总结\nbanner: http://obxk8w81b.bkt.clouddn.com/Chestnut%20Tree%20in%20Blossom.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Chestnut%20Tree%20in%20Blossom.jpg\n---\n\n\n### 1.在代码中编译google map\n要想编译编译google map必须使用Google map api。并在自己的工程中引入google-play-services_lib。两个都需要在SDK Manager中下载。前者要在对应android api中勾选，后者要勾选在Extras下的Google Play Service。\n\n要注意的是map2.0要使用com.google.android.gms包名下的类\n\nGoogle Maps Android API 使用OpenGL ES第2版来渲染地图。如果未安装OpenGL ES第2版，地图将不会出现。可以在 AndroidManifest.xml 中添加以下<uses-feature>元素作为<manifest>元素的子元素来过滤不能支持的手机：\n\n~~~ Java\n<uses-feature\n        android:glEsVersion=\"0x00020000\"\n        android:required=\"true\"/>\n~~~\n\n<!--more-->\n\n### 2.在编码中遇到的问题\n1.可以实现OnCameraChangeListener接口，来实现对相机状态的监听，比如我就记录下了地图缩放的大小\n\n~~~ Java\n@Override\npublic void onCameraChange(CameraPosition arg0) {\n\t// TODO Auto-generated method stub\n\tzoom = arg0.zoom;\n}\n~~~\n\n2.向将处理地图的 Activity 添加 Fragment 对象。 最简单的实现方式是，向Activity 的布局文件添加 <fragment> 元素。\n\n3.实现 OnMapReadyCallback 接口，并使用onMapReady(GoogleMap)回调方法获取GoogleMap对象的句柄。GoogleMap对象是对地图本身的内部表示。如需设置地图的视图选项，可以使用UiSettings设置地图的样式。\n\n4.调用Fragment上的getMapAsync()以注册回调。\n\n5.使用手机定位，定位成功后再map上显示标记：\n\n~~~ Java\nMarkerOptions markerOpt = new MarkerOptions();  \nmarkerOpt.position(new LatLng(geoLat, geoLng));  \nmarkerOpt.draggable(false);  \nmarkerOpt.visible(true);  \nmarkerOpt.anchor(0.5f, 0.5f);//设为图片中心  \nmarkerOpt.icon(BitmapDescriptorFactory  \n\t.fromResource(R.drawable.sos_location_38x53));  \nmMap.addMarker(markerOpt);  \n//将摄影机移动到指定的地理位置  \ncameraPosition = new CameraPosition.Builder()  \n.target(new LatLng(geoLat, geoLng))              // Sets the center of the map to ZINTUN  \n\t.zoom(zoom)                  // 缩放比例  \n\t.bearing(0)                // Sets the orientation of the camera to east  \n\t.build();                  // Creates a CameraPosition from the builder  \nmMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));\n~~~   \n\n6.实现地图圆角效果：使用圆角.9图片，中间透明，圆角四周不透明<br>\n详细可以看这个提问：[Is there a way to implement rounded corners to a Mapfragment?](http://stackoverflow.com/questions/14469208/is-there-a-way-to-implement-rounded-corners-to-a-mapfragment)\n\n7.去掉google地图自带的蓝色圆点\nGoogleMap.setMyLocationEnabled(false);\n\n8.解决mapview与scrollview嵌套滑动的问题：\n思路就是使用getParent().requestDisallowInterceptTouchEvent(true);方法，让子类接收到touch事件\n\n~~~ Java\npublic class MyMapView extends MapView {\n    private ViewParent mViewParent;\n\n    public MyMapView(Context context) {\n        super(context);\n    }\n\n    public MyMapView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public MyMapView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    public MyMapView(Context context, GoogleMapOptions options) {\n        super(context, options);\n    }\n\n\n    public void setViewParent(@Nullable final ViewParent viewParent) { //any ViewGroup\n        mViewParent = viewParent;\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(final MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                if (null == mViewParent) {\n                    //设置父类不拦截touch事件，子view可以接收到touch事件\n                    getParent().requestDisallowInterceptTouchEvent(true);\n                } else {\n                    mViewParent.requestDisallowInterceptTouchEvent(true);\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                if (null == mViewParent) {\n                    //让父类拦截touch事件\n                    getParent().requestDisallowInterceptTouchEvent(false);\n                } else {\n                    mViewParent.requestDisallowInterceptTouchEvent(false);\n                }\n                break;\n            default:\n                break;\n        }\n\n        return super.onInterceptTouchEvent(event);\n    }\n}\n~~~\n\n9.LocationListener，一直回调到onProviderDisabled\n\n有可能是因为手机没有开启定位服务，解决办法是：\n\n~~~ Java\n@Override\npublic void onProviderDisabled(String provider) {\n    isLocatedSuccess = false;\n    if (provider.equals(\"network\")) //跳到位置服务设置页面\n        startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\n}\n~~~\n\n### 3.在真机上测试效果\n需要在真机上安装这两个包：com.android.vending.apk（Google play store）和com.google.android.gms.apk（Google play services）\n可以在国内应用市场上去搜索最新版本，也可以使用我上传的文件：\n\n链接：http://pan.baidu.com/s/1i5q8jo5 密码：solm\n\n安装成功以后，再运行自己的程序，查看效果了\n","slug":"android-googlemap-summary","published":1,"date":"2016-02-29T16:00:00.000Z","updated":"2017-11-23T07:23:56.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebvs0009d6yktahbspes","content":"<h3 id=\"1-在代码中编译google-map\"><a href=\"#1-在代码中编译google-map\" class=\"headerlink\" title=\"1.在代码中编译google map\"></a>1.在代码中编译google map</h3><p>要想编译编译google map必须使用Google map api。并在自己的工程中引入google-play-services_lib。两个都需要在SDK Manager中下载。前者要在对应android api中勾选，后者要勾选在Extras下的Google Play Service。</p>\n<p>要注意的是map2.0要使用com.google.android.gms包名下的类</p>\n<p>Google Maps Android API 使用OpenGL ES第2版来渲染地图。如果未安装OpenGL ES第2版，地图将不会出现。可以在 AndroidManifest.xml 中添加以下<uses-feature>元素作为<manifest>元素的子元素来过滤不能支持的手机：</manifest></uses-feature></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;uses-feature</div><div class=\"line\">        android:glEsVersion=<span class=\"string\">\"0x00020000\"</span></div><div class=\"line\">        android:required=<span class=\"string\">\"true\"</span>/&gt;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2-在编码中遇到的问题\"><a href=\"#2-在编码中遇到的问题\" class=\"headerlink\" title=\"2.在编码中遇到的问题\"></a>2.在编码中遇到的问题</h3><p>1.可以实现OnCameraChangeListener接口，来实现对相机状态的监听，比如我就记录下了地图缩放的大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraChange</span><span class=\"params\">(CameraPosition arg0)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\tzoom = arg0.zoom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.向将处理地图的 Activity 添加 Fragment 对象。 最简单的实现方式是，向Activity 的布局文件添加 <fragment> 元素。</fragment></p>\n<p>3.实现 OnMapReadyCallback 接口，并使用onMapReady(GoogleMap)回调方法获取GoogleMap对象的句柄。GoogleMap对象是对地图本身的内部表示。如需设置地图的视图选项，可以使用UiSettings设置地图的样式。</p>\n<p>4.调用Fragment上的getMapAsync()以注册回调。</p>\n<p>5.使用手机定位，定位成功后再map上显示标记：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">MarkerOptions markerOpt = <span class=\"keyword\">new</span> MarkerOptions();  </div><div class=\"line\">markerOpt.position(<span class=\"keyword\">new</span> LatLng(geoLat, geoLng));  </div><div class=\"line\">markerOpt.draggable(<span class=\"keyword\">false</span>);  </div><div class=\"line\">markerOpt.visible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">markerOpt.anchor(<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>);<span class=\"comment\">//设为图片中心  </span></div><div class=\"line\">markerOpt.icon(BitmapDescriptorFactory  </div><div class=\"line\">\t.fromResource(R.drawable.sos_location_38x53));  </div><div class=\"line\">mMap.addMarker(markerOpt);  </div><div class=\"line\"><span class=\"comment\">//将摄影机移动到指定的地理位置  </span></div><div class=\"line\">cameraPosition = <span class=\"keyword\">new</span> CameraPosition.Builder()  </div><div class=\"line\">.target(<span class=\"keyword\">new</span> LatLng(geoLat, geoLng))              <span class=\"comment\">// Sets the center of the map to ZINTUN  </span></div><div class=\"line\">\t.zoom(zoom)                  <span class=\"comment\">// 缩放比例  </span></div><div class=\"line\">\t.bearing(<span class=\"number\">0</span>)                <span class=\"comment\">// Sets the orientation of the camera to east  </span></div><div class=\"line\">\t.build();                  <span class=\"comment\">// Creates a CameraPosition from the builder  </span></div><div class=\"line\">mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));</div><div class=\"line\">~~~   </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">6</span>.实现地图圆角效果：使用圆角.<span class=\"number\">9</span>图片，中间透明，圆角四周不透明&lt;br&gt;</div><div class=\"line\">详细可以看这个提问：[Is there a way to implement rounded corners to a Mapfragment?](http:<span class=\"comment\">//stackoverflow.com/questions/14469208/is-there-a-way-to-implement-rounded-corners-to-a-mapfragment)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">7</span>.去掉google地图自带的蓝色圆点</div><div class=\"line\">GoogleMap.setMyLocationEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">8</span>.解决mapview与scrollview嵌套滑动的问题：</div><div class=\"line\">思路就是使用getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);方法，让子类接收到touch事件</div><div class=\"line\"></div><div class=\"line\">~~~ Java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMapView</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapView</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewParent mViewParent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, GoogleMapOptions options)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, options);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewParent</span><span class=\"params\">(@Nullable <span class=\"keyword\">final</span> ViewParent viewParent)</span> </span>&#123; <span class=\"comment\">//any ViewGroup</span></div><div class=\"line\">        mViewParent = viewParent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(<span class=\"keyword\">final</span> MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mViewParent) &#123;</div><div class=\"line\">                    <span class=\"comment\">//设置父类不拦截touch事件，子view可以接收到touch事件</span></div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mViewParent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mViewParent) &#123;</div><div class=\"line\">                    <span class=\"comment\">//让父类拦截touch事件</span></div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mViewParent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>9.LocationListener，一直回调到onProviderDisabled</p>\n<p>有可能是因为手机没有开启定位服务，解决办法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">    isLocatedSuccess = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider.equals(<span class=\"string\">\"network\"</span>)) <span class=\"comment\">//跳到位置服务设置页面</span></div><div class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-在真机上测试效果\"><a href=\"#3-在真机上测试效果\" class=\"headerlink\" title=\"3.在真机上测试效果\"></a>3.在真机上测试效果</h3><p>需要在真机上安装这两个包：com.android.vending.apk（Google play store）和com.google.android.gms.apk（Google play services）<br>可以在国内应用市场上去搜索最新版本，也可以使用我上传的文件：</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1i5q8jo5\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1i5q8jo5</a> 密码：solm</p>\n<p>安装成功以后，再运行自己的程序，查看效果了</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/01/android-googlemap-summary/\">http://agehua.github.io/2016/03/01/android-googlemap-summary/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.395,"time":143700,"words":479},"excerpt":"<h3 id=\"1-在代码中编译google-map\"><a href=\"#1-在代码中编译google-map\" class=\"headerlink\" title=\"1.在代码中编译google map\"></a>1.在代码中编译google map</h3><p>要想编译编译google map必须使用Google map api。并在自己的工程中引入google-play-services_lib。两个都需要在SDK Manager中下载。前者要在对应android api中勾选，后者要勾选在Extras下的Google Play Service。</p>\n<p>要注意的是map2.0要使用com.google.android.gms包名下的类</p>\n<p>Google Maps Android API 使用OpenGL ES第2版来渲染地图。如果未安装OpenGL ES第2版，地图将不会出现。可以在 AndroidManifest.xml 中添加以下<uses-feature>元素作为<manifest>元素的子元素来过滤不能支持的手机：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;uses-feature</div><div class=\"line\">        android:glEsVersion=<span class=\"string\">\"0x00020000\"</span></div><div class=\"line\">        android:required=<span class=\"string\">\"true\"</span>/&gt;</div></pre></td></tr></table></figure>","more":"<h3 id=\"2-在编码中遇到的问题\"><a href=\"#2-在编码中遇到的问题\" class=\"headerlink\" title=\"2.在编码中遇到的问题\"></a>2.在编码中遇到的问题</h3><p>1.可以实现OnCameraChangeListener接口，来实现对相机状态的监听，比如我就记录下了地图缩放的大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraChange</span><span class=\"params\">(CameraPosition arg0)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\tzoom = arg0.zoom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2.向将处理地图的 Activity 添加 Fragment 对象。 最简单的实现方式是，向Activity 的布局文件添加 <fragment> 元素。</p>\n<p>3.实现 OnMapReadyCallback 接口，并使用onMapReady(GoogleMap)回调方法获取GoogleMap对象的句柄。GoogleMap对象是对地图本身的内部表示。如需设置地图的视图选项，可以使用UiSettings设置地图的样式。</p>\n<p>4.调用Fragment上的getMapAsync()以注册回调。</p>\n<p>5.使用手机定位，定位成功后再map上显示标记：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">MarkerOptions markerOpt = <span class=\"keyword\">new</span> MarkerOptions();  </div><div class=\"line\">markerOpt.position(<span class=\"keyword\">new</span> LatLng(geoLat, geoLng));  </div><div class=\"line\">markerOpt.draggable(<span class=\"keyword\">false</span>);  </div><div class=\"line\">markerOpt.visible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">markerOpt.anchor(<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>);<span class=\"comment\">//设为图片中心  </span></div><div class=\"line\">markerOpt.icon(BitmapDescriptorFactory  </div><div class=\"line\">\t.fromResource(R.drawable.sos_location_38x53));  </div><div class=\"line\">mMap.addMarker(markerOpt);  </div><div class=\"line\"><span class=\"comment\">//将摄影机移动到指定的地理位置  </span></div><div class=\"line\">cameraPosition = <span class=\"keyword\">new</span> CameraPosition.Builder()  </div><div class=\"line\">.target(<span class=\"keyword\">new</span> LatLng(geoLat, geoLng))              <span class=\"comment\">// Sets the center of the map to ZINTUN  </span></div><div class=\"line\">\t.zoom(zoom)                  <span class=\"comment\">// 缩放比例  </span></div><div class=\"line\">\t.bearing(<span class=\"number\">0</span>)                <span class=\"comment\">// Sets the orientation of the camera to east  </span></div><div class=\"line\">\t.build();                  <span class=\"comment\">// Creates a CameraPosition from the builder  </span></div><div class=\"line\">mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));</div><div class=\"line\">~~~   </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">6</span>.实现地图圆角效果：使用圆角.<span class=\"number\">9</span>图片，中间透明，圆角四周不透明&lt;br&gt;</div><div class=\"line\">详细可以看这个提问：[Is there a way to implement rounded corners to a Mapfragment?](http:<span class=\"comment\">//stackoverflow.com/questions/14469208/is-there-a-way-to-implement-rounded-corners-to-a-mapfragment)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">7</span>.去掉google地图自带的蓝色圆点</div><div class=\"line\">GoogleMap.setMyLocationEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">8</span>.解决mapview与scrollview嵌套滑动的问题：</div><div class=\"line\">思路就是使用getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);方法，让子类接收到touch事件</div><div class=\"line\"></div><div class=\"line\">~~~ Java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMapView</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapView</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewParent mViewParent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapView</span><span class=\"params\">(Context context, GoogleMapOptions options)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, options);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewParent</span><span class=\"params\">(@Nullable <span class=\"keyword\">final</span> ViewParent viewParent)</span> </span>&#123; <span class=\"comment\">//any ViewGroup</span></div><div class=\"line\">        mViewParent = viewParent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(<span class=\"keyword\">final</span> MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mViewParent) &#123;</div><div class=\"line\">                    <span class=\"comment\">//设置父类不拦截touch事件，子view可以接收到touch事件</span></div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mViewParent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mViewParent) &#123;</div><div class=\"line\">                    <span class=\"comment\">//让父类拦截touch事件</span></div><div class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mViewParent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(event);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>9.LocationListener，一直回调到onProviderDisabled</p>\n<p>有可能是因为手机没有开启定位服务，解决办法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">    isLocatedSuccess = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider.equals(<span class=\"string\">\"network\"</span>)) <span class=\"comment\">//跳到位置服务设置页面</span></div><div class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-在真机上测试效果\"><a href=\"#3-在真机上测试效果\" class=\"headerlink\" title=\"3.在真机上测试效果\"></a>3.在真机上测试效果</h3><p>需要在真机上安装这两个包：com.android.vending.apk（Google play store）和com.google.android.gms.apk（Google play services）<br>可以在国内应用市场上去搜索最新版本，也可以使用我上传的文件：</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1i5q8jo5\">http://pan.baidu.com/s/1i5q8jo5</a> 密码：solm</p>\n<p>安装成功以后，再运行自己的程序，查看效果了</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/01/android-googlemap-summary/\">http://agehua.github.io/2016/03/01/android-googlemap-summary/</a></p>"},{"layout":"post","title":"近期总结facebook google+ Twitter sign-in fragment使用","keywords":"android, google map, fragments","description":"google map2.0使用总结","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20with%20a%20Woman%20Working%20in%20the%20Foreground.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20with%20a%20Woman%20Working%20in%20the%20Foreground.jpg","_content":"\n\n### 1.相关资料\nblog: [关于Google+以及Facebook第三方登录实现的一点总结](http://www.cnblogs.com/lngg057/p/5020192.html)\n\ng+官方教程: [G+ start](https://developers.google.com/identity/sign-in/android/start)\n\nfacebook官方教程: [Facebook start](https://developers.facebook.com/docs/android/getting-started)\n\niCCP: [Not recognizing known sRGB profile](http://www.bigademo.com/iccp-not-recognizing-known-srgb-profile/)\n\n<!--more-->\n\n- 今天做分享的时候遇到了这个问题：\n\n    [2016-04-01 11:24:04 - Dex Loader] Unable to execute dex: method ID not in [0, 0xffff]: 65536\n    [2016-04-01 11:24:04 - VIVAT_SHARESDK] Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536\n\n[大项目中遇到的问题看这个博客](http://www.cnblogs.com/yaozhongxiao/p/3521428.html)\n\n- iCCP: Not recognizing known sRGB profile 删除png图片内嵌的iCCP profile sRGB报错\n\n今天有碰见一个坑，改其他代码，然后在编译的时候就出现这个问题，对就是这个问题。网上查了资料，也就这个资料最全面，大家可以去看见http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS\n\n处理这个问题我使用了一种方法，记录下来以便以后使用\n\n步骤1:下载Image Magick http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的\n\n步骤2： 在要处理的文件夹使用如下命令 ，一定要在要处理的文件夹使用\n\n~~~ C++\n//WINDOWS使用\nset fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  \nfor /f \"tokens=*\" %i in ('dir/s/b *.png') do \"%fn%\" \"%i\" -strip \"%i\"\n（因为是window的，所以把%%i改为%i）\n~~~\n\n~~~ C++\n//LINUX使用\n set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  \nfor /f \"tokens=*\" %%i in ('dir/s/b *.png') do \"%fn%\" \"%%i\" -strip \"%%i\"\n~~~\n\n### 2.遇到问题\n\n- 1.“This client application's callback url has been locked”.\n\n    使用Twitter signin时遇到了这个问题，这个错误信息是在logcat中找到的，原因是在[Twitter](https://apps.twitter.com)的Settings里勾选了“Enable Callback Locking (It is recommended to enable callback locking to ensure apps cannot overwrite the callback url)”选项，这个选项表示不允许app本地更改callback url。也可看这个[页面](https://twittercommunity.com/t/callback-url-is-locked/59481)\n\n### 3.add() vs. replace()\n- 只有在Fragment数量大于等于2的时候，调用add()还是replace()的区别才能体现出来。\n\n    当通过add()连续两次添加Fragment的时候，每个Fragment生命周期中的onAttach()-onResume()都会被各调用一次，而且两个Fragment的View会被同时attach到containerView。\n\n    同样，退出Activty时，每个Fragment生命周期中的onPause()-onDetach()也会被各调用一次。\n\n    但当使用replace()来添加Fragment的时候，第二次添加会导致第一个Fragment被销毁，即执行第二个Fragment的onAttach()方法之前会先执行第一个Fragment的onPause()-onDetach()方法，同时containerView会detach第一个Fragment的View。\n\n- 调用show() & hide()方法时.\n\n    Fragment的生命周期方法并不会被执行，仅仅是Fragment的View被显示或者​隐藏。而且，尽管Fragment的View被隐藏，但它在父布局中并未被detach，仍然是作为containerView的childView存在着。相比较下，attach() & detach()做的就更彻底一些。一旦一个Fragment被detach()，它的onPause()-onDestroyView()周期都会被执行。\n\n    同时Fragment的View也会被detach。在重新调用attach()后，onCreateView()-onResume()周期也会被再次执行。\n\n- remove()\n\n    其实看完上面的分析，remove()方法基本也就明白了。相对应add()方法执行onAttach()-onResume()的生命周期，remove()就是完成剩下的onPause()-onDetach()周期。\n\n\n### 4.FragmentTransaction add 和 replace 区别\n使用 FragmentTransaction 的时候，它提供了这样两个方法，一个 add ， 一个 replace .add 和 replace 影响的只是界面，而控制回退的，是事务。\n\n- add 是把一个fragment添加到一个容器 container 里。\n\n    Add a fragment to the activity state. This fragment may optionally also have its view (if Fragment.onCreateView returns non-null) into a container view of the activity.\n\n~~~ Java\npublic abstract FragmentTransaction add (int containerViewId, Fragment fragment, String tag)\n~~~\n\n\n- replace 是先remove掉相同id的所有fragment，然后在add当前的这个fragment。\n\n    Replace an existing fragment that was added to a container. This is essentially the same as calling remove(Fragment) for all currently added fragments that were added with the same containerViewId and then add(int, Fragment, String) with the same arguments given here.\n\n~~~ Java\npublic abstract FragmentTransaction replace (int containerViewId, Fragment fragment, String tag)\n~~~\n\n\n\n在大部分情况下，这两个的表现基本相同。因为，一般，咱们会使用一个FrameLayout来当容器，而每个Fragment被add 或者 replace 到这个FrameLayout的时候，都是显示在最上层的。所以你看到的界面都是一样的。但是，使用add的情况下，这个FrameLayout其实有2层，多层肯定要比一层的来得浪费，所以还是推荐使用replace。当然有时候还是需要使用add的。比如要实现轮播图的效果，每个轮播图都是一个独立的Fragment，而他的容器FrameLayout需要add多个Fragment，这样他就可以根据提供的逻辑进行轮播了。\n\n而至于返回键的时候，这个跟事务有关，跟使用add还是replace没有任何关系。\n\n###\t5.要想fragment完整地执行生命周期\nfragment跳转是要使用replace()方法，并一定要指定tag，否则有些方法不会执行（比如onResume），例如：\n\n~~~ Java\ngetFragmentManager()\n \t.beginTransaction()\n    .replace(R.id.base_container,\n    \t inputVerifyCodeFragment,\"tag_code\")\n    .addToBackStack(null).commit();\n~~~\n\n### 6.fragment事件穿透\n如果发现fragment2的点击事件可以被fragment栈下一层的fragment1获取到，可以在fragment2布局的根部加上：android:clickable=\"true\"。问题解决\n","source":"_posts/2016-03-15-facebook-google+signin.md","raw":"---\nlayout: post\ntitle: 近期总结facebook google+ Twitter sign-in fragment使用\ncategory: accumulation\ntags:\n  - ANDROID\n  - third-party signin\nkeywords: android, google map, fragments\ndescription: google map2.0使用总结\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20with%20a%20Woman%20Working%20in%20the%20Foreground.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20with%20a%20Woman%20Working%20in%20the%20Foreground.jpg\n---\n\n\n### 1.相关资料\nblog: [关于Google+以及Facebook第三方登录实现的一点总结](http://www.cnblogs.com/lngg057/p/5020192.html)\n\ng+官方教程: [G+ start](https://developers.google.com/identity/sign-in/android/start)\n\nfacebook官方教程: [Facebook start](https://developers.facebook.com/docs/android/getting-started)\n\niCCP: [Not recognizing known sRGB profile](http://www.bigademo.com/iccp-not-recognizing-known-srgb-profile/)\n\n<!--more-->\n\n- 今天做分享的时候遇到了这个问题：\n\n    [2016-04-01 11:24:04 - Dex Loader] Unable to execute dex: method ID not in [0, 0xffff]: 65536\n    [2016-04-01 11:24:04 - VIVAT_SHARESDK] Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536\n\n[大项目中遇到的问题看这个博客](http://www.cnblogs.com/yaozhongxiao/p/3521428.html)\n\n- iCCP: Not recognizing known sRGB profile 删除png图片内嵌的iCCP profile sRGB报错\n\n今天有碰见一个坑，改其他代码，然后在编译的时候就出现这个问题，对就是这个问题。网上查了资料，也就这个资料最全面，大家可以去看见http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS\n\n处理这个问题我使用了一种方法，记录下来以便以后使用\n\n步骤1:下载Image Magick http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的\n\n步骤2： 在要处理的文件夹使用如下命令 ，一定要在要处理的文件夹使用\n\n~~~ C++\n//WINDOWS使用\nset fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  \nfor /f \"tokens=*\" %i in ('dir/s/b *.png') do \"%fn%\" \"%i\" -strip \"%i\"\n（因为是window的，所以把%%i改为%i）\n~~~\n\n~~~ C++\n//LINUX使用\n set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  \nfor /f \"tokens=*\" %%i in ('dir/s/b *.png') do \"%fn%\" \"%%i\" -strip \"%%i\"\n~~~\n\n### 2.遇到问题\n\n- 1.“This client application's callback url has been locked”.\n\n    使用Twitter signin时遇到了这个问题，这个错误信息是在logcat中找到的，原因是在[Twitter](https://apps.twitter.com)的Settings里勾选了“Enable Callback Locking (It is recommended to enable callback locking to ensure apps cannot overwrite the callback url)”选项，这个选项表示不允许app本地更改callback url。也可看这个[页面](https://twittercommunity.com/t/callback-url-is-locked/59481)\n\n### 3.add() vs. replace()\n- 只有在Fragment数量大于等于2的时候，调用add()还是replace()的区别才能体现出来。\n\n    当通过add()连续两次添加Fragment的时候，每个Fragment生命周期中的onAttach()-onResume()都会被各调用一次，而且两个Fragment的View会被同时attach到containerView。\n\n    同样，退出Activty时，每个Fragment生命周期中的onPause()-onDetach()也会被各调用一次。\n\n    但当使用replace()来添加Fragment的时候，第二次添加会导致第一个Fragment被销毁，即执行第二个Fragment的onAttach()方法之前会先执行第一个Fragment的onPause()-onDetach()方法，同时containerView会detach第一个Fragment的View。\n\n- 调用show() & hide()方法时.\n\n    Fragment的生命周期方法并不会被执行，仅仅是Fragment的View被显示或者​隐藏。而且，尽管Fragment的View被隐藏，但它在父布局中并未被detach，仍然是作为containerView的childView存在着。相比较下，attach() & detach()做的就更彻底一些。一旦一个Fragment被detach()，它的onPause()-onDestroyView()周期都会被执行。\n\n    同时Fragment的View也会被detach。在重新调用attach()后，onCreateView()-onResume()周期也会被再次执行。\n\n- remove()\n\n    其实看完上面的分析，remove()方法基本也就明白了。相对应add()方法执行onAttach()-onResume()的生命周期，remove()就是完成剩下的onPause()-onDetach()周期。\n\n\n### 4.FragmentTransaction add 和 replace 区别\n使用 FragmentTransaction 的时候，它提供了这样两个方法，一个 add ， 一个 replace .add 和 replace 影响的只是界面，而控制回退的，是事务。\n\n- add 是把一个fragment添加到一个容器 container 里。\n\n    Add a fragment to the activity state. This fragment may optionally also have its view (if Fragment.onCreateView returns non-null) into a container view of the activity.\n\n~~~ Java\npublic abstract FragmentTransaction add (int containerViewId, Fragment fragment, String tag)\n~~~\n\n\n- replace 是先remove掉相同id的所有fragment，然后在add当前的这个fragment。\n\n    Replace an existing fragment that was added to a container. This is essentially the same as calling remove(Fragment) for all currently added fragments that were added with the same containerViewId and then add(int, Fragment, String) with the same arguments given here.\n\n~~~ Java\npublic abstract FragmentTransaction replace (int containerViewId, Fragment fragment, String tag)\n~~~\n\n\n\n在大部分情况下，这两个的表现基本相同。因为，一般，咱们会使用一个FrameLayout来当容器，而每个Fragment被add 或者 replace 到这个FrameLayout的时候，都是显示在最上层的。所以你看到的界面都是一样的。但是，使用add的情况下，这个FrameLayout其实有2层，多层肯定要比一层的来得浪费，所以还是推荐使用replace。当然有时候还是需要使用add的。比如要实现轮播图的效果，每个轮播图都是一个独立的Fragment，而他的容器FrameLayout需要add多个Fragment，这样他就可以根据提供的逻辑进行轮播了。\n\n而至于返回键的时候，这个跟事务有关，跟使用add还是replace没有任何关系。\n\n###\t5.要想fragment完整地执行生命周期\nfragment跳转是要使用replace()方法，并一定要指定tag，否则有些方法不会执行（比如onResume），例如：\n\n~~~ Java\ngetFragmentManager()\n \t.beginTransaction()\n    .replace(R.id.base_container,\n    \t inputVerifyCodeFragment,\"tag_code\")\n    .addToBackStack(null).commit();\n~~~\n\n### 6.fragment事件穿透\n如果发现fragment2的点击事件可以被fragment栈下一层的fragment1获取到，可以在fragment2布局的根部加上：android:clickable=\"true\"。问题解决\n","slug":"facebook-google+signin","published":1,"date":"2016-03-14T16:00:00.000Z","updated":"2017-11-23T07:23:59.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebvw000ad6yk14yre00n","content":"<h3 id=\"1-相关资料\"><a href=\"#1-相关资料\" class=\"headerlink\" title=\"1.相关资料\"></a>1.相关资料</h3><p>blog: <a href=\"http://www.cnblogs.com/lngg057/p/5020192.html\" target=\"_blank\" rel=\"external\">关于Google+以及Facebook第三方登录实现的一点总结</a></p>\n<p>g+官方教程: <a href=\"https://developers.google.com/identity/sign-in/android/start\" target=\"_blank\" rel=\"external\">G+ start</a></p>\n<p>facebook官方教程: <a href=\"https://developers.facebook.com/docs/android/getting-started\" target=\"_blank\" rel=\"external\">Facebook start</a></p>\n<p>iCCP: <a href=\"http://www.bigademo.com/iccp-not-recognizing-known-srgb-profile/\" target=\"_blank\" rel=\"external\">Not recognizing known sRGB profile</a></p>\n<a id=\"more\"></a>\n<ul>\n<li><p>今天做分享的时候遇到了这个问题：</p>\n<p>  [2016-04-01 11:24:04 - Dex Loader] Unable to execute dex: method ID not in [0, 0xffff]: 65536<br>  [2016-04-01 11:24:04 - VIVAT_SHARESDK] Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536</p>\n</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/yaozhongxiao/p/3521428.html\" target=\"_blank\" rel=\"external\">大项目中遇到的问题看这个博客</a></p>\n<ul>\n<li>iCCP: Not recognizing known sRGB profile 删除png图片内嵌的iCCP profile sRGB报错</li>\n</ul>\n<p>今天有碰见一个坑，改其他代码，然后在编译的时候就出现这个问题，对就是这个问题。网上查了资料，也就这个资料最全面，大家可以去看见<a href=\"http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS\" target=\"_blank\" rel=\"external\">http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS</a></p>\n<p>处理这个问题我使用了一种方法，记录下来以便以后使用</p>\n<p>步骤1:下载Image Magick <a href=\"http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的\" target=\"_blank\" rel=\"external\">http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的</a></p>\n<p>步骤2： 在要处理的文件夹使用如下命令 ，一定要在要处理的文件夹使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//WINDOWS使用</div><div class=\"line\">set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  </div><div class=\"line\">for /f \"tokens=*\" %i in ('dir/s/b *.png') do \"%fn%\" \"%i\" -strip \"%i\"</div><div class=\"line\">（因为是window的，所以把%%i改为%i）</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//LINUX使用</div><div class=\"line\"> set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  </div><div class=\"line\">for /f \"tokens=*\" %%i in ('dir/s/b *.png') do \"%fn%\" \"%%i\" -strip \"%%i\"</div></pre></td></tr></table></figure>\n<h3 id=\"2-遇到问题\"><a href=\"#2-遇到问题\" class=\"headerlink\" title=\"2.遇到问题\"></a>2.遇到问题</h3><ul>\n<li><p>1.“This client application’s callback url has been locked”.</p>\n<p>  使用Twitter signin时遇到了这个问题，这个错误信息是在logcat中找到的，原因是在<a href=\"https://apps.twitter.com\" target=\"_blank\" rel=\"external\">Twitter</a>的Settings里勾选了“Enable Callback Locking (It is recommended to enable callback locking to ensure apps cannot overwrite the callback url)”选项，这个选项表示不允许app本地更改callback url。也可看这个<a href=\"https://twittercommunity.com/t/callback-url-is-locked/59481\" target=\"_blank\" rel=\"external\">页面</a></p>\n</li>\n</ul>\n<h3 id=\"3-add-vs-replace\"><a href=\"#3-add-vs-replace\" class=\"headerlink\" title=\"3.add() vs. replace()\"></a>3.add() vs. replace()</h3><ul>\n<li><p>只有在Fragment数量大于等于2的时候，调用add()还是replace()的区别才能体现出来。</p>\n<p>  当通过add()连续两次添加Fragment的时候，每个Fragment生命周期中的onAttach()-onResume()都会被各调用一次，而且两个Fragment的View会被同时attach到containerView。</p>\n<p>  同样，退出Activty时，每个Fragment生命周期中的onPause()-onDetach()也会被各调用一次。</p>\n<p>  但当使用replace()来添加Fragment的时候，第二次添加会导致第一个Fragment被销毁，即执行第二个Fragment的onAttach()方法之前会先执行第一个Fragment的onPause()-onDetach()方法，同时containerView会detach第一个Fragment的View。</p>\n</li>\n<li><p>调用show() &amp; hide()方法时.</p>\n<p>  Fragment的生命周期方法并不会被执行，仅仅是Fragment的View被显示或者​隐藏。而且，尽管Fragment的View被隐藏，但它在父布局中并未被detach，仍然是作为containerView的childView存在着。相比较下，attach() &amp; detach()做的就更彻底一些。一旦一个Fragment被detach()，它的onPause()-onDestroyView()周期都会被执行。</p>\n<p>  同时Fragment的View也会被detach。在重新调用attach()后，onCreateView()-onResume()周期也会被再次执行。</p>\n</li>\n<li><p>remove()</p>\n<p>  其实看完上面的分析，remove()方法基本也就明白了。相对应add()方法执行onAttach()-onResume()的生命周期，remove()就是完成剩下的onPause()-onDetach()周期。</p>\n</li>\n</ul>\n<h3 id=\"4-FragmentTransaction-add-和-replace-区别\"><a href=\"#4-FragmentTransaction-add-和-replace-区别\" class=\"headerlink\" title=\"4.FragmentTransaction add 和 replace 区别\"></a>4.FragmentTransaction add 和 replace 区别</h3><p>使用 FragmentTransaction 的时候，它提供了这样两个方法，一个 add ， 一个 replace .add 和 replace 影响的只是界面，而控制回退的，是事务。</p>\n<ul>\n<li><p>add 是把一个fragment添加到一个容器 container 里。</p>\n<p>  Add a fragment to the activity state. This fragment may optionally also have its view (if Fragment.onCreateView returns non-null) into a container view of the activity.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> FragmentTransaction <span class=\"title\">add</span> <span class=\"params\">(<span class=\"keyword\">int</span> containerViewId, Fragment fragment, String tag)</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>replace 是先remove掉相同id的所有fragment，然后在add当前的这个fragment。</p>\n<p>  Replace an existing fragment that was added to a container. This is essentially the same as calling remove(Fragment) for all currently added fragments that were added with the same containerViewId and then add(int, Fragment, String) with the same arguments given here.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> FragmentTransaction <span class=\"title\">replace</span> <span class=\"params\">(<span class=\"keyword\">int</span> containerViewId, Fragment fragment, String tag)</span></span></div></pre></td></tr></table></figure>\n<p>在大部分情况下，这两个的表现基本相同。因为，一般，咱们会使用一个FrameLayout来当容器，而每个Fragment被add 或者 replace 到这个FrameLayout的时候，都是显示在最上层的。所以你看到的界面都是一样的。但是，使用add的情况下，这个FrameLayout其实有2层，多层肯定要比一层的来得浪费，所以还是推荐使用replace。当然有时候还是需要使用add的。比如要实现轮播图的效果，每个轮播图都是一个独立的Fragment，而他的容器FrameLayout需要add多个Fragment，这样他就可以根据提供的逻辑进行轮播了。</p>\n<p>而至于返回键的时候，这个跟事务有关，跟使用add还是replace没有任何关系。</p>\n<h3 id=\"5-要想fragment完整地执行生命周期\"><a href=\"#5-要想fragment完整地执行生命周期\" class=\"headerlink\" title=\"5.要想fragment完整地执行生命周期\"></a>5.要想fragment完整地执行生命周期</h3><p>fragment跳转是要使用replace()方法，并一定要指定tag，否则有些方法不会执行（比如onResume），例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">getFragmentManager()</div><div class=\"line\"> \t.beginTransaction()</div><div class=\"line\">    .replace(R.id.base_container,</div><div class=\"line\">    \t inputVerifyCodeFragment,<span class=\"string\">\"tag_code\"</span>)</div><div class=\"line\">    .addToBackStack(<span class=\"keyword\">null</span>).commit();</div></pre></td></tr></table></figure>\n<h3 id=\"6-fragment事件穿透\"><a href=\"#6-fragment事件穿透\" class=\"headerlink\" title=\"6.fragment事件穿透\"></a>6.fragment事件穿透</h3><p>如果发现fragment2的点击事件可以被fragment栈下一层的fragment1获取到，可以在fragment2布局的根部加上：android:clickable=”true”。问题解决</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/15/facebook-google+signin/\">http://agehua.github.io/2016/03/15/facebook-google+signin/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.71,"time":102600,"words":342},"excerpt":"<h3 id=\"1-相关资料\"><a href=\"#1-相关资料\" class=\"headerlink\" title=\"1.相关资料\"></a>1.相关资料</h3><p>blog: <a href=\"http://www.cnblogs.com/lngg057/p/5020192.html\">关于Google+以及Facebook第三方登录实现的一点总结</a></p>\n<p>g+官方教程: <a href=\"https://developers.google.com/identity/sign-in/android/start\">G+ start</a></p>\n<p>facebook官方教程: <a href=\"https://developers.facebook.com/docs/android/getting-started\">Facebook start</a></p>\n<p>iCCP: <a href=\"http://www.bigademo.com/iccp-not-recognizing-known-srgb-profile/\">Not recognizing known sRGB profile</a></p>","more":"<ul>\n<li><p>今天做分享的时候遇到了这个问题：</p>\n<p>  [2016-04-01 11:24:04 - Dex Loader] Unable to execute dex: method ID not in [0, 0xffff]: 65536<br>  [2016-04-01 11:24:04 - VIVAT_SHARESDK] Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536</p>\n</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/yaozhongxiao/p/3521428.html\">大项目中遇到的问题看这个博客</a></p>\n<ul>\n<li>iCCP: Not recognizing known sRGB profile 删除png图片内嵌的iCCP profile sRGB报错</li>\n</ul>\n<p>今天有碰见一个坑，改其他代码，然后在编译的时候就出现这个问题，对就是这个问题。网上查了资料，也就这个资料最全面，大家可以去看见<a href=\"http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS\">http://my.oschina.net/1pei/blog/479162?fromerr=ARrUPlGS</a></p>\n<p>处理这个问题我使用了一种方法，记录下来以便以后使用</p>\n<p>步骤1:下载Image Magick <a href=\"http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的\">http://www.imagemagick.com.cn/download.html.如果是windows的，请下载含dll的</a></p>\n<p>步骤2： 在要处理的文件夹使用如下命令 ，一定要在要处理的文件夹使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//WINDOWS使用</div><div class=\"line\">set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  </div><div class=\"line\">for /f \"tokens=*\" %i in ('dir/s/b *.png') do \"%fn%\" \"%i\" -strip \"%i\"</div><div class=\"line\">（因为是window的，所以把%%i改为%i）</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//LINUX使用</div><div class=\"line\"> set fn=E:\\Program Files\\ImageMagick-6.9.0-Q16\\convert.exe  </div><div class=\"line\">for /f \"tokens=*\" %%i in ('dir/s/b *.png') do \"%fn%\" \"%%i\" -strip \"%%i\"</div></pre></td></tr></table></figure>\n<h3 id=\"2-遇到问题\"><a href=\"#2-遇到问题\" class=\"headerlink\" title=\"2.遇到问题\"></a>2.遇到问题</h3><ul>\n<li><p>1.“This client application’s callback url has been locked”.</p>\n<p>  使用Twitter signin时遇到了这个问题，这个错误信息是在logcat中找到的，原因是在<a href=\"https://apps.twitter.com\">Twitter</a>的Settings里勾选了“Enable Callback Locking (It is recommended to enable callback locking to ensure apps cannot overwrite the callback url)”选项，这个选项表示不允许app本地更改callback url。也可看这个<a href=\"https://twittercommunity.com/t/callback-url-is-locked/59481\">页面</a></p>\n</li>\n</ul>\n<h3 id=\"3-add-vs-replace\"><a href=\"#3-add-vs-replace\" class=\"headerlink\" title=\"3.add() vs. replace()\"></a>3.add() vs. replace()</h3><ul>\n<li><p>只有在Fragment数量大于等于2的时候，调用add()还是replace()的区别才能体现出来。</p>\n<p>  当通过add()连续两次添加Fragment的时候，每个Fragment生命周期中的onAttach()-onResume()都会被各调用一次，而且两个Fragment的View会被同时attach到containerView。</p>\n<p>  同样，退出Activty时，每个Fragment生命周期中的onPause()-onDetach()也会被各调用一次。</p>\n<p>  但当使用replace()来添加Fragment的时候，第二次添加会导致第一个Fragment被销毁，即执行第二个Fragment的onAttach()方法之前会先执行第一个Fragment的onPause()-onDetach()方法，同时containerView会detach第一个Fragment的View。</p>\n</li>\n<li><p>调用show() &amp; hide()方法时.</p>\n<p>  Fragment的生命周期方法并不会被执行，仅仅是Fragment的View被显示或者​隐藏。而且，尽管Fragment的View被隐藏，但它在父布局中并未被detach，仍然是作为containerView的childView存在着。相比较下，attach() &amp; detach()做的就更彻底一些。一旦一个Fragment被detach()，它的onPause()-onDestroyView()周期都会被执行。</p>\n<p>  同时Fragment的View也会被detach。在重新调用attach()后，onCreateView()-onResume()周期也会被再次执行。</p>\n</li>\n<li><p>remove()</p>\n<p>  其实看完上面的分析，remove()方法基本也就明白了。相对应add()方法执行onAttach()-onResume()的生命周期，remove()就是完成剩下的onPause()-onDetach()周期。</p>\n</li>\n</ul>\n<h3 id=\"4-FragmentTransaction-add-和-replace-区别\"><a href=\"#4-FragmentTransaction-add-和-replace-区别\" class=\"headerlink\" title=\"4.FragmentTransaction add 和 replace 区别\"></a>4.FragmentTransaction add 和 replace 区别</h3><p>使用 FragmentTransaction 的时候，它提供了这样两个方法，一个 add ， 一个 replace .add 和 replace 影响的只是界面，而控制回退的，是事务。</p>\n<ul>\n<li><p>add 是把一个fragment添加到一个容器 container 里。</p>\n<p>  Add a fragment to the activity state. This fragment may optionally also have its view (if Fragment.onCreateView returns non-null) into a container view of the activity.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> FragmentTransaction <span class=\"title\">add</span> <span class=\"params\">(<span class=\"keyword\">int</span> containerViewId, Fragment fragment, String tag)</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>replace 是先remove掉相同id的所有fragment，然后在add当前的这个fragment。</p>\n<p>  Replace an existing fragment that was added to a container. This is essentially the same as calling remove(Fragment) for all currently added fragments that were added with the same containerViewId and then add(int, Fragment, String) with the same arguments given here.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> FragmentTransaction <span class=\"title\">replace</span> <span class=\"params\">(<span class=\"keyword\">int</span> containerViewId, Fragment fragment, String tag)</span></span></div></pre></td></tr></table></figure>\n<p>在大部分情况下，这两个的表现基本相同。因为，一般，咱们会使用一个FrameLayout来当容器，而每个Fragment被add 或者 replace 到这个FrameLayout的时候，都是显示在最上层的。所以你看到的界面都是一样的。但是，使用add的情况下，这个FrameLayout其实有2层，多层肯定要比一层的来得浪费，所以还是推荐使用replace。当然有时候还是需要使用add的。比如要实现轮播图的效果，每个轮播图都是一个独立的Fragment，而他的容器FrameLayout需要add多个Fragment，这样他就可以根据提供的逻辑进行轮播了。</p>\n<p>而至于返回键的时候，这个跟事务有关，跟使用add还是replace没有任何关系。</p>\n<h3 id=\"5-要想fragment完整地执行生命周期\"><a href=\"#5-要想fragment完整地执行生命周期\" class=\"headerlink\" title=\"5.要想fragment完整地执行生命周期\"></a>5.要想fragment完整地执行生命周期</h3><p>fragment跳转是要使用replace()方法，并一定要指定tag，否则有些方法不会执行（比如onResume），例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">getFragmentManager()</div><div class=\"line\"> \t.beginTransaction()</div><div class=\"line\">    .replace(R.id.base_container,</div><div class=\"line\">    \t inputVerifyCodeFragment,<span class=\"string\">\"tag_code\"</span>)</div><div class=\"line\">    .addToBackStack(<span class=\"keyword\">null</span>).commit();</div></pre></td></tr></table></figure>\n<h3 id=\"6-fragment事件穿透\"><a href=\"#6-fragment事件穿透\" class=\"headerlink\" title=\"6.fragment事件穿透\"></a>6.fragment事件穿透</h3><p>如果发现fragment2的点击事件可以被fragment栈下一层的fragment1获取到，可以在fragment2布局的根部加上：android:clickable=”true”。问题解决</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/15/facebook-google+signin/\">http://agehua.github.io/2016/03/15/facebook-google+signin/</a></p>"},{"layout":"post","title":"android新特性新知识点总结","keywords":"新特性, 新知识点,总结","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg","_content":"\n\n### 一、mipmap 目录和drawable 目录有什么区别\nNexus 6 有 493 ppi，它刚好在 xxhdpi和xxxhdpi之间，所以显示的时候需要对xxxhdpi的资源进行缩小，如果你用了mipmap-xxxhdpi,那么这里会对sclae有一个优化，性能更好，占用内存更少。所以现在官方推荐使用mipmap：\n\n### 二、setTranslucentStatus()方法\n在Android4.4之后使用沉浸式状态栏，需要用到这个方法\n\n<!--more-->\n\n~~~ Java\npublic class MainActivity extends Activity\n{\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //首先检测当前的版本是否是api>=19的\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)\n        {\n            setTranslucentStatus(true);\n        }\n\n        SystemBarTintManager tintManager = new SystemBarTintManager(this);\n        tintManager.setStatusBarTintEnabled(true);\n        tintManager.setStatusBarTintColor(Color.parseColor(\"#FFC1E0\"));\n    }\n\n    @TargetApi(19)\n    private void setTranslucentStatus(boolean on)\n    {\n        Window win = getWindow();\n        WindowManager.LayoutParams winParams = win.getAttributes();\n        final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;\n        if (on)\n        {\n            winParams.flags |= bits;\n        }\n        else\n        {\n            winParams.flags &= ~bits;\n        }\n        win.setAttributes(winParams);\n    }\n}\n~~~\n\n布局设置\n\n~~~ Javascript%\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              <!--这两行是必须设置的-->\n              android:fitsSystemWindows=\"true\"\n              android:clipToPadding=\"true\"\n\n              android:orientation=\"vertical\"\n              android:background=\"#FFD9EC\"\n        >\n\n    <TextView\n            android:text=\"沉浸式状态栏\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:textSize=\"23dp\"\n            android:layout_gravity=\"center_horizontal\"\n            android:gravity=\"center\"\n            android:background=\"#FFD9EC\"\n            />\n    <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:background=\"@android:color/darker_gray\"/>\n\n</LinearLayout>\n~~~\n\n### 三、获取Bitmap图片大小的代码\n\n~~~ Java\npublic int getBitmapSize(Bitmap bitmap){\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){     //API 19\n        return bitmap.getAllocationByteCount();\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1){//API 12\n        return bitmap.getByteCount();\n    }\n    return bitmap.getRowBytes() * bitmap.getHeight();                //earlier version\n}\n~~~\n\n\n### 四、Activity横竖屏切换生命周期\n\n总结：\n\n* 1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次\n\n* 2、设置Activity的android:configChanges=\"orientation\"时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次\n\n* 3、设置Activity的android:configChanges=\"orientation\\|keyboardHidden\"时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法\n\n验证：\n\n1、新建一个Activity，并把各个生命周期打印出来\n\n2、运行Activity，得到如下信息\n\n~~~ Java\nonCreate-->\nonStart-->\nonResume-->\n~~~\n\n3、按crtl+f12切换成横屏时\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n4、再按crtl+f12切换成竖屏时，发现打印了两次相同的log\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n5、修改AndroidManifest.xml，把该Activity添加 android:configChanges=\"orientation\"，执行步骤3\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n6、再执行步骤4，发现不会再打印相同信息，但多打印了一行onConfigChanged\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\nonConfigurationChanged-->\n~~~\n7、把步骤5的android:configChanges=\"orientation\" 改成android:configChanges=\"orientation\\|keyboardHidden\"，执行步骤3，就只打印onConfigChanged\n\n~~~ Java\nonConfigurationChanged-->\n~~~\n8、执行步骤4\n\n~~~ Java\nonConfigurationChanged-->\nonConfigurationChanged-->\n~~~\n\n总结一下整个Activity的生命周期\n\n  - 1.补充一点，当前Activity产生事件弹出Toast和AlertDialog的时候Activity的生命周期不会有改变\n  - 2.Activity运行时按下HOME键(跟被完全覆盖是一样的)：onSaveInstanceState --> onPause --> onStop       onRestart -->onStart--->onResume\n  - 3.Activity未被完全覆盖只是失去焦点：onPause--->onResume\n","source":"_posts/2016-03-20-android-new-knowledge-summary.md","raw":"---\nlayout: post\ntitle:  android新特性新知识点总结\ncategory: accumulation\ntags:\n  - ANDROID\n  - new features\n  - Basic Knowledge\nkeywords: 新特性, 新知识点,总结\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg\n---\n\n\n### 一、mipmap 目录和drawable 目录有什么区别\nNexus 6 有 493 ppi，它刚好在 xxhdpi和xxxhdpi之间，所以显示的时候需要对xxxhdpi的资源进行缩小，如果你用了mipmap-xxxhdpi,那么这里会对sclae有一个优化，性能更好，占用内存更少。所以现在官方推荐使用mipmap：\n\n### 二、setTranslucentStatus()方法\n在Android4.4之后使用沉浸式状态栏，需要用到这个方法\n\n<!--more-->\n\n~~~ Java\npublic class MainActivity extends Activity\n{\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //首先检测当前的版本是否是api>=19的\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)\n        {\n            setTranslucentStatus(true);\n        }\n\n        SystemBarTintManager tintManager = new SystemBarTintManager(this);\n        tintManager.setStatusBarTintEnabled(true);\n        tintManager.setStatusBarTintColor(Color.parseColor(\"#FFC1E0\"));\n    }\n\n    @TargetApi(19)\n    private void setTranslucentStatus(boolean on)\n    {\n        Window win = getWindow();\n        WindowManager.LayoutParams winParams = win.getAttributes();\n        final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;\n        if (on)\n        {\n            winParams.flags |= bits;\n        }\n        else\n        {\n            winParams.flags &= ~bits;\n        }\n        win.setAttributes(winParams);\n    }\n}\n~~~\n\n布局设置\n\n~~~ Javascript%\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              <!--这两行是必须设置的-->\n              android:fitsSystemWindows=\"true\"\n              android:clipToPadding=\"true\"\n\n              android:orientation=\"vertical\"\n              android:background=\"#FFD9EC\"\n        >\n\n    <TextView\n            android:text=\"沉浸式状态栏\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:textSize=\"23dp\"\n            android:layout_gravity=\"center_horizontal\"\n            android:gravity=\"center\"\n            android:background=\"#FFD9EC\"\n            />\n    <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:background=\"@android:color/darker_gray\"/>\n\n</LinearLayout>\n~~~\n\n### 三、获取Bitmap图片大小的代码\n\n~~~ Java\npublic int getBitmapSize(Bitmap bitmap){\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){     //API 19\n        return bitmap.getAllocationByteCount();\n    }\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1){//API 12\n        return bitmap.getByteCount();\n    }\n    return bitmap.getRowBytes() * bitmap.getHeight();                //earlier version\n}\n~~~\n\n\n### 四、Activity横竖屏切换生命周期\n\n总结：\n\n* 1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次\n\n* 2、设置Activity的android:configChanges=\"orientation\"时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次\n\n* 3、设置Activity的android:configChanges=\"orientation\\|keyboardHidden\"时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法\n\n验证：\n\n1、新建一个Activity，并把各个生命周期打印出来\n\n2、运行Activity，得到如下信息\n\n~~~ Java\nonCreate-->\nonStart-->\nonResume-->\n~~~\n\n3、按crtl+f12切换成横屏时\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n4、再按crtl+f12切换成竖屏时，发现打印了两次相同的log\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n5、修改AndroidManifest.xml，把该Activity添加 android:configChanges=\"orientation\"，执行步骤3\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\n~~~\n6、再执行步骤4，发现不会再打印相同信息，但多打印了一行onConfigChanged\n\n~~~ Java\nonSaveInstanceState-->\nonPause-->\nonStop-->\nonDestroy-->\nonCreate-->\nonStart-->\nonRestoreInstanceState-->\nonResume-->\nonConfigurationChanged-->\n~~~\n7、把步骤5的android:configChanges=\"orientation\" 改成android:configChanges=\"orientation\\|keyboardHidden\"，执行步骤3，就只打印onConfigChanged\n\n~~~ Java\nonConfigurationChanged-->\n~~~\n8、执行步骤4\n\n~~~ Java\nonConfigurationChanged-->\nonConfigurationChanged-->\n~~~\n\n总结一下整个Activity的生命周期\n\n  - 1.补充一点，当前Activity产生事件弹出Toast和AlertDialog的时候Activity的生命周期不会有改变\n  - 2.Activity运行时按下HOME键(跟被完全覆盖是一样的)：onSaveInstanceState --> onPause --> onStop       onRestart -->onStart--->onResume\n  - 3.Activity未被完全覆盖只是失去焦点：onPause--->onResume\n","slug":"android-new-knowledge-summary","published":1,"date":"2016-03-19T16:00:00.000Z","updated":"2017-12-05T06:33:51.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebw2000dd6yklg3an2hg","content":"<h3 id=\"一、mipmap-目录和drawable-目录有什么区别\"><a href=\"#一、mipmap-目录和drawable-目录有什么区别\" class=\"headerlink\" title=\"一、mipmap 目录和drawable 目录有什么区别\"></a>一、mipmap 目录和drawable 目录有什么区别</h3><p>Nexus 6 有 493 ppi，它刚好在 xxhdpi和xxxhdpi之间，所以显示的时候需要对xxxhdpi的资源进行缩小，如果你用了mipmap-xxxhdpi,那么这里会对sclae有一个优化，性能更好，占用内存更少。所以现在官方推荐使用mipmap：</p>\n<h3 id=\"二、setTranslucentStatus-方法\"><a href=\"#二、setTranslucentStatus-方法\" class=\"headerlink\" title=\"二、setTranslucentStatus()方法\"></a>二、setTranslucentStatus()方法</h3><p>在Android4.4之后使用沉浸式状态栏，需要用到这个方法</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//首先检测当前的版本是否是api&gt;=19的</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)</div><div class=\"line\">        &#123;</div><div class=\"line\">            setTranslucentStatus(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        SystemBarTintManager tintManager = <span class=\"keyword\">new</span> SystemBarTintManager(<span class=\"keyword\">this</span>);</div><div class=\"line\">        tintManager.setStatusBarTintEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        tintManager.setStatusBarTintColor(Color.parseColor(<span class=\"string\">\"#FFC1E0\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(<span class=\"number\">19</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTranslucentStatus</span><span class=\"params\">(<span class=\"keyword\">boolean</span> on)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Window win = getWindow();</div><div class=\"line\">        WindowManager.LayoutParams winParams = win.getAttributes();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</div><div class=\"line\">        <span class=\"keyword\">if</span> (on)</div><div class=\"line\">        &#123;</div><div class=\"line\">            winParams.flags |= bits;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            winParams.flags &amp;= ~bits;</div><div class=\"line\">        &#125;</div><div class=\"line\">        win.setAttributes(winParams);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>布局设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">              android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">              android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">              &lt;!--这两行是必须设置的--&gt;</div><div class=\"line\">              android:fitsSystemWindows=&quot;true&quot;</div><div class=\"line\">              android:clipToPadding=&quot;true&quot;</div><div class=\"line\"></div><div class=\"line\">              android:orientation=&quot;vertical&quot;</div><div class=\"line\">              android:background=&quot;#FFD9EC&quot;</div><div class=\"line\">        &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">            android:text=&quot;沉浸式状态栏&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;50dp&quot;</div><div class=\"line\">            android:textSize=&quot;23dp&quot;</div><div class=\"line\">            android:layout_gravity=&quot;center_horizontal&quot;</div><div class=\"line\">            android:gravity=&quot;center&quot;</div><div class=\"line\">            android:background=&quot;#FFD9EC&quot;</div><div class=\"line\">            /&gt;</div><div class=\"line\">    &lt;TextView</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:background=&quot;@android:color/darker_gray&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"三、获取Bitmap图片大小的代码\"><a href=\"#三、获取Bitmap图片大小的代码\" class=\"headerlink\" title=\"三、获取Bitmap图片大小的代码\"></a>三、获取Bitmap图片大小的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBitmapSize</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;     <span class=\"comment\">//API 19</span></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1)&#123;<span class=\"comment\">//API 12</span></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap.getByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap.getRowBytes() * bitmap.getHeight();                <span class=\"comment\">//earlier version</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"四、Activity横竖屏切换生命周期\"><a href=\"#四、Activity横竖屏切换生命周期\" class=\"headerlink\" title=\"四、Activity横竖屏切换生命周期\"></a>四、Activity横竖屏切换生命周期</h3><p>总结：</p>\n<ul>\n<li><p>1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次</p>\n</li>\n<li><p>2、设置Activity的android:configChanges=”orientation”时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次</p>\n</li>\n<li><p>3、设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p>\n</li>\n</ul>\n<p>验证：</p>\n<p>1、新建一个Activity，并把各个生命周期打印出来</p>\n<p>2、运行Activity，得到如下信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>3、按crtl+f12切换成横屏时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>4、再按crtl+f12切换成竖屏时，发现打印了两次相同的log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>5、修改AndroidManifest.xml，把该Activity添加 android:configChanges=”orientation”，执行步骤3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>6、再执行步骤4，发现不会再打印相同信息，但多打印了一行onConfigChanged</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>7、把步骤5的android:configChanges=”orientation” 改成android:configChanges=”orientation|keyboardHidden”，执行步骤3，就只打印onConfigChanged</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>8、执行步骤4</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onConfigurationChanged--&gt;</div><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>总结一下整个Activity的生命周期</p>\n<ul>\n<li>1.补充一点，当前Activity产生事件弹出Toast和AlertDialog的时候Activity的生命周期不会有改变</li>\n<li>2.Activity运行时按下HOME键(跟被完全覆盖是一样的)：onSaveInstanceState –&gt; onPause –&gt; onStop       onRestart –&gt;onStart—&gt;onResume</li>\n<li>3.Activity未被完全覆盖只是失去焦点：onPause—&gt;onResume</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/20/android-new-knowledge-summary/\">http://agehua.github.io/2016/03/20/android-new-knowledge-summary/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.9,"time":114000,"words":380},"excerpt":"<h3 id=\"一、mipmap-目录和drawable-目录有什么区别\"><a href=\"#一、mipmap-目录和drawable-目录有什么区别\" class=\"headerlink\" title=\"一、mipmap 目录和drawable 目录有什么区别\"></a>一、mipmap 目录和drawable 目录有什么区别</h3><p>Nexus 6 有 493 ppi，它刚好在 xxhdpi和xxxhdpi之间，所以显示的时候需要对xxxhdpi的资源进行缩小，如果你用了mipmap-xxxhdpi,那么这里会对sclae有一个优化，性能更好，占用内存更少。所以现在官方推荐使用mipmap：</p>\n<h3 id=\"二、setTranslucentStatus-方法\"><a href=\"#二、setTranslucentStatus-方法\" class=\"headerlink\" title=\"二、setTranslucentStatus()方法\"></a>二、setTranslucentStatus()方法</h3><p>在Android4.4之后使用沉浸式状态栏，需要用到这个方法</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//首先检测当前的版本是否是api&gt;=19的</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)</div><div class=\"line\">        &#123;</div><div class=\"line\">            setTranslucentStatus(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        SystemBarTintManager tintManager = <span class=\"keyword\">new</span> SystemBarTintManager(<span class=\"keyword\">this</span>);</div><div class=\"line\">        tintManager.setStatusBarTintEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        tintManager.setStatusBarTintColor(Color.parseColor(<span class=\"string\">\"#FFC1E0\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@TargetApi</span>(<span class=\"number\">19</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setTranslucentStatus</span><span class=\"params\">(<span class=\"keyword\">boolean</span> on)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        Window win = getWindow();</div><div class=\"line\">        WindowManager.LayoutParams winParams = win.getAttributes();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</div><div class=\"line\">        <span class=\"keyword\">if</span> (on)</div><div class=\"line\">        &#123;</div><div class=\"line\">            winParams.flags |= bits;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            winParams.flags &amp;= ~bits;</div><div class=\"line\">        &#125;</div><div class=\"line\">        win.setAttributes(winParams);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>布局设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">              android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">              android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">              &lt;!--这两行是必须设置的--&gt;</div><div class=\"line\">              android:fitsSystemWindows=&quot;true&quot;</div><div class=\"line\">              android:clipToPadding=&quot;true&quot;</div><div class=\"line\"></div><div class=\"line\">              android:orientation=&quot;vertical&quot;</div><div class=\"line\">              android:background=&quot;#FFD9EC&quot;</div><div class=\"line\">        &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">            android:text=&quot;沉浸式状态栏&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;50dp&quot;</div><div class=\"line\">            android:textSize=&quot;23dp&quot;</div><div class=\"line\">            android:layout_gravity=&quot;center_horizontal&quot;</div><div class=\"line\">            android:gravity=&quot;center&quot;</div><div class=\"line\">            android:background=&quot;#FFD9EC&quot;</div><div class=\"line\">            /&gt;</div><div class=\"line\">    &lt;TextView</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:background=&quot;@android:color/darker_gray&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"三、获取Bitmap图片大小的代码\"><a href=\"#三、获取Bitmap图片大小的代码\" class=\"headerlink\" title=\"三、获取Bitmap图片大小的代码\"></a>三、获取Bitmap图片大小的代码</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBitmapSize</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;     <span class=\"comment\">//API 19</span></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1)&#123;<span class=\"comment\">//API 12</span></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap.getByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap.getRowBytes() * bitmap.getHeight();                <span class=\"comment\">//earlier version</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"四、Activity横竖屏切换生命周期\"><a href=\"#四、Activity横竖屏切换生命周期\" class=\"headerlink\" title=\"四、Activity横竖屏切换生命周期\"></a>四、Activity横竖屏切换生命周期</h3><p>总结：</p>\n<ul>\n<li><p>1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次</p>\n</li>\n<li><p>2、设置Activity的android:configChanges=”orientation”时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次</p>\n</li>\n<li><p>3、设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p>\n</li>\n</ul>\n<p>验证：</p>\n<p>1、新建一个Activity，并把各个生命周期打印出来</p>\n<p>2、运行Activity，得到如下信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>3、按crtl+f12切换成横屏时</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>4、再按crtl+f12切换成竖屏时，发现打印了两次相同的log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>5、修改AndroidManifest.xml，把该Activity添加 android:configChanges=”orientation”，执行步骤3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div></pre></td></tr></table></figure>\n<p>6、再执行步骤4，发现不会再打印相同信息，但多打印了一行onConfigChanged</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onSaveInstanceState--&gt;</div><div class=\"line\">onPause--&gt;</div><div class=\"line\">onStop--&gt;</div><div class=\"line\">onDestroy--&gt;</div><div class=\"line\">onCreate--&gt;</div><div class=\"line\">onStart--&gt;</div><div class=\"line\">onRestoreInstanceState--&gt;</div><div class=\"line\">onResume--&gt;</div><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>7、把步骤5的android:configChanges=”orientation” 改成android:configChanges=”orientation|keyboardHidden”，执行步骤3，就只打印onConfigChanged</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>8、执行步骤4</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">onConfigurationChanged--&gt;</div><div class=\"line\">onConfigurationChanged--&gt;</div></pre></td></tr></table></figure>\n<p>总结一下整个Activity的生命周期</p>\n<ul>\n<li>1.补充一点，当前Activity产生事件弹出Toast和AlertDialog的时候Activity的生命周期不会有改变</li>\n<li>2.Activity运行时按下HOME键(跟被完全覆盖是一样的)：onSaveInstanceState –&gt; onPause –&gt; onStop       onRestart –&gt;onStart—&gt;onResume</li>\n<li>3.Activity未被完全覆盖只是失去焦点：onPause—&gt;onResume</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/20/android-new-knowledge-summary/\">http://agehua.github.io/2016/03/20/android-new-knowledge-summary/</a></p>"},{"layout":"post","title":"《android开发艺术探索》读书笔记","keywords":"《android开发艺术探索》,读书笔记","banner":"http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg","_content":"\n\n### 第1章 Activity的生命周期和启动模式\n\n本节和《Android群英传》中的第8章Activity和Activity调用栈分析有关系，建议先阅读该章的总结\n\n第1章 Activity的生命周期和启动模式\n\n#### 1.1 Activity生命周期全面分析\n\n##### 1.1.1 典型情况下生命周期分析\n\n- (1)一般情况下，当当前Activity从不可见重新变为可见状态时，onRestart方法就会被调用。\n\n- (2)当用户打开新的Activity或者切换到桌面的时候，回调如下：onPause -> onStop，但是如果新Activity采用了透明主题，那么onStop方法不会被回调。当用户再次回到原来的Activity时，回调如下：onRestart -> onStart -> onResume。\n\n<!--more-->\n\n- (3)onStart和onStop对应，它们是从Activity是否可见这个角度来回调的；onPause和onResume方法对应，它们是从Activity是否位于前台这个角度来回调的。\n\n- (4)从Activity A进入到Activity B，回调顺序是onPause(A) -> onCreate(B) -> onStart(B) -> onResume(B) -> onStop(A)，所以不能在onPause方法中做重量级的操作。\n\n1.1.2 异常情况下生命周期分析\n\n- (1)onSaveInstanceState方法只会出现在Activity被异常终止的情况下，它的调用时机是在onStop之前，它和onPause方法没有既定的时序关系，可能在它之前，也可能在它之后。\n\n    当Activity被重新创建的时候，onRestoreInstanceState会被回调，它的调用时机是onStart之后。\n\n    系统只会在Activity即将被销毁并且有机会重新显示的情况下才会去调用onSaveInstanceState方法。\n\n    当Activity在异常情况下需要重新创建时，系统会默认为我们保存当前Activity的视图结构，并且在Activity重启后为我们恢复这些数据，比如文本框中用户输入的数据、listview滚动的位置等，这些view相关的状态系统都会默认为我们恢复。具体针对某一个view系统能为我们恢复哪些数据可以查看view的源码中的onSaveInstanceState和onRestoreInstanceState方法。\n\n- (2)Activity按优先级的分类\n\n    前台Activity；可见但非前台Activity；后台Activity\n\n- (3)android:configChanges=\"xxx\"属性，常用的主要有下面三个选项：\n\n    local：设备的本地位置发生了变化，一般指切换了系统语言；\n\n    keyboardHidden：键盘的可访问性发生了变化，比如用户调出了键盘；\n\n    orientation：屏幕方向发生了变化，比如旋转了手机屏幕。\n\n    配置了android:configChanges=\"xxx\"属性之后，Activity就不会在对应变化发生时重新创建，而是调用Activity的onConfigurationChanged方法。\n\n#### 1.2 Activity的启动模式\n\n##### 1.2.1 启动模式\n\n- (1)当任务栈中没有任何Activity的时候，系统就会回收这个任务栈。\n\n- (2)从非Activity类型的Context(例如ApplicationContext、Service等)中以standard模式启动新的Activity是不行的，因为这类context并没有任务栈，所以需要为待启动Activity指定FLAG_ACTIVITY_NEW_TASK标志位。\n\n- (3)任务栈分为前台任务栈和后台任务栈，后台任务栈中的Activity位于暂停状态，用户可以通过切换将后台任务栈再次调到前台。\n\n- (4)参数TaskAffinity用来指定Activity所需要的任务栈，意为任务相关性。\n\n    默认情况下，所有Activity所需的任务栈的名字为应用的包名。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。\n\n    当TaskAffinity和singleTask启动模式配对使用的时候，它是具有该模式的Activity的目前任务栈的名字，待启动的Activity会运行在名字和TaskAffinity相同的任务栈中；\n\n    当TaskAffinity和allowTaskReparenting结合的时候，当一个应用A启动了应用B的某个Activity C后，如果Activity C的allowTaskReparenting属性设置为true的话，那么当应用B被启动后，系统会发现Activity C所需的任务栈存在了，就将Activity C从A的任务栈中转移到B的任务栈中。\n\n- (5)singleTask模式的具体分析：\n\n    当一个具有singleTask启动模式的Activity请求启动之后，系统首先会寻找是否存在A想要的任务栈，\n\n    如果不存在，就重新创建一个任务栈，然后创建Activity的实例把它放到栈中；如果存在Activity所需的任务栈，这时候要看栈中是否有Activity实例存在.\n\n    如果有，那么系统就会把该Activity实例调到栈顶，并调用它的onNewIntent方法(它之上的Activity会被迫出栈，所以singleTask模式具有FLAG_ACTIVITY_CLEAR_TOP效果)；如果Activity实例不存在，那么就创建Activity实例并把它压入栈中。\n\n- (6)设置启动模式既可以使用xml属性android:launchMode，也可以使用代码intent.addFlags()。区别在于限定范围不同，前者无法直接为Activity设置FLAG_ACTIVITY_CLEAR_TOP标识，而后者无法为Activity指定singleInstance模式。\n\n##### 1.2.2 Activity的Flags\n\nFLAG_ACTIVITY_NEW_TASK,FLAG_ACTIVITY_SINGLE_TOP,FLAG_ACTIVITY_CLEAR_TOP\n\nFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有这个标记的Activity不会出现在历史Activity列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用，它等同于属性设置android:excludeFromRecents=\"true\"。\n\n#### 1.3 IntentFilter的匹配规则\n\n- (1)IntentFilter中的过滤信息有action、category、data，为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。\n\n    一个过滤列表中的action、category、data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别和data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。此外，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intenf-filter即可成功启动对应的Activity。\n~~~ Javascript\n<intent-filter>\n    <action android:name=\"com.ryg.charpter_1.c\" />\n    <action android:name=\"com.ryg.charpter_1.d\" />\n\n    <category android:name=\"com.ryg.category.c\" />\n    <category android:name=\"com.ryg.category.d\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n\n    <data android:mimeType=\"text/plain\" />\n</intent-filter>\n~~~  \n\n- (2)action匹配规则\n\n    只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功，action匹配区分大小写。\n\n- (3)category匹配规则\n\n    Intent中如果有category那么所有的category都必须和过滤规则中的其中一个category相同，如果没有category的话那么就是默认的category，即android.intent.category.DEFAULT，所以为了Activity能够接收隐式调用，配置多个category的时候必须加上默认的category。\n\n- (4)data匹配规则\n\n    data的结构很复杂，语法大致如下：\n~~~ Javascript\n<data android:scheme=\"string\"\n\tandroid:host=\"string\"\n\tandroid:port=\"string\"\n\tandroid:path=\"string\"`\n\tandroid:pathPattern=\"string\"\n\tandroid:pathPrefix=\"string\"\n\tandroid:mimeType=\"string\" />\n~~~\n    主要由mimeType和URI组成，其中mimeType代表媒体类型，而URI的结构也复杂，大致如下：\n~~~ Javascript\n<scheme>://<host>:<port>/[<path>]|[<pathPrefix>]|[pathPattern]\n~~~\n    例如content://com.example.project:200/folder/subfolder/etc\n\n  - scheme、host、port分别表示URI的模式、主机名和端口号，其中如果scheme或者host未指定那么URI就无效。\n\n  - path、pathPattern、pathPrefix都是表示路径信息，其中path表示完整的路径信息，pathPrefix表示路径的前缀信息；pathPattern表示完整的路径，但是它里面包含了通配符(\\*)。\n\n  data匹配规则：Intent中必须含有data数据，并且data数据能够完全匹配过滤规则中的某一个data。\n\n  URI有默认的scheme！\n\n  如果过滤规则中的mimeType指定为image/\\*或者text/\\*等这种类型的话，那么即使过滤规则中没有指定URI，URI有默认的scheme是content和file！如果过滤规则中指定了scheme的话那就不是默认的scheme了。\n\n~~~ Java\n//URI有默认值\n<intent-filter>\n    <data android:mimeType=\"image/*\"/>\n  ...\n</intent-filter>\n~~~\n\n~~~ Java\n//URI默认值被覆盖\n<intent-filter>\n    <data android:mimeType=\"image/*\" android:scheme=\"http\" .../>\n    ...\n</intent-filter>\n~~~\n\n  如果要为Intent指定完整的data，必须要调用setDataAndType方法！\n\n  不能先调用setData然后调用setType，因为这两个方法会彼此清除对方的值。\n~~~ Java\nintent.setDataAndType(Uri.parse(\"file://abc\"), \"image/png\");\n~~~\n  data的下面两种写法作用是一样的：\n\n~~~ Java\n<intent-filter>\n    <data android:scheme=\"file\" android:host=\"www.github.com\"/>\n</intent-filter>\n\n<intent-filter>\n    <data android:scheme=\"file\"/>\n    <data android:host=\"www.github.com\"/>\n</intent-filter>\n~~~\n  如何判断是否有Activity能够匹配我们的隐式Intent？\n\n  - (1)PackageManager的resolveActivity方法或者Intent的resolveActivity方法：如果找不到就会返回null\n\n  - (2)PackageManager的queryIntentActivities方法：它返回所有成功匹配的Activity信息\n针对Service和BroadcastReceiver等组件，PackageManager同样提供了类似的方法去获取成功匹配的组件信息，例如queryIntentServices、queryBroadcastReceivers等方法\n\n  - 有一类action和category比较重要，它们在一起用来标明这是一个入口Activity，并且会出现在系统的应用列表中。\n~~~ Java\n<intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n~~~\n\n### 第2章 IPC机制\n\n#### 2.1 Android IPC简介\n\n(1)任何一个操作系统都需要有相应的IPC机制，Linux上可以通过命名通道、共享内存、信号量等来进行进程间通信。Android系统不仅可以使用了Binder机制来实现IPC，还可以使用Socket实现任意两个终端之间的通信。\n\n#### 2.2 Android中的多进程模式\n\n- (1)通过给四大组件指定android:process属性就可以开启多进程模式.\n\n    默认进程的进程名是包名packageName，进程名以:开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不以:开头的进程属于全局进程，其他应用通过ShareUID方法可以和它跑在同一个进程中。\n\n    android:process=\":xyz\" //进程名是 packageName:xyz\n\n    android:process=\"aaa.bbb.ccc\" //进程名是 aaa.bbb.ccc\n\n- (2)Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。\n\n    两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。 在这种情况下，它们可以相互访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。如果它们跑在同一个进程中，还可以共享内存数据，它们看起来就像是一个应用的两个部分。\n- (3)android系统会为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以不同的虚拟机中访问同一个类的对象会产生多个副本。\n\n- (4)使用多进程容易造成以下几个问题：\n\n  - 1.静态成员和单例模式完全失效；\n  - 2.线程同步机制完全失效：无论锁对象还是锁全局对象都无法保证线程同步；\n  - 3.SharedPreferences的可靠性下降：SharedPreferences不支持并发读写；\n  - 4.Application会多次创建：当一个组件跑在一个新的进程的时候，系统要在创建新的进程的同时分配独立的虚拟机，应用会重新启动一次，也就会创建新的Application。运行在同一个进程中的组件是属于同一个虚拟机和同一个Application。\n\n    同一个应用的不同组件，如果它们运行在不同进程中，那么和它们分别属于两个应用没有本质区别。\n\n#### 2.3 IPC基础概念介绍\n\n- (1)Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。\n\n- (2)serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。\n\n  serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值。\n\n  - 1.静态成员变量属于类不属于对象，所以不参与序列化过程；\n\n  - 2.声明为transient的成员变量不参与序列化过程。\n\n- (3)Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等，下面是一个实现了Parcelable接口的示例\n\n~~~ Java\npublic class Book implements Parcelable {\n    public int bookId;\n    public String bookName;\n    public Book() {\n    }\n\n    public Book(int bookId, String bookName) {\n        this.bookId = bookId;\n        this.bookName = bookName;\n    }\n\n    //“内容描述”，如果含有文件描述符返回1，否则返回0，几乎所有情况下都是返回0\n    public int describeContents() {\n        return 0;\n    }\n\n    //实现序列化操作，flags标识只有0和1，1表示标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0\n    public void writeToParcel(Parcel out, int flags) {\n        out.writeInt(bookId);\n        out.writeString(bookName);\n    }\n\n    //实现反序列化操作\n    public static final Parcelable.Creator<Book> CREATOR = new Parcelable.Creator<Book>() {\n        //从序列化后的对象中创建原始对象\n        public Book createFromParcel(Parcel in) {\n            return new Book(in);\n        }\n        public Book[] newArray(int size) {//创建指定长度的原始对象数组\n            return new Book[size];\n        }\n    };\n\n    private Book(Parcel in) {\n        bookId = in.readInt();\n        bookName = in.readString();\n    }\n\n}\n~~~\n\n- (4)Binder是Android中的一个类，它实现了IBinder接口。\n\n  从IPC角度看，Binder是Android中一种跨进程通信的方式；Binder还可以理解为虚拟的物理设备，它的设备驱动是/dev/binder；\n\n  从Framework层角度看，Binder是ServiceManager连接各种Manager和相应的ManagerService的桥梁；\n\n  从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。\n\n\n  在Android开发中，Binder主要用在Service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，较为简单；而Messenger的底层其实是AIDL，正是Binder的核心工作机制。\n\n- (5)aidl工具根据aidl文件自动生成的java接口的解析：\n\n  首先，它声明了几个接口方法，同时还声明了几个整型的id用于标识这些方法，id用于标识在transact过程中客户端所请求的到底是哪个方法；\n\n  接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub内部的代理类Proxy来完成。\n\n  所以，这个接口的核心就是它的内部类Stub和Stub内部的代理类Proxy。 下面分析其中的方法：\n\n  - 1.asInterface(android.os.IBinder obj)：用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端是在同一个进程中，那么这个方法返回的是服务端的Stub对象本身，否则返回的是系统封装的Stub.Proxy对象。\n  - 2.asBinder：返回当前Binder对象。\n  - 3.onTransact：这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。\n\n    这个方法的原型是public Boolean onTransact(int code, Parcelable data, Parcelable reply, int flags)\n\n    服务端通过code可以知道客户端请求的目标方法，接着从data中取出所需的参数，然后执行目标方法，执行完毕之后，将结果写入到reply中。如果此方法返回false，说明客户端的请求失败，利用这个特性可以做权限验证(即验证是否有权限调用该服务)。\n\n  - 4.Proxy#[Method]：代理类中的接口方法，这些方法运行在客户端，当客户端远程调用此方法时，它的内部实现是：\n\n    首先创建该方法所需要的参数，然后把方法的参数信息写入到_data中，接着调用transact方法来发起RPC请求，同时当前线程挂起；然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程的返回结果，最后返回_reply中的数据。\n\n  如果搞清楚了自动生成的接口文件的结构和作用之后，其实是可以不用通过AIDL而直接实现Binder的，[主席写的示例代码](https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/manualbinder/BookManagerImpl.java)\n\n- (6)Binder的两个重要方法linkToDeath和unlinkToDeath\n\n  Binder运行在服务端，如果由于某种原因服务端异常终止了的话会导致客户端的远程调用失败，所以Binder提供了两个配对的方法linkToDeath和unlinkToDeath，通过linkToDeath方法可以给Binder设置一个死亡代理，当Binder死亡的时候客户端就会收到通知，然后就可以重新发起连接请求从而恢复连接了。\n\n  如何给Binder设置死亡代理呢？\n\n  - 1.声明一个DeathRecipient对象，DeathRecipient是一个接口，其内部只有一个方法bindeDied，实现这个方法就可以在Binder死亡的时候收到通知了。\n\n~~~ Java\nprivate IBinder.DeathRecipient mDeathRecipient = new IBinder.DeathRecipient() {\n    @Override\n    public void binderDied() {\n        if (mRemoteBookManager == null) return;\n        mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, 0);\n        mRemoteBookManager = null;\n        // TODO:这里重新绑定远程Service\n    }\n};\n~~~\n  - 2.在客户端绑定远程服务成功之后，给binder设置死亡代理\n\n~~~ Java\nmRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, 0);\n~~~\n\n#### 2.4 Android中的IPC方式\n\n- (1)使用Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。\n\n- (2)使用文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。\n\n  SharedPreferences是一个特例，虽然它也是文件的一种，但是由于系统对它的读写有一定的缓存策略，即在内存中会有一份SharedPreferences文件的缓存，因此在多进程模式下，系统对它的读写就变得不可靠，当面对高并发读写访问的时候，有很大几率会丢失数据，因此，不建议在进程间通信中使用SharedPreferences。\n\n- (3)使用Messenger：Messenger是一种轻量级的IPC方案，它的底层实现就是AIDL。Messenger是以串行的方式处理请求的，即服务端只能一个个处理，不存在并发执行的情形，详细的示例见原书。\n\n- (4)使用AIDL\n\n  大致流程：首先建一个Service和一个AIDL接口，接着创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，在Service的onBind方法中返回这个类的对象，然后客户端就可以绑定服务端Service，建立连接后就可以访问远程服务端的方法了。\n\n  - 1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n  - 2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n  - 3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n  - 4.AIDL接口中支持方法，不支持声明静态变量；\n  - 5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n  - 6.RemoteCallbackList是系统专门提供的用于删除跨进程Listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口，因为所有的AIDL接口都继承自IInterface接口。\n\n- (5)使用ContentProvider\n\n  - 1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n  - 2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n  - 3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n  - 4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n\n- (6)使用Socket\n\n  Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。\n\n#### 2.5 Binder连接池\n\n- (1)当项目规模很大的时候，创建很多个Service是不对的做法，因为service是系统资源，太多的service会使得应用看起来很重，所以最好是将所有的AIDL放在同一个Service中去管理。\n\n  整个工作机制是：每个业务模块创建自己的AIDL接口并实现此接口，这个时候不同业务模块之间是不能有耦合的，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。\n\n  Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。\n\n- (2)作者实现的Binder连接池BinderPool的实现源码，建议在AIDL开发工作中引入BinderPool机制。\n\n#### 2.6 选用合适的IPC方式\n\n![选择合适的IPC方式](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_ipc.png)\n\n\n\n### 第9章 四大组件的工作过程\n本篇摘选自[amurocrash的专栏](http://blog.csdn.net/amurocrash/article/details/48858353)\n\n#### 9.1 四大组件的运行状态\n\n- (1)四大组件中只有BroadcastReceiver既可以在AndroidManifest文件中注册，也可以在代码中注册，其他三个组件都必须在AndroidManifest文件中注册；ContentProvider的调用不需要借助Intent，其他三个组件都需要借助Intent。\n- (2)Activity是一种展示型组件，用于向用户展示界面，可由显式或者隐式Intent来启动。\n- (3)Service是一种计算型组件，用于在后台执行计算任务。尽管service是用于后台执行计算的，但是它本身是运行在主线程中的，因此耗时的后台计算仍然需要在单独的线程中去完成。Service组件有两种状态：启动状态和绑定状态。当service处于绑定状态时，外界可以很方便的和service进行通信，而在启动状态中是不可与外界通信的。\n- (4)BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息，它工作在系统内部。广播有两种注册方式：静态注册和动态注册。静态注册是在AndroidManifest中注册，在应用安装的时候会被系统解析，这种广播不需要应用启动就可以收到相应的广播。动态注册需要通过Context.registerReceiver()来注册，这种广播需要应用启动才能注册并接收广播。BroadcastReceiver组件一般来说不需要停止，它也没有停止的概念。\n- (5)ContentProvider是一种数据共享型组件，用于向其他组件乃至其他应用共享数据。ContentProvider中的insert、delete、update、query方法需要处理好线程同步，因为这几个方法是在Binder线程池中被调用的，另外ContentProvider组件也不需要手动停止。\n\n#### 9.2 Activity的工作过程\n\n##### (1)Activity启动的大致流程\n![Activity启动的大致流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_activity.png)\n\n(2)ApplicationThread是ActivityThread的一个内部类，它继承自ApplicationThreadNative，而ApplicationThreadNative继承自Binder并实现了IApplicationThread接口，ApplicationThreadNative的作用其实就和系统为AIDL文件生成的类是一样的。\n(3)ActivityManagerService(AMS)继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。\n(4)一个应用只有一个Application对象，它的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。\n(5)ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当window接收到外部输入事件后就可以将事件传递给Activity。 [这里可能有误，应该是Activity将事件传递给window]\n\n#### 9.3 Service的工作过程\n\n##### (1)Service有两种状态：\n启动状态和绑定状态，两种状态是可以共存的。\n**启动过程：**\n![Service1](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service1.png)\n\n**绑定过程：**\n![Service2](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service2.png)\n\n#### 9.4 BroadcastReceiver的工作过程\n##### (1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\n\n**注册过程**：静态注册的时候是由PackageManagerService来完成整个注册过程，下面是动态注册的过程\n![broadcastreceiver1](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver1.png)\n**发送和接收**：\n![broadcastreceiver2](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver2.png)\n##### (2)广播的发送有几种类型：\n普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。\n##### (3)一个应用处于停止状态分为两种情况：\n一是应用安装后未运行；二是应用被手动或者其他应用强停了。从Android 3.1开始，处于停止状态的应用无法接受到开机广播。\n\n#### 9.5 ContentProvider的工作过程\n\n##### (1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\n##### (2)ContentProvider的启动过程：\n- 1.当一个应用启动时，入口方法是ActivityThread的main方法，其中创建ActivityThread的实例并创建主线程的消息队列；\n- 2.ActivityThread的attach方法中会远程调用ActivityManagerService的attachApplication，并将ApplicationThread提供给AMS，ApplicationThread主要用于ActivityThread和AMS之间的通信；\n- 3.ActivityManagerService的attachApplication会调用ApplicationThread的bindApplication方法，这个方法会通过H切换到ActivityThread中去执行，即调用handleBindApplication方法；\n- 4.handleBindApplication方法会创建Application对象并加载ContentProvider，注意是先加载ContentProvider，然后调用Application的onCreate方法。\n\n##### (3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\n\n##### (4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\n![ContentProvider](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_contentprovider.png)\n","source":"_posts/2016-03-20-android-books-reading-.md","raw":"---\nlayout: post\ntitle: 《android开发艺术探索》读书笔记\ncategory: accumulation\ntags:\n  - reading\n  - ANDROID\nkeywords: 《android开发艺术探索》,读书笔记\nbanner: http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg\n---\n\n\n### 第1章 Activity的生命周期和启动模式\n\n本节和《Android群英传》中的第8章Activity和Activity调用栈分析有关系，建议先阅读该章的总结\n\n第1章 Activity的生命周期和启动模式\n\n#### 1.1 Activity生命周期全面分析\n\n##### 1.1.1 典型情况下生命周期分析\n\n- (1)一般情况下，当当前Activity从不可见重新变为可见状态时，onRestart方法就会被调用。\n\n- (2)当用户打开新的Activity或者切换到桌面的时候，回调如下：onPause -> onStop，但是如果新Activity采用了透明主题，那么onStop方法不会被回调。当用户再次回到原来的Activity时，回调如下：onRestart -> onStart -> onResume。\n\n<!--more-->\n\n- (3)onStart和onStop对应，它们是从Activity是否可见这个角度来回调的；onPause和onResume方法对应，它们是从Activity是否位于前台这个角度来回调的。\n\n- (4)从Activity A进入到Activity B，回调顺序是onPause(A) -> onCreate(B) -> onStart(B) -> onResume(B) -> onStop(A)，所以不能在onPause方法中做重量级的操作。\n\n1.1.2 异常情况下生命周期分析\n\n- (1)onSaveInstanceState方法只会出现在Activity被异常终止的情况下，它的调用时机是在onStop之前，它和onPause方法没有既定的时序关系，可能在它之前，也可能在它之后。\n\n    当Activity被重新创建的时候，onRestoreInstanceState会被回调，它的调用时机是onStart之后。\n\n    系统只会在Activity即将被销毁并且有机会重新显示的情况下才会去调用onSaveInstanceState方法。\n\n    当Activity在异常情况下需要重新创建时，系统会默认为我们保存当前Activity的视图结构，并且在Activity重启后为我们恢复这些数据，比如文本框中用户输入的数据、listview滚动的位置等，这些view相关的状态系统都会默认为我们恢复。具体针对某一个view系统能为我们恢复哪些数据可以查看view的源码中的onSaveInstanceState和onRestoreInstanceState方法。\n\n- (2)Activity按优先级的分类\n\n    前台Activity；可见但非前台Activity；后台Activity\n\n- (3)android:configChanges=\"xxx\"属性，常用的主要有下面三个选项：\n\n    local：设备的本地位置发生了变化，一般指切换了系统语言；\n\n    keyboardHidden：键盘的可访问性发生了变化，比如用户调出了键盘；\n\n    orientation：屏幕方向发生了变化，比如旋转了手机屏幕。\n\n    配置了android:configChanges=\"xxx\"属性之后，Activity就不会在对应变化发生时重新创建，而是调用Activity的onConfigurationChanged方法。\n\n#### 1.2 Activity的启动模式\n\n##### 1.2.1 启动模式\n\n- (1)当任务栈中没有任何Activity的时候，系统就会回收这个任务栈。\n\n- (2)从非Activity类型的Context(例如ApplicationContext、Service等)中以standard模式启动新的Activity是不行的，因为这类context并没有任务栈，所以需要为待启动Activity指定FLAG_ACTIVITY_NEW_TASK标志位。\n\n- (3)任务栈分为前台任务栈和后台任务栈，后台任务栈中的Activity位于暂停状态，用户可以通过切换将后台任务栈再次调到前台。\n\n- (4)参数TaskAffinity用来指定Activity所需要的任务栈，意为任务相关性。\n\n    默认情况下，所有Activity所需的任务栈的名字为应用的包名。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。\n\n    当TaskAffinity和singleTask启动模式配对使用的时候，它是具有该模式的Activity的目前任务栈的名字，待启动的Activity会运行在名字和TaskAffinity相同的任务栈中；\n\n    当TaskAffinity和allowTaskReparenting结合的时候，当一个应用A启动了应用B的某个Activity C后，如果Activity C的allowTaskReparenting属性设置为true的话，那么当应用B被启动后，系统会发现Activity C所需的任务栈存在了，就将Activity C从A的任务栈中转移到B的任务栈中。\n\n- (5)singleTask模式的具体分析：\n\n    当一个具有singleTask启动模式的Activity请求启动之后，系统首先会寻找是否存在A想要的任务栈，\n\n    如果不存在，就重新创建一个任务栈，然后创建Activity的实例把它放到栈中；如果存在Activity所需的任务栈，这时候要看栈中是否有Activity实例存在.\n\n    如果有，那么系统就会把该Activity实例调到栈顶，并调用它的onNewIntent方法(它之上的Activity会被迫出栈，所以singleTask模式具有FLAG_ACTIVITY_CLEAR_TOP效果)；如果Activity实例不存在，那么就创建Activity实例并把它压入栈中。\n\n- (6)设置启动模式既可以使用xml属性android:launchMode，也可以使用代码intent.addFlags()。区别在于限定范围不同，前者无法直接为Activity设置FLAG_ACTIVITY_CLEAR_TOP标识，而后者无法为Activity指定singleInstance模式。\n\n##### 1.2.2 Activity的Flags\n\nFLAG_ACTIVITY_NEW_TASK,FLAG_ACTIVITY_SINGLE_TOP,FLAG_ACTIVITY_CLEAR_TOP\n\nFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有这个标记的Activity不会出现在历史Activity列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用，它等同于属性设置android:excludeFromRecents=\"true\"。\n\n#### 1.3 IntentFilter的匹配规则\n\n- (1)IntentFilter中的过滤信息有action、category、data，为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。\n\n    一个过滤列表中的action、category、data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别和data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。此外，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intenf-filter即可成功启动对应的Activity。\n~~~ Javascript\n<intent-filter>\n    <action android:name=\"com.ryg.charpter_1.c\" />\n    <action android:name=\"com.ryg.charpter_1.d\" />\n\n    <category android:name=\"com.ryg.category.c\" />\n    <category android:name=\"com.ryg.category.d\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n\n    <data android:mimeType=\"text/plain\" />\n</intent-filter>\n~~~  \n\n- (2)action匹配规则\n\n    只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功，action匹配区分大小写。\n\n- (3)category匹配规则\n\n    Intent中如果有category那么所有的category都必须和过滤规则中的其中一个category相同，如果没有category的话那么就是默认的category，即android.intent.category.DEFAULT，所以为了Activity能够接收隐式调用，配置多个category的时候必须加上默认的category。\n\n- (4)data匹配规则\n\n    data的结构很复杂，语法大致如下：\n~~~ Javascript\n<data android:scheme=\"string\"\n\tandroid:host=\"string\"\n\tandroid:port=\"string\"\n\tandroid:path=\"string\"`\n\tandroid:pathPattern=\"string\"\n\tandroid:pathPrefix=\"string\"\n\tandroid:mimeType=\"string\" />\n~~~\n    主要由mimeType和URI组成，其中mimeType代表媒体类型，而URI的结构也复杂，大致如下：\n~~~ Javascript\n<scheme>://<host>:<port>/[<path>]|[<pathPrefix>]|[pathPattern]\n~~~\n    例如content://com.example.project:200/folder/subfolder/etc\n\n  - scheme、host、port分别表示URI的模式、主机名和端口号，其中如果scheme或者host未指定那么URI就无效。\n\n  - path、pathPattern、pathPrefix都是表示路径信息，其中path表示完整的路径信息，pathPrefix表示路径的前缀信息；pathPattern表示完整的路径，但是它里面包含了通配符(\\*)。\n\n  data匹配规则：Intent中必须含有data数据，并且data数据能够完全匹配过滤规则中的某一个data。\n\n  URI有默认的scheme！\n\n  如果过滤规则中的mimeType指定为image/\\*或者text/\\*等这种类型的话，那么即使过滤规则中没有指定URI，URI有默认的scheme是content和file！如果过滤规则中指定了scheme的话那就不是默认的scheme了。\n\n~~~ Java\n//URI有默认值\n<intent-filter>\n    <data android:mimeType=\"image/*\"/>\n  ...\n</intent-filter>\n~~~\n\n~~~ Java\n//URI默认值被覆盖\n<intent-filter>\n    <data android:mimeType=\"image/*\" android:scheme=\"http\" .../>\n    ...\n</intent-filter>\n~~~\n\n  如果要为Intent指定完整的data，必须要调用setDataAndType方法！\n\n  不能先调用setData然后调用setType，因为这两个方法会彼此清除对方的值。\n~~~ Java\nintent.setDataAndType(Uri.parse(\"file://abc\"), \"image/png\");\n~~~\n  data的下面两种写法作用是一样的：\n\n~~~ Java\n<intent-filter>\n    <data android:scheme=\"file\" android:host=\"www.github.com\"/>\n</intent-filter>\n\n<intent-filter>\n    <data android:scheme=\"file\"/>\n    <data android:host=\"www.github.com\"/>\n</intent-filter>\n~~~\n  如何判断是否有Activity能够匹配我们的隐式Intent？\n\n  - (1)PackageManager的resolveActivity方法或者Intent的resolveActivity方法：如果找不到就会返回null\n\n  - (2)PackageManager的queryIntentActivities方法：它返回所有成功匹配的Activity信息\n针对Service和BroadcastReceiver等组件，PackageManager同样提供了类似的方法去获取成功匹配的组件信息，例如queryIntentServices、queryBroadcastReceivers等方法\n\n  - 有一类action和category比较重要，它们在一起用来标明这是一个入口Activity，并且会出现在系统的应用列表中。\n~~~ Java\n<intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n~~~\n\n### 第2章 IPC机制\n\n#### 2.1 Android IPC简介\n\n(1)任何一个操作系统都需要有相应的IPC机制，Linux上可以通过命名通道、共享内存、信号量等来进行进程间通信。Android系统不仅可以使用了Binder机制来实现IPC，还可以使用Socket实现任意两个终端之间的通信。\n\n#### 2.2 Android中的多进程模式\n\n- (1)通过给四大组件指定android:process属性就可以开启多进程模式.\n\n    默认进程的进程名是包名packageName，进程名以:开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不以:开头的进程属于全局进程，其他应用通过ShareUID方法可以和它跑在同一个进程中。\n\n    android:process=\":xyz\" //进程名是 packageName:xyz\n\n    android:process=\"aaa.bbb.ccc\" //进程名是 aaa.bbb.ccc\n\n- (2)Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。\n\n    两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。 在这种情况下，它们可以相互访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。如果它们跑在同一个进程中，还可以共享内存数据，它们看起来就像是一个应用的两个部分。\n- (3)android系统会为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以不同的虚拟机中访问同一个类的对象会产生多个副本。\n\n- (4)使用多进程容易造成以下几个问题：\n\n  - 1.静态成员和单例模式完全失效；\n  - 2.线程同步机制完全失效：无论锁对象还是锁全局对象都无法保证线程同步；\n  - 3.SharedPreferences的可靠性下降：SharedPreferences不支持并发读写；\n  - 4.Application会多次创建：当一个组件跑在一个新的进程的时候，系统要在创建新的进程的同时分配独立的虚拟机，应用会重新启动一次，也就会创建新的Application。运行在同一个进程中的组件是属于同一个虚拟机和同一个Application。\n\n    同一个应用的不同组件，如果它们运行在不同进程中，那么和它们分别属于两个应用没有本质区别。\n\n#### 2.3 IPC基础概念介绍\n\n- (1)Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。\n\n- (2)serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。\n\n  serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值。\n\n  - 1.静态成员变量属于类不属于对象，所以不参与序列化过程；\n\n  - 2.声明为transient的成员变量不参与序列化过程。\n\n- (3)Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等，下面是一个实现了Parcelable接口的示例\n\n~~~ Java\npublic class Book implements Parcelable {\n    public int bookId;\n    public String bookName;\n    public Book() {\n    }\n\n    public Book(int bookId, String bookName) {\n        this.bookId = bookId;\n        this.bookName = bookName;\n    }\n\n    //“内容描述”，如果含有文件描述符返回1，否则返回0，几乎所有情况下都是返回0\n    public int describeContents() {\n        return 0;\n    }\n\n    //实现序列化操作，flags标识只有0和1，1表示标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0\n    public void writeToParcel(Parcel out, int flags) {\n        out.writeInt(bookId);\n        out.writeString(bookName);\n    }\n\n    //实现反序列化操作\n    public static final Parcelable.Creator<Book> CREATOR = new Parcelable.Creator<Book>() {\n        //从序列化后的对象中创建原始对象\n        public Book createFromParcel(Parcel in) {\n            return new Book(in);\n        }\n        public Book[] newArray(int size) {//创建指定长度的原始对象数组\n            return new Book[size];\n        }\n    };\n\n    private Book(Parcel in) {\n        bookId = in.readInt();\n        bookName = in.readString();\n    }\n\n}\n~~~\n\n- (4)Binder是Android中的一个类，它实现了IBinder接口。\n\n  从IPC角度看，Binder是Android中一种跨进程通信的方式；Binder还可以理解为虚拟的物理设备，它的设备驱动是/dev/binder；\n\n  从Framework层角度看，Binder是ServiceManager连接各种Manager和相应的ManagerService的桥梁；\n\n  从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。\n\n\n  在Android开发中，Binder主要用在Service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，较为简单；而Messenger的底层其实是AIDL，正是Binder的核心工作机制。\n\n- (5)aidl工具根据aidl文件自动生成的java接口的解析：\n\n  首先，它声明了几个接口方法，同时还声明了几个整型的id用于标识这些方法，id用于标识在transact过程中客户端所请求的到底是哪个方法；\n\n  接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub内部的代理类Proxy来完成。\n\n  所以，这个接口的核心就是它的内部类Stub和Stub内部的代理类Proxy。 下面分析其中的方法：\n\n  - 1.asInterface(android.os.IBinder obj)：用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端是在同一个进程中，那么这个方法返回的是服务端的Stub对象本身，否则返回的是系统封装的Stub.Proxy对象。\n  - 2.asBinder：返回当前Binder对象。\n  - 3.onTransact：这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。\n\n    这个方法的原型是public Boolean onTransact(int code, Parcelable data, Parcelable reply, int flags)\n\n    服务端通过code可以知道客户端请求的目标方法，接着从data中取出所需的参数，然后执行目标方法，执行完毕之后，将结果写入到reply中。如果此方法返回false，说明客户端的请求失败，利用这个特性可以做权限验证(即验证是否有权限调用该服务)。\n\n  - 4.Proxy#[Method]：代理类中的接口方法，这些方法运行在客户端，当客户端远程调用此方法时，它的内部实现是：\n\n    首先创建该方法所需要的参数，然后把方法的参数信息写入到_data中，接着调用transact方法来发起RPC请求，同时当前线程挂起；然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程的返回结果，最后返回_reply中的数据。\n\n  如果搞清楚了自动生成的接口文件的结构和作用之后，其实是可以不用通过AIDL而直接实现Binder的，[主席写的示例代码](https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/manualbinder/BookManagerImpl.java)\n\n- (6)Binder的两个重要方法linkToDeath和unlinkToDeath\n\n  Binder运行在服务端，如果由于某种原因服务端异常终止了的话会导致客户端的远程调用失败，所以Binder提供了两个配对的方法linkToDeath和unlinkToDeath，通过linkToDeath方法可以给Binder设置一个死亡代理，当Binder死亡的时候客户端就会收到通知，然后就可以重新发起连接请求从而恢复连接了。\n\n  如何给Binder设置死亡代理呢？\n\n  - 1.声明一个DeathRecipient对象，DeathRecipient是一个接口，其内部只有一个方法bindeDied，实现这个方法就可以在Binder死亡的时候收到通知了。\n\n~~~ Java\nprivate IBinder.DeathRecipient mDeathRecipient = new IBinder.DeathRecipient() {\n    @Override\n    public void binderDied() {\n        if (mRemoteBookManager == null) return;\n        mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, 0);\n        mRemoteBookManager = null;\n        // TODO:这里重新绑定远程Service\n    }\n};\n~~~\n  - 2.在客户端绑定远程服务成功之后，给binder设置死亡代理\n\n~~~ Java\nmRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, 0);\n~~~\n\n#### 2.4 Android中的IPC方式\n\n- (1)使用Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。\n\n- (2)使用文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。\n\n  SharedPreferences是一个特例，虽然它也是文件的一种，但是由于系统对它的读写有一定的缓存策略，即在内存中会有一份SharedPreferences文件的缓存，因此在多进程模式下，系统对它的读写就变得不可靠，当面对高并发读写访问的时候，有很大几率会丢失数据，因此，不建议在进程间通信中使用SharedPreferences。\n\n- (3)使用Messenger：Messenger是一种轻量级的IPC方案，它的底层实现就是AIDL。Messenger是以串行的方式处理请求的，即服务端只能一个个处理，不存在并发执行的情形，详细的示例见原书。\n\n- (4)使用AIDL\n\n  大致流程：首先建一个Service和一个AIDL接口，接着创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，在Service的onBind方法中返回这个类的对象，然后客户端就可以绑定服务端Service，建立连接后就可以访问远程服务端的方法了。\n\n  - 1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；\n  - 2.某些类即使和AIDL文件在同一个包中也要显式import进来；\n  - 3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；\n  - 4.AIDL接口中支持方法，不支持声明静态变量；\n  - 5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。\n  - 6.RemoteCallbackList是系统专门提供的用于删除跨进程Listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口，因为所有的AIDL接口都继承自IInterface接口。\n\n- (5)使用ContentProvider\n\n  - 1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；\n  - 2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；\n  - 3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；\n  - 4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；\n\n- (6)使用Socket\n\n  Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。\n\n#### 2.5 Binder连接池\n\n- (1)当项目规模很大的时候，创建很多个Service是不对的做法，因为service是系统资源，太多的service会使得应用看起来很重，所以最好是将所有的AIDL放在同一个Service中去管理。\n\n  整个工作机制是：每个业务模块创建自己的AIDL接口并实现此接口，这个时候不同业务模块之间是不能有耦合的，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。\n\n  Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。\n\n- (2)作者实现的Binder连接池BinderPool的实现源码，建议在AIDL开发工作中引入BinderPool机制。\n\n#### 2.6 选用合适的IPC方式\n\n![选择合适的IPC方式](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_ipc.png)\n\n\n\n### 第9章 四大组件的工作过程\n本篇摘选自[amurocrash的专栏](http://blog.csdn.net/amurocrash/article/details/48858353)\n\n#### 9.1 四大组件的运行状态\n\n- (1)四大组件中只有BroadcastReceiver既可以在AndroidManifest文件中注册，也可以在代码中注册，其他三个组件都必须在AndroidManifest文件中注册；ContentProvider的调用不需要借助Intent，其他三个组件都需要借助Intent。\n- (2)Activity是一种展示型组件，用于向用户展示界面，可由显式或者隐式Intent来启动。\n- (3)Service是一种计算型组件，用于在后台执行计算任务。尽管service是用于后台执行计算的，但是它本身是运行在主线程中的，因此耗时的后台计算仍然需要在单独的线程中去完成。Service组件有两种状态：启动状态和绑定状态。当service处于绑定状态时，外界可以很方便的和service进行通信，而在启动状态中是不可与外界通信的。\n- (4)BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息，它工作在系统内部。广播有两种注册方式：静态注册和动态注册。静态注册是在AndroidManifest中注册，在应用安装的时候会被系统解析，这种广播不需要应用启动就可以收到相应的广播。动态注册需要通过Context.registerReceiver()来注册，这种广播需要应用启动才能注册并接收广播。BroadcastReceiver组件一般来说不需要停止，它也没有停止的概念。\n- (5)ContentProvider是一种数据共享型组件，用于向其他组件乃至其他应用共享数据。ContentProvider中的insert、delete、update、query方法需要处理好线程同步，因为这几个方法是在Binder线程池中被调用的，另外ContentProvider组件也不需要手动停止。\n\n#### 9.2 Activity的工作过程\n\n##### (1)Activity启动的大致流程\n![Activity启动的大致流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_activity.png)\n\n(2)ApplicationThread是ActivityThread的一个内部类，它继承自ApplicationThreadNative，而ApplicationThreadNative继承自Binder并实现了IApplicationThread接口，ApplicationThreadNative的作用其实就和系统为AIDL文件生成的类是一样的。\n(3)ActivityManagerService(AMS)继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。\n(4)一个应用只有一个Application对象，它的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。\n(5)ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当window接收到外部输入事件后就可以将事件传递给Activity。 [这里可能有误，应该是Activity将事件传递给window]\n\n#### 9.3 Service的工作过程\n\n##### (1)Service有两种状态：\n启动状态和绑定状态，两种状态是可以共存的。\n**启动过程：**\n![Service1](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service1.png)\n\n**绑定过程：**\n![Service2](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service2.png)\n\n#### 9.4 BroadcastReceiver的工作过程\n##### (1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\n\n**注册过程**：静态注册的时候是由PackageManagerService来完成整个注册过程，下面是动态注册的过程\n![broadcastreceiver1](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver1.png)\n**发送和接收**：\n![broadcastreceiver2](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver2.png)\n##### (2)广播的发送有几种类型：\n普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。\n##### (3)一个应用处于停止状态分为两种情况：\n一是应用安装后未运行；二是应用被手动或者其他应用强停了。从Android 3.1开始，处于停止状态的应用无法接受到开机广播。\n\n#### 9.5 ContentProvider的工作过程\n\n##### (1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\n##### (2)ContentProvider的启动过程：\n- 1.当一个应用启动时，入口方法是ActivityThread的main方法，其中创建ActivityThread的实例并创建主线程的消息队列；\n- 2.ActivityThread的attach方法中会远程调用ActivityManagerService的attachApplication，并将ApplicationThread提供给AMS，ApplicationThread主要用于ActivityThread和AMS之间的通信；\n- 3.ActivityManagerService的attachApplication会调用ApplicationThread的bindApplication方法，这个方法会通过H切换到ActivityThread中去执行，即调用handleBindApplication方法；\n- 4.handleBindApplication方法会创建Application对象并加载ContentProvider，注意是先加载ContentProvider，然后调用Application的onCreate方法。\n\n##### (3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\n\n##### (4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\n![ContentProvider](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_contentprovider.png)\n","slug":"android-books-reading-","published":1,"date":"2016-03-19T16:00:00.000Z","updated":"2017-11-23T07:24:03.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebwb000fd6ykr7v031ya","content":"<h3 id=\"第1章-Activity的生命周期和启动模式\"><a href=\"#第1章-Activity的生命周期和启动模式\" class=\"headerlink\" title=\"第1章 Activity的生命周期和启动模式\"></a>第1章 Activity的生命周期和启动模式</h3><p>本节和《Android群英传》中的第8章Activity和Activity调用栈分析有关系，建议先阅读该章的总结</p>\n<p>第1章 Activity的生命周期和启动模式</p>\n<h4 id=\"1-1-Activity生命周期全面分析\"><a href=\"#1-1-Activity生命周期全面分析\" class=\"headerlink\" title=\"1.1 Activity生命周期全面分析\"></a>1.1 Activity生命周期全面分析</h4><h5 id=\"1-1-1-典型情况下生命周期分析\"><a href=\"#1-1-1-典型情况下生命周期分析\" class=\"headerlink\" title=\"1.1.1 典型情况下生命周期分析\"></a>1.1.1 典型情况下生命周期分析</h5><ul>\n<li><p>(1)一般情况下，当当前Activity从不可见重新变为可见状态时，onRestart方法就会被调用。</p>\n</li>\n<li><p>(2)当用户打开新的Activity或者切换到桌面的时候，回调如下：onPause -&gt; onStop，但是如果新Activity采用了透明主题，那么onStop方法不会被回调。当用户再次回到原来的Activity时，回调如下：onRestart -&gt; onStart -&gt; onResume。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>(3)onStart和onStop对应，它们是从Activity是否可见这个角度来回调的；onPause和onResume方法对应，它们是从Activity是否位于前台这个角度来回调的。</p>\n</li>\n<li><p>(4)从Activity A进入到Activity B，回调顺序是onPause(A) -&gt; onCreate(B) -&gt; onStart(B) -&gt; onResume(B) -&gt; onStop(A)，所以不能在onPause方法中做重量级的操作。</p>\n</li>\n</ul>\n<p>1.1.2 异常情况下生命周期分析</p>\n<ul>\n<li><p>(1)onSaveInstanceState方法只会出现在Activity被异常终止的情况下，它的调用时机是在onStop之前，它和onPause方法没有既定的时序关系，可能在它之前，也可能在它之后。</p>\n<p>  当Activity被重新创建的时候，onRestoreInstanceState会被回调，它的调用时机是onStart之后。</p>\n<p>  系统只会在Activity即将被销毁并且有机会重新显示的情况下才会去调用onSaveInstanceState方法。</p>\n<p>  当Activity在异常情况下需要重新创建时，系统会默认为我们保存当前Activity的视图结构，并且在Activity重启后为我们恢复这些数据，比如文本框中用户输入的数据、listview滚动的位置等，这些view相关的状态系统都会默认为我们恢复。具体针对某一个view系统能为我们恢复哪些数据可以查看view的源码中的onSaveInstanceState和onRestoreInstanceState方法。</p>\n</li>\n<li><p>(2)Activity按优先级的分类</p>\n<p>  前台Activity；可见但非前台Activity；后台Activity</p>\n</li>\n<li><p>(3)android:configChanges=”xxx”属性，常用的主要有下面三个选项：</p>\n<p>  local：设备的本地位置发生了变化，一般指切换了系统语言；</p>\n<p>  keyboardHidden：键盘的可访问性发生了变化，比如用户调出了键盘；</p>\n<p>  orientation：屏幕方向发生了变化，比如旋转了手机屏幕。</p>\n<p>  配置了android:configChanges=”xxx”属性之后，Activity就不会在对应变化发生时重新创建，而是调用Activity的onConfigurationChanged方法。</p>\n</li>\n</ul>\n<h4 id=\"1-2-Activity的启动模式\"><a href=\"#1-2-Activity的启动模式\" class=\"headerlink\" title=\"1.2 Activity的启动模式\"></a>1.2 Activity的启动模式</h4><h5 id=\"1-2-1-启动模式\"><a href=\"#1-2-1-启动模式\" class=\"headerlink\" title=\"1.2.1 启动模式\"></a>1.2.1 启动模式</h5><ul>\n<li><p>(1)当任务栈中没有任何Activity的时候，系统就会回收这个任务栈。</p>\n</li>\n<li><p>(2)从非Activity类型的Context(例如ApplicationContext、Service等)中以standard模式启动新的Activity是不行的，因为这类context并没有任务栈，所以需要为待启动Activity指定FLAG_ACTIVITY_NEW_TASK标志位。</p>\n</li>\n<li><p>(3)任务栈分为前台任务栈和后台任务栈，后台任务栈中的Activity位于暂停状态，用户可以通过切换将后台任务栈再次调到前台。</p>\n</li>\n<li><p>(4)参数TaskAffinity用来指定Activity所需要的任务栈，意为任务相关性。</p>\n<p>  默认情况下，所有Activity所需的任务栈的名字为应用的包名。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。</p>\n<p>  当TaskAffinity和singleTask启动模式配对使用的时候，它是具有该模式的Activity的目前任务栈的名字，待启动的Activity会运行在名字和TaskAffinity相同的任务栈中；</p>\n<p>  当TaskAffinity和allowTaskReparenting结合的时候，当一个应用A启动了应用B的某个Activity C后，如果Activity C的allowTaskReparenting属性设置为true的话，那么当应用B被启动后，系统会发现Activity C所需的任务栈存在了，就将Activity C从A的任务栈中转移到B的任务栈中。</p>\n</li>\n<li><p>(5)singleTask模式的具体分析：</p>\n<p>  当一个具有singleTask启动模式的Activity请求启动之后，系统首先会寻找是否存在A想要的任务栈，</p>\n<p>  如果不存在，就重新创建一个任务栈，然后创建Activity的实例把它放到栈中；如果存在Activity所需的任务栈，这时候要看栈中是否有Activity实例存在.</p>\n<p>  如果有，那么系统就会把该Activity实例调到栈顶，并调用它的onNewIntent方法(它之上的Activity会被迫出栈，所以singleTask模式具有FLAG_ACTIVITY_CLEAR_TOP效果)；如果Activity实例不存在，那么就创建Activity实例并把它压入栈中。</p>\n</li>\n<li><p>(6)设置启动模式既可以使用xml属性android:launchMode，也可以使用代码intent.addFlags()。区别在于限定范围不同，前者无法直接为Activity设置FLAG_ACTIVITY_CLEAR_TOP标识，而后者无法为Activity指定singleInstance模式。</p>\n</li>\n</ul>\n<h5 id=\"1-2-2-Activity的Flags\"><a href=\"#1-2-2-Activity的Flags\" class=\"headerlink\" title=\"1.2.2 Activity的Flags\"></a>1.2.2 Activity的Flags</h5><p>FLAG_ACTIVITY_NEW_TASK,FLAG_ACTIVITY_SINGLE_TOP,FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有这个标记的Activity不会出现在历史Activity列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用，它等同于属性设置android:excludeFromRecents=”true”。</p>\n<h4 id=\"1-3-IntentFilter的匹配规则\"><a href=\"#1-3-IntentFilter的匹配规则\" class=\"headerlink\" title=\"1.3 IntentFilter的匹配规则\"></a>1.3 IntentFilter的匹配规则</h4><ul>\n<li><p>(1)IntentFilter中的过滤信息有action、category、data，为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。</p>\n<p>  一个过滤列表中的action、category、data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别和data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。此外，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intenf-filter即可成功启动对应的Activity。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=\"com.ryg.charpter_1.c\" /&gt;</div><div class=\"line\">    &lt;action android:name=\"com.ryg.charpter_1.d\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;category android:name=\"com.ryg.category.c\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"com.ryg.category.d\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;data android:mimeType=\"text/plain\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div><div class=\"line\">~~~  </div><div class=\"line\"></div><div class=\"line\">- (2)action匹配规则</div><div class=\"line\"></div><div class=\"line\">    只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功，action匹配区分大小写。</div><div class=\"line\"></div><div class=\"line\">- (3)category匹配规则</div><div class=\"line\"></div><div class=\"line\">    Intent中如果有category那么所有的category都必须和过滤规则中的其中一个category相同，如果没有category的话那么就是默认的category，即android.intent.category.DEFAULT，所以为了Activity能够接收隐式调用，配置多个category的时候必须加上默认的category。</div><div class=\"line\"></div><div class=\"line\">- (4)data匹配规则</div><div class=\"line\"></div><div class=\"line\">    data的结构很复杂，语法大致如下：</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">&lt;data android:scheme=\"string\"</div><div class=\"line\">\tandroid:host=\"string\"</div><div class=\"line\">\tandroid:port=\"string\"</div><div class=\"line\">\tandroid:path=\"string\"`</div><div class=\"line\">\tandroid:pathPattern=\"string\"</div><div class=\"line\">\tandroid:pathPrefix=\"string\"</div><div class=\"line\">\tandroid:mimeType=\"string\" /&gt;</div></pre></td></tr></table></figure>\n<p>  主要由mimeType和URI组成，其中mimeType代表媒体类型，而URI的结构也复杂，大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;:<span class=\"comment\">//&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;]|[&lt;pathPrefix&gt;]|[pathPattern]</span></div></pre></td></tr></table></figure>\n<p>  例如content://com.example.project:200/folder/subfolder/etc</p>\n<ul>\n<li><p>scheme、host、port分别表示URI的模式、主机名和端口号，其中如果scheme或者host未指定那么URI就无效。</p>\n</li>\n<li><p>path、pathPattern、pathPrefix都是表示路径信息，其中path表示完整的路径信息，pathPrefix表示路径的前缀信息；pathPattern表示完整的路径，但是它里面包含了通配符(*)。</p>\n</li>\n</ul>\n<p>data匹配规则：Intent中必须含有data数据，并且data数据能够完全匹配过滤规则中的某一个data。</p>\n<p>URI有默认的scheme！</p>\n<p>如果过滤规则中的mimeType指定为image/*或者text/*等这种类型的话，那么即使过滤规则中没有指定URI，URI有默认的scheme是content和file！如果过滤规则中指定了scheme的话那就不是默认的scheme了。</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//URI有默认值</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:mimeType=\"image/*\"/&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//URI默认值被覆盖</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:mimeType=\"image/*\" android:scheme=\"http\" .../&gt;</div><div class=\"line\">    ...</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>  如果要为Intent指定完整的data，必须要调用setDataAndType方法！</p>\n<p>  不能先调用setData然后调用setType，因为这两个方法会彼此清除对方的值。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">intent.setDataAndType(Uri.parse(<span class=\"string\">\"file://abc\"</span>), <span class=\"string\">\"image/png\"</span>);</div></pre></td></tr></table></figure></p>\n<p>  data的下面两种写法作用是一样的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"file\" android:host=\"www.github.com\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"file\"/&gt;</div><div class=\"line\">    &lt;data android:host=\"www.github.com\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>  如何判断是否有Activity能够匹配我们的隐式Intent？</p>\n<ul>\n<li><p>(1)PackageManager的resolveActivity方法或者Intent的resolveActivity方法：如果找不到就会返回null</p>\n</li>\n<li><p>(2)PackageManager的queryIntentActivities方法：它返回所有成功匹配的Activity信息<br>针对Service和BroadcastReceiver等组件，PackageManager同样提供了类似的方法去获取成功匹配的组件信息，例如queryIntentServices、queryBroadcastReceivers等方法</p>\n</li>\n<li><p>有一类action和category比较重要，它们在一起用来标明这是一个入口Activity，并且会出现在系统的应用列表中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第2章-IPC机制\"><a href=\"#第2章-IPC机制\" class=\"headerlink\" title=\"第2章 IPC机制\"></a>第2章 IPC机制</h3><h4 id=\"2-1-Android-IPC简介\"><a href=\"#2-1-Android-IPC简介\" class=\"headerlink\" title=\"2.1 Android IPC简介\"></a>2.1 Android IPC简介</h4><p>(1)任何一个操作系统都需要有相应的IPC机制，Linux上可以通过命名通道、共享内存、信号量等来进行进程间通信。Android系统不仅可以使用了Binder机制来实现IPC，还可以使用Socket实现任意两个终端之间的通信。</p>\n<h4 id=\"2-2-Android中的多进程模式\"><a href=\"#2-2-Android中的多进程模式\" class=\"headerlink\" title=\"2.2 Android中的多进程模式\"></a>2.2 Android中的多进程模式</h4><ul>\n<li><p>(1)通过给四大组件指定android:process属性就可以开启多进程模式.</p>\n<p>  默认进程的进程名是包名packageName，进程名以:开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不以:开头的进程属于全局进程，其他应用通过ShareUID方法可以和它跑在同一个进程中。</p>\n<p>  android:process=”:xyz” //进程名是 packageName:xyz</p>\n<p>  android:process=”aaa.bbb.ccc” //进程名是 aaa.bbb.ccc</p>\n</li>\n<li><p>(2)Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。</p>\n<p>  两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。 在这种情况下，它们可以相互访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。如果它们跑在同一个进程中，还可以共享内存数据，它们看起来就像是一个应用的两个部分。</p>\n</li>\n<li><p>(3)android系统会为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以不同的虚拟机中访问同一个类的对象会产生多个副本。</p>\n</li>\n<li><p>(4)使用多进程容易造成以下几个问题：</p>\n<ul>\n<li>1.静态成员和单例模式完全失效；</li>\n<li>2.线程同步机制完全失效：无论锁对象还是锁全局对象都无法保证线程同步；</li>\n<li>3.SharedPreferences的可靠性下降：SharedPreferences不支持并发读写；</li>\n<li><p>4.Application会多次创建：当一个组件跑在一个新的进程的时候，系统要在创建新的进程的同时分配独立的虚拟机，应用会重新启动一次，也就会创建新的Application。运行在同一个进程中的组件是属于同一个虚拟机和同一个Application。</p>\n<p>同一个应用的不同组件，如果它们运行在不同进程中，那么和它们分别属于两个应用没有本质区别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-IPC基础概念介绍\"><a href=\"#2-3-IPC基础概念介绍\" class=\"headerlink\" title=\"2.3 IPC基础概念介绍\"></a>2.3 IPC基础概念介绍</h4><ul>\n<li><p>(1)Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。</p>\n</li>\n<li><p>(2)serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。</p>\n<p>serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值。</p>\n<ul>\n<li><p>1.静态成员变量属于类不属于对象，所以不参与序列化过程；</p>\n</li>\n<li><p>2.声明为transient的成员变量不参与序列化过程。</p>\n</li>\n</ul>\n</li>\n<li><p>(3)Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等，下面是一个实现了Parcelable接口的示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> bookId;</div><div class=\"line\">    <span class=\"keyword\">public</span> String bookName;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">int</span> bookId, String bookName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = bookId;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = bookName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//“内容描述”，如果含有文件描述符返回1，否则返回0，几乎所有情况下都是返回0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//实现序列化操作，flags标识只有0和1，1表示标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel out, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        out.writeInt(bookId);</div><div class=\"line\">        out.writeString(bookName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//实现反序列化操作</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Book&gt;() &#123;</div><div class=\"line\">        <span class=\"comment\">//从序列化后的对象中创建原始对象</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(in);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> Book[] newArray(<span class=\"keyword\">int</span> size) &#123;<span class=\"comment\">//创建指定长度的原始对象数组</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Book</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        bookId = in.readInt();</div><div class=\"line\">        bookName = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>(4)Binder是Android中的一个类，它实现了IBinder接口。</p>\n<p>从IPC角度看，Binder是Android中一种跨进程通信的方式；Binder还可以理解为虚拟的物理设备，它的设备驱动是/dev/binder；</p>\n<p>从Framework层角度看，Binder是ServiceManager连接各种Manager和相应的ManagerService的桥梁；</p>\n<p>从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</p>\n</li>\n</ul>\n<p>  在Android开发中，Binder主要用在Service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，较为简单；而Messenger的底层其实是AIDL，正是Binder的核心工作机制。</p>\n<ul>\n<li><p>(5)aidl工具根据aidl文件自动生成的java接口的解析：</p>\n<p>首先，它声明了几个接口方法，同时还声明了几个整型的id用于标识这些方法，id用于标识在transact过程中客户端所请求的到底是哪个方法；</p>\n<p>接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub内部的代理类Proxy来完成。</p>\n<p>所以，这个接口的核心就是它的内部类Stub和Stub内部的代理类Proxy。 下面分析其中的方法：</p>\n<ul>\n<li>1.asInterface(android.os.IBinder obj)：用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端是在同一个进程中，那么这个方法返回的是服务端的Stub对象本身，否则返回的是系统封装的Stub.Proxy对象。</li>\n<li>2.asBinder：返回当前Binder对象。</li>\n<li><p>3.onTransact：这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</p>\n<p>这个方法的原型是public Boolean onTransact(int code, Parcelable data, Parcelable reply, int flags)</p>\n<p>服务端通过code可以知道客户端请求的目标方法，接着从data中取出所需的参数，然后执行目标方法，执行完毕之后，将结果写入到reply中。如果此方法返回false，说明客户端的请求失败，利用这个特性可以做权限验证(即验证是否有权限调用该服务)。</p>\n</li>\n<li><p>4.Proxy#[Method]：代理类中的接口方法，这些方法运行在客户端，当客户端远程调用此方法时，它的内部实现是：</p>\n<p>首先创建该方法所需要的参数，然后把方法的参数信息写入到_data中，接着调用transact方法来发起RPC请求，同时当前线程挂起；然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程的返回结果，最后返回_reply中的数据。</p>\n</li>\n</ul>\n<p>如果搞清楚了自动生成的接口文件的结构和作用之后，其实是可以不用通过AIDL而直接实现Binder的，<a href=\"https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/manualbinder/BookManagerImpl.java\" target=\"_blank\" rel=\"external\">主席写的示例代码</a></p>\n</li>\n<li><p>(6)Binder的两个重要方法linkToDeath和unlinkToDeath</p>\n<p>Binder运行在服务端，如果由于某种原因服务端异常终止了的话会导致客户端的远程调用失败，所以Binder提供了两个配对的方法linkToDeath和unlinkToDeath，通过linkToDeath方法可以给Binder设置一个死亡代理，当Binder死亡的时候客户端就会收到通知，然后就可以重新发起连接请求从而恢复连接了。</p>\n<p>如何给Binder设置死亡代理呢？</p>\n<ul>\n<li>1.声明一个DeathRecipient对象，DeathRecipient是一个接口，其内部只有一个方法bindeDied，实现这个方法就可以在Binder死亡的时候收到通知了。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> IBinder.DeathRecipient mDeathRecipient = <span class=\"keyword\">new</span> IBinder.DeathRecipient() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">binderDied</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRemoteBookManager == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class=\"number\">0</span>);</div><div class=\"line\">        mRemoteBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span>这里重新绑定远程Service</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.在客户端绑定远程服务成功之后，给binder设置死亡代理</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-Android中的IPC方式\"><a href=\"#2-4-Android中的IPC方式\" class=\"headerlink\" title=\"2.4 Android中的IPC方式\"></a>2.4 Android中的IPC方式</h4><ul>\n<li><p>(1)使用Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>\n</li>\n<li><p>(2)使用文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>\n<p>SharedPreferences是一个特例，虽然它也是文件的一种，但是由于系统对它的读写有一定的缓存策略，即在内存中会有一份SharedPreferences文件的缓存，因此在多进程模式下，系统对它的读写就变得不可靠，当面对高并发读写访问的时候，有很大几率会丢失数据，因此，不建议在进程间通信中使用SharedPreferences。</p>\n</li>\n<li><p>(3)使用Messenger：Messenger是一种轻量级的IPC方案，它的底层实现就是AIDL。Messenger是以串行的方式处理请求的，即服务端只能一个个处理，不存在并发执行的情形，详细的示例见原书。</p>\n</li>\n<li><p>(4)使用AIDL</p>\n<p>大致流程：首先建一个Service和一个AIDL接口，接着创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，在Service的onBind方法中返回这个类的对象，然后客户端就可以绑定服务端Service，建立连接后就可以访问远程服务端的方法了。</p>\n<ul>\n<li>1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；</li>\n<li>2.某些类即使和AIDL文件在同一个包中也要显式import进来；</li>\n<li>3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；</li>\n<li>4.AIDL接口中支持方法，不支持声明静态变量；</li>\n<li>5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。</li>\n<li>6.RemoteCallbackList是系统专门提供的用于删除跨进程Listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口，因为所有的AIDL接口都继承自IInterface接口。</li>\n</ul>\n</li>\n<li><p>(5)使用ContentProvider</p>\n<ul>\n<li>1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；</li>\n<li>2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；</li>\n<li>3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；</li>\n<li>4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；</li>\n</ul>\n</li>\n<li><p>(6)使用Socket</p>\n<p>Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。</p>\n</li>\n</ul>\n<h4 id=\"2-5-Binder连接池\"><a href=\"#2-5-Binder连接池\" class=\"headerlink\" title=\"2.5 Binder连接池\"></a>2.5 Binder连接池</h4><ul>\n<li><p>(1)当项目规模很大的时候，创建很多个Service是不对的做法，因为service是系统资源，太多的service会使得应用看起来很重，所以最好是将所有的AIDL放在同一个Service中去管理。</p>\n<p>整个工作机制是：每个业务模块创建自己的AIDL接口并实现此接口，这个时候不同业务模块之间是不能有耦合的，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。</p>\n<p>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>\n</li>\n<li><p>(2)作者实现的Binder连接池BinderPool的实现源码，建议在AIDL开发工作中引入BinderPool机制。</p>\n</li>\n</ul>\n<h4 id=\"2-6-选用合适的IPC方式\"><a href=\"#2-6-选用合适的IPC方式\" class=\"headerlink\" title=\"2.6 选用合适的IPC方式\"></a>2.6 选用合适的IPC方式</h4><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_ipc.png\" alt=\"选择合适的IPC方式\"></p>\n<h3 id=\"第9章-四大组件的工作过程\"><a href=\"#第9章-四大组件的工作过程\" class=\"headerlink\" title=\"第9章 四大组件的工作过程\"></a>第9章 四大组件的工作过程</h3><p>本篇摘选自<a href=\"http://blog.csdn.net/amurocrash/article/details/48858353\" target=\"_blank\" rel=\"external\">amurocrash的专栏</a></p>\n<h4 id=\"9-1-四大组件的运行状态\"><a href=\"#9-1-四大组件的运行状态\" class=\"headerlink\" title=\"9.1 四大组件的运行状态\"></a>9.1 四大组件的运行状态</h4><ul>\n<li>(1)四大组件中只有BroadcastReceiver既可以在AndroidManifest文件中注册，也可以在代码中注册，其他三个组件都必须在AndroidManifest文件中注册；ContentProvider的调用不需要借助Intent，其他三个组件都需要借助Intent。</li>\n<li>(2)Activity是一种展示型组件，用于向用户展示界面，可由显式或者隐式Intent来启动。</li>\n<li>(3)Service是一种计算型组件，用于在后台执行计算任务。尽管service是用于后台执行计算的，但是它本身是运行在主线程中的，因此耗时的后台计算仍然需要在单独的线程中去完成。Service组件有两种状态：启动状态和绑定状态。当service处于绑定状态时，外界可以很方便的和service进行通信，而在启动状态中是不可与外界通信的。</li>\n<li>(4)BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息，它工作在系统内部。广播有两种注册方式：静态注册和动态注册。静态注册是在AndroidManifest中注册，在应用安装的时候会被系统解析，这种广播不需要应用启动就可以收到相应的广播。动态注册需要通过Context.registerReceiver()来注册，这种广播需要应用启动才能注册并接收广播。BroadcastReceiver组件一般来说不需要停止，它也没有停止的概念。</li>\n<li>(5)ContentProvider是一种数据共享型组件，用于向其他组件乃至其他应用共享数据。ContentProvider中的insert、delete、update、query方法需要处理好线程同步，因为这几个方法是在Binder线程池中被调用的，另外ContentProvider组件也不需要手动停止。</li>\n</ul>\n<h4 id=\"9-2-Activity的工作过程\"><a href=\"#9-2-Activity的工作过程\" class=\"headerlink\" title=\"9.2 Activity的工作过程\"></a>9.2 Activity的工作过程</h4><h5 id=\"1-Activity启动的大致流程\"><a href=\"#1-Activity启动的大致流程\" class=\"headerlink\" title=\"(1)Activity启动的大致流程\"></a>(1)Activity启动的大致流程</h5><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_activity.png\" alt=\"Activity启动的大致流程\"></p>\n<p>(2)ApplicationThread是ActivityThread的一个内部类，它继承自ApplicationThreadNative，而ApplicationThreadNative继承自Binder并实现了IApplicationThread接口，ApplicationThreadNative的作用其实就和系统为AIDL文件生成的类是一样的。<br>(3)ActivityManagerService(AMS)继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。<br>(4)一个应用只有一个Application对象，它的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。<br>(5)ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当window接收到外部输入事件后就可以将事件传递给Activity。 [这里可能有误，应该是Activity将事件传递给window]</p>\n<h4 id=\"9-3-Service的工作过程\"><a href=\"#9-3-Service的工作过程\" class=\"headerlink\" title=\"9.3 Service的工作过程\"></a>9.3 Service的工作过程</h4><h5 id=\"1-Service有两种状态：\"><a href=\"#1-Service有两种状态：\" class=\"headerlink\" title=\"(1)Service有两种状态：\"></a>(1)Service有两种状态：</h5><p>启动状态和绑定状态，两种状态是可以共存的。<br><strong>启动过程：</strong><br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service1.png\" alt=\"Service1\"></p>\n<p><strong>绑定过程：</strong><br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service2.png\" alt=\"Service2\"></p>\n<h4 id=\"9-4-BroadcastReceiver的工作过程\"><a href=\"#9-4-BroadcastReceiver的工作过程\" class=\"headerlink\" title=\"9.4 BroadcastReceiver的工作过程\"></a>9.4 BroadcastReceiver的工作过程</h4><h5 id=\"1-BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\"><a href=\"#1-BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\" class=\"headerlink\" title=\"(1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\"></a>(1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。</h5><p><strong>注册过程</strong>：静态注册的时候是由PackageManagerService来完成整个注册过程，下面是动态注册的过程<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver1.png\" alt=\"broadcastreceiver1\"><br><strong>发送和接收</strong>：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver2.png\" alt=\"broadcastreceiver2\"></p>\n<h5 id=\"2-广播的发送有几种类型：\"><a href=\"#2-广播的发送有几种类型：\" class=\"headerlink\" title=\"(2)广播的发送有几种类型：\"></a>(2)广播的发送有几种类型：</h5><p>普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。</p>\n<h5 id=\"3-一个应用处于停止状态分为两种情况：\"><a href=\"#3-一个应用处于停止状态分为两种情况：\" class=\"headerlink\" title=\"(3)一个应用处于停止状态分为两种情况：\"></a>(3)一个应用处于停止状态分为两种情况：</h5><p>一是应用安装后未运行；二是应用被手动或者其他应用强停了。从Android 3.1开始，处于停止状态的应用无法接受到开机广播。</p>\n<h4 id=\"9-5-ContentProvider的工作过程\"><a href=\"#9-5-ContentProvider的工作过程\" class=\"headerlink\" title=\"9.5 ContentProvider的工作过程\"></a>9.5 ContentProvider的工作过程</h4><h5 id=\"1-当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\"><a href=\"#1-当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\" class=\"headerlink\" title=\"(1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\"></a>(1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。</h5><h5 id=\"2-ContentProvider的启动过程：\"><a href=\"#2-ContentProvider的启动过程：\" class=\"headerlink\" title=\"(2)ContentProvider的启动过程：\"></a>(2)ContentProvider的启动过程：</h5><ul>\n<li>1.当一个应用启动时，入口方法是ActivityThread的main方法，其中创建ActivityThread的实例并创建主线程的消息队列；</li>\n<li>2.ActivityThread的attach方法中会远程调用ActivityManagerService的attachApplication，并将ApplicationThread提供给AMS，ApplicationThread主要用于ActivityThread和AMS之间的通信；</li>\n<li>3.ActivityManagerService的attachApplication会调用ApplicationThread的bindApplication方法，这个方法会通过H切换到ActivityThread中去执行，即调用handleBindApplication方法；</li>\n<li>4.handleBindApplication方法会创建Application对象并加载ContentProvider，注意是先加载ContentProvider，然后调用Application的onCreate方法。</li>\n</ul>\n<h5 id=\"3-ContentProvider的android-multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\"><a href=\"#3-ContentProvider的android-multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\" class=\"headerlink\" title=\"(3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\"></a>(3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。</h5><h5 id=\"4-当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\"><a href=\"#4-当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\" class=\"headerlink\" title=\"(4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\"></a>(4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：</h5><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_contentprovider.png\" alt=\"ContentProvider\"></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/20/android-books-reading-/\">http://agehua.github.io/2016/03/20/android-books-reading-/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.655,"time":219299.99999999997,"words":731},"excerpt":"<h3 id=\"第1章-Activity的生命周期和启动模式\"><a href=\"#第1章-Activity的生命周期和启动模式\" class=\"headerlink\" title=\"第1章 Activity的生命周期和启动模式\"></a>第1章 Activity的生命周期和启动模式</h3><p>本节和《Android群英传》中的第8章Activity和Activity调用栈分析有关系，建议先阅读该章的总结</p>\n<p>第1章 Activity的生命周期和启动模式</p>\n<h4 id=\"1-1-Activity生命周期全面分析\"><a href=\"#1-1-Activity生命周期全面分析\" class=\"headerlink\" title=\"1.1 Activity生命周期全面分析\"></a>1.1 Activity生命周期全面分析</h4><h5 id=\"1-1-1-典型情况下生命周期分析\"><a href=\"#1-1-1-典型情况下生命周期分析\" class=\"headerlink\" title=\"1.1.1 典型情况下生命周期分析\"></a>1.1.1 典型情况下生命周期分析</h5><ul>\n<li><p>(1)一般情况下，当当前Activity从不可见重新变为可见状态时，onRestart方法就会被调用。</p>\n</li>\n<li><p>(2)当用户打开新的Activity或者切换到桌面的时候，回调如下：onPause -&gt; onStop，但是如果新Activity采用了透明主题，那么onStop方法不会被回调。当用户再次回到原来的Activity时，回调如下：onRestart -&gt; onStart -&gt; onResume。</p>\n</li>\n</ul>","more":"<ul>\n<li><p>(3)onStart和onStop对应，它们是从Activity是否可见这个角度来回调的；onPause和onResume方法对应，它们是从Activity是否位于前台这个角度来回调的。</p>\n</li>\n<li><p>(4)从Activity A进入到Activity B，回调顺序是onPause(A) -&gt; onCreate(B) -&gt; onStart(B) -&gt; onResume(B) -&gt; onStop(A)，所以不能在onPause方法中做重量级的操作。</p>\n</li>\n</ul>\n<p>1.1.2 异常情况下生命周期分析</p>\n<ul>\n<li><p>(1)onSaveInstanceState方法只会出现在Activity被异常终止的情况下，它的调用时机是在onStop之前，它和onPause方法没有既定的时序关系，可能在它之前，也可能在它之后。</p>\n<p>  当Activity被重新创建的时候，onRestoreInstanceState会被回调，它的调用时机是onStart之后。</p>\n<p>  系统只会在Activity即将被销毁并且有机会重新显示的情况下才会去调用onSaveInstanceState方法。</p>\n<p>  当Activity在异常情况下需要重新创建时，系统会默认为我们保存当前Activity的视图结构，并且在Activity重启后为我们恢复这些数据，比如文本框中用户输入的数据、listview滚动的位置等，这些view相关的状态系统都会默认为我们恢复。具体针对某一个view系统能为我们恢复哪些数据可以查看view的源码中的onSaveInstanceState和onRestoreInstanceState方法。</p>\n</li>\n<li><p>(2)Activity按优先级的分类</p>\n<p>  前台Activity；可见但非前台Activity；后台Activity</p>\n</li>\n<li><p>(3)android:configChanges=”xxx”属性，常用的主要有下面三个选项：</p>\n<p>  local：设备的本地位置发生了变化，一般指切换了系统语言；</p>\n<p>  keyboardHidden：键盘的可访问性发生了变化，比如用户调出了键盘；</p>\n<p>  orientation：屏幕方向发生了变化，比如旋转了手机屏幕。</p>\n<p>  配置了android:configChanges=”xxx”属性之后，Activity就不会在对应变化发生时重新创建，而是调用Activity的onConfigurationChanged方法。</p>\n</li>\n</ul>\n<h4 id=\"1-2-Activity的启动模式\"><a href=\"#1-2-Activity的启动模式\" class=\"headerlink\" title=\"1.2 Activity的启动模式\"></a>1.2 Activity的启动模式</h4><h5 id=\"1-2-1-启动模式\"><a href=\"#1-2-1-启动模式\" class=\"headerlink\" title=\"1.2.1 启动模式\"></a>1.2.1 启动模式</h5><ul>\n<li><p>(1)当任务栈中没有任何Activity的时候，系统就会回收这个任务栈。</p>\n</li>\n<li><p>(2)从非Activity类型的Context(例如ApplicationContext、Service等)中以standard模式启动新的Activity是不行的，因为这类context并没有任务栈，所以需要为待启动Activity指定FLAG_ACTIVITY_NEW_TASK标志位。</p>\n</li>\n<li><p>(3)任务栈分为前台任务栈和后台任务栈，后台任务栈中的Activity位于暂停状态，用户可以通过切换将后台任务栈再次调到前台。</p>\n</li>\n<li><p>(4)参数TaskAffinity用来指定Activity所需要的任务栈，意为任务相关性。</p>\n<p>  默认情况下，所有Activity所需的任务栈的名字为应用的包名。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其他情况下没有意义。</p>\n<p>  当TaskAffinity和singleTask启动模式配对使用的时候，它是具有该模式的Activity的目前任务栈的名字，待启动的Activity会运行在名字和TaskAffinity相同的任务栈中；</p>\n<p>  当TaskAffinity和allowTaskReparenting结合的时候，当一个应用A启动了应用B的某个Activity C后，如果Activity C的allowTaskReparenting属性设置为true的话，那么当应用B被启动后，系统会发现Activity C所需的任务栈存在了，就将Activity C从A的任务栈中转移到B的任务栈中。</p>\n</li>\n<li><p>(5)singleTask模式的具体分析：</p>\n<p>  当一个具有singleTask启动模式的Activity请求启动之后，系统首先会寻找是否存在A想要的任务栈，</p>\n<p>  如果不存在，就重新创建一个任务栈，然后创建Activity的实例把它放到栈中；如果存在Activity所需的任务栈，这时候要看栈中是否有Activity实例存在.</p>\n<p>  如果有，那么系统就会把该Activity实例调到栈顶，并调用它的onNewIntent方法(它之上的Activity会被迫出栈，所以singleTask模式具有FLAG_ACTIVITY_CLEAR_TOP效果)；如果Activity实例不存在，那么就创建Activity实例并把它压入栈中。</p>\n</li>\n<li><p>(6)设置启动模式既可以使用xml属性android:launchMode，也可以使用代码intent.addFlags()。区别在于限定范围不同，前者无法直接为Activity设置FLAG_ACTIVITY_CLEAR_TOP标识，而后者无法为Activity指定singleInstance模式。</p>\n</li>\n</ul>\n<h5 id=\"1-2-2-Activity的Flags\"><a href=\"#1-2-2-Activity的Flags\" class=\"headerlink\" title=\"1.2.2 Activity的Flags\"></a>1.2.2 Activity的Flags</h5><p>FLAG_ACTIVITY_NEW_TASK,FLAG_ACTIVITY_SINGLE_TOP,FLAG_ACTIVITY_CLEAR_TOP</p>\n<p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有这个标记的Activity不会出现在历史Activity列表中，当某些情况下我们不希望用户通过历史列表回到我们的Activity的时候这个标记比较有用，它等同于属性设置android:excludeFromRecents=”true”。</p>\n<h4 id=\"1-3-IntentFilter的匹配规则\"><a href=\"#1-3-IntentFilter的匹配规则\" class=\"headerlink\" title=\"1.3 IntentFilter的匹配规则\"></a>1.3 IntentFilter的匹配规则</h4><ul>\n<li><p>(1)IntentFilter中的过滤信息有action、category、data，为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。</p>\n<p>  一个过滤列表中的action、category、data可以有多个，所有的action、category、data分别构成不同类别，同一类别的信息共同约束当前类别的匹配过程。只有一个Intent同时匹配action类别、category类别和data类别才算完全匹配，只有完全匹配才能成功启动目标Activity。此外，一个Activity中可以有多个intent-filter，一个Intent只要能匹配任何一组intenf-filter即可成功启动对应的Activity。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=\"com.ryg.charpter_1.c\" /&gt;</div><div class=\"line\">    &lt;action android:name=\"com.ryg.charpter_1.d\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;category android:name=\"com.ryg.category.c\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"com.ryg.category.d\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;data android:mimeType=\"text/plain\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div><div class=\"line\">~~~  </div><div class=\"line\"></div><div class=\"line\">- (2)action匹配规则</div><div class=\"line\"></div><div class=\"line\">    只要Intent中的action能够和过滤规则中的任何一个action相同即可匹配成功，action匹配区分大小写。</div><div class=\"line\"></div><div class=\"line\">- (3)category匹配规则</div><div class=\"line\"></div><div class=\"line\">    Intent中如果有category那么所有的category都必须和过滤规则中的其中一个category相同，如果没有category的话那么就是默认的category，即android.intent.category.DEFAULT，所以为了Activity能够接收隐式调用，配置多个category的时候必须加上默认的category。</div><div class=\"line\"></div><div class=\"line\">- (4)data匹配规则</div><div class=\"line\"></div><div class=\"line\">    data的结构很复杂，语法大致如下：</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">&lt;data android:scheme=\"string\"</div><div class=\"line\">\tandroid:host=\"string\"</div><div class=\"line\">\tandroid:port=\"string\"</div><div class=\"line\">\tandroid:path=\"string\"`</div><div class=\"line\">\tandroid:pathPattern=\"string\"</div><div class=\"line\">\tandroid:pathPrefix=\"string\"</div><div class=\"line\">\tandroid:mimeType=\"string\" /&gt;</div></pre></td></tr></table></figure>\n<p>  主要由mimeType和URI组成，其中mimeType代表媒体类型，而URI的结构也复杂，大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;:<span class=\"comment\">//&lt;host&gt;:&lt;port&gt;/[&lt;path&gt;]|[&lt;pathPrefix&gt;]|[pathPattern]</span></div></pre></td></tr></table></figure>\n<p>  例如content://com.example.project:200/folder/subfolder/etc</p>\n<ul>\n<li><p>scheme、host、port分别表示URI的模式、主机名和端口号，其中如果scheme或者host未指定那么URI就无效。</p>\n</li>\n<li><p>path、pathPattern、pathPrefix都是表示路径信息，其中path表示完整的路径信息，pathPrefix表示路径的前缀信息；pathPattern表示完整的路径，但是它里面包含了通配符(*)。</p>\n</li>\n</ul>\n<p>data匹配规则：Intent中必须含有data数据，并且data数据能够完全匹配过滤规则中的某一个data。</p>\n<p>URI有默认的scheme！</p>\n<p>如果过滤规则中的mimeType指定为image/*或者text/*等这种类型的话，那么即使过滤规则中没有指定URI，URI有默认的scheme是content和file！如果过滤规则中指定了scheme的话那就不是默认的scheme了。</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//URI有默认值</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:mimeType=\"image/*\"/&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//URI默认值被覆盖</div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:mimeType=\"image/*\" android:scheme=\"http\" .../&gt;</div><div class=\"line\">    ...</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>  如果要为Intent指定完整的data，必须要调用setDataAndType方法！</p>\n<p>  不能先调用setData然后调用setType，因为这两个方法会彼此清除对方的值。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">intent.setDataAndType(Uri.parse(<span class=\"string\">\"file://abc\"</span>), <span class=\"string\">\"image/png\"</span>);</div></pre></td></tr></table></figure></p>\n<p>  data的下面两种写法作用是一样的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"file\" android:host=\"www.github.com\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"file\"/&gt;</div><div class=\"line\">    &lt;data android:host=\"www.github.com\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<p>  如何判断是否有Activity能够匹配我们的隐式Intent？</p>\n<ul>\n<li><p>(1)PackageManager的resolveActivity方法或者Intent的resolveActivity方法：如果找不到就会返回null</p>\n</li>\n<li><p>(2)PackageManager的queryIntentActivities方法：它返回所有成功匹配的Activity信息<br>针对Service和BroadcastReceiver等组件，PackageManager同样提供了类似的方法去获取成功匹配的组件信息，例如queryIntentServices、queryBroadcastReceivers等方法</p>\n</li>\n<li><p>有一类action和category比较重要，它们在一起用来标明这是一个入口Activity，并且会出现在系统的应用列表中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=\"android.intent.action.MAIN\" /&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第2章-IPC机制\"><a href=\"#第2章-IPC机制\" class=\"headerlink\" title=\"第2章 IPC机制\"></a>第2章 IPC机制</h3><h4 id=\"2-1-Android-IPC简介\"><a href=\"#2-1-Android-IPC简介\" class=\"headerlink\" title=\"2.1 Android IPC简介\"></a>2.1 Android IPC简介</h4><p>(1)任何一个操作系统都需要有相应的IPC机制，Linux上可以通过命名通道、共享内存、信号量等来进行进程间通信。Android系统不仅可以使用了Binder机制来实现IPC，还可以使用Socket实现任意两个终端之间的通信。</p>\n<h4 id=\"2-2-Android中的多进程模式\"><a href=\"#2-2-Android中的多进程模式\" class=\"headerlink\" title=\"2.2 Android中的多进程模式\"></a>2.2 Android中的多进程模式</h4><ul>\n<li><p>(1)通过给四大组件指定android:process属性就可以开启多进程模式.</p>\n<p>  默认进程的进程名是包名packageName，进程名以:开头的进程属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中，而进程名不以:开头的进程属于全局进程，其他应用通过ShareUID方法可以和它跑在同一个进程中。</p>\n<p>  android:process=”:xyz” //进程名是 packageName:xyz</p>\n<p>  android:process=”aaa.bbb.ccc” //进程名是 aaa.bbb.ccc</p>\n</li>\n<li><p>(2)Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。</p>\n<p>  两个应用通过ShareUID跑在同一个进程中是有要求的，需要这两个应用有相同的ShareUID并且签名相同才可以。 在这种情况下，它们可以相互访问对方的私有数据，比如data目录、组件信息等，不管它们是否跑在同一个进程中。如果它们跑在同一个进程中，还可以共享内存数据，它们看起来就像是一个应用的两个部分。</p>\n</li>\n<li><p>(3)android系统会为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，所以不同的虚拟机中访问同一个类的对象会产生多个副本。</p>\n</li>\n<li><p>(4)使用多进程容易造成以下几个问题：</p>\n<ul>\n<li>1.静态成员和单例模式完全失效；</li>\n<li>2.线程同步机制完全失效：无论锁对象还是锁全局对象都无法保证线程同步；</li>\n<li>3.SharedPreferences的可靠性下降：SharedPreferences不支持并发读写；</li>\n<li><p>4.Application会多次创建：当一个组件跑在一个新的进程的时候，系统要在创建新的进程的同时分配独立的虚拟机，应用会重新启动一次，也就会创建新的Application。运行在同一个进程中的组件是属于同一个虚拟机和同一个Application。</p>\n<p>同一个应用的不同组件，如果它们运行在不同进程中，那么和它们分别属于两个应用没有本质区别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-IPC基础概念介绍\"><a href=\"#2-3-IPC基础概念介绍\" class=\"headerlink\" title=\"2.3 IPC基础概念介绍\"></a>2.3 IPC基础概念介绍</h4><ul>\n<li><p>(1)Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。</p>\n</li>\n<li><p>(2)serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。</p>\n<p>serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值。</p>\n<ul>\n<li><p>1.静态成员变量属于类不属于对象，所以不参与序列化过程；</p>\n</li>\n<li><p>2.声明为transient的成员变量不参与序列化过程。</p>\n</li>\n</ul>\n</li>\n<li><p>(3)Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等，下面是一个实现了Parcelable接口的示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> bookId;</div><div class=\"line\">    <span class=\"keyword\">public</span> String bookName;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">int</span> bookId, String bookName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookId = bookId;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bookName = bookName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//“内容描述”，如果含有文件描述符返回1，否则返回0，几乎所有情况下都是返回0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//实现序列化操作，flags标识只有0和1，1表示标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel out, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        out.writeInt(bookId);</div><div class=\"line\">        out.writeString(bookName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//实现反序列化操作</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Book&gt;() &#123;</div><div class=\"line\">        <span class=\"comment\">//从序列化后的对象中创建原始对象</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(in);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> Book[] newArray(<span class=\"keyword\">int</span> size) &#123;<span class=\"comment\">//创建指定长度的原始对象数组</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Book</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">        bookId = in.readInt();</div><div class=\"line\">        bookName = in.readString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>(4)Binder是Android中的一个类，它实现了IBinder接口。</p>\n<p>从IPC角度看，Binder是Android中一种跨进程通信的方式；Binder还可以理解为虚拟的物理设备，它的设备驱动是/dev/binder；</p>\n<p>从Framework层角度看，Binder是ServiceManager连接各种Manager和相应的ManagerService的桥梁；</p>\n<p>从Android应用层来说，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个包含了服务端业务调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务包括普通服务和基于AIDL的服务。</p>\n</li>\n</ul>\n<p>  在Android开发中，Binder主要用在Service中，包括AIDL和Messenger，其中普通Service中的Binder不涉及进程间通信，较为简单；而Messenger的底层其实是AIDL，正是Binder的核心工作机制。</p>\n<ul>\n<li><p>(5)aidl工具根据aidl文件自动生成的java接口的解析：</p>\n<p>首先，它声明了几个接口方法，同时还声明了几个整型的id用于标识这些方法，id用于标识在transact过程中客户端所请求的到底是哪个方法；</p>\n<p>接着，它声明了一个内部类Stub，这个Stub就是一个Binder类，当客户端和服务端都位于同一个进程时，方法调用不会走跨进程的transact过程，而当两者位于不同进程时，方法调用需要走transact过程，这个逻辑由Stub内部的代理类Proxy来完成。</p>\n<p>所以，这个接口的核心就是它的内部类Stub和Stub内部的代理类Proxy。 下面分析其中的方法：</p>\n<ul>\n<li>1.asInterface(android.os.IBinder obj)：用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端是在同一个进程中，那么这个方法返回的是服务端的Stub对象本身，否则返回的是系统封装的Stub.Proxy对象。</li>\n<li>2.asBinder：返回当前Binder对象。</li>\n<li><p>3.onTransact：这个方法运行在服务端中的Binder线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</p>\n<p>这个方法的原型是public Boolean onTransact(int code, Parcelable data, Parcelable reply, int flags)</p>\n<p>服务端通过code可以知道客户端请求的目标方法，接着从data中取出所需的参数，然后执行目标方法，执行完毕之后，将结果写入到reply中。如果此方法返回false，说明客户端的请求失败，利用这个特性可以做权限验证(即验证是否有权限调用该服务)。</p>\n</li>\n<li><p>4.Proxy#[Method]：代理类中的接口方法，这些方法运行在客户端，当客户端远程调用此方法时，它的内部实现是：</p>\n<p>首先创建该方法所需要的参数，然后把方法的参数信息写入到_data中，接着调用transact方法来发起RPC请求，同时当前线程挂起；然后服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程的返回结果，最后返回_reply中的数据。</p>\n</li>\n</ul>\n<p>如果搞清楚了自动生成的接口文件的结构和作用之后，其实是可以不用通过AIDL而直接实现Binder的，<a href=\"https://github.com/singwhatiwanna/android-art-res/blob/master/Chapter_2/src/com/ryg/chapter_2/manualbinder/BookManagerImpl.java\">主席写的示例代码</a></p>\n</li>\n<li><p>(6)Binder的两个重要方法linkToDeath和unlinkToDeath</p>\n<p>Binder运行在服务端，如果由于某种原因服务端异常终止了的话会导致客户端的远程调用失败，所以Binder提供了两个配对的方法linkToDeath和unlinkToDeath，通过linkToDeath方法可以给Binder设置一个死亡代理，当Binder死亡的时候客户端就会收到通知，然后就可以重新发起连接请求从而恢复连接了。</p>\n<p>如何给Binder设置死亡代理呢？</p>\n<ul>\n<li>1.声明一个DeathRecipient对象，DeathRecipient是一个接口，其内部只有一个方法bindeDied，实现这个方法就可以在Binder死亡的时候收到通知了。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> IBinder.DeathRecipient mDeathRecipient = <span class=\"keyword\">new</span> IBinder.DeathRecipient() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">binderDied</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRemoteBookManager == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class=\"number\">0</span>);</div><div class=\"line\">        mRemoteBookManager = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span>这里重新绑定远程Service</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.在客户端绑定远程服务成功之后，给binder设置死亡代理</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-Android中的IPC方式\"><a href=\"#2-4-Android中的IPC方式\" class=\"headerlink\" title=\"2.4 Android中的IPC方式\"></a>2.4 Android中的IPC方式</h4><ul>\n<li><p>(1)使用Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>\n</li>\n<li><p>(2)使用文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>\n<p>SharedPreferences是一个特例，虽然它也是文件的一种，但是由于系统对它的读写有一定的缓存策略，即在内存中会有一份SharedPreferences文件的缓存，因此在多进程模式下，系统对它的读写就变得不可靠，当面对高并发读写访问的时候，有很大几率会丢失数据，因此，不建议在进程间通信中使用SharedPreferences。</p>\n</li>\n<li><p>(3)使用Messenger：Messenger是一种轻量级的IPC方案，它的底层实现就是AIDL。Messenger是以串行的方式处理请求的，即服务端只能一个个处理，不存在并发执行的情形，详细的示例见原书。</p>\n</li>\n<li><p>(4)使用AIDL</p>\n<p>大致流程：首先建一个Service和一个AIDL接口，接着创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，在Service的onBind方法中返回这个类的对象，然后客户端就可以绑定服务端Service，建立连接后就可以访问远程服务端的方法了。</p>\n<ul>\n<li>1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；</li>\n<li>2.某些类即使和AIDL文件在同一个包中也要显式import进来；</li>\n<li>3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；</li>\n<li>4.AIDL接口中支持方法，不支持声明静态变量；</li>\n<li>5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。</li>\n<li>6.RemoteCallbackList是系统专门提供的用于删除跨进程Listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口，因为所有的AIDL接口都继承自IInterface接口。</li>\n</ul>\n</li>\n<li><p>(5)使用ContentProvider</p>\n<ul>\n<li>1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；</li>\n<li>2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；</li>\n<li>3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；</li>\n<li>4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；</li>\n</ul>\n</li>\n<li><p>(6)使用Socket</p>\n<p>Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。</p>\n</li>\n</ul>\n<h4 id=\"2-5-Binder连接池\"><a href=\"#2-5-Binder连接池\" class=\"headerlink\" title=\"2.5 Binder连接池\"></a>2.5 Binder连接池</h4><ul>\n<li><p>(1)当项目规模很大的时候，创建很多个Service是不对的做法，因为service是系统资源，太多的service会使得应用看起来很重，所以最好是将所有的AIDL放在同一个Service中去管理。</p>\n<p>整个工作机制是：每个业务模块创建自己的AIDL接口并实现此接口，这个时候不同业务模块之间是不能有耦合的，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。</p>\n<p>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>\n</li>\n<li><p>(2)作者实现的Binder连接池BinderPool的实现源码，建议在AIDL开发工作中引入BinderPool机制。</p>\n</li>\n</ul>\n<h4 id=\"2-6-选用合适的IPC方式\"><a href=\"#2-6-选用合适的IPC方式\" class=\"headerlink\" title=\"2.6 选用合适的IPC方式\"></a>2.6 选用合适的IPC方式</h4><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_ipc.png\" alt=\"选择合适的IPC方式\"></p>\n<h3 id=\"第9章-四大组件的工作过程\"><a href=\"#第9章-四大组件的工作过程\" class=\"headerlink\" title=\"第9章 四大组件的工作过程\"></a>第9章 四大组件的工作过程</h3><p>本篇摘选自<a href=\"http://blog.csdn.net/amurocrash/article/details/48858353\">amurocrash的专栏</a></p>\n<h4 id=\"9-1-四大组件的运行状态\"><a href=\"#9-1-四大组件的运行状态\" class=\"headerlink\" title=\"9.1 四大组件的运行状态\"></a>9.1 四大组件的运行状态</h4><ul>\n<li>(1)四大组件中只有BroadcastReceiver既可以在AndroidManifest文件中注册，也可以在代码中注册，其他三个组件都必须在AndroidManifest文件中注册；ContentProvider的调用不需要借助Intent，其他三个组件都需要借助Intent。</li>\n<li>(2)Activity是一种展示型组件，用于向用户展示界面，可由显式或者隐式Intent来启动。</li>\n<li>(3)Service是一种计算型组件，用于在后台执行计算任务。尽管service是用于后台执行计算的，但是它本身是运行在主线程中的，因此耗时的后台计算仍然需要在单独的线程中去完成。Service组件有两种状态：启动状态和绑定状态。当service处于绑定状态时，外界可以很方便的和service进行通信，而在启动状态中是不可与外界通信的。</li>\n<li>(4)BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息，它工作在系统内部。广播有两种注册方式：静态注册和动态注册。静态注册是在AndroidManifest中注册，在应用安装的时候会被系统解析，这种广播不需要应用启动就可以收到相应的广播。动态注册需要通过Context.registerReceiver()来注册，这种广播需要应用启动才能注册并接收广播。BroadcastReceiver组件一般来说不需要停止，它也没有停止的概念。</li>\n<li>(5)ContentProvider是一种数据共享型组件，用于向其他组件乃至其他应用共享数据。ContentProvider中的insert、delete、update、query方法需要处理好线程同步，因为这几个方法是在Binder线程池中被调用的，另外ContentProvider组件也不需要手动停止。</li>\n</ul>\n<h4 id=\"9-2-Activity的工作过程\"><a href=\"#9-2-Activity的工作过程\" class=\"headerlink\" title=\"9.2 Activity的工作过程\"></a>9.2 Activity的工作过程</h4><h5 id=\"1-Activity启动的大致流程\"><a href=\"#1-Activity启动的大致流程\" class=\"headerlink\" title=\"(1)Activity启动的大致流程\"></a>(1)Activity启动的大致流程</h5><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_activity.png\" alt=\"Activity启动的大致流程\"></p>\n<p>(2)ApplicationThread是ActivityThread的一个内部类，它继承自ApplicationThreadNative，而ApplicationThreadNative继承自Binder并实现了IApplicationThread接口，ApplicationThreadNative的作用其实就和系统为AIDL文件生成的类是一样的。<br>(3)ActivityManagerService(AMS)继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。<br>(4)一个应用只有一个Application对象，它的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。<br>(5)ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当window接收到外部输入事件后就可以将事件传递给Activity。 [这里可能有误，应该是Activity将事件传递给window]</p>\n<h4 id=\"9-3-Service的工作过程\"><a href=\"#9-3-Service的工作过程\" class=\"headerlink\" title=\"9.3 Service的工作过程\"></a>9.3 Service的工作过程</h4><h5 id=\"1-Service有两种状态：\"><a href=\"#1-Service有两种状态：\" class=\"headerlink\" title=\"(1)Service有两种状态：\"></a>(1)Service有两种状态：</h5><p>启动状态和绑定状态，两种状态是可以共存的。<br><strong>启动过程：</strong><br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service1.png\" alt=\"Service1\"></p>\n<p><strong>绑定过程：</strong><br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_service2.png\" alt=\"Service2\"></p>\n<h4 id=\"9-4-BroadcastReceiver的工作过程\"><a href=\"#9-4-BroadcastReceiver的工作过程\" class=\"headerlink\" title=\"9.4 BroadcastReceiver的工作过程\"></a>9.4 BroadcastReceiver的工作过程</h4><h5 id=\"1-BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\"><a href=\"#1-BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\" class=\"headerlink\" title=\"(1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\"></a>(1)BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。</h5><p><strong>注册过程</strong>：静态注册的时候是由PackageManagerService来完成整个注册过程，下面是动态注册的过程<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver1.png\" alt=\"broadcastreceiver1\"><br><strong>发送和接收</strong>：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_broadcastreceiver2.png\" alt=\"broadcastreceiver2\"></p>\n<h5 id=\"2-广播的发送有几种类型：\"><a href=\"#2-广播的发送有几种类型：\" class=\"headerlink\" title=\"(2)广播的发送有几种类型：\"></a>(2)广播的发送有几种类型：</h5><p>普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。</p>\n<h5 id=\"3-一个应用处于停止状态分为两种情况：\"><a href=\"#3-一个应用处于停止状态分为两种情况：\" class=\"headerlink\" title=\"(3)一个应用处于停止状态分为两种情况：\"></a>(3)一个应用处于停止状态分为两种情况：</h5><p>一是应用安装后未运行；二是应用被手动或者其他应用强停了。从Android 3.1开始，处于停止状态的应用无法接受到开机广播。</p>\n<h4 id=\"9-5-ContentProvider的工作过程\"><a href=\"#9-5-ContentProvider的工作过程\" class=\"headerlink\" title=\"9.5 ContentProvider的工作过程\"></a>9.5 ContentProvider的工作过程</h4><h5 id=\"1-当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\"><a href=\"#1-当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\" class=\"headerlink\" title=\"(1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。\"></a>(1)当ContentProvider所在的进程启动的时候，它会同时被启动并被发布到AMS中，这个时候它的onCreate要先去Application的onCreate执行。</h5><h5 id=\"2-ContentProvider的启动过程：\"><a href=\"#2-ContentProvider的启动过程：\" class=\"headerlink\" title=\"(2)ContentProvider的启动过程：\"></a>(2)ContentProvider的启动过程：</h5><ul>\n<li>1.当一个应用启动时，入口方法是ActivityThread的main方法，其中创建ActivityThread的实例并创建主线程的消息队列；</li>\n<li>2.ActivityThread的attach方法中会远程调用ActivityManagerService的attachApplication，并将ApplicationThread提供给AMS，ApplicationThread主要用于ActivityThread和AMS之间的通信；</li>\n<li>3.ActivityManagerService的attachApplication会调用ApplicationThread的bindApplication方法，这个方法会通过H切换到ActivityThread中去执行，即调用handleBindApplication方法；</li>\n<li>4.handleBindApplication方法会创建Application对象并加载ContentProvider，注意是先加载ContentProvider，然后调用Application的onCreate方法。</li>\n</ul>\n<h5 id=\"3-ContentProvider的android-multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\"><a href=\"#3-ContentProvider的android-multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\" class=\"headerlink\" title=\"(3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。\"></a>(3)ContentProvider的android:multiprocess属性决定它是否是单实例，默认值是false，也就是默认是单实例。当设置为true时，每个调用者的进程中都存在一个ContentProvider对象。</h5><h5 id=\"4-当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\"><a href=\"#4-当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\" class=\"headerlink\" title=\"(4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：\"></a>(4)当调用ContentProvider的insert、delete、update、query方法中的任何一个时，如果ContentProvider所在的进程没有启动的话，那么就会触发ContentProvider的创建，并伴随着ContentProvider所在进程的启动。下图是ContentProvider的query操作的大致过程：</h5><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/androidart_contentprovider.png\" alt=\"ContentProvider\"></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/03/20/android-books-reading-/\">http://agehua.github.io/2016/03/20/android-books-reading-/</a></p>"},{"layout":"post","title":"google cloud message（GCM）和Azure实现Notification总结","keywords":"gcm, azure, notification","description":"google cloud message（GCM）和Azure实现Notification总结","banner":"http://obxk8w81b.bkt.clouddn.com/Country%20Lane%20with%20Two%20Figures.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Country%20Lane%20with%20Two%20Figures.jpg","_content":"\n\n### 1.相关资料\n我也是一知半解，基本上就是根据官方教程来实现，但microsoft的azure文档我找了好久，英文不好，汗。。。\n\ngcm start: https://developers.google.com/cloud-messaging/android/start\n\nazure start: https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/\n\ngcm official demo: https://github.com/google/gcm\n\ngcm personal demo: https://github.com/iammert/FastGCM\n\n<!--more-->\n\n### 2.遇到的问题\n- 1.手机运行官方demo时，发送消息，消息收不到必须切换一下网络才可以\n\nstackoverflow上有人问过这个问题：http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha\n\n\n### 3.onActivityResult()和onResume()调用顺序\nAPI中这样描述：当你一个Activity是以请求码开始，结束时返回给前页面结果码，页面根据结果码进行相应的信息处理。我们会在返回的页面先接受结果码，然后才调用onResume()。\n\n通常我们还会遇到这样一个问题：\n在处理返回页面的数据问题\n1.需要从服务器上刷新数据时我们会在onResume()方法里处理\n2.而刷新从结束界面返回的数据我们会在onAcitviyResult()方法里面处理\n\n为了避免二者在同一块控件上对数据处理，我们只需加个标识符，在两个方法里进行判断，要用哪个方法进行刷新\n\n### 4.Android4.4以上系统根据Uri正确获取文件路径的方法\n\n~~~ Java\n\npublic static String getPhotoPathFromContentUri(Context context, Uri uri) {\n    String photoPath = \"\";\n    if(context == null || uri == null) {\n        return photoPath;\n    }\n\n    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(context, uri)) {\n        String docId = DocumentsContract.getDocumentId(uri);\n        if(isExternalStorageDocument(uri)) {\n            String [] split = docId.split(\":\");\n            if(split.length >= 2) {\n                String type = split[0];\n                if(\"primary\".equalsIgnoreCase(type)) {\n                    photoPath = Environment.getExternalStorageDirectory() + \"/\" + split[1];\n                }\n            }\n        }\n        else if(isDownloadsDocument(uri)) {\n            Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(docId));\n            photoPath = getDataColumn(context, contentUri, null, null);\n        }\n        else if(isMediaDocument(uri)) {\n            String[] split = docId.split(\":\");\n            if(split.length >= 2) {\n                String type = split[0];\n                Uri contentUris = null;\n                if(\"image\".equals(type)) {\n                    contentUris = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n                }\n                else if(\"video\".equals(type)) {\n                    contentUris = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n                }\n                else if(\"audio\".equals(type)) {\n                    contentUris = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n                }\n                String selection = MediaStore.Images.Media._ID + \"=?\";\n                String[] selectionArgs = new String[] { split[1] };\n                photoPath = getDataColumn(context, contentUris, selection, selectionArgs);\n            }\n        }\n    }\n    else if(\"file\".equalsIgnoreCase(uri.getScheme())) {\n        photoPath = uri.getPath();\n    }\n    else {\n        photoPath = getDataColumn(context, uri, null, null);\n    }\n\n    return photoPath;\n}\n\nprivate static boolean isExternalStorageDocument(Uri uri) {\n    return \"com.android.externalstorage.documents\".equals(uri.getAuthority());\n}\n\nprivate static boolean isDownloadsDocument(Uri uri) {\n    return \"com.android.providers.downloads.documents\".equals(uri.getAuthority());\n}\n\nprivate static boolean isMediaDocument(Uri uri) {\n    return \"com.android.providers.media.documents\".equals(uri.getAuthority());\n}\n\nprivate static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {\n    Cursor cursor = null;\n    String column = MediaStore.Images.Media.DATA;\n    String[] projection = { column };\n    try {\n        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            int index = cursor.getColumnIndexOrThrow(column);\n            return cursor.getString(index);\n        }\n    } finally {\n        if (cursor != null && !cursor.isClosed())\n                cursor.close();\n    }\n    return null;\n}\n\n~~~\n","source":"_posts/2016-05-12-GCM-Azure_summary.md","raw":"---\nlayout: post\ntitle: google cloud message（GCM）和Azure实现Notification总结\ncategory: accumulation\ntags:\n  - ANDROID\n  - GCM\n  - azure\n  - notification\nkeywords: gcm, azure, notification\ndescription: google cloud message（GCM）和Azure实现Notification总结\nbanner: http://obxk8w81b.bkt.clouddn.com/Country%20Lane%20with%20Two%20Figures.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Country%20Lane%20with%20Two%20Figures.jpg\n\n---\n\n\n### 1.相关资料\n我也是一知半解，基本上就是根据官方教程来实现，但microsoft的azure文档我找了好久，英文不好，汗。。。\n\ngcm start: https://developers.google.com/cloud-messaging/android/start\n\nazure start: https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/\n\ngcm official demo: https://github.com/google/gcm\n\ngcm personal demo: https://github.com/iammert/FastGCM\n\n<!--more-->\n\n### 2.遇到的问题\n- 1.手机运行官方demo时，发送消息，消息收不到必须切换一下网络才可以\n\nstackoverflow上有人问过这个问题：http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha\n\n\n### 3.onActivityResult()和onResume()调用顺序\nAPI中这样描述：当你一个Activity是以请求码开始，结束时返回给前页面结果码，页面根据结果码进行相应的信息处理。我们会在返回的页面先接受结果码，然后才调用onResume()。\n\n通常我们还会遇到这样一个问题：\n在处理返回页面的数据问题\n1.需要从服务器上刷新数据时我们会在onResume()方法里处理\n2.而刷新从结束界面返回的数据我们会在onAcitviyResult()方法里面处理\n\n为了避免二者在同一块控件上对数据处理，我们只需加个标识符，在两个方法里进行判断，要用哪个方法进行刷新\n\n### 4.Android4.4以上系统根据Uri正确获取文件路径的方法\n\n~~~ Java\n\npublic static String getPhotoPathFromContentUri(Context context, Uri uri) {\n    String photoPath = \"\";\n    if(context == null || uri == null) {\n        return photoPath;\n    }\n\n    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(context, uri)) {\n        String docId = DocumentsContract.getDocumentId(uri);\n        if(isExternalStorageDocument(uri)) {\n            String [] split = docId.split(\":\");\n            if(split.length >= 2) {\n                String type = split[0];\n                if(\"primary\".equalsIgnoreCase(type)) {\n                    photoPath = Environment.getExternalStorageDirectory() + \"/\" + split[1];\n                }\n            }\n        }\n        else if(isDownloadsDocument(uri)) {\n            Uri contentUri = ContentUris.withAppendedId(Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(docId));\n            photoPath = getDataColumn(context, contentUri, null, null);\n        }\n        else if(isMediaDocument(uri)) {\n            String[] split = docId.split(\":\");\n            if(split.length >= 2) {\n                String type = split[0];\n                Uri contentUris = null;\n                if(\"image\".equals(type)) {\n                    contentUris = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n                }\n                else if(\"video\".equals(type)) {\n                    contentUris = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n                }\n                else if(\"audio\".equals(type)) {\n                    contentUris = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n                }\n                String selection = MediaStore.Images.Media._ID + \"=?\";\n                String[] selectionArgs = new String[] { split[1] };\n                photoPath = getDataColumn(context, contentUris, selection, selectionArgs);\n            }\n        }\n    }\n    else if(\"file\".equalsIgnoreCase(uri.getScheme())) {\n        photoPath = uri.getPath();\n    }\n    else {\n        photoPath = getDataColumn(context, uri, null, null);\n    }\n\n    return photoPath;\n}\n\nprivate static boolean isExternalStorageDocument(Uri uri) {\n    return \"com.android.externalstorage.documents\".equals(uri.getAuthority());\n}\n\nprivate static boolean isDownloadsDocument(Uri uri) {\n    return \"com.android.providers.downloads.documents\".equals(uri.getAuthority());\n}\n\nprivate static boolean isMediaDocument(Uri uri) {\n    return \"com.android.providers.media.documents\".equals(uri.getAuthority());\n}\n\nprivate static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {\n    Cursor cursor = null;\n    String column = MediaStore.Images.Media.DATA;\n    String[] projection = { column };\n    try {\n        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            int index = cursor.getColumnIndexOrThrow(column);\n            return cursor.getString(index);\n        }\n    } finally {\n        if (cursor != null && !cursor.isClosed())\n                cursor.close();\n    }\n    return null;\n}\n\n~~~\n","slug":"GCM-Azure_summary","published":1,"date":"2016-05-11T16:00:00.000Z","updated":"2017-11-23T07:24:10.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebwl000jd6ykedf1baiw","content":"<h3 id=\"1-相关资料\"><a href=\"#1-相关资料\" class=\"headerlink\" title=\"1.相关资料\"></a>1.相关资料</h3><p>我也是一知半解，基本上就是根据官方教程来实现，但microsoft的azure文档我找了好久，英文不好，汗。。。</p>\n<p>gcm start: <a href=\"https://developers.google.com/cloud-messaging/android/start\" target=\"_blank\" rel=\"external\">https://developers.google.com/cloud-messaging/android/start</a></p>\n<p>azure start: <a href=\"https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/\" target=\"_blank\" rel=\"external\">https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/</a></p>\n<p>gcm official demo: <a href=\"https://github.com/google/gcm\" target=\"_blank\" rel=\"external\">https://github.com/google/gcm</a></p>\n<p>gcm personal demo: <a href=\"https://github.com/iammert/FastGCM\" target=\"_blank\" rel=\"external\">https://github.com/iammert/FastGCM</a></p>\n<a id=\"more\"></a>\n<h3 id=\"2-遇到的问题\"><a href=\"#2-遇到的问题\" class=\"headerlink\" title=\"2.遇到的问题\"></a>2.遇到的问题</h3><ul>\n<li>1.手机运行官方demo时，发送消息，消息收不到必须切换一下网络才可以</li>\n</ul>\n<p>stackoverflow上有人问过这个问题：<a href=\"http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha</a></p>\n<h3 id=\"3-onActivityResult-和onResume-调用顺序\"><a href=\"#3-onActivityResult-和onResume-调用顺序\" class=\"headerlink\" title=\"3.onActivityResult()和onResume()调用顺序\"></a>3.onActivityResult()和onResume()调用顺序</h3><p>API中这样描述：当你一个Activity是以请求码开始，结束时返回给前页面结果码，页面根据结果码进行相应的信息处理。我们会在返回的页面先接受结果码，然后才调用onResume()。</p>\n<p>通常我们还会遇到这样一个问题：<br>在处理返回页面的数据问题<br>1.需要从服务器上刷新数据时我们会在onResume()方法里处理<br>2.而刷新从结束界面返回的数据我们会在onAcitviyResult()方法里面处理</p>\n<p>为了避免二者在同一块控件上对数据处理，我们只需加个标识符，在两个方法里进行判断，要用哪个方法进行刷新</p>\n<h3 id=\"4-Android4-4以上系统根据Uri正确获取文件路径的方法\"><a href=\"#4-Android4-4以上系统根据Uri正确获取文件路径的方法\" class=\"headerlink\" title=\"4.Android4.4以上系统根据Uri正确获取文件路径的方法\"></a>4.Android4.4以上系统根据Uri正确获取文件路径的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPhotoPathFromContentUri</span><span class=\"params\">(Context context, Uri uri)</span> </span>&#123;</div><div class=\"line\">    String photoPath = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(context == <span class=\"keyword\">null</span> || uri == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> photoPath;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</div><div class=\"line\">        String docId = DocumentsContract.getDocumentId(uri);</div><div class=\"line\">        <span class=\"keyword\">if</span>(isExternalStorageDocument(uri)) &#123;</div><div class=\"line\">            String [] split = docId.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(split.length &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                String type = split[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"string\">\"primary\"</span>.equalsIgnoreCase(type)) &#123;</div><div class=\"line\">                    photoPath = Environment.getExternalStorageDirectory() + <span class=\"string\">\"/\"</span> + split[<span class=\"number\">1</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isDownloadsDocument(uri)) &#123;</div><div class=\"line\">            Uri contentUri = ContentUris.withAppendedId(Uri.parse(<span class=\"string\">\"content://downloads/public_downloads\"</span>), Long.valueOf(docId));</div><div class=\"line\">            photoPath = getDataColumn(context, contentUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isMediaDocument(uri)) &#123;</div><div class=\"line\">            String[] split = docId.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(split.length &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                String type = split[<span class=\"number\">0</span>];</div><div class=\"line\">                Uri contentUris = <span class=\"keyword\">null</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"string\">\"image\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"video\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"audio\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                String selection = MediaStore.Images.Media._ID + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">                String[] selectionArgs = <span class=\"keyword\">new</span> String[] &#123; split[<span class=\"number\">1</span>] &#125;;</div><div class=\"line\">                photoPath = getDataColumn(context, contentUris, selection, selectionArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"file\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class=\"line\">        photoPath = uri.getPath();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        photoPath = getDataColumn(context, uri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> photoPath;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExternalStorageDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.externalstorage.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDownloadsDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.providers.downloads.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMediaDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.providers.media.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataColumn</span><span class=\"params\">(Context context, Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class=\"line\">    Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    String column = MediaStore.Images.Media.DATA;</div><div class=\"line\">    String[] projection = &#123; column &#125;;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = cursor.getColumnIndexOrThrow(column);</div><div class=\"line\">            <span class=\"keyword\">return</span> cursor.getString(index);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span> &amp;&amp; !cursor.isClosed())</div><div class=\"line\">                cursor.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/12/GCM-Azure_summary/\">http://agehua.github.io/2016/05/12/GCM-Azure_summary/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.31,"time":138600,"words":462},"excerpt":"<h3 id=\"1-相关资料\"><a href=\"#1-相关资料\" class=\"headerlink\" title=\"1.相关资料\"></a>1.相关资料</h3><p>我也是一知半解，基本上就是根据官方教程来实现，但microsoft的azure文档我找了好久，英文不好，汗。。。</p>\n<p>gcm start: <a href=\"https://developers.google.com/cloud-messaging/android/start\">https://developers.google.com/cloud-messaging/android/start</a></p>\n<p>azure start: <a href=\"https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/\">https://azure.microsoft.com/zh-cn/documentation/articles/notification-hubs-android-get-started/</a></p>\n<p>gcm official demo: <a href=\"https://github.com/google/gcm\">https://github.com/google/gcm</a></p>\n<p>gcm personal demo: <a href=\"https://github.com/iammert/FastGCM\">https://github.com/iammert/FastGCM</a></p>","more":"<h3 id=\"2-遇到的问题\"><a href=\"#2-遇到的问题\" class=\"headerlink\" title=\"2.遇到的问题\"></a>2.遇到的问题</h3><ul>\n<li>1.手机运行官方demo时，发送消息，消息收不到必须切换一下网络才可以</li>\n</ul>\n<p>stackoverflow上有人问过这个问题：<a href=\"http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha\">http://stackoverflow.com/questions/13835676/google-cloud-messaging-messages-sometimes-not-received-until-network-state-cha</a></p>\n<h3 id=\"3-onActivityResult-和onResume-调用顺序\"><a href=\"#3-onActivityResult-和onResume-调用顺序\" class=\"headerlink\" title=\"3.onActivityResult()和onResume()调用顺序\"></a>3.onActivityResult()和onResume()调用顺序</h3><p>API中这样描述：当你一个Activity是以请求码开始，结束时返回给前页面结果码，页面根据结果码进行相应的信息处理。我们会在返回的页面先接受结果码，然后才调用onResume()。</p>\n<p>通常我们还会遇到这样一个问题：<br>在处理返回页面的数据问题<br>1.需要从服务器上刷新数据时我们会在onResume()方法里处理<br>2.而刷新从结束界面返回的数据我们会在onAcitviyResult()方法里面处理</p>\n<p>为了避免二者在同一块控件上对数据处理，我们只需加个标识符，在两个方法里进行判断，要用哪个方法进行刷新</p>\n<h3 id=\"4-Android4-4以上系统根据Uri正确获取文件路径的方法\"><a href=\"#4-Android4-4以上系统根据Uri正确获取文件路径的方法\" class=\"headerlink\" title=\"4.Android4.4以上系统根据Uri正确获取文件路径的方法\"></a>4.Android4.4以上系统根据Uri正确获取文件路径的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPhotoPathFromContentUri</span><span class=\"params\">(Context context, Uri uri)</span> </span>&#123;</div><div class=\"line\">    String photoPath = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(context == <span class=\"keyword\">null</span> || uri == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> photoPath;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</div><div class=\"line\">        String docId = DocumentsContract.getDocumentId(uri);</div><div class=\"line\">        <span class=\"keyword\">if</span>(isExternalStorageDocument(uri)) &#123;</div><div class=\"line\">            String [] split = docId.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(split.length &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                String type = split[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"string\">\"primary\"</span>.equalsIgnoreCase(type)) &#123;</div><div class=\"line\">                    photoPath = Environment.getExternalStorageDirectory() + <span class=\"string\">\"/\"</span> + split[<span class=\"number\">1</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isDownloadsDocument(uri)) &#123;</div><div class=\"line\">            Uri contentUri = ContentUris.withAppendedId(Uri.parse(<span class=\"string\">\"content://downloads/public_downloads\"</span>), Long.valueOf(docId));</div><div class=\"line\">            photoPath = getDataColumn(context, contentUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isMediaDocument(uri)) &#123;</div><div class=\"line\">            String[] split = docId.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(split.length &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                String type = split[<span class=\"number\">0</span>];</div><div class=\"line\">                Uri contentUris = <span class=\"keyword\">null</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"string\">\"image\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"video\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"audio\"</span>.equals(type)) &#123;</div><div class=\"line\">                    contentUris = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class=\"line\">                &#125;</div><div class=\"line\">                String selection = MediaStore.Images.Media._ID + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">                String[] selectionArgs = <span class=\"keyword\">new</span> String[] &#123; split[<span class=\"number\">1</span>] &#125;;</div><div class=\"line\">                photoPath = getDataColumn(context, contentUris, selection, selectionArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"file\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class=\"line\">        photoPath = uri.getPath();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        photoPath = getDataColumn(context, uri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> photoPath;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isExternalStorageDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.externalstorage.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDownloadsDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.providers.downloads.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMediaDocument</span><span class=\"params\">(Uri uri)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"com.android.providers.media.documents\"</span>.equals(uri.getAuthority());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataColumn</span><span class=\"params\">(Context context, Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class=\"line\">    Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    String column = MediaStore.Images.Media.DATA;</div><div class=\"line\">    String[] projection = &#123; column &#125;;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> index = cursor.getColumnIndexOrThrow(column);</div><div class=\"line\">            <span class=\"keyword\">return</span> cursor.getString(index);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span> &amp;&amp; !cursor.isClosed())</div><div class=\"line\">                cursor.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/12/GCM-Azure_summary/\">http://agehua.github.io/2016/05/12/GCM-Azure_summary/</a></p>"},{"layout":"post","title":"Java String与C/C++中byte[]","keywords":"Java String, bytes,coding","description":"Java String与C/C++中byte[]","banner":"http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg","_content":"\n\n   做JAVA经常会碰到中文乱码问题，还有各种编码的问题，特别是String类的内容需要重新编码的问题。要解决这些问题，必须了解清楚JAVA对于字符串是怎么处理的。\n\n### 1，“字符”是由数字来表示的\n   先来重新了解一下计算机是如何处理“字符”的，这个原理是大家必须记住的，特别是在用JAVA写程序的时候，万万不可模糊。我们知道，**计算机把任何东西都用数字来表示，“字符”也不例外**。比如我们要显示一个阿拉伯数字“3”，在我们的PC里，其实并不是仅仅用一个数字3来代表我们要写的“3”，而是以十六进制的0x33来代表，包括放在内存或者是写到文件里，其实都是写着0x33的，不信你可以编辑一个文本文件，写一个“3”，然后用ultraEdit看他的原始码。\n\n   <!--more-->\n\n### 2，一切“字符”都必定用数字+编码表表示。\n   这时候，有一个问题：为什么一定要用0x33来代表“3”呢？而不用0x43来代表呢？或者是直接用0x03来代替？其实用什么来代表都可以，只不过大家都习惯了用ASCII编码表（是美国国家信息交换表）来确定各字符应该是用什么数字代表的。同样，为了表示中国字，我国也指定了中文的编码表，其中最广泛使用的是GB2312。比如中文的“当”字，就是用0xB5, 0xB1这两个八位的数字来表示的。所以 **如果显示字符的程序不知道一列数字到底是按什么编码表编码的，他也无法去判断到底这些是什么文字**。如果随便用一个不对的编码表来处理这些数字，处理出来的字符很可能完全是错的。比如在英文系统上，没有GB2312编码表，送给他一个0xB5,0xB1，他就傻傻的当作ASCII来处理（操作系统通常都有自己默认的编码表），结果显示出来就是两个奇怪的符号，因为这两个字在ASCII表里就是那两个符号。同样在繁体中文系统里，他的编码表是BIG5，显示出来也是一个奇怪的中文，不是“当”字。\n\n### 3，UNICODE让全世界都说一种语言\n   看完上面的文字，是否觉得，世界有那么多语言，每个都有自己的一套编码表，很麻烦呢？就算是中文，也有两套流行的编码表，一个是GB2312，一个是BIG5。要使用不同中文的编码的字符时，还要转来转去，的确很麻烦。不光这个，如果想要写一篇包含很多过国文字的文章，就麻烦了，必须要让处理这个文章的程序知道，哪个字是什么编码标准的。如果你想要在文章里找一个字，也必须指定你要找的是哪种编码的哪个字。否则，你要找一个0xB5,0xB1的中文“当”字，很可能把同样数字表示的日文、波兰文这些不相干的字一起给你找出来，够麻烦的吧！\n   所以人们想，不如大家都用同一个编码标准吧，各种文字都在编码表里有一席之地，处理文字的程序只需要都按这个编码表来处理就可以了。不过要一个编码表里包含所有的文字，这张表就大了，本来英文字+数字一共只有128个以内。但加上中文后，忽然就多了数万个，所以存放一个字符需要的大小也大了很多。现在 **UNICODE规定了一个字符必须由2个8位数字来表示**，想想，8x8x8x8x = 65536，是多大的一个数字啊！所以全世界的文字才能都包含进去。当然拉，也有人说中国字可能都不止6万个拉，还要包括别的文字，但人家外国人觉得你们中国人常用的也没那么多，所以就这么定了，我们也没办法。需要注意的是GB2312和UNICODE虽然都是用两个8位数来代表一个中文字，但具体的规格可不一样，比如0xB5,0xB1在UNICODE里面可不是“当”字，而是另外一国的文字来的。\n\n### 4，C是如何简洁的处理字符的\n   我们来谈谈C的字符串。C语言诞生在JAVA之前，**C语言的基本数据类型是没有字符串这个类型的，它只有char[]**。也就是C把字符顺序放入一个字节数组就完了。而且C也不管放在数组里的是什么文字，也不管那些字是按什么编码标准的。而且他的char的大小也不一定是8位数字，有时候是16位也可能，**这要看具体的机器和操作系统**。所以写程序的人必须要知道正在处理的char[]的内容到底是按什么编码表表示的字符串，要知道如果比较两国文字是否相同，可是没任何意义的哦！\n\n### 5，JAVA是是如何处理字符的。\n   世界总会进步的，JAVA就是一个例子。JAVA终于有了String类了，它是解决字符问题的最好工具。在JAVA里，一个基本的要点是：**String类对象是不需要指定编码表的！** 为什么它会自己知道一堆数字各代表什么字符呢？就是因为 **String里的字符信息是用UNICODE编码存放的**。而JAVA为了表示字符（注意是单个字符），也有char这个数据类型，而且他的大小是固定2个8位16进制数字长度，也就是0~65535罗。为的就是对应UNICODE里面的一个字符。大家如果想取一个String里的按UNICODE数字，可以用getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 方法取得一个char[]，这个char[]里就是表示String字符的，按UNICODE编码表编码的数字。\n\n   可惜现在绝大多数的系统和程序都不是按UNICODE来处理字符，而JAVA程序总是要和别的程序和系统交换数据的，所以在接收一个字符，或者是发送一个字符的时候，就必须要留意当前系统和UNICODE的关系了。比如你从网络或者文件接受到一数字：0xB5,0xB1，JAVA程序并不知道这两个字到底是中文呢？还是日文，或者英文。你如果不指明这个两个数字的编码表，JAVA就会按当前系统默认的编码表来处理。如果这两个数字是从中文WIN98发出去的，JAVA程序又是在英文LINUX上运行的，那就出现了所谓的乱码问题了。也就是JAVA按英文的编码表ASCII来处理这两个数字，当通过new String({0xB5,0xB1})得到的String的时候，这个String代表的已经不是中文的“当”字，而是两个英文的奇怪字符了。不过如果你知道这两个数字一定是中文的话，就可以指定用new String({0xB5,0xB1},\"GB2312\")来处理，这时候新建立的String才真的是一个“当”字。当然拉，如果你要把一个“当”字的JAVA的String显示在中文WIN98上，必须把这个字输出成两个8位数字：0xB5,0xB1，不管是写成文件还是输出到浏览器上，都必须是0xB5,0xB1。如何把“当”字用GB2312输出？**String.getBytes(\"GB2312\")** 就可以拉！所以有一点要记住：**和外界交换任何信息都是以byte[]来进行的！**。你可以留意一下JAVA大多数的I/O类，都有以byte[]作为参数和返回值的方法。不过，也有很多写的比较糊涂的程序，没有提供byte[]交换信息的方法，害的不同文字平台的程序员很头疼。Servlet的HttpRequest.getParameter()就是这样。好在有的JSP/SERVLET容易还提供先指定编码表的方法，才能比较简单的解决这个问题。\n\n### 6，网上关于JAVA中文问题的一些错误处理方法。\n\n   一个是最常见的，不管什么内容，都用new String(...,\"ISO-8859-1\")来建立字符串，然后使用的时候按默认的编码格式（通常在服务器上都是英文系统）输出字符串。这样其实你使用的String并不是按UNICODE来代表真正的字符，而是强行把BYTE数组复制到String的char[]里，一旦你的运行环境改变，你就被迫要修改一大堆的代码。而且也无法在同一个字符串里处理几种不同编码的文字。\n\n   另一个是把一种编码格式的字符串，比如是GB2312，转换成另一种格式的字符串，比如UTF-8，然后不指明是UTF-8编码，而直接用new String(...)来建立String，这样放在String里面的字符也是无法确定的，它在不同的系统上代表不同的字符。如果要求别人用“UTF-8格式”的String来交换信息的时候，其实已经破坏了JAVA为了兼容各种语言所做的规定。这种错误的本质思想是还按写C语言的方式，把字符串纯粹当作可以自己自由编码的存储器使用，而忽略了JAVA字符串只有一种编码格式。如果真的想自由编码，用byte[]或者char[]就完全了解决问题的了。\n\n\n### 7，其他资料\n[字符，字节和编码](http://www.regexlab.com/zh/encoding.htm)\n","source":"_posts/2016-05-18-javaString-and-bytes.md","raw":"---\nlayout: post\ntitle: Java String与C/C++中byte[]\ncategory: accumulation\ntags:\n  - Java\n  - byte[]\nkeywords: Java String, bytes,coding\ndescription: Java String与C/C++中byte[]\nbanner: http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg\n---\n\n\n   做JAVA经常会碰到中文乱码问题，还有各种编码的问题，特别是String类的内容需要重新编码的问题。要解决这些问题，必须了解清楚JAVA对于字符串是怎么处理的。\n\n### 1，“字符”是由数字来表示的\n   先来重新了解一下计算机是如何处理“字符”的，这个原理是大家必须记住的，特别是在用JAVA写程序的时候，万万不可模糊。我们知道，**计算机把任何东西都用数字来表示，“字符”也不例外**。比如我们要显示一个阿拉伯数字“3”，在我们的PC里，其实并不是仅仅用一个数字3来代表我们要写的“3”，而是以十六进制的0x33来代表，包括放在内存或者是写到文件里，其实都是写着0x33的，不信你可以编辑一个文本文件，写一个“3”，然后用ultraEdit看他的原始码。\n\n   <!--more-->\n\n### 2，一切“字符”都必定用数字+编码表表示。\n   这时候，有一个问题：为什么一定要用0x33来代表“3”呢？而不用0x43来代表呢？或者是直接用0x03来代替？其实用什么来代表都可以，只不过大家都习惯了用ASCII编码表（是美国国家信息交换表）来确定各字符应该是用什么数字代表的。同样，为了表示中国字，我国也指定了中文的编码表，其中最广泛使用的是GB2312。比如中文的“当”字，就是用0xB5, 0xB1这两个八位的数字来表示的。所以 **如果显示字符的程序不知道一列数字到底是按什么编码表编码的，他也无法去判断到底这些是什么文字**。如果随便用一个不对的编码表来处理这些数字，处理出来的字符很可能完全是错的。比如在英文系统上，没有GB2312编码表，送给他一个0xB5,0xB1，他就傻傻的当作ASCII来处理（操作系统通常都有自己默认的编码表），结果显示出来就是两个奇怪的符号，因为这两个字在ASCII表里就是那两个符号。同样在繁体中文系统里，他的编码表是BIG5，显示出来也是一个奇怪的中文，不是“当”字。\n\n### 3，UNICODE让全世界都说一种语言\n   看完上面的文字，是否觉得，世界有那么多语言，每个都有自己的一套编码表，很麻烦呢？就算是中文，也有两套流行的编码表，一个是GB2312，一个是BIG5。要使用不同中文的编码的字符时，还要转来转去，的确很麻烦。不光这个，如果想要写一篇包含很多过国文字的文章，就麻烦了，必须要让处理这个文章的程序知道，哪个字是什么编码标准的。如果你想要在文章里找一个字，也必须指定你要找的是哪种编码的哪个字。否则，你要找一个0xB5,0xB1的中文“当”字，很可能把同样数字表示的日文、波兰文这些不相干的字一起给你找出来，够麻烦的吧！\n   所以人们想，不如大家都用同一个编码标准吧，各种文字都在编码表里有一席之地，处理文字的程序只需要都按这个编码表来处理就可以了。不过要一个编码表里包含所有的文字，这张表就大了，本来英文字+数字一共只有128个以内。但加上中文后，忽然就多了数万个，所以存放一个字符需要的大小也大了很多。现在 **UNICODE规定了一个字符必须由2个8位数字来表示**，想想，8x8x8x8x = 65536，是多大的一个数字啊！所以全世界的文字才能都包含进去。当然拉，也有人说中国字可能都不止6万个拉，还要包括别的文字，但人家外国人觉得你们中国人常用的也没那么多，所以就这么定了，我们也没办法。需要注意的是GB2312和UNICODE虽然都是用两个8位数来代表一个中文字，但具体的规格可不一样，比如0xB5,0xB1在UNICODE里面可不是“当”字，而是另外一国的文字来的。\n\n### 4，C是如何简洁的处理字符的\n   我们来谈谈C的字符串。C语言诞生在JAVA之前，**C语言的基本数据类型是没有字符串这个类型的，它只有char[]**。也就是C把字符顺序放入一个字节数组就完了。而且C也不管放在数组里的是什么文字，也不管那些字是按什么编码标准的。而且他的char的大小也不一定是8位数字，有时候是16位也可能，**这要看具体的机器和操作系统**。所以写程序的人必须要知道正在处理的char[]的内容到底是按什么编码表表示的字符串，要知道如果比较两国文字是否相同，可是没任何意义的哦！\n\n### 5，JAVA是是如何处理字符的。\n   世界总会进步的，JAVA就是一个例子。JAVA终于有了String类了，它是解决字符问题的最好工具。在JAVA里，一个基本的要点是：**String类对象是不需要指定编码表的！** 为什么它会自己知道一堆数字各代表什么字符呢？就是因为 **String里的字符信息是用UNICODE编码存放的**。而JAVA为了表示字符（注意是单个字符），也有char这个数据类型，而且他的大小是固定2个8位16进制数字长度，也就是0~65535罗。为的就是对应UNICODE里面的一个字符。大家如果想取一个String里的按UNICODE数字，可以用getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 方法取得一个char[]，这个char[]里就是表示String字符的，按UNICODE编码表编码的数字。\n\n   可惜现在绝大多数的系统和程序都不是按UNICODE来处理字符，而JAVA程序总是要和别的程序和系统交换数据的，所以在接收一个字符，或者是发送一个字符的时候，就必须要留意当前系统和UNICODE的关系了。比如你从网络或者文件接受到一数字：0xB5,0xB1，JAVA程序并不知道这两个字到底是中文呢？还是日文，或者英文。你如果不指明这个两个数字的编码表，JAVA就会按当前系统默认的编码表来处理。如果这两个数字是从中文WIN98发出去的，JAVA程序又是在英文LINUX上运行的，那就出现了所谓的乱码问题了。也就是JAVA按英文的编码表ASCII来处理这两个数字，当通过new String({0xB5,0xB1})得到的String的时候，这个String代表的已经不是中文的“当”字，而是两个英文的奇怪字符了。不过如果你知道这两个数字一定是中文的话，就可以指定用new String({0xB5,0xB1},\"GB2312\")来处理，这时候新建立的String才真的是一个“当”字。当然拉，如果你要把一个“当”字的JAVA的String显示在中文WIN98上，必须把这个字输出成两个8位数字：0xB5,0xB1，不管是写成文件还是输出到浏览器上，都必须是0xB5,0xB1。如何把“当”字用GB2312输出？**String.getBytes(\"GB2312\")** 就可以拉！所以有一点要记住：**和外界交换任何信息都是以byte[]来进行的！**。你可以留意一下JAVA大多数的I/O类，都有以byte[]作为参数和返回值的方法。不过，也有很多写的比较糊涂的程序，没有提供byte[]交换信息的方法，害的不同文字平台的程序员很头疼。Servlet的HttpRequest.getParameter()就是这样。好在有的JSP/SERVLET容易还提供先指定编码表的方法，才能比较简单的解决这个问题。\n\n### 6，网上关于JAVA中文问题的一些错误处理方法。\n\n   一个是最常见的，不管什么内容，都用new String(...,\"ISO-8859-1\")来建立字符串，然后使用的时候按默认的编码格式（通常在服务器上都是英文系统）输出字符串。这样其实你使用的String并不是按UNICODE来代表真正的字符，而是强行把BYTE数组复制到String的char[]里，一旦你的运行环境改变，你就被迫要修改一大堆的代码。而且也无法在同一个字符串里处理几种不同编码的文字。\n\n   另一个是把一种编码格式的字符串，比如是GB2312，转换成另一种格式的字符串，比如UTF-8，然后不指明是UTF-8编码，而直接用new String(...)来建立String，这样放在String里面的字符也是无法确定的，它在不同的系统上代表不同的字符。如果要求别人用“UTF-8格式”的String来交换信息的时候，其实已经破坏了JAVA为了兼容各种语言所做的规定。这种错误的本质思想是还按写C语言的方式，把字符串纯粹当作可以自己自由编码的存储器使用，而忽略了JAVA字符串只有一种编码格式。如果真的想自由编码，用byte[]或者char[]就完全了解决问题的了。\n\n\n### 7，其他资料\n[字符，字节和编码](http://www.regexlab.com/zh/encoding.htm)\n","slug":"javaString-and-bytes","published":1,"date":"2016-05-17T16:00:00.000Z","updated":"2017-11-23T07:04:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebwo000md6ykzt5r5bpr","content":"<p>   做JAVA经常会碰到中文乱码问题，还有各种编码的问题，特别是String类的内容需要重新编码的问题。要解决这些问题，必须了解清楚JAVA对于字符串是怎么处理的。</p>\n<h3 id=\"1，“字符”是由数字来表示的\"><a href=\"#1，“字符”是由数字来表示的\" class=\"headerlink\" title=\"1，“字符”是由数字来表示的\"></a>1，“字符”是由数字来表示的</h3><p>   先来重新了解一下计算机是如何处理“字符”的，这个原理是大家必须记住的，特别是在用JAVA写程序的时候，万万不可模糊。我们知道，<strong>计算机把任何东西都用数字来表示，“字符”也不例外</strong>。比如我们要显示一个阿拉伯数字“3”，在我们的PC里，其实并不是仅仅用一个数字3来代表我们要写的“3”，而是以十六进制的0x33来代表，包括放在内存或者是写到文件里，其实都是写着0x33的，不信你可以编辑一个文本文件，写一个“3”，然后用ultraEdit看他的原始码。</p>\n   <a id=\"more\"></a>\n<h3 id=\"2，一切“字符”都必定用数字-编码表表示。\"><a href=\"#2，一切“字符”都必定用数字-编码表表示。\" class=\"headerlink\" title=\"2，一切“字符”都必定用数字+编码表表示。\"></a>2，一切“字符”都必定用数字+编码表表示。</h3><p>   这时候，有一个问题：为什么一定要用0x33来代表“3”呢？而不用0x43来代表呢？或者是直接用0x03来代替？其实用什么来代表都可以，只不过大家都习惯了用ASCII编码表（是美国国家信息交换表）来确定各字符应该是用什么数字代表的。同样，为了表示中国字，我国也指定了中文的编码表，其中最广泛使用的是GB2312。比如中文的“当”字，就是用0xB5, 0xB1这两个八位的数字来表示的。所以 <strong>如果显示字符的程序不知道一列数字到底是按什么编码表编码的，他也无法去判断到底这些是什么文字</strong>。如果随便用一个不对的编码表来处理这些数字，处理出来的字符很可能完全是错的。比如在英文系统上，没有GB2312编码表，送给他一个0xB5,0xB1，他就傻傻的当作ASCII来处理（操作系统通常都有自己默认的编码表），结果显示出来就是两个奇怪的符号，因为这两个字在ASCII表里就是那两个符号。同样在繁体中文系统里，他的编码表是BIG5，显示出来也是一个奇怪的中文，不是“当”字。</p>\n<h3 id=\"3，UNICODE让全世界都说一种语言\"><a href=\"#3，UNICODE让全世界都说一种语言\" class=\"headerlink\" title=\"3，UNICODE让全世界都说一种语言\"></a>3，UNICODE让全世界都说一种语言</h3><p>   看完上面的文字，是否觉得，世界有那么多语言，每个都有自己的一套编码表，很麻烦呢？就算是中文，也有两套流行的编码表，一个是GB2312，一个是BIG5。要使用不同中文的编码的字符时，还要转来转去，的确很麻烦。不光这个，如果想要写一篇包含很多过国文字的文章，就麻烦了，必须要让处理这个文章的程序知道，哪个字是什么编码标准的。如果你想要在文章里找一个字，也必须指定你要找的是哪种编码的哪个字。否则，你要找一个0xB5,0xB1的中文“当”字，很可能把同样数字表示的日文、波兰文这些不相干的字一起给你找出来，够麻烦的吧！<br>   所以人们想，不如大家都用同一个编码标准吧，各种文字都在编码表里有一席之地，处理文字的程序只需要都按这个编码表来处理就可以了。不过要一个编码表里包含所有的文字，这张表就大了，本来英文字+数字一共只有128个以内。但加上中文后，忽然就多了数万个，所以存放一个字符需要的大小也大了很多。现在 <strong>UNICODE规定了一个字符必须由2个8位数字来表示</strong>，想想，8x8x8x8x = 65536，是多大的一个数字啊！所以全世界的文字才能都包含进去。当然拉，也有人说中国字可能都不止6万个拉，还要包括别的文字，但人家外国人觉得你们中国人常用的也没那么多，所以就这么定了，我们也没办法。需要注意的是GB2312和UNICODE虽然都是用两个8位数来代表一个中文字，但具体的规格可不一样，比如0xB5,0xB1在UNICODE里面可不是“当”字，而是另外一国的文字来的。</p>\n<h3 id=\"4，C是如何简洁的处理字符的\"><a href=\"#4，C是如何简洁的处理字符的\" class=\"headerlink\" title=\"4，C是如何简洁的处理字符的\"></a>4，C是如何简洁的处理字符的</h3><p>   我们来谈谈C的字符串。C语言诞生在JAVA之前，<strong>C语言的基本数据类型是没有字符串这个类型的，它只有char[]</strong>。也就是C把字符顺序放入一个字节数组就完了。而且C也不管放在数组里的是什么文字，也不管那些字是按什么编码标准的。而且他的char的大小也不一定是8位数字，有时候是16位也可能，<strong>这要看具体的机器和操作系统</strong>。所以写程序的人必须要知道正在处理的char[]的内容到底是按什么编码表表示的字符串，要知道如果比较两国文字是否相同，可是没任何意义的哦！</p>\n<h3 id=\"5，JAVA是是如何处理字符的。\"><a href=\"#5，JAVA是是如何处理字符的。\" class=\"headerlink\" title=\"5，JAVA是是如何处理字符的。\"></a>5，JAVA是是如何处理字符的。</h3><p>   世界总会进步的，JAVA就是一个例子。JAVA终于有了String类了，它是解决字符问题的最好工具。在JAVA里，一个基本的要点是：<strong>String类对象是不需要指定编码表的！</strong> 为什么它会自己知道一堆数字各代表什么字符呢？就是因为 <strong>String里的字符信息是用UNICODE编码存放的</strong>。而JAVA为了表示字符（注意是单个字符），也有char这个数据类型，而且他的大小是固定2个8位16进制数字长度，也就是0~65535罗。为的就是对应UNICODE里面的一个字符。大家如果想取一个String里的按UNICODE数字，可以用getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 方法取得一个char[]，这个char[]里就是表示String字符的，按UNICODE编码表编码的数字。</p>\n<p>   可惜现在绝大多数的系统和程序都不是按UNICODE来处理字符，而JAVA程序总是要和别的程序和系统交换数据的，所以在接收一个字符，或者是发送一个字符的时候，就必须要留意当前系统和UNICODE的关系了。比如你从网络或者文件接受到一数字：0xB5,0xB1，JAVA程序并不知道这两个字到底是中文呢？还是日文，或者英文。你如果不指明这个两个数字的编码表，JAVA就会按当前系统默认的编码表来处理。如果这两个数字是从中文WIN98发出去的，JAVA程序又是在英文LINUX上运行的，那就出现了所谓的乱码问题了。也就是JAVA按英文的编码表ASCII来处理这两个数字，当通过new String({0xB5,0xB1})得到的String的时候，这个String代表的已经不是中文的“当”字，而是两个英文的奇怪字符了。不过如果你知道这两个数字一定是中文的话，就可以指定用new String({0xB5,0xB1},”GB2312”)来处理，这时候新建立的String才真的是一个“当”字。当然拉，如果你要把一个“当”字的JAVA的String显示在中文WIN98上，必须把这个字输出成两个8位数字：0xB5,0xB1，不管是写成文件还是输出到浏览器上，都必须是0xB5,0xB1。如何把“当”字用GB2312输出？<strong>String.getBytes(“GB2312”)</strong> 就可以拉！所以有一点要记住：<strong>和外界交换任何信息都是以byte[]来进行的！</strong>。你可以留意一下JAVA大多数的I/O类，都有以byte[]作为参数和返回值的方法。不过，也有很多写的比较糊涂的程序，没有提供byte[]交换信息的方法，害的不同文字平台的程序员很头疼。Servlet的HttpRequest.getParameter()就是这样。好在有的JSP/SERVLET容易还提供先指定编码表的方法，才能比较简单的解决这个问题。</p>\n<h3 id=\"6，网上关于JAVA中文问题的一些错误处理方法。\"><a href=\"#6，网上关于JAVA中文问题的一些错误处理方法。\" class=\"headerlink\" title=\"6，网上关于JAVA中文问题的一些错误处理方法。\"></a>6，网上关于JAVA中文问题的一些错误处理方法。</h3><p>   一个是最常见的，不管什么内容，都用new String(…,”ISO-8859-1”)来建立字符串，然后使用的时候按默认的编码格式（通常在服务器上都是英文系统）输出字符串。这样其实你使用的String并不是按UNICODE来代表真正的字符，而是强行把BYTE数组复制到String的char[]里，一旦你的运行环境改变，你就被迫要修改一大堆的代码。而且也无法在同一个字符串里处理几种不同编码的文字。</p>\n<p>   另一个是把一种编码格式的字符串，比如是GB2312，转换成另一种格式的字符串，比如UTF-8，然后不指明是UTF-8编码，而直接用new String(…)来建立String，这样放在String里面的字符也是无法确定的，它在不同的系统上代表不同的字符。如果要求别人用“UTF-8格式”的String来交换信息的时候，其实已经破坏了JAVA为了兼容各种语言所做的规定。这种错误的本质思想是还按写C语言的方式，把字符串纯粹当作可以自己自由编码的存储器使用，而忽略了JAVA字符串只有一种编码格式。如果真的想自由编码，用byte[]或者char[]就完全了解决问题的了。</p>\n<h3 id=\"7，其他资料\"><a href=\"#7，其他资料\" class=\"headerlink\" title=\"7，其他资料\"></a>7，其他资料</h3><p><a href=\"http://www.regexlab.com/zh/encoding.htm\" target=\"_blank\" rel=\"external\">字符，字节和编码</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/18/javaString-and-bytes/\">http://agehua.github.io/2016/05/18/javaString-and-bytes/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.315,"time":18900,"words":63},"excerpt":"<p>   做JAVA经常会碰到中文乱码问题，还有各种编码的问题，特别是String类的内容需要重新编码的问题。要解决这些问题，必须了解清楚JAVA对于字符串是怎么处理的。</p>\n<h3 id=\"1，“字符”是由数字来表示的\"><a href=\"#1，“字符”是由数字来表示的\" class=\"headerlink\" title=\"1，“字符”是由数字来表示的\"></a>1，“字符”是由数字来表示的</h3><p>   先来重新了解一下计算机是如何处理“字符”的，这个原理是大家必须记住的，特别是在用JAVA写程序的时候，万万不可模糊。我们知道，<strong>计算机把任何东西都用数字来表示，“字符”也不例外</strong>。比如我们要显示一个阿拉伯数字“3”，在我们的PC里，其实并不是仅仅用一个数字3来代表我们要写的“3”，而是以十六进制的0x33来代表，包括放在内存或者是写到文件里，其实都是写着0x33的，不信你可以编辑一个文本文件，写一个“3”，然后用ultraEdit看他的原始码。</p>","more":"<h3 id=\"2，一切“字符”都必定用数字-编码表表示。\"><a href=\"#2，一切“字符”都必定用数字-编码表表示。\" class=\"headerlink\" title=\"2，一切“字符”都必定用数字+编码表表示。\"></a>2，一切“字符”都必定用数字+编码表表示。</h3><p>   这时候，有一个问题：为什么一定要用0x33来代表“3”呢？而不用0x43来代表呢？或者是直接用0x03来代替？其实用什么来代表都可以，只不过大家都习惯了用ASCII编码表（是美国国家信息交换表）来确定各字符应该是用什么数字代表的。同样，为了表示中国字，我国也指定了中文的编码表，其中最广泛使用的是GB2312。比如中文的“当”字，就是用0xB5, 0xB1这两个八位的数字来表示的。所以 <strong>如果显示字符的程序不知道一列数字到底是按什么编码表编码的，他也无法去判断到底这些是什么文字</strong>。如果随便用一个不对的编码表来处理这些数字，处理出来的字符很可能完全是错的。比如在英文系统上，没有GB2312编码表，送给他一个0xB5,0xB1，他就傻傻的当作ASCII来处理（操作系统通常都有自己默认的编码表），结果显示出来就是两个奇怪的符号，因为这两个字在ASCII表里就是那两个符号。同样在繁体中文系统里，他的编码表是BIG5，显示出来也是一个奇怪的中文，不是“当”字。</p>\n<h3 id=\"3，UNICODE让全世界都说一种语言\"><a href=\"#3，UNICODE让全世界都说一种语言\" class=\"headerlink\" title=\"3，UNICODE让全世界都说一种语言\"></a>3，UNICODE让全世界都说一种语言</h3><p>   看完上面的文字，是否觉得，世界有那么多语言，每个都有自己的一套编码表，很麻烦呢？就算是中文，也有两套流行的编码表，一个是GB2312，一个是BIG5。要使用不同中文的编码的字符时，还要转来转去，的确很麻烦。不光这个，如果想要写一篇包含很多过国文字的文章，就麻烦了，必须要让处理这个文章的程序知道，哪个字是什么编码标准的。如果你想要在文章里找一个字，也必须指定你要找的是哪种编码的哪个字。否则，你要找一个0xB5,0xB1的中文“当”字，很可能把同样数字表示的日文、波兰文这些不相干的字一起给你找出来，够麻烦的吧！<br>   所以人们想，不如大家都用同一个编码标准吧，各种文字都在编码表里有一席之地，处理文字的程序只需要都按这个编码表来处理就可以了。不过要一个编码表里包含所有的文字，这张表就大了，本来英文字+数字一共只有128个以内。但加上中文后，忽然就多了数万个，所以存放一个字符需要的大小也大了很多。现在 <strong>UNICODE规定了一个字符必须由2个8位数字来表示</strong>，想想，8x8x8x8x = 65536，是多大的一个数字啊！所以全世界的文字才能都包含进去。当然拉，也有人说中国字可能都不止6万个拉，还要包括别的文字，但人家外国人觉得你们中国人常用的也没那么多，所以就这么定了，我们也没办法。需要注意的是GB2312和UNICODE虽然都是用两个8位数来代表一个中文字，但具体的规格可不一样，比如0xB5,0xB1在UNICODE里面可不是“当”字，而是另外一国的文字来的。</p>\n<h3 id=\"4，C是如何简洁的处理字符的\"><a href=\"#4，C是如何简洁的处理字符的\" class=\"headerlink\" title=\"4，C是如何简洁的处理字符的\"></a>4，C是如何简洁的处理字符的</h3><p>   我们来谈谈C的字符串。C语言诞生在JAVA之前，<strong>C语言的基本数据类型是没有字符串这个类型的，它只有char[]</strong>。也就是C把字符顺序放入一个字节数组就完了。而且C也不管放在数组里的是什么文字，也不管那些字是按什么编码标准的。而且他的char的大小也不一定是8位数字，有时候是16位也可能，<strong>这要看具体的机器和操作系统</strong>。所以写程序的人必须要知道正在处理的char[]的内容到底是按什么编码表表示的字符串，要知道如果比较两国文字是否相同，可是没任何意义的哦！</p>\n<h3 id=\"5，JAVA是是如何处理字符的。\"><a href=\"#5，JAVA是是如何处理字符的。\" class=\"headerlink\" title=\"5，JAVA是是如何处理字符的。\"></a>5，JAVA是是如何处理字符的。</h3><p>   世界总会进步的，JAVA就是一个例子。JAVA终于有了String类了，它是解决字符问题的最好工具。在JAVA里，一个基本的要点是：<strong>String类对象是不需要指定编码表的！</strong> 为什么它会自己知道一堆数字各代表什么字符呢？就是因为 <strong>String里的字符信息是用UNICODE编码存放的</strong>。而JAVA为了表示字符（注意是单个字符），也有char这个数据类型，而且他的大小是固定2个8位16进制数字长度，也就是0~65535罗。为的就是对应UNICODE里面的一个字符。大家如果想取一个String里的按UNICODE数字，可以用getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 方法取得一个char[]，这个char[]里就是表示String字符的，按UNICODE编码表编码的数字。</p>\n<p>   可惜现在绝大多数的系统和程序都不是按UNICODE来处理字符，而JAVA程序总是要和别的程序和系统交换数据的，所以在接收一个字符，或者是发送一个字符的时候，就必须要留意当前系统和UNICODE的关系了。比如你从网络或者文件接受到一数字：0xB5,0xB1，JAVA程序并不知道这两个字到底是中文呢？还是日文，或者英文。你如果不指明这个两个数字的编码表，JAVA就会按当前系统默认的编码表来处理。如果这两个数字是从中文WIN98发出去的，JAVA程序又是在英文LINUX上运行的，那就出现了所谓的乱码问题了。也就是JAVA按英文的编码表ASCII来处理这两个数字，当通过new String({0xB5,0xB1})得到的String的时候，这个String代表的已经不是中文的“当”字，而是两个英文的奇怪字符了。不过如果你知道这两个数字一定是中文的话，就可以指定用new String({0xB5,0xB1},”GB2312”)来处理，这时候新建立的String才真的是一个“当”字。当然拉，如果你要把一个“当”字的JAVA的String显示在中文WIN98上，必须把这个字输出成两个8位数字：0xB5,0xB1，不管是写成文件还是输出到浏览器上，都必须是0xB5,0xB1。如何把“当”字用GB2312输出？<strong>String.getBytes(“GB2312”)</strong> 就可以拉！所以有一点要记住：<strong>和外界交换任何信息都是以byte[]来进行的！</strong>。你可以留意一下JAVA大多数的I/O类，都有以byte[]作为参数和返回值的方法。不过，也有很多写的比较糊涂的程序，没有提供byte[]交换信息的方法，害的不同文字平台的程序员很头疼。Servlet的HttpRequest.getParameter()就是这样。好在有的JSP/SERVLET容易还提供先指定编码表的方法，才能比较简单的解决这个问题。</p>\n<h3 id=\"6，网上关于JAVA中文问题的一些错误处理方法。\"><a href=\"#6，网上关于JAVA中文问题的一些错误处理方法。\" class=\"headerlink\" title=\"6，网上关于JAVA中文问题的一些错误处理方法。\"></a>6，网上关于JAVA中文问题的一些错误处理方法。</h3><p>   一个是最常见的，不管什么内容，都用new String(…,”ISO-8859-1”)来建立字符串，然后使用的时候按默认的编码格式（通常在服务器上都是英文系统）输出字符串。这样其实你使用的String并不是按UNICODE来代表真正的字符，而是强行把BYTE数组复制到String的char[]里，一旦你的运行环境改变，你就被迫要修改一大堆的代码。而且也无法在同一个字符串里处理几种不同编码的文字。</p>\n<p>   另一个是把一种编码格式的字符串，比如是GB2312，转换成另一种格式的字符串，比如UTF-8，然后不指明是UTF-8编码，而直接用new String(…)来建立String，这样放在String里面的字符也是无法确定的，它在不同的系统上代表不同的字符。如果要求别人用“UTF-8格式”的String来交换信息的时候，其实已经破坏了JAVA为了兼容各种语言所做的规定。这种错误的本质思想是还按写C语言的方式，把字符串纯粹当作可以自己自由编码的存储器使用，而忽略了JAVA字符串只有一种编码格式。如果真的想自由编码，用byte[]或者char[]就完全了解决问题的了。</p>\n<h3 id=\"7，其他资料\"><a href=\"#7，其他资料\" class=\"headerlink\" title=\"7，其他资料\"></a>7，其他资料</h3><p><a href=\"http://www.regexlab.com/zh/encoding.htm\">字符，字节和编码</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/18/javaString-and-bytes/\">http://agehua.github.io/2016/05/18/javaString-and-bytes/</a></p>"},{"layout":"post","title":"android JNI学习① 基础知识","keywords":"jni, aes 加密","description":"android JNI学习，实现aes加密","banner":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","_content":"\n\n\n本文只是用来记录，写的不好还请见谅。\n\n### 1.JNI介绍\nJNI概念 : Java本地接口,Java Native Interface, 它是一个协议, 该协议用来沟通Java代码和外部的本地C/C++代码, 通过该协议 Java代码可以调用外部的本地代码, 外部的C/C++ 代码可以调用Java代码;\n\nC和Java的侧重 :\n\n- C语言 : C语言中最重要的是 函数 function;\n- Java语言 : Java中最重要的是 JVM, class类, 以及class中的方法;\n\nC与Java如何交流 :\n\n- JNI规范 : C语言与Java语言交流需要一个适配器, 中间件, 即 JNI, JNI提供了一种规范;\n- C语言中调用Java方法 : 可以让我们在C代码中找到Java代码class中的方法, 并且调用该方法;\n- Java语言中调用C语言方法 : 同时也可以在Java代码中, 将一个C语言的方法映射到Java的某个方法上;\n- JNI桥梁作用 : JNI提供了一个桥梁, 打通了C语言和Java语言之间的障碍;\n\n<!--more-->\n\nJNI中的一些概念 :\n\n- native : Java语言中修饰本地方法的修饰符, 被该修饰符修饰的方法没有方法体;\n- Native方法 : 在Java语言中被native关键字修饰的方法是Native方法;\n- JNI层 : Java声明Native方法的部分;\n- JNI函数 : JNIEnv提供的函数, 这些函数在jni.h中进行定义;\n- JNI方法 : Native方法对应的JNI层实现的 C/C++方法, 即在jni目录中实现的那些C语言代码;\n\n### 2.NDK简单介绍\nC代码执行 : C代码被编译成库文件之后, 才能执行, 库文件分为动态库 和静态库 两种;\n\n- 动态库 : unix环境下.so后缀的是动态库, windows环境下.dll 后缀的是动态库; 动态库可以依赖静态库加载一些可执行的C代码;\n- 静态库 :.a后缀是静态库的扩展名;\n\n库文件来源 : C代码 进行 编译 链接操作之后, 才会生成库文件, 不同类型的CPU 操作系统 生成的库文件是不一样;\n\n- CPU分类 : arm结构, 嵌入式设备处理器; x86结构, pc服务器处理器; 不同的CPU指令集不同;\n- 交叉编译 :windows x86编译出来的库文件可以在arm平台运行的代码;\n- 交叉编译工具链 : Google提供的 NDK 就是交叉编译工具链, 可以在linux环境下编译出在arn平台下执行的二进制库文件;\n\nNDK作用 : 是Google提供了交叉编译工具链, 能够在linux平台编译出在arm平台下执行的二进制库文件;\n\nNDK版本介绍 : android-ndk-windows 是在windows系统中的cygwin使用的, android-ndk-linux 是在linux下使用的;\n\n想深入了解NDK开发的同学，可以去安装一下cygwin，本文只涉及简单的C语言代码，不需要使用cygwin。\n\n### 3.环境准备，使用android studio还是Eclipse\n推荐使用Eclipse，这篇文章讲了使用Eclipse生成.h文件和生成so文件的配置过程。配置成功后可以远离命令行[Eclipse ADT插件生成.h/.so文件](http://blog.csdn.net/jspping/article/details/47780307)\n\n#### 3.1 Java调用C流程\n\n- a. 定义 Native 方法 : 比如在com.packagename.jni.JNITest.java 类中定义 Native 方法 public native int add(int x, int y);\n- b. 生成方法签名 : 进入 AndroidProject/bin/classes 目录, 使用 javah com.packagename.jni.JNITest 命令, 便生成了头文件, 该头文件引用了 jni.h, 以及定义好了对应的 Native 方法, 生成 JNIEXPORT jint JNICALL Java_com_packagename_jni_JNITest_add (JNIEnv \\*, jobject, jint, jint);  \n\nJava中定义的方法 :\n\n~~~ Java\n//将Java中的两个int值 传给C语言, 进行相加后, 返回java语言 shuliang.han.ndkparameterpassing.DataProvider  \npublic native int add(int x, int y);  \n~~~\n对应C语言中定义的方法 :\n\n~~~ C++\n#include <jni.h>  \n\n//方法签名, Java环境和调用native方法的类必不可少, 后面的参数就是native方法的参数  \njint Java_com_packagename_jni_JNITest_add(JNIEnv * env, jobject obj, jint x, jint y)  \n{  \n    return x + y;  \n}  \n~~~\n\n#### 3.2 生成.so文件\n\nAndroid.mk 文件：\n\n~~~ C++\nLOCAL_PATH := $(call my-dir)    \n\ninclude $(CLEAR_VARS)    \n\nLOCAL_MODULE    := hello-jni    \nLOCAL_SRC_FILES := hello-jni.c    \n\ninclude $(BUILD_SHARED_LIBRARY)  \n~~~\n\n- 文件内容解释：\n\n  **获取当前文件内容** : $(call my-dir) 是编译器中的宏方法, 调用该宏方法, 就会返回前的目录路径;\n\n  **赋值符号** : \" := \" 是赋值符号, 第一句话 是 返回当前文件所在的当前目录, 并将这个目录路径赋值给 LOCAL_PATH;\n\n  **初始化编译模块参数** : $(CLEAR_VARS) 作用是将编译模块的参数初始化, LOCAL_MODULE LOCAL_SRC_FILES 也是这样的参数;\n\n  **指定编译模块** : LOCAL_MODULE    := hello-jni , 指定编译后的 so 文件名称, 编译好之后系统会在该名称前面加上 \"lib\", 后缀加上 \".so\";\n\n  **指定编译源文件** : LOCAL_SRC_FILES := hello-jni.c 告诉编译系统源文件, 如果有多个文件那么就依次写在后面即可;\n\n  **编译成静态库** : include $(BUILD_SHARED_LIBRARY), 作用是告诉系统, 将编译的结果编译成.so后缀的静态库;\n\n  **静态库引入** : NDK的platform中有很多 \".a\" 结尾的动态库, 我们编译动态库的时候, 可以将一些静态库引入进来;\n\n- 生成 动态库 so 文件 : 进入 Android.mk 所在目录, 在该目录执行ndk下的ndk-build命令;\n- Java代码加载动态库 : 在 Java 代码中调用该类的类前面, 在类的一开始, 不在方法中, 加入\n\n~~~ C++\nstatic{ System.loadLibrary(\"hello\"); } ;\n~~~\n\n- Application.mk 文件内容为（不写这个文件也可以）:\n\n~~~ Java\nAPP_STL := stlport_static\nAPP_ABI := all\n~~~\n\n<!-- ![]({{ site.url }}/assets/img/jni_structure.png  =338x461) -->\n<!-- 指定图片大小有问题 -->\n\n<!-- [![Pure CSS Happy Hacking Keyboard](/assets/img/jni_structure.png)](http://codepen.io/P233/pen/qEagi) -->\n![Eclipse JNI目录结构](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/jni_structure.png)\n\n[这篇文章](http://blog.csdn.net/hejinjing_tom_com/article/details/8125648)是使用javah导出头文件过程中，常见错误和解决办法，这里做一个记录。\n\n\n### 4.字符串的处理\n\n- Java中的String转为C语言中的char字符串\n下面的工具方法可以在C程序中解决这个问题：\n\n~~~ Javascript\n// java中的jstring, 转化为c的一个字符数组  \nchar* Jstring2CStr(JNIEnv* env, jstring jstr) {  \n//声明了一个字符串变量 rtn  \nchar* rtn = NULL;  \n//找到Java中的String的Class对象  \njclass clsstring = (*env)->FindClass(env, \"java/lang/String\");  \n//创建一个Java中的字符串 \"GB2312\"  \njstring strencode = (*env)->NewStringUTF(env, \"GB2312\");  \n/*\n * 获取String中定义的方法 getBytes(), 该方法的参数是 String类型的, 返回值是 byte[]数组\n * \"(Ljava/lang/String;)[B\" 方法前面解析 :\n * -- Ljava/lang/String; 表示参数是String字符串\n * -- [B : 中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组\n */  \njmethodID mid = (*env)->GetMethodID(env, clsstring, \"getBytes\",  \n\t\t\"(Ljava/lang/String;)[B\");  \n//调用Java中的getBytes方法, 传入参数介绍 参数②表示调用该方法的对象, 参数③表示方法id , 参数④表示方法参数  \njbyteArray barr = (jbyteArray)(*env)->CallObjectMethod(env, jstr, mid,  \n\t\tstrencode); // String .getByte(\"GB2312\");  \n//获取数组的长度  \njsize alen = (*env)->GetArrayLength(env, barr);  \n//获取数组中的所有的元素 , 存放在 jbyte*数组中  \njbyte* ba = (*env)->GetByteArrayElements(env, barr, JNI_FALSE);  \n//将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0'  \nif (alen > 0) {  \n\trtn = (char*) malloc(alen + 1); //new   char[alen+1]; \"\\0\"  \n\tmemcpy(rtn, ba, alen);  \n\trtn[alen] = 0;  \n}  \n(*env)->ReleaseByteArrayElements(env, barr, ba, 0); //释放内存  \n\treturn rtn;  \n}  \n~~~\n\n- Jstring2CStr方法讲解 :\n   - a. 获取Java中String类型的class对象 : 参数 : 上下文环境 env, String类完整路径 ;\n~~~ Javascript\njclass clsstring = (*env)->FindClass(env, \"java/lang/String\");  \n~~~\n   - b.创建Java字符串 : 使用 NewStringUTF 方法;\n~~~ Javascript\njstring strencode = (*env)->NewStringUTF(env, \"GB2312\");  \n~~~   \n   - c.获取String中的getBytes()方法 : 参数介绍 ① env 上下文环境 ② 完整的类路径 ③ 方法名 ④ 方法签名, 方法签名 Ljava/lang/String; 代表参数是String字符串, [B  中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组;\n~~~ Javascript\njmethodID mid = (*env)->GetMethodID(env, clsstring, \"getBytes\",  \n    \"(Ljava/lang/String;)[B\");  \n~~~       \n   - d. 获取数组的长度 :\n~~~ Javascript\njsize alen = (*env)->GetArrayLength(env, barr);  \n~~~\n   - e. 获取数组元素 : 获取数组中的所有的元素 , 存放在 jbyte*数组中;\n~~~ Javascript\njbyte* ba = (*env)->GetByteArrayElements(env, barr, JNI_FALSE);  \n~~~\n   - f.数组拷贝: 将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0';\n~~~ Javascript\nif (alen > 0) {  \n    rtn = (char*) malloc(alen + 1); //new   char[alen+1]; \"\\0\"  \n    memcpy(rtn, ba, alen);  \n    rtn[alen] = 0;  \n}  \n~~~\n   - g.释放内存 :\n~~~ Javascript\n(*env)->ReleaseByteArrayElements(env, barr, ba, 0); //释放内存\n~~~\n\n### 5.JNI方法命名规则(标准JNI规范)\n\n- **JNI实现的方法与Java中Native方法的映射关系 :**\n\n  使用方法名进行映射, 可以使用javah工具进入bin/classes目录下执行命令, 即可生成头文件;\n\n- **JNI方法参数介绍:**\n\n  参数① : 第一个参数是JNI接口指针JNIEnv;\n\n  参数② : 如果Native方法是非静态的, 那么第二个参数就是对Java对象的引用, 如果Native方法是静态的, 那么第二个参数就是对Java类的Class对象的引用;\n\n- **JNI方法名规范:**  \n\n  返回值+Java前缀+全路径类名+方法名+参数① JNIEnv+参数② jobject+其它参数;\n\n  注意分隔符 : Java前缀 与 类名 以及类名之间的包名 和 方法名之间 使用 \"\\_\" 进行分割;\n\n- **声明 非静态 方法:**\n\n  Native方法 : public int hello (String str, int i);\n\n  JNI方法: jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject obj, jstring str, jint i);\n\n- **声明 静态 方法 :**\n\n  Native方法 : public static int hello (String str, int i);\n\n  JNI方法 : jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject clazz, jstring str, jint i);\n\n- **两种规范 :**\n\n  以上是Java的标准JNI规范, 在Android中还有一套自定义的规范, 该规范是Android应用框架层 和 框架层交互使用的JNI规范, 依靠方法注册 映射 Native方法 和 JNI方法;\n\n- **JNIEnv作用 :**\n\n  JNIEnv 是一个指针,指向了一组JNI函数, 这些函数可以在jni.h中查询到,通过这些函数可以实现 Java层 与 JNI层的交互 , 通过JNIEnv 调用JNI函数 可以访问java虚拟机, 操作java对象;\n\n- **JNI线程相关性 :**\n\n  JNIEnv只在当前的线程有效,JNIEnv不能跨线程传递, 相同的Java线程调用本地方法, 所使用的JNIEnv是相同的, 一个Native方法不能被不同的Java线程调用;\n\n- **JNIEnv结构体系 :**\n\n  JNIEnv指针指向一个线程相关的结构,线程相关结构指向一个指针数组,指针数组中的每个元素最终指向一个JNI函数.\n\n### 6.AES加密实现\n网上有几种AES实现的方式：\n\n- 1.这个是我现在项目中使用的方法，在Github上有这个工程，这种方式是使用JNI生成一个与设备相关的密码，可以将该密码作为AES的密钥。[链接地址](https://github.com/MasonLiuChn/AndroidUltimateEncrypt)\n\n- 2.网上还有一种方式是由JNI生成keyValue和iv，Java层使用：[链接地址](http://blog.csdn.net/why_2012_gogo/article/details/40055245)\n\n主要代码：\n\n~~~ Java\nstatic {\n\tSystem.loadLibrary(\"cwtlib\");\n\tkeyValue = getKeyValue();\n\tiv = getIv();\n\n\tif(null != keyValue &&\n\t\tnull != iv) {\n\t\tKeyGenerator kgen;  \n        try {  \n            kgen = KeyGenerator.getInstance(\"AES\");  \n            kgen.init(128, new SecureRandom(keyValue));  \n            key = kgen.generateKey();  \n            paramSpec = new IvParameterSpec(iv);  \n            ecipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");         \n        } catch (NoSuchAlgorithmException e) {  \n        } catch (NoSuchPaddingException e) {  \n        }  \n\t}\n}   \n\npublic static native byte[] getKeyValue();\npublic static native byte[] getIv();\n~~~\n\n  这种方式，在android app程序完全退出后，再进入该app时，之前加密好的字符串**无法解密。**\n\n- 3.还有一种是直接由C或C++实现AES整个算法，直接使用网上代码并不知道靠不靠谱\n\n  所以，我们项目最终使用了第一种方法\n\n### 7.JNI混淆问题\n\n  检查下 C/C++代码中没有直接访问Java代码的类或者类的成员变量、类的成员函数。\n\n  如果有的话，这些就不能混淆\n\n~~~ Java\n//保留jni的回调类\n-keep class com.your.jnicallback.class { *; }\n//这个不用更改，直接复制就可以\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n~~~\n\n### 8.总结\nandroid 实现JNI入门并不难，笔者也刚刚入门，但要深入了解还是需要很长的路要走。\n\n#### 8.1 更新内容，JNI获取publickey实现\n在本文中最终使用第6点中的第一种方式，但原方法在4.0.4手机上遇到兼容性问题，详情请看我的这篇博客[使用JNI获取publickey实现](https://agehua.github.io/2016/05/24/JNI-Learning0/)\n","source":"_posts/2016-05-24-JNI-Learning.md","raw":"---\nlayout: post\ntitle: android JNI学习① 基础知识\ncategory: accumulation\ntags:\n  - JNI\n  - AES\nkeywords: jni, aes 加密\ndescription: android JNI学习，实现aes加密\nbanner: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\n---\n\n\n\n本文只是用来记录，写的不好还请见谅。\n\n### 1.JNI介绍\nJNI概念 : Java本地接口,Java Native Interface, 它是一个协议, 该协议用来沟通Java代码和外部的本地C/C++代码, 通过该协议 Java代码可以调用外部的本地代码, 外部的C/C++ 代码可以调用Java代码;\n\nC和Java的侧重 :\n\n- C语言 : C语言中最重要的是 函数 function;\n- Java语言 : Java中最重要的是 JVM, class类, 以及class中的方法;\n\nC与Java如何交流 :\n\n- JNI规范 : C语言与Java语言交流需要一个适配器, 中间件, 即 JNI, JNI提供了一种规范;\n- C语言中调用Java方法 : 可以让我们在C代码中找到Java代码class中的方法, 并且调用该方法;\n- Java语言中调用C语言方法 : 同时也可以在Java代码中, 将一个C语言的方法映射到Java的某个方法上;\n- JNI桥梁作用 : JNI提供了一个桥梁, 打通了C语言和Java语言之间的障碍;\n\n<!--more-->\n\nJNI中的一些概念 :\n\n- native : Java语言中修饰本地方法的修饰符, 被该修饰符修饰的方法没有方法体;\n- Native方法 : 在Java语言中被native关键字修饰的方法是Native方法;\n- JNI层 : Java声明Native方法的部分;\n- JNI函数 : JNIEnv提供的函数, 这些函数在jni.h中进行定义;\n- JNI方法 : Native方法对应的JNI层实现的 C/C++方法, 即在jni目录中实现的那些C语言代码;\n\n### 2.NDK简单介绍\nC代码执行 : C代码被编译成库文件之后, 才能执行, 库文件分为动态库 和静态库 两种;\n\n- 动态库 : unix环境下.so后缀的是动态库, windows环境下.dll 后缀的是动态库; 动态库可以依赖静态库加载一些可执行的C代码;\n- 静态库 :.a后缀是静态库的扩展名;\n\n库文件来源 : C代码 进行 编译 链接操作之后, 才会生成库文件, 不同类型的CPU 操作系统 生成的库文件是不一样;\n\n- CPU分类 : arm结构, 嵌入式设备处理器; x86结构, pc服务器处理器; 不同的CPU指令集不同;\n- 交叉编译 :windows x86编译出来的库文件可以在arm平台运行的代码;\n- 交叉编译工具链 : Google提供的 NDK 就是交叉编译工具链, 可以在linux环境下编译出在arn平台下执行的二进制库文件;\n\nNDK作用 : 是Google提供了交叉编译工具链, 能够在linux平台编译出在arm平台下执行的二进制库文件;\n\nNDK版本介绍 : android-ndk-windows 是在windows系统中的cygwin使用的, android-ndk-linux 是在linux下使用的;\n\n想深入了解NDK开发的同学，可以去安装一下cygwin，本文只涉及简单的C语言代码，不需要使用cygwin。\n\n### 3.环境准备，使用android studio还是Eclipse\n推荐使用Eclipse，这篇文章讲了使用Eclipse生成.h文件和生成so文件的配置过程。配置成功后可以远离命令行[Eclipse ADT插件生成.h/.so文件](http://blog.csdn.net/jspping/article/details/47780307)\n\n#### 3.1 Java调用C流程\n\n- a. 定义 Native 方法 : 比如在com.packagename.jni.JNITest.java 类中定义 Native 方法 public native int add(int x, int y);\n- b. 生成方法签名 : 进入 AndroidProject/bin/classes 目录, 使用 javah com.packagename.jni.JNITest 命令, 便生成了头文件, 该头文件引用了 jni.h, 以及定义好了对应的 Native 方法, 生成 JNIEXPORT jint JNICALL Java_com_packagename_jni_JNITest_add (JNIEnv \\*, jobject, jint, jint);  \n\nJava中定义的方法 :\n\n~~~ Java\n//将Java中的两个int值 传给C语言, 进行相加后, 返回java语言 shuliang.han.ndkparameterpassing.DataProvider  \npublic native int add(int x, int y);  \n~~~\n对应C语言中定义的方法 :\n\n~~~ C++\n#include <jni.h>  \n\n//方法签名, Java环境和调用native方法的类必不可少, 后面的参数就是native方法的参数  \njint Java_com_packagename_jni_JNITest_add(JNIEnv * env, jobject obj, jint x, jint y)  \n{  \n    return x + y;  \n}  \n~~~\n\n#### 3.2 生成.so文件\n\nAndroid.mk 文件：\n\n~~~ C++\nLOCAL_PATH := $(call my-dir)    \n\ninclude $(CLEAR_VARS)    \n\nLOCAL_MODULE    := hello-jni    \nLOCAL_SRC_FILES := hello-jni.c    \n\ninclude $(BUILD_SHARED_LIBRARY)  \n~~~\n\n- 文件内容解释：\n\n  **获取当前文件内容** : $(call my-dir) 是编译器中的宏方法, 调用该宏方法, 就会返回前的目录路径;\n\n  **赋值符号** : \" := \" 是赋值符号, 第一句话 是 返回当前文件所在的当前目录, 并将这个目录路径赋值给 LOCAL_PATH;\n\n  **初始化编译模块参数** : $(CLEAR_VARS) 作用是将编译模块的参数初始化, LOCAL_MODULE LOCAL_SRC_FILES 也是这样的参数;\n\n  **指定编译模块** : LOCAL_MODULE    := hello-jni , 指定编译后的 so 文件名称, 编译好之后系统会在该名称前面加上 \"lib\", 后缀加上 \".so\";\n\n  **指定编译源文件** : LOCAL_SRC_FILES := hello-jni.c 告诉编译系统源文件, 如果有多个文件那么就依次写在后面即可;\n\n  **编译成静态库** : include $(BUILD_SHARED_LIBRARY), 作用是告诉系统, 将编译的结果编译成.so后缀的静态库;\n\n  **静态库引入** : NDK的platform中有很多 \".a\" 结尾的动态库, 我们编译动态库的时候, 可以将一些静态库引入进来;\n\n- 生成 动态库 so 文件 : 进入 Android.mk 所在目录, 在该目录执行ndk下的ndk-build命令;\n- Java代码加载动态库 : 在 Java 代码中调用该类的类前面, 在类的一开始, 不在方法中, 加入\n\n~~~ C++\nstatic{ System.loadLibrary(\"hello\"); } ;\n~~~\n\n- Application.mk 文件内容为（不写这个文件也可以）:\n\n~~~ Java\nAPP_STL := stlport_static\nAPP_ABI := all\n~~~\n\n<!-- ![]({{ site.url }}/assets/img/jni_structure.png  =338x461) -->\n<!-- 指定图片大小有问题 -->\n\n<!-- [![Pure CSS Happy Hacking Keyboard](/assets/img/jni_structure.png)](http://codepen.io/P233/pen/qEagi) -->\n![Eclipse JNI目录结构](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/jni_structure.png)\n\n[这篇文章](http://blog.csdn.net/hejinjing_tom_com/article/details/8125648)是使用javah导出头文件过程中，常见错误和解决办法，这里做一个记录。\n\n\n### 4.字符串的处理\n\n- Java中的String转为C语言中的char字符串\n下面的工具方法可以在C程序中解决这个问题：\n\n~~~ Javascript\n// java中的jstring, 转化为c的一个字符数组  \nchar* Jstring2CStr(JNIEnv* env, jstring jstr) {  \n//声明了一个字符串变量 rtn  \nchar* rtn = NULL;  \n//找到Java中的String的Class对象  \njclass clsstring = (*env)->FindClass(env, \"java/lang/String\");  \n//创建一个Java中的字符串 \"GB2312\"  \njstring strencode = (*env)->NewStringUTF(env, \"GB2312\");  \n/*\n * 获取String中定义的方法 getBytes(), 该方法的参数是 String类型的, 返回值是 byte[]数组\n * \"(Ljava/lang/String;)[B\" 方法前面解析 :\n * -- Ljava/lang/String; 表示参数是String字符串\n * -- [B : 中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组\n */  \njmethodID mid = (*env)->GetMethodID(env, clsstring, \"getBytes\",  \n\t\t\"(Ljava/lang/String;)[B\");  \n//调用Java中的getBytes方法, 传入参数介绍 参数②表示调用该方法的对象, 参数③表示方法id , 参数④表示方法参数  \njbyteArray barr = (jbyteArray)(*env)->CallObjectMethod(env, jstr, mid,  \n\t\tstrencode); // String .getByte(\"GB2312\");  \n//获取数组的长度  \njsize alen = (*env)->GetArrayLength(env, barr);  \n//获取数组中的所有的元素 , 存放在 jbyte*数组中  \njbyte* ba = (*env)->GetByteArrayElements(env, barr, JNI_FALSE);  \n//将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0'  \nif (alen > 0) {  \n\trtn = (char*) malloc(alen + 1); //new   char[alen+1]; \"\\0\"  \n\tmemcpy(rtn, ba, alen);  \n\trtn[alen] = 0;  \n}  \n(*env)->ReleaseByteArrayElements(env, barr, ba, 0); //释放内存  \n\treturn rtn;  \n}  \n~~~\n\n- Jstring2CStr方法讲解 :\n   - a. 获取Java中String类型的class对象 : 参数 : 上下文环境 env, String类完整路径 ;\n~~~ Javascript\njclass clsstring = (*env)->FindClass(env, \"java/lang/String\");  \n~~~\n   - b.创建Java字符串 : 使用 NewStringUTF 方法;\n~~~ Javascript\njstring strencode = (*env)->NewStringUTF(env, \"GB2312\");  \n~~~   \n   - c.获取String中的getBytes()方法 : 参数介绍 ① env 上下文环境 ② 完整的类路径 ③ 方法名 ④ 方法签名, 方法签名 Ljava/lang/String; 代表参数是String字符串, [B  中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组;\n~~~ Javascript\njmethodID mid = (*env)->GetMethodID(env, clsstring, \"getBytes\",  \n    \"(Ljava/lang/String;)[B\");  \n~~~       \n   - d. 获取数组的长度 :\n~~~ Javascript\njsize alen = (*env)->GetArrayLength(env, barr);  \n~~~\n   - e. 获取数组元素 : 获取数组中的所有的元素 , 存放在 jbyte*数组中;\n~~~ Javascript\njbyte* ba = (*env)->GetByteArrayElements(env, barr, JNI_FALSE);  \n~~~\n   - f.数组拷贝: 将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0';\n~~~ Javascript\nif (alen > 0) {  \n    rtn = (char*) malloc(alen + 1); //new   char[alen+1]; \"\\0\"  \n    memcpy(rtn, ba, alen);  \n    rtn[alen] = 0;  \n}  \n~~~\n   - g.释放内存 :\n~~~ Javascript\n(*env)->ReleaseByteArrayElements(env, barr, ba, 0); //释放内存\n~~~\n\n### 5.JNI方法命名规则(标准JNI规范)\n\n- **JNI实现的方法与Java中Native方法的映射关系 :**\n\n  使用方法名进行映射, 可以使用javah工具进入bin/classes目录下执行命令, 即可生成头文件;\n\n- **JNI方法参数介绍:**\n\n  参数① : 第一个参数是JNI接口指针JNIEnv;\n\n  参数② : 如果Native方法是非静态的, 那么第二个参数就是对Java对象的引用, 如果Native方法是静态的, 那么第二个参数就是对Java类的Class对象的引用;\n\n- **JNI方法名规范:**  \n\n  返回值+Java前缀+全路径类名+方法名+参数① JNIEnv+参数② jobject+其它参数;\n\n  注意分隔符 : Java前缀 与 类名 以及类名之间的包名 和 方法名之间 使用 \"\\_\" 进行分割;\n\n- **声明 非静态 方法:**\n\n  Native方法 : public int hello (String str, int i);\n\n  JNI方法: jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject obj, jstring str, jint i);\n\n- **声明 静态 方法 :**\n\n  Native方法 : public static int hello (String str, int i);\n\n  JNI方法 : jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject clazz, jstring str, jint i);\n\n- **两种规范 :**\n\n  以上是Java的标准JNI规范, 在Android中还有一套自定义的规范, 该规范是Android应用框架层 和 框架层交互使用的JNI规范, 依靠方法注册 映射 Native方法 和 JNI方法;\n\n- **JNIEnv作用 :**\n\n  JNIEnv 是一个指针,指向了一组JNI函数, 这些函数可以在jni.h中查询到,通过这些函数可以实现 Java层 与 JNI层的交互 , 通过JNIEnv 调用JNI函数 可以访问java虚拟机, 操作java对象;\n\n- **JNI线程相关性 :**\n\n  JNIEnv只在当前的线程有效,JNIEnv不能跨线程传递, 相同的Java线程调用本地方法, 所使用的JNIEnv是相同的, 一个Native方法不能被不同的Java线程调用;\n\n- **JNIEnv结构体系 :**\n\n  JNIEnv指针指向一个线程相关的结构,线程相关结构指向一个指针数组,指针数组中的每个元素最终指向一个JNI函数.\n\n### 6.AES加密实现\n网上有几种AES实现的方式：\n\n- 1.这个是我现在项目中使用的方法，在Github上有这个工程，这种方式是使用JNI生成一个与设备相关的密码，可以将该密码作为AES的密钥。[链接地址](https://github.com/MasonLiuChn/AndroidUltimateEncrypt)\n\n- 2.网上还有一种方式是由JNI生成keyValue和iv，Java层使用：[链接地址](http://blog.csdn.net/why_2012_gogo/article/details/40055245)\n\n主要代码：\n\n~~~ Java\nstatic {\n\tSystem.loadLibrary(\"cwtlib\");\n\tkeyValue = getKeyValue();\n\tiv = getIv();\n\n\tif(null != keyValue &&\n\t\tnull != iv) {\n\t\tKeyGenerator kgen;  \n        try {  \n            kgen = KeyGenerator.getInstance(\"AES\");  \n            kgen.init(128, new SecureRandom(keyValue));  \n            key = kgen.generateKey();  \n            paramSpec = new IvParameterSpec(iv);  \n            ecipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");         \n        } catch (NoSuchAlgorithmException e) {  \n        } catch (NoSuchPaddingException e) {  \n        }  \n\t}\n}   \n\npublic static native byte[] getKeyValue();\npublic static native byte[] getIv();\n~~~\n\n  这种方式，在android app程序完全退出后，再进入该app时，之前加密好的字符串**无法解密。**\n\n- 3.还有一种是直接由C或C++实现AES整个算法，直接使用网上代码并不知道靠不靠谱\n\n  所以，我们项目最终使用了第一种方法\n\n### 7.JNI混淆问题\n\n  检查下 C/C++代码中没有直接访问Java代码的类或者类的成员变量、类的成员函数。\n\n  如果有的话，这些就不能混淆\n\n~~~ Java\n//保留jni的回调类\n-keep class com.your.jnicallback.class { *; }\n//这个不用更改，直接复制就可以\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n~~~\n\n### 8.总结\nandroid 实现JNI入门并不难，笔者也刚刚入门，但要深入了解还是需要很长的路要走。\n\n#### 8.1 更新内容，JNI获取publickey实现\n在本文中最终使用第6点中的第一种方式，但原方法在4.0.4手机上遇到兼容性问题，详情请看我的这篇博客[使用JNI获取publickey实现](https://agehua.github.io/2016/05/24/JNI-Learning0/)\n","slug":"JNI-Learning","published":1,"date":"2016-05-23T16:00:00.000Z","updated":"2017-11-23T07:04:34.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebwx000qd6ykm6a060j6","content":"<p>本文只是用来记录，写的不好还请见谅。</p>\n<h3 id=\"1-JNI介绍\"><a href=\"#1-JNI介绍\" class=\"headerlink\" title=\"1.JNI介绍\"></a>1.JNI介绍</h3><p>JNI概念 : Java本地接口,Java Native Interface, 它是一个协议, 该协议用来沟通Java代码和外部的本地C/C++代码, 通过该协议 Java代码可以调用外部的本地代码, 外部的C/C++ 代码可以调用Java代码;</p>\n<p>C和Java的侧重 :</p>\n<ul>\n<li>C语言 : C语言中最重要的是 函数 function;</li>\n<li>Java语言 : Java中最重要的是 JVM, class类, 以及class中的方法;</li>\n</ul>\n<p>C与Java如何交流 :</p>\n<ul>\n<li>JNI规范 : C语言与Java语言交流需要一个适配器, 中间件, 即 JNI, JNI提供了一种规范;</li>\n<li>C语言中调用Java方法 : 可以让我们在C代码中找到Java代码class中的方法, 并且调用该方法;</li>\n<li>Java语言中调用C语言方法 : 同时也可以在Java代码中, 将一个C语言的方法映射到Java的某个方法上;</li>\n<li>JNI桥梁作用 : JNI提供了一个桥梁, 打通了C语言和Java语言之间的障碍;</li>\n</ul>\n<a id=\"more\"></a>\n<p>JNI中的一些概念 :</p>\n<ul>\n<li>native : Java语言中修饰本地方法的修饰符, 被该修饰符修饰的方法没有方法体;</li>\n<li>Native方法 : 在Java语言中被native关键字修饰的方法是Native方法;</li>\n<li>JNI层 : Java声明Native方法的部分;</li>\n<li>JNI函数 : JNIEnv提供的函数, 这些函数在jni.h中进行定义;</li>\n<li>JNI方法 : Native方法对应的JNI层实现的 C/C++方法, 即在jni目录中实现的那些C语言代码;</li>\n</ul>\n<h3 id=\"2-NDK简单介绍\"><a href=\"#2-NDK简单介绍\" class=\"headerlink\" title=\"2.NDK简单介绍\"></a>2.NDK简单介绍</h3><p>C代码执行 : C代码被编译成库文件之后, 才能执行, 库文件分为动态库 和静态库 两种;</p>\n<ul>\n<li>动态库 : unix环境下.so后缀的是动态库, windows环境下.dll 后缀的是动态库; 动态库可以依赖静态库加载一些可执行的C代码;</li>\n<li>静态库 :.a后缀是静态库的扩展名;</li>\n</ul>\n<p>库文件来源 : C代码 进行 编译 链接操作之后, 才会生成库文件, 不同类型的CPU 操作系统 生成的库文件是不一样;</p>\n<ul>\n<li>CPU分类 : arm结构, 嵌入式设备处理器; x86结构, pc服务器处理器; 不同的CPU指令集不同;</li>\n<li>交叉编译 :windows x86编译出来的库文件可以在arm平台运行的代码;</li>\n<li>交叉编译工具链 : Google提供的 NDK 就是交叉编译工具链, 可以在linux环境下编译出在arn平台下执行的二进制库文件;</li>\n</ul>\n<p>NDK作用 : 是Google提供了交叉编译工具链, 能够在linux平台编译出在arm平台下执行的二进制库文件;</p>\n<p>NDK版本介绍 : android-ndk-windows 是在windows系统中的cygwin使用的, android-ndk-linux 是在linux下使用的;</p>\n<p>想深入了解NDK开发的同学，可以去安装一下cygwin，本文只涉及简单的C语言代码，不需要使用cygwin。</p>\n<h3 id=\"3-环境准备，使用android-studio还是Eclipse\"><a href=\"#3-环境准备，使用android-studio还是Eclipse\" class=\"headerlink\" title=\"3.环境准备，使用android studio还是Eclipse\"></a>3.环境准备，使用android studio还是Eclipse</h3><p>推荐使用Eclipse，这篇文章讲了使用Eclipse生成.h文件和生成so文件的配置过程。配置成功后可以远离命令行<a href=\"http://blog.csdn.net/jspping/article/details/47780307\" target=\"_blank\" rel=\"external\">Eclipse ADT插件生成.h/.so文件</a></p>\n<h4 id=\"3-1-Java调用C流程\"><a href=\"#3-1-Java调用C流程\" class=\"headerlink\" title=\"3.1 Java调用C流程\"></a>3.1 Java调用C流程</h4><ul>\n<li>a. 定义 Native 方法 : 比如在com.packagename.jni.JNITest.java 类中定义 Native 方法 public native int add(int x, int y);</li>\n<li>b. 生成方法签名 : 进入 AndroidProject/bin/classes 目录, 使用 javah com.packagename.jni.JNITest 命令, 便生成了头文件, 该头文件引用了 jni.h, 以及定义好了对应的 Native 方法, 生成 JNIEXPORT jint JNICALL Java_com_packagename_jni_JNITest_add (JNIEnv *, jobject, jint, jint);  </li>\n</ul>\n<p>Java中定义的方法 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将Java中的两个int值 传给C语言, 进行相加后, 返回java语言 shuliang.han.ndkparameterpassing.DataProvider  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</div></pre></td></tr></table></figure>\n<p>对应C语言中定义的方法 :</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span>  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法签名, Java环境和调用native方法的类必不可少, 后面的参数就是native方法的参数  </span></div><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_packagename_jni_JNITest_add</span><span class=\"params\">(JNIEnv * env, jobject obj, jint x, jint y)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-生成-so文件\"><a href=\"#3-2-生成-so文件\" class=\"headerlink\" title=\"3.2 生成.so文件\"></a>3.2 生成.so文件</h4><p>Android.mk 文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">LOCAL_PATH := $(call my-dir)    </div><div class=\"line\"></div><div class=\"line\">include $(CLEAR_VARS)    </div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE    := hello-jni    </div><div class=\"line\">LOCAL_SRC_FILES := hello-jni.c    </div><div class=\"line\"></div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>文件内容解释：</p>\n<p><strong>获取当前文件内容</strong> : $(call my-dir) 是编译器中的宏方法, 调用该宏方法, 就会返回前的目录路径;</p>\n<p><strong>赋值符号</strong> : “ := “ 是赋值符号, 第一句话 是 返回当前文件所在的当前目录, 并将这个目录路径赋值给 LOCAL_PATH;</p>\n<p><strong>初始化编译模块参数</strong> : $(CLEAR_VARS) 作用是将编译模块的参数初始化, LOCAL_MODULE LOCAL_SRC_FILES 也是这样的参数;</p>\n<p><strong>指定编译模块</strong> : LOCAL_MODULE    := hello-jni , 指定编译后的 so 文件名称, 编译好之后系统会在该名称前面加上 “lib”, 后缀加上 “.so”;</p>\n<p><strong>指定编译源文件</strong> : LOCAL_SRC_FILES := hello-jni.c 告诉编译系统源文件, 如果有多个文件那么就依次写在后面即可;</p>\n<p><strong>编译成静态库</strong> : include $(BUILD_SHARED_LIBRARY), 作用是告诉系统, 将编译的结果编译成.so后缀的静态库;</p>\n<p><strong>静态库引入</strong> : NDK的platform中有很多 “.a” 结尾的动态库, 我们编译动态库的时候, 可以将一些静态库引入进来;</p>\n</li>\n<li><p>生成 动态库 so 文件 : 进入 Android.mk 所在目录, 在该目录执行ndk下的ndk-build命令;</p>\n</li>\n<li>Java代码加载动态库 : 在 Java 代码中调用该类的类前面, 在类的一开始, 不在方法中, 加入</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span>&#123; System.loadLibrary(<span class=\"string\">\"hello\"</span>); &#125; ;</div></pre></td></tr></table></figure>\n<ul>\n<li>Application.mk 文件内容为（不写这个文件也可以）:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">APP_STL := stlport_static</div><div class=\"line\">APP_ABI := all</div></pre></td></tr></table></figure>\n<!-- ![](/assets/img/jni_structure.png  =338x461) –&gt;\n<!-- 指定图片大小有问题 -->\n<!-- [![Pure CSS Happy Hacking Keyboard](/assets/img/jni_structure.png)](http://codepen.io/P233/pen/qEagi) -->\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/jni_structure.png\" alt=\"Eclipse JNI目录结构\"></p>\n<p><a href=\"http://blog.csdn.net/hejinjing_tom_com/article/details/8125648\" target=\"_blank\" rel=\"external\">这篇文章</a>是使用javah导出头文件过程中，常见错误和解决办法，这里做一个记录。</p>\n<h3 id=\"4-字符串的处理\"><a href=\"#4-字符串的处理\" class=\"headerlink\" title=\"4.字符串的处理\"></a>4.字符串的处理</h3><ul>\n<li>Java中的String转为C语言中的char字符串<br>下面的工具方法可以在C程序中解决这个问题：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// java中的jstring, 转化为c的一个字符数组  </span></div><div class=\"line\">char* Jstring2CStr(JNIEnv* env, jstring jstr) &#123;  </div><div class=\"line\"><span class=\"comment\">//声明了一个字符串变量 rtn  </span></div><div class=\"line\">char* rtn = NULL;  </div><div class=\"line\"><span class=\"comment\">//找到Java中的String的Class对象  </span></div><div class=\"line\">jclass clsstring = (*env)-&gt;FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);  </div><div class=\"line\"><span class=\"comment\">//创建一个Java中的字符串 \"GB2312\"  </span></div><div class=\"line\">jstring strencode = (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"GB2312\"</span>);  </div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 获取String中定义的方法 getBytes(), 该方法的参数是 String类型的, 返回值是 byte[]数组</div><div class=\"line\"> * \"(Ljava/lang/String;)[B\" 方法前面解析 :</div><div class=\"line\"> * -- Ljava/lang/String; 表示参数是String字符串</div><div class=\"line\"> * -- [B : 中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组</div><div class=\"line\"> */  </div><div class=\"line\">jmethodID mid = (*env)-&gt;GetMethodID(env, clsstring, <span class=\"string\">\"getBytes\"</span>,  </div><div class=\"line\">\t\t<span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);  </div><div class=\"line\"><span class=\"comment\">//调用Java中的getBytes方法, 传入参数介绍 参数②表示调用该方法的对象, 参数③表示方法id , 参数④表示方法参数  </span></div><div class=\"line\">jbyteArray barr = (jbyteArray)(*env)-&gt;CallObjectMethod(env, jstr, mid,  </div><div class=\"line\">\t\tstrencode); <span class=\"comment\">// String .getByte(\"GB2312\");  </span></div><div class=\"line\"><span class=\"comment\">//获取数组的长度  </span></div><div class=\"line\">jsize alen = (*env)-&gt;GetArrayLength(env, barr);  </div><div class=\"line\"><span class=\"comment\">//获取数组中的所有的元素 , 存放在 jbyte*数组中  </span></div><div class=\"line\">jbyte* ba = (*env)-&gt;GetByteArrayElements(env, barr, JNI_FALSE);  </div><div class=\"line\"><span class=\"comment\">//将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0'  </span></div><div class=\"line\"><span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">\trtn = (char*) malloc(alen + <span class=\"number\">1</span>); <span class=\"comment\">//new   char[alen+1]; \"\\0\"  </span></div><div class=\"line\">\tmemcpy(rtn, ba, alen);  </div><div class=\"line\">\trtn[alen] = <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">(*env)-&gt;ReleaseByteArrayElements(env, barr, ba, <span class=\"number\">0</span>); <span class=\"comment\">//释放内存  </span></div><div class=\"line\">\t<span class=\"keyword\">return</span> rtn;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Jstring2CStr方法讲解 :</p>\n<ul>\n<li><p>a. 获取Java中String类型的class对象 : 参数 : 上下文环境 env, String类完整路径 ;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jclass clsstring = (*env)-&gt;FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>b.创建Java字符串 : 使用 NewStringUTF 方法;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jstring strencode = (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"GB2312\"</span>);  </div><div class=\"line\">~~~   </div><div class=\"line\">   - c.获取<span class=\"built_in\">String</span>中的getBytes()方法 : 参数介绍 ① env 上下文环境 ② 完整的类路径 ③ 方法名 ④ 方法签名, 方法签名 Ljava/lang/<span class=\"built_in\">String</span>; 代表参数是<span class=\"built_in\">String</span>字符串, [B  中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组;</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">jmethodID mid = (*env)-&gt;GetMethodID(env, clsstring, <span class=\"string\">\"getBytes\"</span>,  </div><div class=\"line\">    <span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);  </div><div class=\"line\">~~~       </div><div class=\"line\">   - d. 获取数组的长度 :</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">jsize alen = (*env)-&gt;GetArrayLength(env, barr);</div></pre></td></tr></table></figure>\n</li>\n<li><p>e. 获取数组元素 : 获取数组中的所有的元素 , 存放在 jbyte*数组中;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jbyte* ba = (*env)-&gt;GetByteArrayElements(env, barr, JNI_FALSE);</div></pre></td></tr></table></figure>\n</li>\n<li><p>f.数组拷贝: 将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 ‘\\0’;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">    rtn = (char*) malloc(alen + <span class=\"number\">1</span>); <span class=\"comment\">//new   char[alen+1]; \"\\0\"  </span></div><div class=\"line\">    memcpy(rtn, ba, alen);  </div><div class=\"line\">    rtn[alen] = <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>g.释放内存 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(*env)-&gt;ReleaseByteArrayElements(env, barr, ba, <span class=\"number\">0</span>); <span class=\"comment\">//释放内存</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-JNI方法命名规则-标准JNI规范\"><a href=\"#5-JNI方法命名规则-标准JNI规范\" class=\"headerlink\" title=\"5.JNI方法命名规则(标准JNI规范)\"></a>5.JNI方法命名规则(标准JNI规范)</h3><ul>\n<li><p><strong>JNI实现的方法与Java中Native方法的映射关系 :</strong></p>\n<p>使用方法名进行映射, 可以使用javah工具进入bin/classes目录下执行命令, 即可生成头文件;</p>\n</li>\n<li><p><strong>JNI方法参数介绍:</strong></p>\n<p>参数① : 第一个参数是JNI接口指针JNIEnv;</p>\n<p>参数② : 如果Native方法是非静态的, 那么第二个参数就是对Java对象的引用, 如果Native方法是静态的, 那么第二个参数就是对Java类的Class对象的引用;</p>\n</li>\n<li><p><strong>JNI方法名规范:</strong>  </p>\n<p>返回值+Java前缀+全路径类名+方法名+参数① JNIEnv+参数② jobject+其它参数;</p>\n<p>注意分隔符 : Java前缀 与 类名 以及类名之间的包名 和 方法名之间 使用 “_“ 进行分割;</p>\n</li>\n<li><p><strong>声明 非静态 方法:</strong></p>\n<p>Native方法 : public int hello (String str, int i);</p>\n<p>JNI方法: jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject obj, jstring str, jint i);</p>\n</li>\n<li><p><strong>声明 静态 方法 :</strong></p>\n<p>Native方法 : public static int hello (String str, int i);</p>\n<p>JNI方法 : jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject clazz, jstring str, jint i);</p>\n</li>\n<li><p><strong>两种规范 :</strong></p>\n<p>以上是Java的标准JNI规范, 在Android中还有一套自定义的规范, 该规范是Android应用框架层 和 框架层交互使用的JNI规范, 依靠方法注册 映射 Native方法 和 JNI方法;</p>\n</li>\n<li><p><strong>JNIEnv作用 :</strong></p>\n<p>JNIEnv 是一个指针,指向了一组JNI函数, 这些函数可以在jni.h中查询到,通过这些函数可以实现 Java层 与 JNI层的交互 , 通过JNIEnv 调用JNI函数 可以访问java虚拟机, 操作java对象;</p>\n</li>\n<li><p><strong>JNI线程相关性 :</strong></p>\n<p>JNIEnv只在当前的线程有效,JNIEnv不能跨线程传递, 相同的Java线程调用本地方法, 所使用的JNIEnv是相同的, 一个Native方法不能被不同的Java线程调用;</p>\n</li>\n<li><p><strong>JNIEnv结构体系 :</strong></p>\n<p>JNIEnv指针指向一个线程相关的结构,线程相关结构指向一个指针数组,指针数组中的每个元素最终指向一个JNI函数.</p>\n</li>\n</ul>\n<h3 id=\"6-AES加密实现\"><a href=\"#6-AES加密实现\" class=\"headerlink\" title=\"6.AES加密实现\"></a>6.AES加密实现</h3><p>网上有几种AES实现的方式：</p>\n<ul>\n<li><p>1.这个是我现在项目中使用的方法，在Github上有这个工程，这种方式是使用JNI生成一个与设备相关的密码，可以将该密码作为AES的密钥。<a href=\"https://github.com/MasonLiuChn/AndroidUltimateEncrypt\" target=\"_blank\" rel=\"external\">链接地址</a></p>\n</li>\n<li><p>2.网上还有一种方式是由JNI生成keyValue和iv，Java层使用：<a href=\"http://blog.csdn.net/why_2012_gogo/article/details/40055245\" target=\"_blank\" rel=\"external\">链接地址</a></p>\n</li>\n</ul>\n<p>主要代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"cwtlib\"</span>);</div><div class=\"line\">\tkeyValue = getKeyValue();</div><div class=\"line\">\tiv = getIv();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != keyValue &amp;&amp;</div><div class=\"line\">\t\t<span class=\"keyword\">null</span> != iv) &#123;</div><div class=\"line\">\t\tKeyGenerator kgen;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            kgen = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);  </div><div class=\"line\">            kgen.init(<span class=\"number\">128</span>, <span class=\"keyword\">new</span> SecureRandom(keyValue));  </div><div class=\"line\">            key = kgen.generateKey();  </div><div class=\"line\">            paramSpec = <span class=\"keyword\">new</span> IvParameterSpec(iv);  </div><div class=\"line\">            ecipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);         </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">byte</span>[] getKeyValue();</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">byte</span>[] getIv();</div></pre></td></tr></table></figure>\n<p>  这种方式，在android app程序完全退出后，再进入该app时，之前加密好的字符串<strong>无法解密。</strong></p>\n<ul>\n<li><p>3.还有一种是直接由C或C++实现AES整个算法，直接使用网上代码并不知道靠不靠谱</p>\n<p>所以，我们项目最终使用了第一种方法</p>\n</li>\n</ul>\n<h3 id=\"7-JNI混淆问题\"><a href=\"#7-JNI混淆问题\" class=\"headerlink\" title=\"7.JNI混淆问题\"></a>7.JNI混淆问题</h3><p>  检查下 C/C++代码中没有直接访问Java代码的类或者类的成员变量、类的成员函数。</p>\n<p>  如果有的话，这些就不能混淆</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//保留jni的回调类</span></div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">your</span>.<span class=\"title\">jnicallback</span>.<span class=\"title\">class</span> </span>&#123; *; &#125;</div><div class=\"line\"><span class=\"comment\">//这个不用更改，直接复制就可以</span></div><div class=\"line\">-keepclasseswithmembernames <span class=\"class\"><span class=\"keyword\">class</span> * </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">native</span> &lt;methods&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-总结\"><a href=\"#8-总结\" class=\"headerlink\" title=\"8.总结\"></a>8.总结</h3><p>android 实现JNI入门并不难，笔者也刚刚入门，但要深入了解还是需要很长的路要走。</p>\n<h4 id=\"8-1-更新内容，JNI获取publickey实现\"><a href=\"#8-1-更新内容，JNI获取publickey实现\" class=\"headerlink\" title=\"8.1 更新内容，JNI获取publickey实现\"></a>8.1 更新内容，JNI获取publickey实现</h4><p>在本文中最终使用第6点中的第一种方式，但原方法在4.0.4手机上遇到兼容性问题，详情请看我的这篇博客<a href=\"https://agehua.github.io/2016/05/24/JNI-Learning0/\">使用JNI获取publickey实现</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/24/JNI-Learning/\">http://agehua.github.io/2016/05/24/JNI-Learning/</a></p>\n","readingTime":{"text":"6 min read","minutes":5.42,"time":325200,"words":1084},"excerpt":"<p>本文只是用来记录，写的不好还请见谅。</p>\n<h3 id=\"1-JNI介绍\"><a href=\"#1-JNI介绍\" class=\"headerlink\" title=\"1.JNI介绍\"></a>1.JNI介绍</h3><p>JNI概念 : Java本地接口,Java Native Interface, 它是一个协议, 该协议用来沟通Java代码和外部的本地C/C++代码, 通过该协议 Java代码可以调用外部的本地代码, 外部的C/C++ 代码可以调用Java代码;</p>\n<p>C和Java的侧重 :</p>\n<ul>\n<li>C语言 : C语言中最重要的是 函数 function;</li>\n<li>Java语言 : Java中最重要的是 JVM, class类, 以及class中的方法;</li>\n</ul>\n<p>C与Java如何交流 :</p>\n<ul>\n<li>JNI规范 : C语言与Java语言交流需要一个适配器, 中间件, 即 JNI, JNI提供了一种规范;</li>\n<li>C语言中调用Java方法 : 可以让我们在C代码中找到Java代码class中的方法, 并且调用该方法;</li>\n<li>Java语言中调用C语言方法 : 同时也可以在Java代码中, 将一个C语言的方法映射到Java的某个方法上;</li>\n<li>JNI桥梁作用 : JNI提供了一个桥梁, 打通了C语言和Java语言之间的障碍;</li>\n</ul>","more":"<p>JNI中的一些概念 :</p>\n<ul>\n<li>native : Java语言中修饰本地方法的修饰符, 被该修饰符修饰的方法没有方法体;</li>\n<li>Native方法 : 在Java语言中被native关键字修饰的方法是Native方法;</li>\n<li>JNI层 : Java声明Native方法的部分;</li>\n<li>JNI函数 : JNIEnv提供的函数, 这些函数在jni.h中进行定义;</li>\n<li>JNI方法 : Native方法对应的JNI层实现的 C/C++方法, 即在jni目录中实现的那些C语言代码;</li>\n</ul>\n<h3 id=\"2-NDK简单介绍\"><a href=\"#2-NDK简单介绍\" class=\"headerlink\" title=\"2.NDK简单介绍\"></a>2.NDK简单介绍</h3><p>C代码执行 : C代码被编译成库文件之后, 才能执行, 库文件分为动态库 和静态库 两种;</p>\n<ul>\n<li>动态库 : unix环境下.so后缀的是动态库, windows环境下.dll 后缀的是动态库; 动态库可以依赖静态库加载一些可执行的C代码;</li>\n<li>静态库 :.a后缀是静态库的扩展名;</li>\n</ul>\n<p>库文件来源 : C代码 进行 编译 链接操作之后, 才会生成库文件, 不同类型的CPU 操作系统 生成的库文件是不一样;</p>\n<ul>\n<li>CPU分类 : arm结构, 嵌入式设备处理器; x86结构, pc服务器处理器; 不同的CPU指令集不同;</li>\n<li>交叉编译 :windows x86编译出来的库文件可以在arm平台运行的代码;</li>\n<li>交叉编译工具链 : Google提供的 NDK 就是交叉编译工具链, 可以在linux环境下编译出在arn平台下执行的二进制库文件;</li>\n</ul>\n<p>NDK作用 : 是Google提供了交叉编译工具链, 能够在linux平台编译出在arm平台下执行的二进制库文件;</p>\n<p>NDK版本介绍 : android-ndk-windows 是在windows系统中的cygwin使用的, android-ndk-linux 是在linux下使用的;</p>\n<p>想深入了解NDK开发的同学，可以去安装一下cygwin，本文只涉及简单的C语言代码，不需要使用cygwin。</p>\n<h3 id=\"3-环境准备，使用android-studio还是Eclipse\"><a href=\"#3-环境准备，使用android-studio还是Eclipse\" class=\"headerlink\" title=\"3.环境准备，使用android studio还是Eclipse\"></a>3.环境准备，使用android studio还是Eclipse</h3><p>推荐使用Eclipse，这篇文章讲了使用Eclipse生成.h文件和生成so文件的配置过程。配置成功后可以远离命令行<a href=\"http://blog.csdn.net/jspping/article/details/47780307\">Eclipse ADT插件生成.h/.so文件</a></p>\n<h4 id=\"3-1-Java调用C流程\"><a href=\"#3-1-Java调用C流程\" class=\"headerlink\" title=\"3.1 Java调用C流程\"></a>3.1 Java调用C流程</h4><ul>\n<li>a. 定义 Native 方法 : 比如在com.packagename.jni.JNITest.java 类中定义 Native 方法 public native int add(int x, int y);</li>\n<li>b. 生成方法签名 : 进入 AndroidProject/bin/classes 目录, 使用 javah com.packagename.jni.JNITest 命令, 便生成了头文件, 该头文件引用了 jni.h, 以及定义好了对应的 Native 方法, 生成 JNIEXPORT jint JNICALL Java_com_packagename_jni_JNITest_add (JNIEnv *, jobject, jint, jint);  </li>\n</ul>\n<p>Java中定义的方法 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将Java中的两个int值 传给C语言, 进行相加后, 返回java语言 shuliang.han.ndkparameterpassing.DataProvider  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</div></pre></td></tr></table></figure>\n<p>对应C语言中定义的方法 :</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span>  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法签名, Java环境和调用native方法的类必不可少, 后面的参数就是native方法的参数  </span></div><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_packagename_jni_JNITest_add</span><span class=\"params\">(JNIEnv * env, jobject obj, jint x, jint y)</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-生成-so文件\"><a href=\"#3-2-生成-so文件\" class=\"headerlink\" title=\"3.2 生成.so文件\"></a>3.2 生成.so文件</h4><p>Android.mk 文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">LOCAL_PATH := $(call my-dir)    </div><div class=\"line\"></div><div class=\"line\">include $(CLEAR_VARS)    </div><div class=\"line\"></div><div class=\"line\">LOCAL_MODULE    := hello-jni    </div><div class=\"line\">LOCAL_SRC_FILES := hello-jni.c    </div><div class=\"line\"></div><div class=\"line\">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>文件内容解释：</p>\n<p><strong>获取当前文件内容</strong> : $(call my-dir) 是编译器中的宏方法, 调用该宏方法, 就会返回前的目录路径;</p>\n<p><strong>赋值符号</strong> : “ := “ 是赋值符号, 第一句话 是 返回当前文件所在的当前目录, 并将这个目录路径赋值给 LOCAL_PATH;</p>\n<p><strong>初始化编译模块参数</strong> : $(CLEAR_VARS) 作用是将编译模块的参数初始化, LOCAL_MODULE LOCAL_SRC_FILES 也是这样的参数;</p>\n<p><strong>指定编译模块</strong> : LOCAL_MODULE    := hello-jni , 指定编译后的 so 文件名称, 编译好之后系统会在该名称前面加上 “lib”, 后缀加上 “.so”;</p>\n<p><strong>指定编译源文件</strong> : LOCAL_SRC_FILES := hello-jni.c 告诉编译系统源文件, 如果有多个文件那么就依次写在后面即可;</p>\n<p><strong>编译成静态库</strong> : include $(BUILD_SHARED_LIBRARY), 作用是告诉系统, 将编译的结果编译成.so后缀的静态库;</p>\n<p><strong>静态库引入</strong> : NDK的platform中有很多 “.a” 结尾的动态库, 我们编译动态库的时候, 可以将一些静态库引入进来;</p>\n</li>\n<li><p>生成 动态库 so 文件 : 进入 Android.mk 所在目录, 在该目录执行ndk下的ndk-build命令;</p>\n</li>\n<li>Java代码加载动态库 : 在 Java 代码中调用该类的类前面, 在类的一开始, 不在方法中, 加入</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span>&#123; System.loadLibrary(<span class=\"string\">\"hello\"</span>); &#125; ;</div></pre></td></tr></table></figure>\n<ul>\n<li>Application.mk 文件内容为（不写这个文件也可以）:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">APP_STL := stlport_static</div><div class=\"line\">APP_ABI := all</div></pre></td></tr></table></figure>\n<!-- ![](/assets/img/jni_structure.png  =338x461) –&gt;\n<!-- 指定图片大小有问题 -->\n<!-- [![Pure CSS Happy Hacking Keyboard](/assets/img/jni_structure.png)](http://codepen.io/P233/pen/qEagi) -->\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/jni_structure.png\" alt=\"Eclipse JNI目录结构\"></p>\n<p><a href=\"http://blog.csdn.net/hejinjing_tom_com/article/details/8125648\">这篇文章</a>是使用javah导出头文件过程中，常见错误和解决办法，这里做一个记录。</p>\n<h3 id=\"4-字符串的处理\"><a href=\"#4-字符串的处理\" class=\"headerlink\" title=\"4.字符串的处理\"></a>4.字符串的处理</h3><ul>\n<li>Java中的String转为C语言中的char字符串<br>下面的工具方法可以在C程序中解决这个问题：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// java中的jstring, 转化为c的一个字符数组  </span></div><div class=\"line\">char* Jstring2CStr(JNIEnv* env, jstring jstr) &#123;  </div><div class=\"line\"><span class=\"comment\">//声明了一个字符串变量 rtn  </span></div><div class=\"line\">char* rtn = NULL;  </div><div class=\"line\"><span class=\"comment\">//找到Java中的String的Class对象  </span></div><div class=\"line\">jclass clsstring = (*env)-&gt;FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);  </div><div class=\"line\"><span class=\"comment\">//创建一个Java中的字符串 \"GB2312\"  </span></div><div class=\"line\">jstring strencode = (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"GB2312\"</span>);  </div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 获取String中定义的方法 getBytes(), 该方法的参数是 String类型的, 返回值是 byte[]数组</div><div class=\"line\"> * \"(Ljava/lang/String;)[B\" 方法前面解析 :</div><div class=\"line\"> * -- Ljava/lang/String; 表示参数是String字符串</div><div class=\"line\"> * -- [B : 中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组</div><div class=\"line\"> */</span>  </div><div class=\"line\">jmethodID mid = (*env)-&gt;GetMethodID(env, clsstring, <span class=\"string\">\"getBytes\"</span>,  </div><div class=\"line\">\t\t<span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);  </div><div class=\"line\"><span class=\"comment\">//调用Java中的getBytes方法, 传入参数介绍 参数②表示调用该方法的对象, 参数③表示方法id , 参数④表示方法参数  </span></div><div class=\"line\">jbyteArray barr = (jbyteArray)(*env)-&gt;CallObjectMethod(env, jstr, mid,  </div><div class=\"line\">\t\tstrencode); <span class=\"comment\">// String .getByte(\"GB2312\");  </span></div><div class=\"line\"><span class=\"comment\">//获取数组的长度  </span></div><div class=\"line\">jsize alen = (*env)-&gt;GetArrayLength(env, barr);  </div><div class=\"line\"><span class=\"comment\">//获取数组中的所有的元素 , 存放在 jbyte*数组中  </span></div><div class=\"line\">jbyte* ba = (*env)-&gt;GetByteArrayElements(env, barr, JNI_FALSE);  </div><div class=\"line\"><span class=\"comment\">//将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 '\\0'  </span></div><div class=\"line\"><span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">\trtn = (char*) malloc(alen + <span class=\"number\">1</span>); <span class=\"comment\">//new   char[alen+1]; \"\\0\"  </span></div><div class=\"line\">\tmemcpy(rtn, ba, alen);  </div><div class=\"line\">\trtn[alen] = <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">(*env)-&gt;ReleaseByteArrayElements(env, barr, ba, <span class=\"number\">0</span>); <span class=\"comment\">//释放内存  </span></div><div class=\"line\">\t<span class=\"keyword\">return</span> rtn;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Jstring2CStr方法讲解 :</p>\n<ul>\n<li><p>a. 获取Java中String类型的class对象 : 参数 : 上下文环境 env, String类完整路径 ;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jclass clsstring = (*env)-&gt;FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>b.创建Java字符串 : 使用 NewStringUTF 方法;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jstring strencode = (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"GB2312\"</span>);  </div><div class=\"line\">~~~   </div><div class=\"line\">   - c.获取<span class=\"built_in\">String</span>中的getBytes()方法 : 参数介绍 ① env 上下文环境 ② 完整的类路径 ③ 方法名 ④ 方法签名, 方法签名 Ljava/lang/<span class=\"built_in\">String</span>; 代表参数是<span class=\"built_in\">String</span>字符串, [B  中括号表示这是一个数组, B代表byte类型, 返回值是一个byte数组;</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">jmethodID mid = (*env)-&gt;GetMethodID(env, clsstring, <span class=\"string\">\"getBytes\"</span>,  </div><div class=\"line\">    <span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);  </div><div class=\"line\">~~~       </div><div class=\"line\">   - d. 获取数组的长度 :</div><div class=\"line\">~~~ Javascript</div><div class=\"line\">jsize alen = (*env)-&gt;GetArrayLength(env, barr);</div></pre></td></tr></table></figure>\n</li>\n<li><p>e. 获取数组元素 : 获取数组中的所有的元素 , 存放在 jbyte*数组中;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">jbyte* ba = (*env)-&gt;GetByteArrayElements(env, barr, JNI_FALSE);</div></pre></td></tr></table></figure>\n</li>\n<li><p>f.数组拷贝: 将Java数组中所有元素拷贝到C的char*数组中, 注意C语言数组结尾要加一个 ‘\\0’;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">    rtn = (char*) malloc(alen + <span class=\"number\">1</span>); <span class=\"comment\">//new   char[alen+1]; \"\\0\"  </span></div><div class=\"line\">    memcpy(rtn, ba, alen);  </div><div class=\"line\">    rtn[alen] = <span class=\"number\">0</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>g.释放内存 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(*env)-&gt;ReleaseByteArrayElements(env, barr, ba, <span class=\"number\">0</span>); <span class=\"comment\">//释放内存</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-JNI方法命名规则-标准JNI规范\"><a href=\"#5-JNI方法命名规则-标准JNI规范\" class=\"headerlink\" title=\"5.JNI方法命名规则(标准JNI规范)\"></a>5.JNI方法命名规则(标准JNI规范)</h3><ul>\n<li><p><strong>JNI实现的方法与Java中Native方法的映射关系 :</strong></p>\n<p>使用方法名进行映射, 可以使用javah工具进入bin/classes目录下执行命令, 即可生成头文件;</p>\n</li>\n<li><p><strong>JNI方法参数介绍:</strong></p>\n<p>参数① : 第一个参数是JNI接口指针JNIEnv;</p>\n<p>参数② : 如果Native方法是非静态的, 那么第二个参数就是对Java对象的引用, 如果Native方法是静态的, 那么第二个参数就是对Java类的Class对象的引用;</p>\n</li>\n<li><p><strong>JNI方法名规范:</strong>  </p>\n<p>返回值+Java前缀+全路径类名+方法名+参数① JNIEnv+参数② jobject+其它参数;</p>\n<p>注意分隔符 : Java前缀 与 类名 以及类名之间的包名 和 方法名之间 使用 “_“ 进行分割;</p>\n</li>\n<li><p><strong>声明 非静态 方法:</strong></p>\n<p>Native方法 : public int hello (String str, int i);</p>\n<p>JNI方法: jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject obj, jstring str, jint i);</p>\n</li>\n<li><p><strong>声明 静态 方法 :</strong></p>\n<p>Native方法 : public static int hello (String str, int i);</p>\n<p>JNI方法 : jint Java_shuliang_han_Hello_hello(JNIEnv * env, jobject clazz, jstring str, jint i);</p>\n</li>\n<li><p><strong>两种规范 :</strong></p>\n<p>以上是Java的标准JNI规范, 在Android中还有一套自定义的规范, 该规范是Android应用框架层 和 框架层交互使用的JNI规范, 依靠方法注册 映射 Native方法 和 JNI方法;</p>\n</li>\n<li><p><strong>JNIEnv作用 :</strong></p>\n<p>JNIEnv 是一个指针,指向了一组JNI函数, 这些函数可以在jni.h中查询到,通过这些函数可以实现 Java层 与 JNI层的交互 , 通过JNIEnv 调用JNI函数 可以访问java虚拟机, 操作java对象;</p>\n</li>\n<li><p><strong>JNI线程相关性 :</strong></p>\n<p>JNIEnv只在当前的线程有效,JNIEnv不能跨线程传递, 相同的Java线程调用本地方法, 所使用的JNIEnv是相同的, 一个Native方法不能被不同的Java线程调用;</p>\n</li>\n<li><p><strong>JNIEnv结构体系 :</strong></p>\n<p>JNIEnv指针指向一个线程相关的结构,线程相关结构指向一个指针数组,指针数组中的每个元素最终指向一个JNI函数.</p>\n</li>\n</ul>\n<h3 id=\"6-AES加密实现\"><a href=\"#6-AES加密实现\" class=\"headerlink\" title=\"6.AES加密实现\"></a>6.AES加密实现</h3><p>网上有几种AES实现的方式：</p>\n<ul>\n<li><p>1.这个是我现在项目中使用的方法，在Github上有这个工程，这种方式是使用JNI生成一个与设备相关的密码，可以将该密码作为AES的密钥。<a href=\"https://github.com/MasonLiuChn/AndroidUltimateEncrypt\">链接地址</a></p>\n</li>\n<li><p>2.网上还有一种方式是由JNI生成keyValue和iv，Java层使用：<a href=\"http://blog.csdn.net/why_2012_gogo/article/details/40055245\">链接地址</a></p>\n</li>\n</ul>\n<p>主要代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"cwtlib\"</span>);</div><div class=\"line\">\tkeyValue = getKeyValue();</div><div class=\"line\">\tiv = getIv();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != keyValue &amp;&amp;</div><div class=\"line\">\t\t<span class=\"keyword\">null</span> != iv) &#123;</div><div class=\"line\">\t\tKeyGenerator kgen;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            kgen = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);  </div><div class=\"line\">            kgen.init(<span class=\"number\">128</span>, <span class=\"keyword\">new</span> SecureRandom(keyValue));  </div><div class=\"line\">            key = kgen.generateKey();  </div><div class=\"line\">            paramSpec = <span class=\"keyword\">new</span> IvParameterSpec(iv);  </div><div class=\"line\">            ecipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);         </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchPaddingException e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">byte</span>[] getKeyValue();</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">byte</span>[] getIv();</div></pre></td></tr></table></figure>\n<p>  这种方式，在android app程序完全退出后，再进入该app时，之前加密好的字符串<strong>无法解密。</strong></p>\n<ul>\n<li><p>3.还有一种是直接由C或C++实现AES整个算法，直接使用网上代码并不知道靠不靠谱</p>\n<p>所以，我们项目最终使用了第一种方法</p>\n</li>\n</ul>\n<h3 id=\"7-JNI混淆问题\"><a href=\"#7-JNI混淆问题\" class=\"headerlink\" title=\"7.JNI混淆问题\"></a>7.JNI混淆问题</h3><p>  检查下 C/C++代码中没有直接访问Java代码的类或者类的成员变量、类的成员函数。</p>\n<p>  如果有的话，这些就不能混淆</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//保留jni的回调类</span></div><div class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">your</span>.<span class=\"title\">jnicallback</span>.<span class=\"title\">class</span> </span>&#123; *; &#125;</div><div class=\"line\"><span class=\"comment\">//这个不用更改，直接复制就可以</span></div><div class=\"line\">-keepclasseswithmembernames <span class=\"class\"><span class=\"keyword\">class</span> * </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">native</span> &lt;methods&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"8-总结\"><a href=\"#8-总结\" class=\"headerlink\" title=\"8.总结\"></a>8.总结</h3><p>android 实现JNI入门并不难，笔者也刚刚入门，但要深入了解还是需要很长的路要走。</p>\n<h4 id=\"8-1-更新内容，JNI获取publickey实现\"><a href=\"#8-1-更新内容，JNI获取publickey实现\" class=\"headerlink\" title=\"8.1 更新内容，JNI获取publickey实现\"></a>8.1 更新内容，JNI获取publickey实现</h4><p>在本文中最终使用第6点中的第一种方式，但原方法在4.0.4手机上遇到兼容性问题，详情请看我的这篇博客<a href=\"https://agehua.github.io/2016/05/24/JNI-Learning0/\">使用JNI获取publickey实现</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/24/JNI-Learning/\">http://agehua.github.io/2016/05/24/JNI-Learning/</a></p>"},{"layout":"post","title":"android JNI学习② JNI调用过程","keywords":"jni, android源码","description":"android Jni调用过程","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","_content":"\n\n###  1.Android JNI调用过程\n\n#### 1.1 由Android系统加载的JNI\n\nAndroid系统在启动启动过程中，先**启动Kernel创建init进程**，紧接着由init进程fork第一个横穿Java和C/C++的进程，即Zygote进程。Zygote启动过程中会**AndroidRuntime.cpp中的startVm**创建虚拟机，VM创建完成后，紧接着调用startReg完成虚拟机中的JNI方法注册。\n\n<!--more-->\n\n在AndroidRuntime.cpp中：\n\n~~~ C++\nint AndroidRuntime::startReg(JNIEnv* env)\n{\n    //设置线程创建方法为javaCreateThreadEtc\n    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc);\n\n    env->PushLocalFrame(200);\n    //进程NI方法的注册\n    if (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) < 0) {\n        env->PopLocalFrame(NULL);\n        return -1;\n    }\n    env->PopLocalFrame(NULL);\n    return 0;\n}\n~~~\n\n**register_jni_procs(gRegJNI, NELEM(gRegJNI), env)**这行代码的作用就是就是循环调用gRegJNI数组成员所对应的方法。\n\n~~~ C++\nstatic int register_jni_procs(const RegJNIRec array[], size_t count, JNIEnv* env)\n{\n    for (size_t i = 0; i < count; i++) {\n        if (array[i].mProc(env) < 0) {\n            return -1;\n        }\n    }\n    return 0;\n}\n~~~\n\n   gRegJNI数组，有100多个成员变量，定义在AndroidRuntime.cpp：\n\n~~~ C++\nstatic const RegJNIRec gRegJNI[] = {\n    REG_JNI(register_android_os_MessageQueue),\n    REG_JNI(register_android_os_Binder),\n    ...\n};\n~~~\n\n   该数组的每个成员都代表一个类文件的jni映射，其中REG_JNI是一个宏定义，该宏的作用就是调用相应的方法。\n\n比如MessageQueue和Binder方法都是Android系统启动时就已经注册，所以在AndroidRuntime.cpp中可以找到相应的native方法，见**AndroidRuntime.cpp的gRegJNI数组**。这些注册方法命令格式为：\n\n~~~ Java\nregister_[包名]_[类名]\n~~~\n\n##### 示例一：以MessageQueue.java中的nativePollOnce方法为例，\n\n~~~ Java\nprivate native void nativePollOnce(long ptr, int timeoutMillis);\n~~~\n方法名：**android.os.MessageQueue.nativePollOnce()**，而相对应的native层方法名只是将点号替换为下划线，可得**android_os_MessageQueue_nativePollOnce()。**\n\n- 前面说MessageQueue.java所定义的jni注册方法名应该是**register_android_os_MessageQueue**，的确存在于gRegJNI数组，说明这次JNI注册过程是有开机过程完成的。该方法在AndroidRuntime.cpp申明为extern方法：\n\n~~~ C++\nextern int register_android_os_MessageQueue(JNIEnv* env);\n~~~\n\n这些extern方法绝大多数位于/framework/base/core/jni/目录，大多数情况下native文件命名方式：\n\n~~~ C++\n[包名]_[类名].cpp\n[包名]_[类名].h\n~~~\n\n> **Tips**： MessageQueue.java ==> android_os_MessageQueue.cpp\n\n- 打开android_os_MessageQueue.cpp文件，搜索android_os_MessageQueue_nativePollOnce方法，这便找到了目标方法：\n\n~~~ C++\nstatic void android_os_MessageQueue_nativePollOnce(JNIEnv* env, jobject obj,\n        jlong ptr, jint timeoutMillis) {\n    NativeMessageQueue* nativeMessageQueue = reinterpret_cast<NativeMessageQueue*>(ptr);\n    nativeMessageQueue->pollOnce(env, obj, timeoutMillis);\n}\n~~~\n\n##### 示例二：对于native文件命名方式，有时并非[包名]\\_[类名].cpp，比如Binder.java\n\nBinder.java所对应的native文件：**android_util_Binder.cpp**\n\n~~~ Java\npublic static final native int getCallingPid();\n~~~\n\n   根据示例一方式，找到getCallingPid ==> android_os_Binder_getCallingPid()，并且在AndroidRuntime.cpp中的gRegJNI数组中找到register_android_os_Binder。\n\n按实例(一)方式则native文名应该为android_os_Binder.cpp，可是在/framework/base/core/jni/目录下**找不到该文件**，这是例外的情况。其实真正的文件名为**android_util_Binder.cpp**，这就是例外，这一点有些费劲，不明白为何google要如此打破规律的命名。\n\n~~~ C++\nstatic jint android_os_Binder_getCallingPid(JNIEnv* env, jobject clazz)\n{\n    return IPCThreadState::self()->getCallingPid();\n}\n~~~\n\n有人可能好奇，既然如何遇到打破常规的文件命令，怎么办？这个并不难，首先，可以尝试在/framework/base/core/jni/中搜索，对于binder.java，可以直接搜索binder关键字，其他也类似。如果这里也找不到，可以通过grep全局搜索android_os_Binder_getCallingPid这个方法在哪个文件。\n\njni存在的常见目录：\n\n- /framework/base/core/jni/\n- /framework/base/services/core/jni/\n- /framework/base/media/jni/\n\n\n#### 1.2 加载自定义的JNI方法\n前面两种都是在Android系统启动之初，便已经注册过JNI所对应的方法。 那么如果程序自己定义的jni方法，该如何查看jni方法所在位置呢？下面以MediaPlayer.java为例，其包名为android.media：\n\n~~~ Java\npublic class MediaPlayer{\n    static {\n        System.loadLibrary(\"media_jni\");\n        native_init();\n    }\n\n    private static native final void native_init();\n    ...\n}\n~~~\n\n- 通过static静态代码块中System.loadLibrary方法来加载动态库，库名为media_jni, Android平台则会自动扩展成所对应的libmedia_jni.so库\n\n- 接下来便要查看libmedia_jni.so库定义所在文件，一般都是通过Android.mk文件定义**LOCAL_MODULE:= libmedia_jni**，可以采用grep或者mgrep来搜索包含libmedia_jni字段的Android.mk所在路径。\n\n搜索可知，libmedia_jni.so位于/frameworks/base/media/jni/Android.mk。用前面实例(一)中的知识来查看相应的文件和方法名分别为：\n\n~~~ C++\nandroid_media_MediaPlayer.cpp\nandroid_media_MediaPlayer_native_init()\n~~~\n\n- 再然后，你会发现果然在该Android.mk所在目录/frameworks/base/media/jni/中找到android_media_MediaPlayer.cpp文件，并在文件中存在相应的方法：\n\n~~~ C++\nstatic void\nandroid_media_MediaPlayer_native_init(JNIEnv *env)\n{\n    jclass clazz;\n    clazz = env->FindClass(\"android/media/MediaPlayer\");\n    fields.context = env->GetFieldID(clazz, \"mNativeContext\", \"J\");\n    ...\n}\n~~~\n\n> **Tips**：MediaPlayer.java中的native_init方法所对应的native方法位于/frameworks/base/media/jni/目录下的android_media_MediaPlayer.cpp文件中的android_media_MediaPlayer_native_init方法。\n\n**总结：System.loadLibrary()的作用就是调用相应库中的JNI_OnLoad()方法**。\n\n#### 1.3 说说**JNI_OnLoad()**过程。\n\n[-> android_media_MediaPlayer.cpp]\n\n~~~ C++\njint JNI_OnLoad(JavaVM* vm, void* reserved)\n{\n    JNIEnv* env = NULL;\n    if (register_android_media_MediaPlayer(env) < 0) {\n        goto bail;\n    }\n    ...\n}\n~~~\n\n详细说一下**register_android_media_MediaPlayer**\n\n[-> android_media_MediaPlayer.cpp]\n\n~~~ C++\nstatic int register_android_media_MediaPlayer(JNIEnv *env)\n{\n    //【见3.4】\n    return AndroidRuntime::registerNativeMethods(env,\n                \"android/media/MediaPlayer\", gMethods, NELEM(gMethods));\n}\n~~~\n\n虚拟机相关的变量中有两个非常重要的量JavaVM和JNIEnv:\n\n- 1.JavaVM：是指进程虚拟机环境，每个进程有且只有一个JavaVM实例\n- 2.JNIEnv：是指线程上下文环境，每个线程有且只有一个JNIEnv实例\n\n其中gMethods，记录java层和C/C++层方法的一一映射关系。\n\n~~~ C++\nstatic JNINativeMethod gMethods[] = {\n    {\"prepare\",      \"()V\",  (void *)android_media_MediaPlayer_prepare},\n    {\"_start\",       \"()V\",  (void *)android_media_MediaPlayer_start},\n    {\"_stop\",        \"()V\",  (void *)android_media_MediaPlayer_stop},\n    {\"seekTo\",       \"(I)V\", (void *)android_media_MediaPlayer_seekTo},\n    {\"_release\",     \"()V\",  (void *)android_media_MediaPlayer_release},\n    {\"native_init\",  \"()V\",  (void *)android_media_MediaPlayer_native_init},\n    ...\n};\n~~~\n\n这里涉及到结构体**JNINativeMethod**，其定义在jni.h文件：\n\n~~~ C++\ntypedef struct {\n    const char* name;  //Java层native函数名\n    const char* signature; //Java函数签名，记录参数类型和个数，以及返回值类型\n    void*       fnPtr; //Native层对应的函数指针\n} JNINativeMethod;\n~~~\n\n### 2.JNI资源\n\nJNINativeMethod结构体中有一个字段为**signature(签名)**，再介绍signature格式之前需要掌握各种数据类型在Java层、Native层以及签名所采用的签名格式。\n\n#### 2.1 数据类型\n\n- **基本数据类型**\n\n| *Signature格式* |\t*Java* |\t*Native* |\n|:--------:|:-------:|:--------:|\n|B | byte\t|jbyte|\n|C | char\t| jchar|\n|D\t| double\t| jdouble|\n|F\t| float | jfloat|\n|I\t| int |\tjint|\n|S\t| short |\tjshort|\n|J\t| long\t| jlong|\n|Z\t| boolean\t| jboolean|\n|V\t| void\t| void|\n\n- **数组数据类型**\n\n数组简称则是在前面添加**[**：\n\n| *Signature格式* |\t*Java* |\t*Native*|\n|:--------:|:-------:|:--------:|\n|[B |\tbyte[] |\tjbyteArray|\n|[C |\tchar[] |\tjcharArray|\n|[D |\tdouble[] |\tjdoubleArray|\n|[F |\tfloat[] |\tjfloatArray|\n|[I |\tint[] |\tjintArray|\n|[S |\tshort[] |\tjshortArray|\n|[J |\tlong[] |\tjlongArray|\n|[Z |\tboolean[] | jbooleanArray|\n\n- **复杂数据类型**\n\n对象类型简称：**L+classname +**;\n\n| Signature格式 | Java | Native |\n|:--------:|:-------:|:--------:|\n| Ljava/lang/String; | String | jstring |\n| L+classname +;\t| 所有对象|\tjobject|\n|[L+classname +;\t| Object[]\t| jobjectArray|\n| Ljava.lang.Class; |\tClass\t|jclass |\n|Ljava.lang.Throwable;\t| Throwable\t| jthrowable|\n\n- **Signature**\n\n有了前面的铺垫，那么再来通过实例说说函数签名： (输入参数...)返回值参数，这里用到的便是前面介绍的Signature格式。\n\n| Java函数 | 对应的签名|\n|:--------:|:--------:|\n|void foo()\t| ()V|\n|float foo(int i) |\t(I)F|\n|long foo(int[] i)\t| ([I)J|\n|double foo(Class c) |\t(Ljava/lang/Class;)D|\n|boolean foo(int[] i,String s) |\t([ILjava/lang/String;)Z|\n|String foo(int i) |\t(I)Ljava/lang/String;|\n\n#### 2.2 其他\n\n- **(一)垃圾回收**\n对于Java开发人员来说无需关系垃圾回收，完全由虚拟机GC来负责垃圾回收，而对于JNI开发人员，对于内存释放需要谨慎处理，需要的时候申请，使用完记得释放内容，以免发生内存泄露。在JNI提供了三种Reference类型，Local Reference(本地引用)， Global Reference（全局引用）， Weak Global Reference(全局弱引用)。其中Global Reference如果不主动释放，则一直不会释放；对于其他两个类型的引用都是释放的可能性，那是不是意味着不需要手动释放呢？答案是否定的，不管是这三种类型的那种引用，都尽可能在某个内存不再需要时，立即释放，这对系统更为安全可靠，以减少不可预知的性能与稳定性问题。\n\n  另外，ART虚拟机在GC算法有所优化，为了减少内存碎片化问题，在GC之后有可能会移动对象内存的位置，对于Java层程序并没有影响，但是对于JNI程序可要小心了，对于通过指针来直接访问内存对象是，Dalvik能正确运行的程序，ART下未必能正常运行。\n\n- **(二)异常处理**\nJava层出现异常，虚拟机会直接抛出异常，这是需要try..catch或者继续往外throw。但是对于JNI出现异常时，即执行到JNIEnv中某个函数异常时，并不会立即抛出异常来中断程序的执行，还可以继续执行内存之类的清理工作，直到返回到Java层时才会抛出相应的异常。\n\n  另外，Dalvik虚拟机有些情况下JNI函数出错可能返回NULL，但ART虚拟机在出错时更多的是抛出异常。这样导致的问题就可能是在Dalvik版本能正常运行的程序，在ART虚拟机上由于没有正确处理异常而崩溃。\n\n### 3.JNI知识积累\n\nJNI学习积累之一 ---- 常用函数大全\nhttp://blog.csdn.net/qinjuning/article/details/7595104\n\nJNI学习积累之二 ---- 数据类型映射、域描述符说明\nhttp://blog.csdn.net/qinjuning/article/details/7599796\n\nJNI学习积累之三 ---- 操作JNI函数以及复杂对象传递\nhttp://blog.csdn.net/qinjuning/article/details/7607214\n\nJNI 实战全面解析\nhttp://blog.csdn.net/banketree/article/details/40535325\n","source":"_posts/2016-05-24-JNI-Learning0.md","raw":"---\nlayout: post\ntitle: android JNI学习② JNI调用过程\ncategory: accumulation\ntags:\n  - JNI\n  - android source code\nkeywords: jni, android源码\ndescription: android Jni调用过程\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\n---\n\n\n###  1.Android JNI调用过程\n\n#### 1.1 由Android系统加载的JNI\n\nAndroid系统在启动启动过程中，先**启动Kernel创建init进程**，紧接着由init进程fork第一个横穿Java和C/C++的进程，即Zygote进程。Zygote启动过程中会**AndroidRuntime.cpp中的startVm**创建虚拟机，VM创建完成后，紧接着调用startReg完成虚拟机中的JNI方法注册。\n\n<!--more-->\n\n在AndroidRuntime.cpp中：\n\n~~~ C++\nint AndroidRuntime::startReg(JNIEnv* env)\n{\n    //设置线程创建方法为javaCreateThreadEtc\n    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc);\n\n    env->PushLocalFrame(200);\n    //进程NI方法的注册\n    if (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) < 0) {\n        env->PopLocalFrame(NULL);\n        return -1;\n    }\n    env->PopLocalFrame(NULL);\n    return 0;\n}\n~~~\n\n**register_jni_procs(gRegJNI, NELEM(gRegJNI), env)**这行代码的作用就是就是循环调用gRegJNI数组成员所对应的方法。\n\n~~~ C++\nstatic int register_jni_procs(const RegJNIRec array[], size_t count, JNIEnv* env)\n{\n    for (size_t i = 0; i < count; i++) {\n        if (array[i].mProc(env) < 0) {\n            return -1;\n        }\n    }\n    return 0;\n}\n~~~\n\n   gRegJNI数组，有100多个成员变量，定义在AndroidRuntime.cpp：\n\n~~~ C++\nstatic const RegJNIRec gRegJNI[] = {\n    REG_JNI(register_android_os_MessageQueue),\n    REG_JNI(register_android_os_Binder),\n    ...\n};\n~~~\n\n   该数组的每个成员都代表一个类文件的jni映射，其中REG_JNI是一个宏定义，该宏的作用就是调用相应的方法。\n\n比如MessageQueue和Binder方法都是Android系统启动时就已经注册，所以在AndroidRuntime.cpp中可以找到相应的native方法，见**AndroidRuntime.cpp的gRegJNI数组**。这些注册方法命令格式为：\n\n~~~ Java\nregister_[包名]_[类名]\n~~~\n\n##### 示例一：以MessageQueue.java中的nativePollOnce方法为例，\n\n~~~ Java\nprivate native void nativePollOnce(long ptr, int timeoutMillis);\n~~~\n方法名：**android.os.MessageQueue.nativePollOnce()**，而相对应的native层方法名只是将点号替换为下划线，可得**android_os_MessageQueue_nativePollOnce()。**\n\n- 前面说MessageQueue.java所定义的jni注册方法名应该是**register_android_os_MessageQueue**，的确存在于gRegJNI数组，说明这次JNI注册过程是有开机过程完成的。该方法在AndroidRuntime.cpp申明为extern方法：\n\n~~~ C++\nextern int register_android_os_MessageQueue(JNIEnv* env);\n~~~\n\n这些extern方法绝大多数位于/framework/base/core/jni/目录，大多数情况下native文件命名方式：\n\n~~~ C++\n[包名]_[类名].cpp\n[包名]_[类名].h\n~~~\n\n> **Tips**： MessageQueue.java ==> android_os_MessageQueue.cpp\n\n- 打开android_os_MessageQueue.cpp文件，搜索android_os_MessageQueue_nativePollOnce方法，这便找到了目标方法：\n\n~~~ C++\nstatic void android_os_MessageQueue_nativePollOnce(JNIEnv* env, jobject obj,\n        jlong ptr, jint timeoutMillis) {\n    NativeMessageQueue* nativeMessageQueue = reinterpret_cast<NativeMessageQueue*>(ptr);\n    nativeMessageQueue->pollOnce(env, obj, timeoutMillis);\n}\n~~~\n\n##### 示例二：对于native文件命名方式，有时并非[包名]\\_[类名].cpp，比如Binder.java\n\nBinder.java所对应的native文件：**android_util_Binder.cpp**\n\n~~~ Java\npublic static final native int getCallingPid();\n~~~\n\n   根据示例一方式，找到getCallingPid ==> android_os_Binder_getCallingPid()，并且在AndroidRuntime.cpp中的gRegJNI数组中找到register_android_os_Binder。\n\n按实例(一)方式则native文名应该为android_os_Binder.cpp，可是在/framework/base/core/jni/目录下**找不到该文件**，这是例外的情况。其实真正的文件名为**android_util_Binder.cpp**，这就是例外，这一点有些费劲，不明白为何google要如此打破规律的命名。\n\n~~~ C++\nstatic jint android_os_Binder_getCallingPid(JNIEnv* env, jobject clazz)\n{\n    return IPCThreadState::self()->getCallingPid();\n}\n~~~\n\n有人可能好奇，既然如何遇到打破常规的文件命令，怎么办？这个并不难，首先，可以尝试在/framework/base/core/jni/中搜索，对于binder.java，可以直接搜索binder关键字，其他也类似。如果这里也找不到，可以通过grep全局搜索android_os_Binder_getCallingPid这个方法在哪个文件。\n\njni存在的常见目录：\n\n- /framework/base/core/jni/\n- /framework/base/services/core/jni/\n- /framework/base/media/jni/\n\n\n#### 1.2 加载自定义的JNI方法\n前面两种都是在Android系统启动之初，便已经注册过JNI所对应的方法。 那么如果程序自己定义的jni方法，该如何查看jni方法所在位置呢？下面以MediaPlayer.java为例，其包名为android.media：\n\n~~~ Java\npublic class MediaPlayer{\n    static {\n        System.loadLibrary(\"media_jni\");\n        native_init();\n    }\n\n    private static native final void native_init();\n    ...\n}\n~~~\n\n- 通过static静态代码块中System.loadLibrary方法来加载动态库，库名为media_jni, Android平台则会自动扩展成所对应的libmedia_jni.so库\n\n- 接下来便要查看libmedia_jni.so库定义所在文件，一般都是通过Android.mk文件定义**LOCAL_MODULE:= libmedia_jni**，可以采用grep或者mgrep来搜索包含libmedia_jni字段的Android.mk所在路径。\n\n搜索可知，libmedia_jni.so位于/frameworks/base/media/jni/Android.mk。用前面实例(一)中的知识来查看相应的文件和方法名分别为：\n\n~~~ C++\nandroid_media_MediaPlayer.cpp\nandroid_media_MediaPlayer_native_init()\n~~~\n\n- 再然后，你会发现果然在该Android.mk所在目录/frameworks/base/media/jni/中找到android_media_MediaPlayer.cpp文件，并在文件中存在相应的方法：\n\n~~~ C++\nstatic void\nandroid_media_MediaPlayer_native_init(JNIEnv *env)\n{\n    jclass clazz;\n    clazz = env->FindClass(\"android/media/MediaPlayer\");\n    fields.context = env->GetFieldID(clazz, \"mNativeContext\", \"J\");\n    ...\n}\n~~~\n\n> **Tips**：MediaPlayer.java中的native_init方法所对应的native方法位于/frameworks/base/media/jni/目录下的android_media_MediaPlayer.cpp文件中的android_media_MediaPlayer_native_init方法。\n\n**总结：System.loadLibrary()的作用就是调用相应库中的JNI_OnLoad()方法**。\n\n#### 1.3 说说**JNI_OnLoad()**过程。\n\n[-> android_media_MediaPlayer.cpp]\n\n~~~ C++\njint JNI_OnLoad(JavaVM* vm, void* reserved)\n{\n    JNIEnv* env = NULL;\n    if (register_android_media_MediaPlayer(env) < 0) {\n        goto bail;\n    }\n    ...\n}\n~~~\n\n详细说一下**register_android_media_MediaPlayer**\n\n[-> android_media_MediaPlayer.cpp]\n\n~~~ C++\nstatic int register_android_media_MediaPlayer(JNIEnv *env)\n{\n    //【见3.4】\n    return AndroidRuntime::registerNativeMethods(env,\n                \"android/media/MediaPlayer\", gMethods, NELEM(gMethods));\n}\n~~~\n\n虚拟机相关的变量中有两个非常重要的量JavaVM和JNIEnv:\n\n- 1.JavaVM：是指进程虚拟机环境，每个进程有且只有一个JavaVM实例\n- 2.JNIEnv：是指线程上下文环境，每个线程有且只有一个JNIEnv实例\n\n其中gMethods，记录java层和C/C++层方法的一一映射关系。\n\n~~~ C++\nstatic JNINativeMethod gMethods[] = {\n    {\"prepare\",      \"()V\",  (void *)android_media_MediaPlayer_prepare},\n    {\"_start\",       \"()V\",  (void *)android_media_MediaPlayer_start},\n    {\"_stop\",        \"()V\",  (void *)android_media_MediaPlayer_stop},\n    {\"seekTo\",       \"(I)V\", (void *)android_media_MediaPlayer_seekTo},\n    {\"_release\",     \"()V\",  (void *)android_media_MediaPlayer_release},\n    {\"native_init\",  \"()V\",  (void *)android_media_MediaPlayer_native_init},\n    ...\n};\n~~~\n\n这里涉及到结构体**JNINativeMethod**，其定义在jni.h文件：\n\n~~~ C++\ntypedef struct {\n    const char* name;  //Java层native函数名\n    const char* signature; //Java函数签名，记录参数类型和个数，以及返回值类型\n    void*       fnPtr; //Native层对应的函数指针\n} JNINativeMethod;\n~~~\n\n### 2.JNI资源\n\nJNINativeMethod结构体中有一个字段为**signature(签名)**，再介绍signature格式之前需要掌握各种数据类型在Java层、Native层以及签名所采用的签名格式。\n\n#### 2.1 数据类型\n\n- **基本数据类型**\n\n| *Signature格式* |\t*Java* |\t*Native* |\n|:--------:|:-------:|:--------:|\n|B | byte\t|jbyte|\n|C | char\t| jchar|\n|D\t| double\t| jdouble|\n|F\t| float | jfloat|\n|I\t| int |\tjint|\n|S\t| short |\tjshort|\n|J\t| long\t| jlong|\n|Z\t| boolean\t| jboolean|\n|V\t| void\t| void|\n\n- **数组数据类型**\n\n数组简称则是在前面添加**[**：\n\n| *Signature格式* |\t*Java* |\t*Native*|\n|:--------:|:-------:|:--------:|\n|[B |\tbyte[] |\tjbyteArray|\n|[C |\tchar[] |\tjcharArray|\n|[D |\tdouble[] |\tjdoubleArray|\n|[F |\tfloat[] |\tjfloatArray|\n|[I |\tint[] |\tjintArray|\n|[S |\tshort[] |\tjshortArray|\n|[J |\tlong[] |\tjlongArray|\n|[Z |\tboolean[] | jbooleanArray|\n\n- **复杂数据类型**\n\n对象类型简称：**L+classname +**;\n\n| Signature格式 | Java | Native |\n|:--------:|:-------:|:--------:|\n| Ljava/lang/String; | String | jstring |\n| L+classname +;\t| 所有对象|\tjobject|\n|[L+classname +;\t| Object[]\t| jobjectArray|\n| Ljava.lang.Class; |\tClass\t|jclass |\n|Ljava.lang.Throwable;\t| Throwable\t| jthrowable|\n\n- **Signature**\n\n有了前面的铺垫，那么再来通过实例说说函数签名： (输入参数...)返回值参数，这里用到的便是前面介绍的Signature格式。\n\n| Java函数 | 对应的签名|\n|:--------:|:--------:|\n|void foo()\t| ()V|\n|float foo(int i) |\t(I)F|\n|long foo(int[] i)\t| ([I)J|\n|double foo(Class c) |\t(Ljava/lang/Class;)D|\n|boolean foo(int[] i,String s) |\t([ILjava/lang/String;)Z|\n|String foo(int i) |\t(I)Ljava/lang/String;|\n\n#### 2.2 其他\n\n- **(一)垃圾回收**\n对于Java开发人员来说无需关系垃圾回收，完全由虚拟机GC来负责垃圾回收，而对于JNI开发人员，对于内存释放需要谨慎处理，需要的时候申请，使用完记得释放内容，以免发生内存泄露。在JNI提供了三种Reference类型，Local Reference(本地引用)， Global Reference（全局引用）， Weak Global Reference(全局弱引用)。其中Global Reference如果不主动释放，则一直不会释放；对于其他两个类型的引用都是释放的可能性，那是不是意味着不需要手动释放呢？答案是否定的，不管是这三种类型的那种引用，都尽可能在某个内存不再需要时，立即释放，这对系统更为安全可靠，以减少不可预知的性能与稳定性问题。\n\n  另外，ART虚拟机在GC算法有所优化，为了减少内存碎片化问题，在GC之后有可能会移动对象内存的位置，对于Java层程序并没有影响，但是对于JNI程序可要小心了，对于通过指针来直接访问内存对象是，Dalvik能正确运行的程序，ART下未必能正常运行。\n\n- **(二)异常处理**\nJava层出现异常，虚拟机会直接抛出异常，这是需要try..catch或者继续往外throw。但是对于JNI出现异常时，即执行到JNIEnv中某个函数异常时，并不会立即抛出异常来中断程序的执行，还可以继续执行内存之类的清理工作，直到返回到Java层时才会抛出相应的异常。\n\n  另外，Dalvik虚拟机有些情况下JNI函数出错可能返回NULL，但ART虚拟机在出错时更多的是抛出异常。这样导致的问题就可能是在Dalvik版本能正常运行的程序，在ART虚拟机上由于没有正确处理异常而崩溃。\n\n### 3.JNI知识积累\n\nJNI学习积累之一 ---- 常用函数大全\nhttp://blog.csdn.net/qinjuning/article/details/7595104\n\nJNI学习积累之二 ---- 数据类型映射、域描述符说明\nhttp://blog.csdn.net/qinjuning/article/details/7599796\n\nJNI学习积累之三 ---- 操作JNI函数以及复杂对象传递\nhttp://blog.csdn.net/qinjuning/article/details/7607214\n\nJNI 实战全面解析\nhttp://blog.csdn.net/banketree/article/details/40535325\n","slug":"JNI-Learning0","published":1,"date":"2016-05-23T16:00:00.000Z","updated":"2017-11-23T07:05:09.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebx1000sd6ykxpy1fxsm","content":"<h3 id=\"1-Android-JNI调用过程\"><a href=\"#1-Android-JNI调用过程\" class=\"headerlink\" title=\"1.Android JNI调用过程\"></a>1.Android JNI调用过程</h3><h4 id=\"1-1-由Android系统加载的JNI\"><a href=\"#1-1-由Android系统加载的JNI\" class=\"headerlink\" title=\"1.1 由Android系统加载的JNI\"></a>1.1 由Android系统加载的JNI</h4><p>Android系统在启动启动过程中，先<strong>启动Kernel创建init进程</strong>，紧接着由init进程fork第一个横穿Java和C/C++的进程，即Zygote进程。Zygote启动过程中会<strong>AndroidRuntime.cpp中的startVm</strong>创建虚拟机，VM创建完成后，紧接着调用startReg完成虚拟机中的JNI方法注册。</p>\n<a id=\"more\"></a>\n<p>在AndroidRuntime.cpp中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> AndroidRuntime::startReg(JNIEnv* env)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//设置线程创建方法为javaCreateThreadEtc</span></div><div class=\"line\">    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc);</div><div class=\"line\"></div><div class=\"line\">    env-&gt;PushLocalFrame(<span class=\"number\">200</span>);</div><div class=\"line\">    <span class=\"comment\">//进程NI方法的注册</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        env-&gt;PopLocalFrame(<span class=\"literal\">NULL</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    env-&gt;PopLocalFrame(<span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>register_jni_procs(gRegJNI, NELEM(gRegJNI), env)</strong>这行代码的作用就是就是循环调用gRegJNI数组成员所对应的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">register_jni_procs</span><span class=\"params\">(<span class=\"keyword\">const</span> RegJNIRec <span class=\"built_in\">array</span>[], <span class=\"keyword\">size_t</span> count, JNIEnv* env)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i].mProc(env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   gRegJNI数组，有100多个成员变量，定义在AndroidRuntime.cpp：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> RegJNIRec gRegJNI[] = &#123;</div><div class=\"line\">    REG_JNI(register_android_os_MessageQueue),</div><div class=\"line\">    REG_JNI(register_android_os_Binder),</div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>   该数组的每个成员都代表一个类文件的jni映射，其中REG_JNI是一个宏定义，该宏的作用就是调用相应的方法。</p>\n<p>比如MessageQueue和Binder方法都是Android系统启动时就已经注册，所以在AndroidRuntime.cpp中可以找到相应的native方法，见<strong>AndroidRuntime.cpp的gRegJNI数组</strong>。这些注册方法命令格式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">register_[包名]_[类名]</div></pre></td></tr></table></figure>\n<h5 id=\"示例一：以MessageQueue-java中的nativePollOnce方法为例，\"><a href=\"#示例一：以MessageQueue-java中的nativePollOnce方法为例，\" class=\"headerlink\" title=\"示例一：以MessageQueue.java中的nativePollOnce方法为例，\"></a>示例一：以MessageQueue.java中的nativePollOnce方法为例，</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativePollOnce</span><span class=\"params\">(<span class=\"keyword\">long</span> ptr, <span class=\"keyword\">int</span> timeoutMillis)</span></span>;</div></pre></td></tr></table></figure>\n<p>方法名：<strong>android.os.MessageQueue.nativePollOnce()</strong>，而相对应的native层方法名只是将点号替换为下划线，可得<strong>android_os_MessageQueue_nativePollOnce()。</strong></p>\n<ul>\n<li>前面说MessageQueue.java所定义的jni注册方法名应该是<strong>register_android_os_MessageQueue</strong>，的确存在于gRegJNI数组，说明这次JNI注册过程是有开机过程完成的。该方法在AndroidRuntime.cpp申明为extern方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">register_android_os_MessageQueue</span><span class=\"params\">(JNIEnv* env)</span></span>;</div></pre></td></tr></table></figure>\n<p>这些extern方法绝大多数位于/framework/base/core/jni/目录，大多数情况下native文件命名方式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">[包名]_[类名].cpp</div><div class=\"line\">[包名]_[类名].h</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tips</strong>： MessageQueue.java ==&gt; android_os_MessageQueue.cpp</p>\n</blockquote>\n<ul>\n<li>打开android_os_MessageQueue.cpp文件，搜索android_os_MessageQueue_nativePollOnce方法，这便找到了目标方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">android_os_MessageQueue_nativePollOnce</span><span class=\"params\">(JNIEnv* env, jobject obj,</span></span></div><div class=\"line\">        jlong ptr, jint timeoutMillis) &#123;</div><div class=\"line\">    NativeMessageQueue* nativeMessageQueue = <span class=\"keyword\">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</div><div class=\"line\">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"示例二：对于native文件命名方式，有时并非-包名-类名-cpp，比如Binder-java\"><a href=\"#示例二：对于native文件命名方式，有时并非-包名-类名-cpp，比如Binder-java\" class=\"headerlink\" title=\"示例二：对于native文件命名方式，有时并非[包名]_[类名].cpp，比如Binder.java\"></a>示例二：对于native文件命名方式，有时并非[包名]_[类名].cpp，比如Binder.java</h5><p>Binder.java所对应的native文件：<strong>android_util_Binder.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">getCallingPid</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>   根据示例一方式，找到getCallingPid ==&gt; android_os_Binder_getCallingPid()，并且在AndroidRuntime.cpp中的gRegJNI数组中找到register_android_os_Binder。</p>\n<p>按实例(一)方式则native文名应该为android_os_Binder.cpp，可是在/framework/base/core/jni/目录下<strong>找不到该文件</strong>，这是例外的情况。其实真正的文件名为<strong>android_util_Binder.cpp</strong>，这就是例外，这一点有些费劲，不明白为何google要如此打破规律的命名。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">android_os_Binder_getCallingPid</span><span class=\"params\">(JNIEnv* env, jobject clazz)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> IPCThreadState::self()-&gt;getCallingPid();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有人可能好奇，既然如何遇到打破常规的文件命令，怎么办？这个并不难，首先，可以尝试在/framework/base/core/jni/中搜索，对于binder.java，可以直接搜索binder关键字，其他也类似。如果这里也找不到，可以通过grep全局搜索android_os_Binder_getCallingPid这个方法在哪个文件。</p>\n<p>jni存在的常见目录：</p>\n<ul>\n<li>/framework/base/core/jni/</li>\n<li>/framework/base/services/core/jni/</li>\n<li>/framework/base/media/jni/</li>\n</ul>\n<h4 id=\"1-2-加载自定义的JNI方法\"><a href=\"#1-2-加载自定义的JNI方法\" class=\"headerlink\" title=\"1.2 加载自定义的JNI方法\"></a>1.2 加载自定义的JNI方法</h4><p>前面两种都是在Android系统启动之初，便已经注册过JNI所对应的方法。 那么如果程序自己定义的jni方法，该如何查看jni方法所在位置呢？下面以MediaPlayer.java为例，其包名为android.media：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaPlayer</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"media_jni\"</span>);</div><div class=\"line\">        native_init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">native_init</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>通过static静态代码块中System.loadLibrary方法来加载动态库，库名为media_jni, Android平台则会自动扩展成所对应的libmedia_jni.so库</p>\n</li>\n<li><p>接下来便要查看libmedia_jni.so库定义所在文件，一般都是通过Android.mk文件定义<strong>LOCAL_MODULE:= libmedia_jni</strong>，可以采用grep或者mgrep来搜索包含libmedia_jni字段的Android.mk所在路径。</p>\n</li>\n</ul>\n<p>搜索可知，libmedia_jni.so位于/frameworks/base/media/jni/Android.mk。用前面实例(一)中的知识来查看相应的文件和方法名分别为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">android_media_MediaPlayer.<span class=\"function\">cpp</span></div><div class=\"line\"><span class=\"title\">android_media_MediaPlayer_native_init</span><span class=\"params\">()</span></div></pre></td></tr></table></figure>\n<ul>\n<li>再然后，你会发现果然在该Android.mk所在目录/frameworks/base/media/jni/中找到android_media_MediaPlayer.cpp文件，并在文件中存在相应的方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">android_media_MediaPlayer_native_init</span><span class=\"params\">(JNIEnv *env)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    jclass clazz;</div><div class=\"line\">    clazz = env-&gt;FindClass(<span class=\"string\">\"android/media/MediaPlayer\"</span>);</div><div class=\"line\">    fields.context = env-&gt;GetFieldID(clazz, <span class=\"string\">\"mNativeContext\"</span>, <span class=\"string\">\"J\"</span>);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tips</strong>：MediaPlayer.java中的native_init方法所对应的native方法位于/frameworks/base/media/jni/目录下的android_media_MediaPlayer.cpp文件中的android_media_MediaPlayer_native_init方法。</p>\n</blockquote>\n<p><strong>总结：System.loadLibrary()的作用就是调用相应库中的JNI_OnLoad()方法</strong>。</p>\n<h4 id=\"1-3-说说JNI-OnLoad-过程。\"><a href=\"#1-3-说说JNI-OnLoad-过程。\" class=\"headerlink\" title=\"1.3 说说JNI_OnLoad()过程。\"></a>1.3 说说<strong>JNI_OnLoad()</strong>过程。</h4><p>[-&gt; android_media_MediaPlayer.cpp]</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">JNI_OnLoad</span><span class=\"params\">(JavaVM* vm, <span class=\"keyword\">void</span>* reserved)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    JNIEnv* env = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (register_android_media_MediaPlayer(env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细说一下<strong>register_android_media_MediaPlayer</strong></p>\n<p>[-&gt; android_media_MediaPlayer.cpp]</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">register_android_media_MediaPlayer</span><span class=\"params\">(JNIEnv *env)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//【见3.4】</span></div><div class=\"line\">    <span class=\"keyword\">return</span> AndroidRuntime::registerNativeMethods(env,</div><div class=\"line\">                <span class=\"string\">\"android/media/MediaPlayer\"</span>, gMethods, NELEM(gMethods));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虚拟机相关的变量中有两个非常重要的量JavaVM和JNIEnv:</p>\n<ul>\n<li>1.JavaVM：是指进程虚拟机环境，每个进程有且只有一个JavaVM实例</li>\n<li>2.JNIEnv：是指线程上下文环境，每个线程有且只有一个JNIEnv实例</li>\n</ul>\n<p>其中gMethods，记录java层和C/C++层方法的一一映射关系。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod gMethods[] = &#123;</div><div class=\"line\">    &#123;<span class=\"string\">\"prepare\"</span>,      <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_prepare&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_start\"</span>,       <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_start&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_stop\"</span>,        <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_stop&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"seekTo\"</span>,       <span class=\"string\">\"(I)V\"</span>, (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_seekTo&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_release\"</span>,     <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_release&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"native_init\"</span>,  <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_native_init&#125;,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里涉及到结构体<strong>JNINativeMethod</strong>，其定义在jni.h文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name;  <span class=\"comment\">//Java层native函数名</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* signature; <span class=\"comment\">//Java函数签名，记录参数类型和个数，以及返回值类型</span></div><div class=\"line\">    <span class=\"keyword\">void</span>*       fnPtr; <span class=\"comment\">//Native层对应的函数指针</span></div><div class=\"line\">&#125; JNINativeMethod;</div></pre></td></tr></table></figure>\n<h3 id=\"2-JNI资源\"><a href=\"#2-JNI资源\" class=\"headerlink\" title=\"2.JNI资源\"></a>2.JNI资源</h3><p>JNINativeMethod结构体中有一个字段为<strong>signature(签名)</strong>，再介绍signature格式之前需要掌握各种数据类型在Java层、Native层以及签名所采用的签名格式。</p>\n<h4 id=\"2-1-数据类型\"><a href=\"#2-1-数据类型\" class=\"headerlink\" title=\"2.1 数据类型\"></a>2.1 数据类型</h4><ul>\n<li><strong>基本数据类型</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Signature格式</em></th>\n<th style=\"text-align:center\"><em>Java</em></th>\n<th style=\"text-align:center\"><em>Native</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">void</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>数组数据类型</strong></li>\n</ul>\n<p>数组简称则是在前面添加<strong>[</strong>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Signature格式</em></th>\n<th style=\"text-align:center\"><em>Java</em></th>\n<th style=\"text-align:center\"><em>Native</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[B</td>\n<td style=\"text-align:center\">byte[]</td>\n<td style=\"text-align:center\">jbyteArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[C</td>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[D</td>\n<td style=\"text-align:center\">double[]</td>\n<td style=\"text-align:center\">jdoubleArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[F</td>\n<td style=\"text-align:center\">float[]</td>\n<td style=\"text-align:center\">jfloatArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[I</td>\n<td style=\"text-align:center\">int[]</td>\n<td style=\"text-align:center\">jintArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[S</td>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[J</td>\n<td style=\"text-align:center\">long[]</td>\n<td style=\"text-align:center\">jlongArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[Z</td>\n<td style=\"text-align:center\">boolean[]</td>\n<td style=\"text-align:center\">jbooleanArray</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>复杂数据类型</strong></li>\n</ul>\n<p>对象类型简称：<strong>L+classname +</strong>;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Signature格式</th>\n<th style=\"text-align:center\">Java</th>\n<th style=\"text-align:center\">Native</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ljava/lang/String;</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">jstring</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L+classname +;</td>\n<td style=\"text-align:center\">所有对象</td>\n<td style=\"text-align:center\">jobject</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[L+classname +;</td>\n<td style=\"text-align:center\">Object[]</td>\n<td style=\"text-align:center\">jobjectArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ljava.lang.Class;</td>\n<td style=\"text-align:center\">Class</td>\n<td style=\"text-align:center\">jclass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ljava.lang.Throwable;</td>\n<td style=\"text-align:center\">Throwable</td>\n<td style=\"text-align:center\">jthrowable</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Signature</strong></li>\n</ul>\n<p>有了前面的铺垫，那么再来通过实例说说函数签名： (输入参数…)返回值参数，这里用到的便是前面介绍的Signature格式。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java函数</th>\n<th style=\"text-align:center\">对应的签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">void foo()</td>\n<td style=\"text-align:center\">()V</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float foo(int i)</td>\n<td style=\"text-align:center\">(I)F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long foo(int[] i)</td>\n<td style=\"text-align:center\">([I)J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double foo(Class c)</td>\n<td style=\"text-align:center\">(Ljava/lang/Class;)D</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean foo(int[] i,String s)</td>\n<td style=\"text-align:center\">([ILjava/lang/String;)Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String foo(int i)</td>\n<td style=\"text-align:center\">(I)Ljava/lang/String;</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-2-其他\"><a href=\"#2-2-其他\" class=\"headerlink\" title=\"2.2 其他\"></a>2.2 其他</h4><ul>\n<li><p><strong>(一)垃圾回收</strong><br>对于Java开发人员来说无需关系垃圾回收，完全由虚拟机GC来负责垃圾回收，而对于JNI开发人员，对于内存释放需要谨慎处理，需要的时候申请，使用完记得释放内容，以免发生内存泄露。在JNI提供了三种Reference类型，Local Reference(本地引用)， Global Reference（全局引用）， Weak Global Reference(全局弱引用)。其中Global Reference如果不主动释放，则一直不会释放；对于其他两个类型的引用都是释放的可能性，那是不是意味着不需要手动释放呢？答案是否定的，不管是这三种类型的那种引用，都尽可能在某个内存不再需要时，立即释放，这对系统更为安全可靠，以减少不可预知的性能与稳定性问题。</p>\n<p>另外，ART虚拟机在GC算法有所优化，为了减少内存碎片化问题，在GC之后有可能会移动对象内存的位置，对于Java层程序并没有影响，但是对于JNI程序可要小心了，对于通过指针来直接访问内存对象是，Dalvik能正确运行的程序，ART下未必能正常运行。</p>\n</li>\n<li><p><strong>(二)异常处理</strong><br>Java层出现异常，虚拟机会直接抛出异常，这是需要try..catch或者继续往外throw。但是对于JNI出现异常时，即执行到JNIEnv中某个函数异常时，并不会立即抛出异常来中断程序的执行，还可以继续执行内存之类的清理工作，直到返回到Java层时才会抛出相应的异常。</p>\n<p>另外，Dalvik虚拟机有些情况下JNI函数出错可能返回NULL，但ART虚拟机在出错时更多的是抛出异常。这样导致的问题就可能是在Dalvik版本能正常运行的程序，在ART虚拟机上由于没有正确处理异常而崩溃。</p>\n</li>\n</ul>\n<h3 id=\"3-JNI知识积累\"><a href=\"#3-JNI知识积累\" class=\"headerlink\" title=\"3.JNI知识积累\"></a>3.JNI知识积累</h3><p>JNI学习积累之一 —- 常用函数大全<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7595104\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qinjuning/article/details/7595104</a></p>\n<p>JNI学习积累之二 —- 数据类型映射、域描述符说明<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7599796\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qinjuning/article/details/7599796</a></p>\n<p>JNI学习积累之三 —- 操作JNI函数以及复杂对象传递<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7607214\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qinjuning/article/details/7607214</a></p>\n<p>JNI 实战全面解析<br><a href=\"http://blog.csdn.net/banketree/article/details/40535325\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/banketree/article/details/40535325</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/24/JNI-Learning0/\">http://agehua.github.io/2016/05/24/JNI-Learning0/</a></p>\n","readingTime":{"text":"5 min read","minutes":4.01,"time":240600,"words":802},"excerpt":"<h3 id=\"1-Android-JNI调用过程\"><a href=\"#1-Android-JNI调用过程\" class=\"headerlink\" title=\"1.Android JNI调用过程\"></a>1.Android JNI调用过程</h3><h4 id=\"1-1-由Android系统加载的JNI\"><a href=\"#1-1-由Android系统加载的JNI\" class=\"headerlink\" title=\"1.1 由Android系统加载的JNI\"></a>1.1 由Android系统加载的JNI</h4><p>Android系统在启动启动过程中，先<strong>启动Kernel创建init进程</strong>，紧接着由init进程fork第一个横穿Java和C/C++的进程，即Zygote进程。Zygote启动过程中会<strong>AndroidRuntime.cpp中的startVm</strong>创建虚拟机，VM创建完成后，紧接着调用startReg完成虚拟机中的JNI方法注册。</p>","more":"<p>在AndroidRuntime.cpp中：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> AndroidRuntime::startReg(JNIEnv* env)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//设置线程创建方法为javaCreateThreadEtc</span></div><div class=\"line\">    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc);</div><div class=\"line\"></div><div class=\"line\">    env-&gt;PushLocalFrame(<span class=\"number\">200</span>);</div><div class=\"line\">    <span class=\"comment\">//进程NI方法的注册</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        env-&gt;PopLocalFrame(<span class=\"literal\">NULL</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    env-&gt;PopLocalFrame(<span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>register_jni_procs(gRegJNI, NELEM(gRegJNI), env)</strong>这行代码的作用就是就是循环调用gRegJNI数组成员所对应的方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">register_jni_procs</span><span class=\"params\">(<span class=\"keyword\">const</span> RegJNIRec <span class=\"built_in\">array</span>[], <span class=\"keyword\">size_t</span> count, JNIEnv* env)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i].mProc(env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   gRegJNI数组，有100多个成员变量，定义在AndroidRuntime.cpp：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> RegJNIRec gRegJNI[] = &#123;</div><div class=\"line\">    REG_JNI(register_android_os_MessageQueue),</div><div class=\"line\">    REG_JNI(register_android_os_Binder),</div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>   该数组的每个成员都代表一个类文件的jni映射，其中REG_JNI是一个宏定义，该宏的作用就是调用相应的方法。</p>\n<p>比如MessageQueue和Binder方法都是Android系统启动时就已经注册，所以在AndroidRuntime.cpp中可以找到相应的native方法，见<strong>AndroidRuntime.cpp的gRegJNI数组</strong>。这些注册方法命令格式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">register_[包名]_[类名]</div></pre></td></tr></table></figure>\n<h5 id=\"示例一：以MessageQueue-java中的nativePollOnce方法为例，\"><a href=\"#示例一：以MessageQueue-java中的nativePollOnce方法为例，\" class=\"headerlink\" title=\"示例一：以MessageQueue.java中的nativePollOnce方法为例，\"></a>示例一：以MessageQueue.java中的nativePollOnce方法为例，</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativePollOnce</span><span class=\"params\">(<span class=\"keyword\">long</span> ptr, <span class=\"keyword\">int</span> timeoutMillis)</span></span>;</div></pre></td></tr></table></figure>\n<p>方法名：<strong>android.os.MessageQueue.nativePollOnce()</strong>，而相对应的native层方法名只是将点号替换为下划线，可得<strong>android_os_MessageQueue_nativePollOnce()。</strong></p>\n<ul>\n<li>前面说MessageQueue.java所定义的jni注册方法名应该是<strong>register_android_os_MessageQueue</strong>，的确存在于gRegJNI数组，说明这次JNI注册过程是有开机过程完成的。该方法在AndroidRuntime.cpp申明为extern方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">register_android_os_MessageQueue</span><span class=\"params\">(JNIEnv* env)</span></span>;</div></pre></td></tr></table></figure>\n<p>这些extern方法绝大多数位于/framework/base/core/jni/目录，大多数情况下native文件命名方式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">[包名]_[类名].cpp</div><div class=\"line\">[包名]_[类名].h</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tips</strong>： MessageQueue.java ==&gt; android_os_MessageQueue.cpp</p>\n</blockquote>\n<ul>\n<li>打开android_os_MessageQueue.cpp文件，搜索android_os_MessageQueue_nativePollOnce方法，这便找到了目标方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">android_os_MessageQueue_nativePollOnce</span><span class=\"params\">(JNIEnv* env, jobject obj,</div><div class=\"line\">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</div><div class=\"line\">    NativeMessageQueue* nativeMessageQueue = <span class=\"keyword\">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</div><div class=\"line\">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"示例二：对于native文件命名方式，有时并非-包名-类名-cpp，比如Binder-java\"><a href=\"#示例二：对于native文件命名方式，有时并非-包名-类名-cpp，比如Binder-java\" class=\"headerlink\" title=\"示例二：对于native文件命名方式，有时并非[包名]_[类名].cpp，比如Binder.java\"></a>示例二：对于native文件命名方式，有时并非[包名]_[类名].cpp，比如Binder.java</h5><p>Binder.java所对应的native文件：<strong>android_util_Binder.cpp</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">getCallingPid</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>   根据示例一方式，找到getCallingPid ==&gt; android_os_Binder_getCallingPid()，并且在AndroidRuntime.cpp中的gRegJNI数组中找到register_android_os_Binder。</p>\n<p>按实例(一)方式则native文名应该为android_os_Binder.cpp，可是在/framework/base/core/jni/目录下<strong>找不到该文件</strong>，这是例外的情况。其实真正的文件名为<strong>android_util_Binder.cpp</strong>，这就是例外，这一点有些费劲，不明白为何google要如此打破规律的命名。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">android_os_Binder_getCallingPid</span><span class=\"params\">(JNIEnv* env, jobject clazz)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> IPCThreadState::self()-&gt;getCallingPid();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有人可能好奇，既然如何遇到打破常规的文件命令，怎么办？这个并不难，首先，可以尝试在/framework/base/core/jni/中搜索，对于binder.java，可以直接搜索binder关键字，其他也类似。如果这里也找不到，可以通过grep全局搜索android_os_Binder_getCallingPid这个方法在哪个文件。</p>\n<p>jni存在的常见目录：</p>\n<ul>\n<li>/framework/base/core/jni/</li>\n<li>/framework/base/services/core/jni/</li>\n<li>/framework/base/media/jni/</li>\n</ul>\n<h4 id=\"1-2-加载自定义的JNI方法\"><a href=\"#1-2-加载自定义的JNI方法\" class=\"headerlink\" title=\"1.2 加载自定义的JNI方法\"></a>1.2 加载自定义的JNI方法</h4><p>前面两种都是在Android系统启动之初，便已经注册过JNI所对应的方法。 那么如果程序自己定义的jni方法，该如何查看jni方法所在位置呢？下面以MediaPlayer.java为例，其包名为android.media：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaPlayer</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"media_jni\"</span>);</div><div class=\"line\">        native_init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">native_init</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>通过static静态代码块中System.loadLibrary方法来加载动态库，库名为media_jni, Android平台则会自动扩展成所对应的libmedia_jni.so库</p>\n</li>\n<li><p>接下来便要查看libmedia_jni.so库定义所在文件，一般都是通过Android.mk文件定义<strong>LOCAL_MODULE:= libmedia_jni</strong>，可以采用grep或者mgrep来搜索包含libmedia_jni字段的Android.mk所在路径。</p>\n</li>\n</ul>\n<p>搜索可知，libmedia_jni.so位于/frameworks/base/media/jni/Android.mk。用前面实例(一)中的知识来查看相应的文件和方法名分别为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">android_media_MediaPlayer.<span class=\"function\">cpp</div><div class=\"line\"><span class=\"title\">android_media_MediaPlayer_native_init</span><span class=\"params\">()</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>再然后，你会发现果然在该Android.mk所在目录/frameworks/base/media/jni/中找到android_media_MediaPlayer.cpp文件，并在文件中存在相应的方法：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></div><div class=\"line\"><span class=\"title\">android_media_MediaPlayer_native_init</span><span class=\"params\">(JNIEnv *env)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    jclass clazz;</div><div class=\"line\">    clazz = env-&gt;FindClass(<span class=\"string\">\"android/media/MediaPlayer\"</span>);</div><div class=\"line\">    fields.context = env-&gt;GetFieldID(clazz, <span class=\"string\">\"mNativeContext\"</span>, <span class=\"string\">\"J\"</span>);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Tips</strong>：MediaPlayer.java中的native_init方法所对应的native方法位于/frameworks/base/media/jni/目录下的android_media_MediaPlayer.cpp文件中的android_media_MediaPlayer_native_init方法。</p>\n</blockquote>\n<p><strong>总结：System.loadLibrary()的作用就是调用相应库中的JNI_OnLoad()方法</strong>。</p>\n<h4 id=\"1-3-说说JNI-OnLoad-过程。\"><a href=\"#1-3-说说JNI-OnLoad-过程。\" class=\"headerlink\" title=\"1.3 说说JNI_OnLoad()过程。\"></a>1.3 说说<strong>JNI_OnLoad()</strong>过程。</h4><p>[-&gt; android_media_MediaPlayer.cpp]</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">JNI_OnLoad</span><span class=\"params\">(JavaVM* vm, <span class=\"keyword\">void</span>* reserved)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    JNIEnv* env = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (register_android_media_MediaPlayer(env) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细说一下<strong>register_android_media_MediaPlayer</strong></p>\n<p>[-&gt; android_media_MediaPlayer.cpp]</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">register_android_media_MediaPlayer</span><span class=\"params\">(JNIEnv *env)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//【见3.4】</span></div><div class=\"line\">    <span class=\"keyword\">return</span> AndroidRuntime::registerNativeMethods(env,</div><div class=\"line\">                <span class=\"string\">\"android/media/MediaPlayer\"</span>, gMethods, NELEM(gMethods));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虚拟机相关的变量中有两个非常重要的量JavaVM和JNIEnv:</p>\n<ul>\n<li>1.JavaVM：是指进程虚拟机环境，每个进程有且只有一个JavaVM实例</li>\n<li>2.JNIEnv：是指线程上下文环境，每个线程有且只有一个JNIEnv实例</li>\n</ul>\n<p>其中gMethods，记录java层和C/C++层方法的一一映射关系。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod gMethods[] = &#123;</div><div class=\"line\">    &#123;<span class=\"string\">\"prepare\"</span>,      <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_prepare&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_start\"</span>,       <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_start&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_stop\"</span>,        <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_stop&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"seekTo\"</span>,       <span class=\"string\">\"(I)V\"</span>, (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_seekTo&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"_release\"</span>,     <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_release&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"native_init\"</span>,  <span class=\"string\">\"()V\"</span>,  (<span class=\"keyword\">void</span> *)android_media_MediaPlayer_native_init&#125;,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里涉及到结构体<strong>JNINativeMethod</strong>，其定义在jni.h文件：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name;  <span class=\"comment\">//Java层native函数名</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* signature; <span class=\"comment\">//Java函数签名，记录参数类型和个数，以及返回值类型</span></div><div class=\"line\">    <span class=\"keyword\">void</span>*       fnPtr; <span class=\"comment\">//Native层对应的函数指针</span></div><div class=\"line\">&#125; JNINativeMethod;</div></pre></td></tr></table></figure>\n<h3 id=\"2-JNI资源\"><a href=\"#2-JNI资源\" class=\"headerlink\" title=\"2.JNI资源\"></a>2.JNI资源</h3><p>JNINativeMethod结构体中有一个字段为<strong>signature(签名)</strong>，再介绍signature格式之前需要掌握各种数据类型在Java层、Native层以及签名所采用的签名格式。</p>\n<h4 id=\"2-1-数据类型\"><a href=\"#2-1-数据类型\" class=\"headerlink\" title=\"2.1 数据类型\"></a>2.1 数据类型</h4><ul>\n<li><strong>基本数据类型</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Signature格式</em></th>\n<th style=\"text-align:center\"><em>Java</em></th>\n<th style=\"text-align:center\"><em>Native</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">void</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>数组数据类型</strong></li>\n</ul>\n<p>数组简称则是在前面添加<strong>[</strong>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Signature格式</em></th>\n<th style=\"text-align:center\"><em>Java</em></th>\n<th style=\"text-align:center\"><em>Native</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[B</td>\n<td style=\"text-align:center\">byte[]</td>\n<td style=\"text-align:center\">jbyteArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[C</td>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[D</td>\n<td style=\"text-align:center\">double[]</td>\n<td style=\"text-align:center\">jdoubleArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[F</td>\n<td style=\"text-align:center\">float[]</td>\n<td style=\"text-align:center\">jfloatArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[I</td>\n<td style=\"text-align:center\">int[]</td>\n<td style=\"text-align:center\">jintArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[S</td>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[J</td>\n<td style=\"text-align:center\">long[]</td>\n<td style=\"text-align:center\">jlongArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[Z</td>\n<td style=\"text-align:center\">boolean[]</td>\n<td style=\"text-align:center\">jbooleanArray</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>复杂数据类型</strong></li>\n</ul>\n<p>对象类型简称：<strong>L+classname +</strong>;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Signature格式</th>\n<th style=\"text-align:center\">Java</th>\n<th style=\"text-align:center\">Native</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ljava/lang/String;</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">jstring</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L+classname +;</td>\n<td style=\"text-align:center\">所有对象</td>\n<td style=\"text-align:center\">jobject</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[L+classname +;</td>\n<td style=\"text-align:center\">Object[]</td>\n<td style=\"text-align:center\">jobjectArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ljava.lang.Class;</td>\n<td style=\"text-align:center\">Class</td>\n<td style=\"text-align:center\">jclass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ljava.lang.Throwable;</td>\n<td style=\"text-align:center\">Throwable</td>\n<td style=\"text-align:center\">jthrowable</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Signature</strong></li>\n</ul>\n<p>有了前面的铺垫，那么再来通过实例说说函数签名： (输入参数…)返回值参数，这里用到的便是前面介绍的Signature格式。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java函数</th>\n<th style=\"text-align:center\">对应的签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">void foo()</td>\n<td style=\"text-align:center\">()V</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float foo(int i)</td>\n<td style=\"text-align:center\">(I)F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long foo(int[] i)</td>\n<td style=\"text-align:center\">([I)J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double foo(Class c)</td>\n<td style=\"text-align:center\">(Ljava/lang/Class;)D</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean foo(int[] i,String s)</td>\n<td style=\"text-align:center\">([ILjava/lang/String;)Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">String foo(int i)</td>\n<td style=\"text-align:center\">(I)Ljava/lang/String;</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-2-其他\"><a href=\"#2-2-其他\" class=\"headerlink\" title=\"2.2 其他\"></a>2.2 其他</h4><ul>\n<li><p><strong>(一)垃圾回收</strong><br>对于Java开发人员来说无需关系垃圾回收，完全由虚拟机GC来负责垃圾回收，而对于JNI开发人员，对于内存释放需要谨慎处理，需要的时候申请，使用完记得释放内容，以免发生内存泄露。在JNI提供了三种Reference类型，Local Reference(本地引用)， Global Reference（全局引用）， Weak Global Reference(全局弱引用)。其中Global Reference如果不主动释放，则一直不会释放；对于其他两个类型的引用都是释放的可能性，那是不是意味着不需要手动释放呢？答案是否定的，不管是这三种类型的那种引用，都尽可能在某个内存不再需要时，立即释放，这对系统更为安全可靠，以减少不可预知的性能与稳定性问题。</p>\n<p>另外，ART虚拟机在GC算法有所优化，为了减少内存碎片化问题，在GC之后有可能会移动对象内存的位置，对于Java层程序并没有影响，但是对于JNI程序可要小心了，对于通过指针来直接访问内存对象是，Dalvik能正确运行的程序，ART下未必能正常运行。</p>\n</li>\n<li><p><strong>(二)异常处理</strong><br>Java层出现异常，虚拟机会直接抛出异常，这是需要try..catch或者继续往外throw。但是对于JNI出现异常时，即执行到JNIEnv中某个函数异常时，并不会立即抛出异常来中断程序的执行，还可以继续执行内存之类的清理工作，直到返回到Java层时才会抛出相应的异常。</p>\n<p>另外，Dalvik虚拟机有些情况下JNI函数出错可能返回NULL，但ART虚拟机在出错时更多的是抛出异常。这样导致的问题就可能是在Dalvik版本能正常运行的程序，在ART虚拟机上由于没有正确处理异常而崩溃。</p>\n</li>\n</ul>\n<h3 id=\"3-JNI知识积累\"><a href=\"#3-JNI知识积累\" class=\"headerlink\" title=\"3.JNI知识积累\"></a>3.JNI知识积累</h3><p>JNI学习积累之一 —- 常用函数大全<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7595104\">http://blog.csdn.net/qinjuning/article/details/7595104</a></p>\n<p>JNI学习积累之二 —- 数据类型映射、域描述符说明<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7599796\">http://blog.csdn.net/qinjuning/article/details/7599796</a></p>\n<p>JNI学习积累之三 —- 操作JNI函数以及复杂对象传递<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7607214\">http://blog.csdn.net/qinjuning/article/details/7607214</a></p>\n<p>JNI 实战全面解析<br><a href=\"http://blog.csdn.net/banketree/article/details/40535325\">http://blog.csdn.net/banketree/article/details/40535325</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/24/JNI-Learning0/\">http://agehua.github.io/2016/05/24/JNI-Learning0/</a></p>"},{"layout":"post","title":"Gson解析使用总结","keywords":"gson, json","description":"Gson解析使用总结","banner":"http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg","_content":"\n\n### 1.Gson解析总结，就两种情况\nGson 是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个JSON字符串转成一个Java对象，或者将Java对象转成一个JSON字符串。\n使用Gson来解析时，总结一下，就两句话：\n\n- 1.**遇到“{”字符，表示单个对象，直接用XXXBean.class类去映射**\n- 2.**遇到“[”字符，表示对象数组，要用XXXBean[].class或list<XXXBean>去映射**\n\n<!--more-->\n\n### 2.第一种情况，举例\n\n- json字符串是：\n\n~~~ javascript\n{\n    \"items\": [\n        {\n            \"key\": \"H60-L12__1464938219953__346589_483\",\n            \"hash\": \"Fip_In4BhB5syoZ28W3l_eb6rBDU\",\n            \"fsize\": 348120,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14649382507765902\n        },\n        {\n            \"key\": \"H60-L12__1465352164202__397253_2946\",\n            \"hash\": \"Fs-UwiosdckN9kVY01GrOYC-b7a9\",\n            \"fsize\": 938413,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14653521712332144\n        },\n        {\n            \"key\": \"H60-L12__1465352548728__322577_4114\",\n            \"hash\": \"Frga_QiMJVb9caiuwMlJABCsu1rc\",\n            \"fsize\": 506921,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14653525989907168\n        }\n    ]\n}\n~~~\n\n\n- 分析\n\n最开始是一个“{”字符，所以需要用gson.fromJson(jsonstring, XXXBean.class)来解析。同时，XXXBean中只有一个字段items。\nitems里面是一个“[”字符，表示items里面是数组，可以用list去映射。\n\n\n- 解析时，\n\n最后对应的Gson对象就是：\n\n~~~ Java\npublic class XXXBean {\n\n    public List<XXXItem> items;\n\n    public List<XXXItem> getItems() {\n        return items;\n    }\n\n    public void setItems(List<XXXItem> items) {\n        this.items = items;\n    }\n\n    public static class XXXItem {\n        private String key;\n        private String hash;\n        private String fsize;\n        private String mimeType;\n        private String putTime;\n\n        ...\n\t}\n}\n\nGson gson = new Gson();\nList<XXXBean.XXXItem> list = gson.fromJson(jsonstring,XXXBean.class).getItems();\n~~~\n\n\n### 3.第二种情况，举例\n\njson字符串以“[”开头。\n\n例如，json==[{\"id\":1,\"name\":\"李坤\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"},{\"id\":2,\"name\":\"曹贵生\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"},{\"id\":3,\"name\":\"柳波\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"}]\n\n- 解析时，需要使用list来接收。\n\n~~~ Java\n List<Student> retList = gson.fromJson(jsonstring2,  new TypeToken<List<Student>>(){}.getType());\n~~~\n\n\n- 也可以这样\n\n~~~ Java\nStudent[] students= gson.fromJson(jsonstring2,new Student[].class);\n~~~\n\n- 对应list为什么要使用TypeToken？\n\n\tTypeToken是Gson提供的，来实现对泛型的支持\n","source":"_posts/2016-06-08-gson-summary.md","raw":"---\nlayout: post\ntitle: Gson解析使用总结\ncategory: accumulation\ntags:\n  - gson \nkeywords: gson, json\ndescription: Gson解析使用总结\nbanner: http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg\n---\n\n\n### 1.Gson解析总结，就两种情况\nGson 是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个JSON字符串转成一个Java对象，或者将Java对象转成一个JSON字符串。\n使用Gson来解析时，总结一下，就两句话：\n\n- 1.**遇到“{”字符，表示单个对象，直接用XXXBean.class类去映射**\n- 2.**遇到“[”字符，表示对象数组，要用XXXBean[].class或list<XXXBean>去映射**\n\n<!--more-->\n\n### 2.第一种情况，举例\n\n- json字符串是：\n\n~~~ javascript\n{\n    \"items\": [\n        {\n            \"key\": \"H60-L12__1464938219953__346589_483\",\n            \"hash\": \"Fip_In4BhB5syoZ28W3l_eb6rBDU\",\n            \"fsize\": 348120,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14649382507765902\n        },\n        {\n            \"key\": \"H60-L12__1465352164202__397253_2946\",\n            \"hash\": \"Fs-UwiosdckN9kVY01GrOYC-b7a9\",\n            \"fsize\": 938413,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14653521712332144\n        },\n        {\n            \"key\": \"H60-L12__1465352548728__322577_4114\",\n            \"hash\": \"Frga_QiMJVb9caiuwMlJABCsu1rc\",\n            \"fsize\": 506921,\n            \"mimeType\": \"image/jpeg\",\n            \"putTime\": 14653525989907168\n        }\n    ]\n}\n~~~\n\n\n- 分析\n\n最开始是一个“{”字符，所以需要用gson.fromJson(jsonstring, XXXBean.class)来解析。同时，XXXBean中只有一个字段items。\nitems里面是一个“[”字符，表示items里面是数组，可以用list去映射。\n\n\n- 解析时，\n\n最后对应的Gson对象就是：\n\n~~~ Java\npublic class XXXBean {\n\n    public List<XXXItem> items;\n\n    public List<XXXItem> getItems() {\n        return items;\n    }\n\n    public void setItems(List<XXXItem> items) {\n        this.items = items;\n    }\n\n    public static class XXXItem {\n        private String key;\n        private String hash;\n        private String fsize;\n        private String mimeType;\n        private String putTime;\n\n        ...\n\t}\n}\n\nGson gson = new Gson();\nList<XXXBean.XXXItem> list = gson.fromJson(jsonstring,XXXBean.class).getItems();\n~~~\n\n\n### 3.第二种情况，举例\n\njson字符串以“[”开头。\n\n例如，json==[{\"id\":1,\"name\":\"李坤\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"},{\"id\":2,\"name\":\"曹贵生\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"},{\"id\":3,\"name\":\"柳波\",\"birthDay\":\"Jun 22, 2012 8:28:52 AM\"}]\n\n- 解析时，需要使用list来接收。\n\n~~~ Java\n List<Student> retList = gson.fromJson(jsonstring2,  new TypeToken<List<Student>>(){}.getType());\n~~~\n\n\n- 也可以这样\n\n~~~ Java\nStudent[] students= gson.fromJson(jsonstring2,new Student[].class);\n~~~\n\n- 对应list为什么要使用TypeToken？\n\n\tTypeToken是Gson提供的，来实现对泛型的支持\n","slug":"gson-summary","published":1,"date":"2016-06-07T16:00:00.000Z","updated":"2017-11-23T07:05:38.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebx8000vd6yk88dz51lz","content":"<h3 id=\"1-Gson解析总结，就两种情况\"><a href=\"#1-Gson解析总结，就两种情况\" class=\"headerlink\" title=\"1.Gson解析总结，就两种情况\"></a>1.Gson解析总结，就两种情况</h3><p>Gson 是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个JSON字符串转成一个Java对象，或者将Java对象转成一个JSON字符串。<br>使用Gson来解析时，总结一下，就两句话：</p>\n<ul>\n<li>1.<strong>遇到“{”字符，表示单个对象，直接用XXXBean.class类去映射</strong></li>\n<li>2.<strong>遇到“[”字符，表示对象数组，要用XXXBean[].class或list<xxxbean>去映射</xxxbean></strong></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"2-第一种情况，举例\"><a href=\"#2-第一种情况，举例\" class=\"headerlink\" title=\"2.第一种情况，举例\"></a>2.第一种情况，举例</h3><ul>\n<li>json字符串是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"items\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1464938219953__346589_483\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Fip_In4BhB5syoZ28W3l_eb6rBDU\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">348120</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14649382507765902</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1465352164202__397253_2946\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Fs-UwiosdckN9kVY01GrOYC-b7a9\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">938413</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14653521712332144</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1465352548728__322577_4114\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Frga_QiMJVb9caiuwMlJABCsu1rc\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">506921</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14653525989907168</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>分析</li>\n</ul>\n<p>最开始是一个“{”字符，所以需要用gson.fromJson(jsonstring, XXXBean.class)来解析。同时，XXXBean中只有一个字段items。<br>items里面是一个“[”字符，表示items里面是数组，可以用list去映射。</p>\n<ul>\n<li>解析时，</li>\n</ul>\n<p>最后对应的Gson对象就是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXBean</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;XXXItem&gt; items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;XXXItem&gt; <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(List&lt;XXXItem&gt; items)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXItem</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String key;</div><div class=\"line\">        <span class=\"keyword\">private</span> String hash;</div><div class=\"line\">        <span class=\"keyword\">private</span> String fsize;</div><div class=\"line\">        <span class=\"keyword\">private</span> String mimeType;</div><div class=\"line\">        <span class=\"keyword\">private</span> String putTime;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">List&lt;XXXBean.XXXItem&gt; list = gson.fromJson(jsonstring,XXXBean.class).getItems();</div></pre></td></tr></table></figure>\n<h3 id=\"3-第二种情况，举例\"><a href=\"#3-第二种情况，举例\" class=\"headerlink\" title=\"3.第二种情况，举例\"></a>3.第二种情况，举例</h3><p>json字符串以“[”开头。</p>\n<p>例如，json==[{“id”:1,”name”:”李坤”,”birthDay”:”Jun 22, 2012 8:28:52 AM”},{“id”:2,”name”:”曹贵生”,”birthDay”:”Jun 22, 2012 8:28:52 AM”},{“id”:3,”name”:”柳波”,”birthDay”:”Jun 22, 2012 8:28:52 AM”}]</p>\n<ul>\n<li>解析时，需要使用list来接收。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">List&lt;Student&gt; retList = gson.fromJson(jsonstring2,  <span class=\"keyword\">new</span> TypeToken&lt;List&lt;Student&gt;&gt;()&#123;&#125;.getType());</div></pre></td></tr></table></figure>\n<ul>\n<li>也可以这样</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Student[] students= gson.fromJson(jsonstring2,<span class=\"keyword\">new</span> Student[].class);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>对应list为什么要使用TypeToken？</p>\n<p>  TypeToken是Gson提供的，来实现对泛型的支持</p>\n</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/06/08/gson-summary/\">http://agehua.github.io/2016/06/08/gson-summary/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.44,"time":86399.99999999999,"words":288},"excerpt":"<h3 id=\"1-Gson解析总结，就两种情况\"><a href=\"#1-Gson解析总结，就两种情况\" class=\"headerlink\" title=\"1.Gson解析总结，就两种情况\"></a>1.Gson解析总结，就两种情况</h3><p>Gson 是Google提供的用来在Java对象和JSON数据之间进行映射的Java类库。可以将一个JSON字符串转成一个Java对象，或者将Java对象转成一个JSON字符串。<br>使用Gson来解析时，总结一下，就两句话：</p>\n<ul>\n<li>1.<strong>遇到“{”字符，表示单个对象，直接用XXXBean.class类去映射</strong></li>\n<li>2.<strong>遇到“[”字符，表示对象数组，要用XXXBean[].class或list<XXXBean>去映射</strong></li>\n</ul>","more":"<h3 id=\"2-第一种情况，举例\"><a href=\"#2-第一种情况，举例\" class=\"headerlink\" title=\"2.第一种情况，举例\"></a>2.第一种情况，举例</h3><ul>\n<li>json字符串是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"items\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1464938219953__346589_483\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Fip_In4BhB5syoZ28W3l_eb6rBDU\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">348120</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14649382507765902</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1465352164202__397253_2946\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Fs-UwiosdckN9kVY01GrOYC-b7a9\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">938413</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14653521712332144</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"string\">\"H60-L12__1465352548728__322577_4114\"</span>,</div><div class=\"line\">            <span class=\"string\">\"hash\"</span>: <span class=\"string\">\"Frga_QiMJVb9caiuwMlJABCsu1rc\"</span>,</div><div class=\"line\">            <span class=\"string\">\"fsize\"</span>: <span class=\"number\">506921</span>,</div><div class=\"line\">            <span class=\"string\">\"mimeType\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">            <span class=\"string\">\"putTime\"</span>: <span class=\"number\">14653525989907168</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>分析</li>\n</ul>\n<p>最开始是一个“{”字符，所以需要用gson.fromJson(jsonstring, XXXBean.class)来解析。同时，XXXBean中只有一个字段items。<br>items里面是一个“[”字符，表示items里面是数组，可以用list去映射。</p>\n<ul>\n<li>解析时，</li>\n</ul>\n<p>最后对应的Gson对象就是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXBean</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;XXXItem&gt; items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;XXXItem&gt; <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(List&lt;XXXItem&gt; items)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXItem</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String key;</div><div class=\"line\">        <span class=\"keyword\">private</span> String hash;</div><div class=\"line\">        <span class=\"keyword\">private</span> String fsize;</div><div class=\"line\">        <span class=\"keyword\">private</span> String mimeType;</div><div class=\"line\">        <span class=\"keyword\">private</span> String putTime;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">List&lt;XXXBean.XXXItem&gt; list = gson.fromJson(jsonstring,XXXBean.class).getItems();</div></pre></td></tr></table></figure>\n<h3 id=\"3-第二种情况，举例\"><a href=\"#3-第二种情况，举例\" class=\"headerlink\" title=\"3.第二种情况，举例\"></a>3.第二种情况，举例</h3><p>json字符串以“[”开头。</p>\n<p>例如，json==[{“id”:1,”name”:”李坤”,”birthDay”:”Jun 22, 2012 8:28:52 AM”},{“id”:2,”name”:”曹贵生”,”birthDay”:”Jun 22, 2012 8:28:52 AM”},{“id”:3,”name”:”柳波”,”birthDay”:”Jun 22, 2012 8:28:52 AM”}]</p>\n<ul>\n<li>解析时，需要使用list来接收。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">List&lt;Student&gt; retList = gson.fromJson(jsonstring2,  <span class=\"keyword\">new</span> TypeToken&lt;List&lt;Student&gt;&gt;()&#123;&#125;.getType());</div></pre></td></tr></table></figure>\n<ul>\n<li>也可以这样</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Student[] students= gson.fromJson(jsonstring2,<span class=\"keyword\">new</span> Student[].class);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>对应list为什么要使用TypeToken？</p>\n<p>  TypeToken是Gson提供的，来实现对泛型的支持</p>\n</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/06/08/gson-summary/\">http://agehua.github.io/2016/06/08/gson-summary/</a></p>"},{"layout":"post","title":"七牛android使用总结","keywords":"qiniu, android","description":"七牛android使用总结，包括list，delete，upload，download","banner":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","_content":"\n\n\n### 1.在android上实现对七牛空间操作\n\n  在android上实现对七牛空间的各种操作，包括list，delete，upload，download。支持私有空间\n\n  注意：**官方不建议开发者把AccessKey和SecretKey放在前端的java文件里**，最好还是有一台应用服务器\n\n  如果只是想尝试一下，好吧:)  代码中都有说明，直接上代码\n\n<!--more-->\n\n### 2.代码\n\n一共有三个类：\n\n- 工具类：\n\n~~~ Java\n package com.qiniu.ui.utils;\n\n import android.graphics.Bitmap;\n import android.graphics.Bitmap.CompressFormat;\n import android.os.Environment;\n import android.util.Log;\n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n import com.loopj.android.http.RequestParams;\n import com.qiniu.android.storage.UpProgressHandler;\n import com.qiniu.android.storage.UploadManager;\n import com.qiniu.android.storage.UploadOptions;\n import com.qiniu.android.utils.UrlSafeBase64;\n import com.qiniu.api.auth.AuthException;\n import com.qiniu.api.auth.digest.Mac;\n import com.qiniu.api.rs.PutPolicy;\n import com.qiniu.ui.SHA;\n import com.qiniu.ui.contains.QiNiuConfig;\n import org.apache.http.Header;\n import org.json.JSONException;\n import java.io.BufferedOutputStream;\n import java.io.FileOutputStream;\n import java.util.Random;\n import static com.qiniu.ui.SHA.hMacSHA1Encrypt;\n\n\n /**\n  * @date 2016年5月26日 上午11:00:43\n  * @author lijixin\n  * @web https://agehua.github.io\n  * @Description: 七牛云图片操作\n  */\n public class QiniuUitls {\n\n \tprivate static final String fileName = \"temp.jpg\";\n \tprivate static final String tempJpeg = Environment.getExternalStorageDirectory().getPath() + \"/\" + fileName;\n\n \tprivate static int maxWidth = 720;\n \tprivate static int maxHeight = 1080;\n\n \tpublic interface QiniuUploadUitlsListener {\n \t\tvoid onSucess(String fileUrl);\n \t\tvoid onError(int errorCode, String msg);\n \t\tvoid onProgress(int progress);\n \t}\n\n \tpublic interface QiniuRequestListener {\n \t\tvoid onSucceed(byte[] bytes);\n \t\tvoid onFailed(byte[] bytes);\n \t}\n\n \t/**\n \t * 将bitmap转换成jpeg，控制图片大小不大于720*1080，可以指定图片压缩质量\n \t * @param bitmap\n \t * @param filePath\n \t * @param quality\n \t * @return\n \t */\n \tpublic static boolean saveBitmapToJpegFile(Bitmap bitmap, String filePath, int quality) {\n \t\ttry {\n \t\t\tFileOutputStream fileOutStr = new FileOutputStream(filePath);\n \t\t\tBufferedOutputStream bufOutStr = new BufferedOutputStream(fileOutStr);\n \t\t\tresizeBitmap(bitmap).compress(CompressFormat.JPEG, quality, bufOutStr);\n \t\t\tbufOutStr.flush();\n \t\t\tbufOutStr.close();\n \t\t} catch (Exception exception) {\n \t\t\treturn false;\n \t\t}\n \t\treturn true;\n \t}\n\n \t/**\n \t * 缩小图片\n \t *\n \t * @param bitmap\n \t * @return\n \t */\n \tpublic static Bitmap resizeBitmap(Bitmap bitmap) {\n \t\tif (bitmap != null) {\n \t\t\tint width = bitmap.getWidth();\n \t\t\tint height = bitmap.getHeight();\n \t\t\t//宽度大于720\n \t\t\tif (width > maxWidth) {\n \t\t\t\t//按宽度等比例压缩图片\n \t\t\t\tint pWidth = maxWidth;\n \t\t\t\tint pHeight = maxWidth * height / width;\n \t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, false);\n \t\t\t\tbitmap.recycle();\n \t\t\t\treturn result;\n \t\t\t}\n \t\t\tif (height > maxHeight) {\n \t\t\t\t//按高度等比例缩小图片\n \t\t\t\tint pHeight = maxHeight;\n \t\t\t\tint pWidth = maxHeight * width / height;\n \t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, false);\n \t\t\t\tbitmap.recycle();\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn bitmap;\n \t}\n\n \tpublic static void uploadImage(Bitmap bitmap, QiniuUploadUitlsListener listener) {\n \t\tsaveBitmapToJpegFile(bitmap, tempJpeg,100);\n \t\tuploadImage(tempJpeg, listener);\n \t}\n\n \t/**\n \t * 上传图片选择jpg格式，七牛图片api目前支持对jpg格式进行指定图片质量请求\n \t * @param filePath\n \t * @param listener\n \t */\n \tpublic static void uploadImage(String filePath, final QiniuUploadUitlsListener listener) {\n \t\tfinal String fileUrlUUID = getFileUrlUUID();\n \t\tString token = getToken();\n \t\tif (token == null) {\n \t\t\tif (listener != null) {\n \t\t\t\tlistener.onError(-1, \"token is null\");\n \t\t\t}\n \t\t\treturn;\n \t\t}\n \t\tUploadManager uploadManager = new UploadManager();\n \t\tuploadManager.put(filePath, fileUrlUUID, token, (key, info, response) -> {\n \t\t\tSystem.out.println(\"debug:info = \" + info + \",response = \" + response);\n \t\t\tif (info != null && info.statusCode == 200) {// 上传成功\n \t\t\t\tString fileRealUrl = getRealUrl(fileUrlUUID);\n \t\t\t\tSystem.out.println(\"debug:fileRealUrl = \" + fileRealUrl);\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onSucess(fileRealUrl);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onError(info.statusCode, info.error);\n \t\t\t\t}\n \t\t\t}\n \t\t}, new UploadOptions(null, null, false, new UpProgressHandler() {\n \t\t\tpublic void progress(String key, double percent) {\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onProgress((int) (percent * 100));\n \t\t\t\t}\n \t\t\t}\n \t\t}, null));\n \t}\n\n \t/**\n \t * 生成远程文件路径（全局唯一）\n \t * <p>格式类似：\t H60-L12__1464851303930__156750_1884</p>\n \t * @return\n \t */\n \tprivate static String getFileUrlUUID() {\n \t\tString filePath = android.os.Build.MODEL + \"__\" + System.currentTimeMillis() + \"__\" + (new Random().nextInt(500000))\n \t\t\t\t+ \"_\" + (new Random().nextInt(10000));\n \t\treturn filePath.replace(\".\", \"0\");\n \t}\n\n \tprivate static String getRealUrl(String fileUrlUUID) {\n \t\tString filePath = \"http://\" + QiNiuConfig.QINIU_BUCKNAME + \".qiniudn.com/\" + fileUrlUUID;\n \t\treturn filePath;\n \t}\n\n \t/**\n \t * 获取token 本地生成\n \t *\n \t * @return\n \t */\n \tprivate static String getToken() {\n \t\tMac mac = new Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);\n \t\tPutPolicy putPolicy = new PutPolicy(QiNiuConfig.QINIU_BUCKNAME);\n \t\tputPolicy.returnBody = \"{\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)}\";\n \t\ttry {\n \t\t\tString uptoken = putPolicy.token(mac);\n \t\t\tSystem.out.println(\"debug:uptoken = \" + uptoken);\n \t\t\treturn uptoken;\n \t\t} catch (AuthException e) {\n \t\t\te.printStackTrace();\n \t\t} catch (JSONException e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn null;\n \t}\n\n \t/**\n \t * 根据host和文件名，生成file的url下载地址，支持私有空间\n \t * @param domain host：七牛的私有空间域名\n \t * @param imgKey file key：空间里的文件名\n \t * @return url下载地址\n \t */\n \tpublic static String downloadFile(String domain,String imgKey){\n \t\t//密钥配置\n \t\t//构造私有空间的需要生成的下载的链接\n //\t\tString domain =\"http://example.xxx.clouddn.com/\";\n //\t\tString path =\"H60-L12__1464917382714__36888_5255\";\n \t\tStringBuilder sb =new StringBuilder();\n \t\t//加上过期时间戳字段\n \t\tString url = sb.append(domain).append(imgKey).append(\"?e=1478365261\").toString();\n \t\tLog.e(\"encodedEntryURI\",url);\n\n \t\tbyte[] sign =null;\n \t\ttry {\n \t\t\tsign = SHA.hMacSHA1Encrypt(url,QiNiuConfig.QINIU_SK);\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\tsb.append(\"&token=\").append(QiNiuConfig.QINIU_AK).append(\":\").append(encodedSign);\n \t\tLog.e(\"download token\",sb.toString());\n \t\treturn sb.toString();\n \t}\n\n \t/**\n \t * 列出空间中指定格式的文件\n \t * @param bucket 空间名\n \t * @param prefix 要指定的格式（前缀）\n \t * @param listener\n \t * @return\n \t */\n \tpublic static void listFile(String bucket, String prefix,final QiniuRequestListener listener){\n\n \t\ttry{\n \t\t\tStringBuilder sb = new StringBuilder();\n\n \t\t\tString entryUrl = sb.append(\"bucket=\").append(bucket)\n \t\t\t\t\t.append(\"&prefix=\").append(prefix).toString();\n \t\t\tString host = \"http://rsf.qbox.me\";\n \t\t\tString path = \"/list?\" +entryUrl;\n \t\t\tString url = host+path;\n \t\t\tLog.e(\"AAAAAAA\", url);\n \t\t\tbyte[] sign = SHA.hMacSHA1Encrypt(path+\"\\n\", QiNiuConfig.QINIU_SK);\n \t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\t\tString authorization = QiNiuConfig.QINIU_AK + ':' + encodedSign;\n \t\t\tAsyncHttpClient client = new AsyncHttpClient();\n \t\t\tclient.addHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n \t\t\tclient.addHeader(\"Authorization\", \"QBox \"+authorization);\n \t\t\tRequestParams params = new RequestParams();\n \t\t\tclient.post(url, params, new AsyncHttpResponseHandler() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onSuccess(int i, Header[] headers, byte[] bytes) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onSucceed(bytes);\n \t\t\t\t}\n\n \t\t\t\t@Override\n \t\t\t\tpublic void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onFailed(bytes);\n \t\t\t\t}\n \t\t\t});\n \t\t}catch(Exception e){\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn ;\n \t}\n\n \t/**\n \t * 删除空间中的文件\n \t * @param bucket 删除文件的空间\n \t * @param fileName 删除的文件\n \t * */\n \tpublic static boolean deleteFile(String bucket,String fileName,final QiniuRequestListener listener){\n \t\ttry{\n \t\t\tString entryUrl = bucket+\":\"+fileName;\n \t\t\tString encodedEntryURI = UrlSafeBase64.encodeToString(entryUrl.getBytes());\n \t\t\tString host = \"http://rs.qiniu.com\";\n \t\t\tString path = \"/delete/\"+encodedEntryURI;\n \t\t\tString url = host+path;\n \t\t\tLog.e(\"AAAAAAA\", url);\n \t\t\tbyte[] sign = hMacSHA1Encrypt(path+\"\\n\", QiNiuConfig.QINIU_SK);\n \t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\t\tString authorization = QiNiuConfig.QINIU_AK + ':' + encodedSign;\n\n \t\t\tAsyncHttpClient client = new AsyncHttpClient();\n \t\t\tclient.addHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n \t\t\tclient.addHeader(\"Authorization\", \"QBox \"+authorization);\n \t\t\tRequestParams params = new RequestParams();\n \t\t\tclient.post(url, params, new AsyncHttpResponseHandler() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onSuccess(int i, Header[] headers, byte[] bytes) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onSucceed(bytes);\n \t\t\t\t}\n\n \t\t\t\t@Override\n \t\t\t\tpublic void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onFailed(bytes);\n \t\t\t\t\tif (null!=bytes) {\n \t\t\t\t\t\tString s = new String(bytes);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t});\n\n \t\t}catch(Exception e){\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn false;\n \t}\n\n }\n~~~\n\n- HMAC-SHA1签名加密类\n\n使用下面方法生成对应七牛资源管理里用到的[管理凭证](http://developer.qiniu.com/article/developer/security/access-token.html)\n\n~~~ Java\n/**\n * 对外提供HMAC-SHA1签名方法\n * @author agehua\n *\n */\npublic class SHA {\n\n    private static final String MAC_NAME = \"HmacSHA1\";\n    private static final String ENCODING = \"UTF-8\";\n\n    /**\n     *\n     * 使用 HMAC-SHA1 签名方法对对encryptText进行签名\n     * @param encryptText 被签名的字符串\n     * @param encryptKey 密钥\n     * @return\n     * @throws Exception\n     */\n    public static byte[] hMacSHA1Encrypt(String encryptText, String encryptKey)\n            throws Exception {\n        byte[] data = encryptKey.getBytes(ENCODING);\n        // 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称\n        SecretKey secretKey = new SecretKeySpec(data, MAC_NAME);\n        // 生成一个指定 Mac 算法 的 Mac 对象\n        Mac mac = Mac.getInstance(MAC_NAME);\n        // 用给定密钥初始化 Mac 对象\n        mac.init(secretKey);\n        byte[] text = encryptText.getBytes(ENCODING);\n        // 完成 Mac 操作\n        return mac.doFinal(text);\n    }\n}  \n~~~  \n\n- 还有一个Config文件\n\n~~~ Java\npublic final class QiNiuConfig {\n\tpublic static final String token = getToken();\n\tpublic static final String QINIU_AK = \"Your_AccessKey\";\n\tpublic static final String QINIU_SK = \"Your_SecretKey\";\n\tpublic static final String QINIU_BUCKNAME = \"你的私有空间\";\n\n\tpublic static String getToken() {\n\t\tMac mac = new Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);\n\t\tPutPolicy putPolicy = new PutPolicy(QiNiuConfig.QINIU_BUCKNAME);\n\t\tputPolicy.returnBody = \"{\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)}\";\n\t\ttry {\n\t\t\tString uptoken = putPolicy.token(mac);\n\t\t\tSystem.out.println(\"debug:uptoken = \" + uptoken);\n\t\t\treturn uptoken;\n\t\t} catch (AuthException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n}\n\n~~~\n\n [点击在Gist上查看上面这些代码](https://gist.github.com/agehua/f73bcb98af2c0c44a4c49c7c7b7e6bda)\n\n最后，如果有问题欢迎讨论，我的邮箱简介里有 :)  \n","source":"_posts/2016-05-28-qiniu-android-summary.md","raw":"---\nlayout: post\ntitle: 七牛android使用总结\ncategory: technology\ntags:\n  - ANDROID\n  - qiniu\nkeywords: qiniu, android\ndescription: 七牛android使用总结，包括list，delete，upload，download\nbanner: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\n\n---\n\n\n\n### 1.在android上实现对七牛空间操作\n\n  在android上实现对七牛空间的各种操作，包括list，delete，upload，download。支持私有空间\n\n  注意：**官方不建议开发者把AccessKey和SecretKey放在前端的java文件里**，最好还是有一台应用服务器\n\n  如果只是想尝试一下，好吧:)  代码中都有说明，直接上代码\n\n<!--more-->\n\n### 2.代码\n\n一共有三个类：\n\n- 工具类：\n\n~~~ Java\n package com.qiniu.ui.utils;\n\n import android.graphics.Bitmap;\n import android.graphics.Bitmap.CompressFormat;\n import android.os.Environment;\n import android.util.Log;\n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n import com.loopj.android.http.RequestParams;\n import com.qiniu.android.storage.UpProgressHandler;\n import com.qiniu.android.storage.UploadManager;\n import com.qiniu.android.storage.UploadOptions;\n import com.qiniu.android.utils.UrlSafeBase64;\n import com.qiniu.api.auth.AuthException;\n import com.qiniu.api.auth.digest.Mac;\n import com.qiniu.api.rs.PutPolicy;\n import com.qiniu.ui.SHA;\n import com.qiniu.ui.contains.QiNiuConfig;\n import org.apache.http.Header;\n import org.json.JSONException;\n import java.io.BufferedOutputStream;\n import java.io.FileOutputStream;\n import java.util.Random;\n import static com.qiniu.ui.SHA.hMacSHA1Encrypt;\n\n\n /**\n  * @date 2016年5月26日 上午11:00:43\n  * @author lijixin\n  * @web https://agehua.github.io\n  * @Description: 七牛云图片操作\n  */\n public class QiniuUitls {\n\n \tprivate static final String fileName = \"temp.jpg\";\n \tprivate static final String tempJpeg = Environment.getExternalStorageDirectory().getPath() + \"/\" + fileName;\n\n \tprivate static int maxWidth = 720;\n \tprivate static int maxHeight = 1080;\n\n \tpublic interface QiniuUploadUitlsListener {\n \t\tvoid onSucess(String fileUrl);\n \t\tvoid onError(int errorCode, String msg);\n \t\tvoid onProgress(int progress);\n \t}\n\n \tpublic interface QiniuRequestListener {\n \t\tvoid onSucceed(byte[] bytes);\n \t\tvoid onFailed(byte[] bytes);\n \t}\n\n \t/**\n \t * 将bitmap转换成jpeg，控制图片大小不大于720*1080，可以指定图片压缩质量\n \t * @param bitmap\n \t * @param filePath\n \t * @param quality\n \t * @return\n \t */\n \tpublic static boolean saveBitmapToJpegFile(Bitmap bitmap, String filePath, int quality) {\n \t\ttry {\n \t\t\tFileOutputStream fileOutStr = new FileOutputStream(filePath);\n \t\t\tBufferedOutputStream bufOutStr = new BufferedOutputStream(fileOutStr);\n \t\t\tresizeBitmap(bitmap).compress(CompressFormat.JPEG, quality, bufOutStr);\n \t\t\tbufOutStr.flush();\n \t\t\tbufOutStr.close();\n \t\t} catch (Exception exception) {\n \t\t\treturn false;\n \t\t}\n \t\treturn true;\n \t}\n\n \t/**\n \t * 缩小图片\n \t *\n \t * @param bitmap\n \t * @return\n \t */\n \tpublic static Bitmap resizeBitmap(Bitmap bitmap) {\n \t\tif (bitmap != null) {\n \t\t\tint width = bitmap.getWidth();\n \t\t\tint height = bitmap.getHeight();\n \t\t\t//宽度大于720\n \t\t\tif (width > maxWidth) {\n \t\t\t\t//按宽度等比例压缩图片\n \t\t\t\tint pWidth = maxWidth;\n \t\t\t\tint pHeight = maxWidth * height / width;\n \t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, false);\n \t\t\t\tbitmap.recycle();\n \t\t\t\treturn result;\n \t\t\t}\n \t\t\tif (height > maxHeight) {\n \t\t\t\t//按高度等比例缩小图片\n \t\t\t\tint pHeight = maxHeight;\n \t\t\t\tint pWidth = maxHeight * width / height;\n \t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, false);\n \t\t\t\tbitmap.recycle();\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn bitmap;\n \t}\n\n \tpublic static void uploadImage(Bitmap bitmap, QiniuUploadUitlsListener listener) {\n \t\tsaveBitmapToJpegFile(bitmap, tempJpeg,100);\n \t\tuploadImage(tempJpeg, listener);\n \t}\n\n \t/**\n \t * 上传图片选择jpg格式，七牛图片api目前支持对jpg格式进行指定图片质量请求\n \t * @param filePath\n \t * @param listener\n \t */\n \tpublic static void uploadImage(String filePath, final QiniuUploadUitlsListener listener) {\n \t\tfinal String fileUrlUUID = getFileUrlUUID();\n \t\tString token = getToken();\n \t\tif (token == null) {\n \t\t\tif (listener != null) {\n \t\t\t\tlistener.onError(-1, \"token is null\");\n \t\t\t}\n \t\t\treturn;\n \t\t}\n \t\tUploadManager uploadManager = new UploadManager();\n \t\tuploadManager.put(filePath, fileUrlUUID, token, (key, info, response) -> {\n \t\t\tSystem.out.println(\"debug:info = \" + info + \",response = \" + response);\n \t\t\tif (info != null && info.statusCode == 200) {// 上传成功\n \t\t\t\tString fileRealUrl = getRealUrl(fileUrlUUID);\n \t\t\t\tSystem.out.println(\"debug:fileRealUrl = \" + fileRealUrl);\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onSucess(fileRealUrl);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onError(info.statusCode, info.error);\n \t\t\t\t}\n \t\t\t}\n \t\t}, new UploadOptions(null, null, false, new UpProgressHandler() {\n \t\t\tpublic void progress(String key, double percent) {\n \t\t\t\tif (listener != null) {\n \t\t\t\t\tlistener.onProgress((int) (percent * 100));\n \t\t\t\t}\n \t\t\t}\n \t\t}, null));\n \t}\n\n \t/**\n \t * 生成远程文件路径（全局唯一）\n \t * <p>格式类似：\t H60-L12__1464851303930__156750_1884</p>\n \t * @return\n \t */\n \tprivate static String getFileUrlUUID() {\n \t\tString filePath = android.os.Build.MODEL + \"__\" + System.currentTimeMillis() + \"__\" + (new Random().nextInt(500000))\n \t\t\t\t+ \"_\" + (new Random().nextInt(10000));\n \t\treturn filePath.replace(\".\", \"0\");\n \t}\n\n \tprivate static String getRealUrl(String fileUrlUUID) {\n \t\tString filePath = \"http://\" + QiNiuConfig.QINIU_BUCKNAME + \".qiniudn.com/\" + fileUrlUUID;\n \t\treturn filePath;\n \t}\n\n \t/**\n \t * 获取token 本地生成\n \t *\n \t * @return\n \t */\n \tprivate static String getToken() {\n \t\tMac mac = new Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);\n \t\tPutPolicy putPolicy = new PutPolicy(QiNiuConfig.QINIU_BUCKNAME);\n \t\tputPolicy.returnBody = \"{\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)}\";\n \t\ttry {\n \t\t\tString uptoken = putPolicy.token(mac);\n \t\t\tSystem.out.println(\"debug:uptoken = \" + uptoken);\n \t\t\treturn uptoken;\n \t\t} catch (AuthException e) {\n \t\t\te.printStackTrace();\n \t\t} catch (JSONException e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn null;\n \t}\n\n \t/**\n \t * 根据host和文件名，生成file的url下载地址，支持私有空间\n \t * @param domain host：七牛的私有空间域名\n \t * @param imgKey file key：空间里的文件名\n \t * @return url下载地址\n \t */\n \tpublic static String downloadFile(String domain,String imgKey){\n \t\t//密钥配置\n \t\t//构造私有空间的需要生成的下载的链接\n //\t\tString domain =\"http://example.xxx.clouddn.com/\";\n //\t\tString path =\"H60-L12__1464917382714__36888_5255\";\n \t\tStringBuilder sb =new StringBuilder();\n \t\t//加上过期时间戳字段\n \t\tString url = sb.append(domain).append(imgKey).append(\"?e=1478365261\").toString();\n \t\tLog.e(\"encodedEntryURI\",url);\n\n \t\tbyte[] sign =null;\n \t\ttry {\n \t\t\tsign = SHA.hMacSHA1Encrypt(url,QiNiuConfig.QINIU_SK);\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\tsb.append(\"&token=\").append(QiNiuConfig.QINIU_AK).append(\":\").append(encodedSign);\n \t\tLog.e(\"download token\",sb.toString());\n \t\treturn sb.toString();\n \t}\n\n \t/**\n \t * 列出空间中指定格式的文件\n \t * @param bucket 空间名\n \t * @param prefix 要指定的格式（前缀）\n \t * @param listener\n \t * @return\n \t */\n \tpublic static void listFile(String bucket, String prefix,final QiniuRequestListener listener){\n\n \t\ttry{\n \t\t\tStringBuilder sb = new StringBuilder();\n\n \t\t\tString entryUrl = sb.append(\"bucket=\").append(bucket)\n \t\t\t\t\t.append(\"&prefix=\").append(prefix).toString();\n \t\t\tString host = \"http://rsf.qbox.me\";\n \t\t\tString path = \"/list?\" +entryUrl;\n \t\t\tString url = host+path;\n \t\t\tLog.e(\"AAAAAAA\", url);\n \t\t\tbyte[] sign = SHA.hMacSHA1Encrypt(path+\"\\n\", QiNiuConfig.QINIU_SK);\n \t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\t\tString authorization = QiNiuConfig.QINIU_AK + ':' + encodedSign;\n \t\t\tAsyncHttpClient client = new AsyncHttpClient();\n \t\t\tclient.addHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n \t\t\tclient.addHeader(\"Authorization\", \"QBox \"+authorization);\n \t\t\tRequestParams params = new RequestParams();\n \t\t\tclient.post(url, params, new AsyncHttpResponseHandler() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onSuccess(int i, Header[] headers, byte[] bytes) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onSucceed(bytes);\n \t\t\t\t}\n\n \t\t\t\t@Override\n \t\t\t\tpublic void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onFailed(bytes);\n \t\t\t\t}\n \t\t\t});\n \t\t}catch(Exception e){\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn ;\n \t}\n\n \t/**\n \t * 删除空间中的文件\n \t * @param bucket 删除文件的空间\n \t * @param fileName 删除的文件\n \t * */\n \tpublic static boolean deleteFile(String bucket,String fileName,final QiniuRequestListener listener){\n \t\ttry{\n \t\t\tString entryUrl = bucket+\":\"+fileName;\n \t\t\tString encodedEntryURI = UrlSafeBase64.encodeToString(entryUrl.getBytes());\n \t\t\tString host = \"http://rs.qiniu.com\";\n \t\t\tString path = \"/delete/\"+encodedEntryURI;\n \t\t\tString url = host+path;\n \t\t\tLog.e(\"AAAAAAA\", url);\n \t\t\tbyte[] sign = hMacSHA1Encrypt(path+\"\\n\", QiNiuConfig.QINIU_SK);\n \t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);\n \t\t\tString authorization = QiNiuConfig.QINIU_AK + ':' + encodedSign;\n\n \t\t\tAsyncHttpClient client = new AsyncHttpClient();\n \t\t\tclient.addHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n \t\t\tclient.addHeader(\"Authorization\", \"QBox \"+authorization);\n \t\t\tRequestParams params = new RequestParams();\n \t\t\tclient.post(url, params, new AsyncHttpResponseHandler() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onSuccess(int i, Header[] headers, byte[] bytes) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onSucceed(bytes);\n \t\t\t\t}\n\n \t\t\t\t@Override\n \t\t\t\tpublic void onFailure(int i, Header[] headers, byte[] bytes, Throwable throwable) {\n \t\t\t\t\tif (null!=listener)\n \t\t\t\t\t\tlistener.onFailed(bytes);\n \t\t\t\t\tif (null!=bytes) {\n \t\t\t\t\t\tString s = new String(bytes);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t});\n\n \t\t}catch(Exception e){\n \t\t\te.printStackTrace();\n \t\t}\n \t\treturn false;\n \t}\n\n }\n~~~\n\n- HMAC-SHA1签名加密类\n\n使用下面方法生成对应七牛资源管理里用到的[管理凭证](http://developer.qiniu.com/article/developer/security/access-token.html)\n\n~~~ Java\n/**\n * 对外提供HMAC-SHA1签名方法\n * @author agehua\n *\n */\npublic class SHA {\n\n    private static final String MAC_NAME = \"HmacSHA1\";\n    private static final String ENCODING = \"UTF-8\";\n\n    /**\n     *\n     * 使用 HMAC-SHA1 签名方法对对encryptText进行签名\n     * @param encryptText 被签名的字符串\n     * @param encryptKey 密钥\n     * @return\n     * @throws Exception\n     */\n    public static byte[] hMacSHA1Encrypt(String encryptText, String encryptKey)\n            throws Exception {\n        byte[] data = encryptKey.getBytes(ENCODING);\n        // 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称\n        SecretKey secretKey = new SecretKeySpec(data, MAC_NAME);\n        // 生成一个指定 Mac 算法 的 Mac 对象\n        Mac mac = Mac.getInstance(MAC_NAME);\n        // 用给定密钥初始化 Mac 对象\n        mac.init(secretKey);\n        byte[] text = encryptText.getBytes(ENCODING);\n        // 完成 Mac 操作\n        return mac.doFinal(text);\n    }\n}  \n~~~  \n\n- 还有一个Config文件\n\n~~~ Java\npublic final class QiNiuConfig {\n\tpublic static final String token = getToken();\n\tpublic static final String QINIU_AK = \"Your_AccessKey\";\n\tpublic static final String QINIU_SK = \"Your_SecretKey\";\n\tpublic static final String QINIU_BUCKNAME = \"你的私有空间\";\n\n\tpublic static String getToken() {\n\t\tMac mac = new Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);\n\t\tPutPolicy putPolicy = new PutPolicy(QiNiuConfig.QINIU_BUCKNAME);\n\t\tputPolicy.returnBody = \"{\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)}\";\n\t\ttry {\n\t\t\tString uptoken = putPolicy.token(mac);\n\t\t\tSystem.out.println(\"debug:uptoken = \" + uptoken);\n\t\t\treturn uptoken;\n\t\t} catch (AuthException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n}\n\n~~~\n\n [点击在Gist上查看上面这些代码](https://gist.github.com/agehua/f73bcb98af2c0c44a4c49c7c7b7e6bda)\n\n最后，如果有问题欢迎讨论，我的邮箱简介里有 :)  \n","slug":"qiniu-android-summary","published":1,"date":"2016-05-27T16:00:00.000Z","updated":"2017-11-23T07:24:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxc000xd6ykek6dssmh","content":"<h3 id=\"1-在android上实现对七牛空间操作\"><a href=\"#1-在android上实现对七牛空间操作\" class=\"headerlink\" title=\"1.在android上实现对七牛空间操作\"></a>1.在android上实现对七牛空间操作</h3><p>  在android上实现对七牛空间的各种操作，包括list，delete，upload，download。支持私有空间</p>\n<p>  注意：<strong>官方不建议开发者把AccessKey和SecretKey放在前端的java文件里</strong>，最好还是有一台应用服务器</p>\n<p>  如果只是想尝试一下，好吧:)  代码中都有说明，直接上代码</p>\n<a id=\"more\"></a>\n<h3 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2.代码\"></a>2.代码</h3><p>一共有三个类：</p>\n<ul>\n<li>工具类：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.qiniu.ui.utils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap.CompressFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpResponseHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.RequestParams;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UpProgressHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UploadManager;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UploadOptions;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.utils.UrlSafeBase64;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.auth.AuthException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.auth.digest.Mac;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.rs.PutPolicy;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.ui.SHA;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.ui.contains.QiNiuConfig;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.Header;</div><div class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.qiniu.ui.SHA.hMacSHA1Encrypt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016年5月26日 上午11:00:43</div><div class=\"line\"> * <span class=\"doctag\">@author</span> lijixin</div><div class=\"line\"> * <span class=\"doctag\">@web</span> https://agehua.github.io</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 七牛云图片操作</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiniuUitls</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String fileName = <span class=\"string\">\"temp.jpg\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String tempJpeg = Environment.getExternalStorageDirectory().getPath() + <span class=\"string\">\"/\"</span> + fileName;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxWidth = <span class=\"number\">720</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxHeight = <span class=\"number\">1080</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QiniuUploadUitlsListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSucess</span><span class=\"params\">(String fileUrl)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> errorCode, String msg)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QiniuRequestListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSucceed</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 将bitmap转换成jpeg，控制图片大小不大于720*1080，可以指定图片压缩质量</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bitmap</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> quality</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">saveBitmapToJpegFile</span><span class=\"params\">(Bitmap bitmap, String filePath, <span class=\"keyword\">int</span> quality)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tFileOutputStream fileOutStr = <span class=\"keyword\">new</span> FileOutputStream(filePath);</div><div class=\"line\">\t\t\tBufferedOutputStream bufOutStr = <span class=\"keyword\">new</span> BufferedOutputStream(fileOutStr);</div><div class=\"line\">\t\t\tresizeBitmap(bitmap).compress(CompressFormat.JPEG, quality, bufOutStr);</div><div class=\"line\">\t\t\tbufOutStr.flush();</div><div class=\"line\">\t\t\tbufOutStr.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception exception) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 缩小图片</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bitmap</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">resizeBitmap</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> width = bitmap.getWidth();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> height = bitmap.getHeight();</div><div class=\"line\">\t\t\t<span class=\"comment\">//宽度大于720</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (width &gt; maxWidth) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//按宽度等比例压缩图片</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pWidth = maxWidth;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pHeight = maxWidth * height / width;</div><div class=\"line\">\t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\tbitmap.recycle();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (height &gt; maxHeight) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//按高度等比例缩小图片</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pHeight = maxHeight;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pWidth = maxHeight * width / height;</div><div class=\"line\">\t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\tbitmap.recycle();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImage</span><span class=\"params\">(Bitmap bitmap, QiniuUploadUitlsListener listener)</span> </span>&#123;</div><div class=\"line\">\t\tsaveBitmapToJpegFile(bitmap, tempJpeg,<span class=\"number\">100</span>);</div><div class=\"line\">\t\tuploadImage(tempJpeg, listener);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 上传图片选择jpg格式，七牛图片api目前支持对jpg格式进行指定图片质量请求</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> listener</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImage</span><span class=\"params\">(String filePath, <span class=\"keyword\">final</span> QiniuUploadUitlsListener listener)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String fileUrlUUID = getFileUrlUUID();</div><div class=\"line\">\t\tString token = getToken();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tlistener.onError(-<span class=\"number\">1</span>, <span class=\"string\">\"token is null\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tUploadManager uploadManager = <span class=\"keyword\">new</span> UploadManager();</div><div class=\"line\">\t\tuploadManager.put(filePath, fileUrlUUID, token, (key, info, response) -&gt; &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:info = \"</span> + info + <span class=\"string\">\",response = \"</span> + response);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.statusCode == <span class=\"number\">200</span>) &#123;<span class=\"comment\">// 上传成功</span></div><div class=\"line\">\t\t\t\tString fileRealUrl = getRealUrl(fileUrlUUID);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"debug:fileRealUrl = \"</span> + fileRealUrl);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onSucess(fileRealUrl);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onError(info.statusCode, info.error);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"keyword\">new</span> UploadOptions(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">new</span> UpProgressHandler() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> percent)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onProgress((<span class=\"keyword\">int</span>) (percent * <span class=\"number\">100</span>));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"keyword\">null</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 生成远程文件路径（全局唯一）</div><div class=\"line\">\t * &lt;p&gt;格式类似：\t H60-L12__1464851303930__156750_1884&lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getFileUrlUUID</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString filePath = android.os.Build.MODEL + <span class=\"string\">\"__\"</span> + System.currentTimeMillis() + <span class=\"string\">\"__\"</span> + (<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">500000</span>))</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"_\"</span> + (<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10000</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> filePath.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"0\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRealUrl</span><span class=\"params\">(String fileUrlUUID)</span> </span>&#123;</div><div class=\"line\">\t\tString filePath = <span class=\"string\">\"http://\"</span> + QiNiuConfig.QINIU_BUCKNAME + <span class=\"string\">\".qiniudn.com/\"</span> + fileUrlUUID;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> filePath;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取token 本地生成</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tMac mac = <span class=\"keyword\">new</span> Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\tPutPolicy putPolicy = <span class=\"keyword\">new</span> PutPolicy(QiNiuConfig.QINIU_BUCKNAME);</div><div class=\"line\">\t\tputPolicy.returnBody = <span class=\"string\">\"&#123;\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)&#125;\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString uptoken = putPolicy.token(mac);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:uptoken = \"</span> + uptoken);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> uptoken;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (AuthException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 根据host和文件名，生成file的url下载地址，支持私有空间</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> domain host：七牛的私有空间域名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> imgKey file key：空间里的文件名</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> url下载地址</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">downloadFile</span><span class=\"params\">(String domain,String imgKey)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//密钥配置</span></div><div class=\"line\">\t\t<span class=\"comment\">//构造私有空间的需要生成的下载的链接</span></div><div class=\"line\"><span class=\"comment\">//\t\tString domain =\"http://example.xxx.clouddn.com/\";</span></div><div class=\"line\"><span class=\"comment\">//\t\tString path =\"H60-L12__1464917382714__36888_5255\";</span></div><div class=\"line\">\t\tStringBuilder sb =<span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"comment\">//加上过期时间戳字段</span></div><div class=\"line\">\t\tString url = sb.append(domain).append(imgKey).append(<span class=\"string\">\"?e=1478365261\"</span>).toString();</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"encodedEntryURI\"</span>,url);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] sign =<span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsign = SHA.hMacSHA1Encrypt(url,QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\tsb.append(<span class=\"string\">\"&amp;token=\"</span>).append(QiNiuConfig.QINIU_AK).append(<span class=\"string\">\":\"</span>).append(encodedSign);</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"download token\"</span>,sb.toString());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 列出空间中指定格式的文件</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bucket 空间名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> prefix 要指定的格式（前缀）</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> listener</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">listFile</span><span class=\"params\">(String bucket, String prefix,<span class=\"keyword\">final</span> QiniuRequestListener listener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">\t\t\tString entryUrl = sb.append(<span class=\"string\">\"bucket=\"</span>).append(bucket)</div><div class=\"line\">\t\t\t\t\t.append(<span class=\"string\">\"&amp;prefix=\"</span>).append(prefix).toString();</div><div class=\"line\">\t\t\tString host = <span class=\"string\">\"http://rsf.qbox.me\"</span>;</div><div class=\"line\">\t\t\tString path = <span class=\"string\">\"/list?\"</span> +entryUrl;</div><div class=\"line\">\t\t\tString url = host+path;</div><div class=\"line\">\t\t\tLog.e(<span class=\"string\">\"AAAAAAA\"</span>, url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] sign = SHA.hMacSHA1Encrypt(path+<span class=\"string\">\"\\n\"</span>, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\t\tString authorization = QiNiuConfig.QINIU_AK + <span class=\"string\">':'</span> + encodedSign;</div><div class=\"line\">\t\t\tAsyncHttpClient client = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"QBox \"</span>+authorization);</div><div class=\"line\">\t\t\tRequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">\t\t\tclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onSucceed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onFailed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 删除空间中的文件</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bucket 删除文件的空间</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> fileName 删除的文件</div><div class=\"line\">\t * */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFile</span><span class=\"params\">(String bucket,String fileName,<span class=\"keyword\">final</span> QiniuRequestListener listener)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tString entryUrl = bucket+<span class=\"string\">\":\"</span>+fileName;</div><div class=\"line\">\t\t\tString encodedEntryURI = UrlSafeBase64.encodeToString(entryUrl.getBytes());</div><div class=\"line\">\t\t\tString host = <span class=\"string\">\"http://rs.qiniu.com\"</span>;</div><div class=\"line\">\t\t\tString path = <span class=\"string\">\"/delete/\"</span>+encodedEntryURI;</div><div class=\"line\">\t\t\tString url = host+path;</div><div class=\"line\">\t\t\tLog.e(<span class=\"string\">\"AAAAAAA\"</span>, url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] sign = hMacSHA1Encrypt(path+<span class=\"string\">\"\\n\"</span>, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\t\tString authorization = QiNiuConfig.QINIU_AK + <span class=\"string\">':'</span> + encodedSign;</div><div class=\"line\"></div><div class=\"line\">\t\t\tAsyncHttpClient client = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"QBox \"</span>+authorization);</div><div class=\"line\">\t\t\tRequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">\t\t\tclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onSucceed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onFailed(bytes);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=bytes) &#123;</div><div class=\"line\">\t\t\t\t\t\tString s = <span class=\"keyword\">new</span> String(bytes);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>HMAC-SHA1签名加密类</li>\n</ul>\n<p>使用下面方法生成对应七牛资源管理里用到的<a href=\"http://developer.qiniu.com/article/developer/security/access-token.html\" target=\"_blank\" rel=\"external\">管理凭证</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 对外提供HMAC-SHA1签名方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> agehua</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SHA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAC_NAME = <span class=\"string\">\"HmacSHA1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ENCODING = <span class=\"string\">\"UTF-8\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *</div><div class=\"line\">     * 使用 HMAC-SHA1 签名方法对对encryptText进行签名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> encryptText 被签名的字符串</div><div class=\"line\">     * <span class=\"doctag\">@param</span> encryptKey 密钥</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hMacSHA1Encrypt(String encryptText, String encryptKey)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] data = encryptKey.getBytes(ENCODING);</div><div class=\"line\">        <span class=\"comment\">// 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称</span></div><div class=\"line\">        SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(data, MAC_NAME);</div><div class=\"line\">        <span class=\"comment\">// 生成一个指定 Mac 算法 的 Mac 对象</span></div><div class=\"line\">        Mac mac = Mac.getInstance(MAC_NAME);</div><div class=\"line\">        <span class=\"comment\">// 用给定密钥初始化 Mac 对象</span></div><div class=\"line\">        mac.init(secretKey);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] text = encryptText.getBytes(ENCODING);</div><div class=\"line\">        <span class=\"comment\">// 完成 Mac 操作</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mac.doFinal(text);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\">~~~  </div><div class=\"line\"></div><div class=\"line\">- 还有一个Config文件</div><div class=\"line\"></div><div class=\"line\">~~~ Java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuConfig</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String token = getToken();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_AK = <span class=\"string\">\"Your_AccessKey\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_SK = <span class=\"string\">\"Your_SecretKey\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_BUCKNAME = <span class=\"string\">\"你的私有空间\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tMac mac = <span class=\"keyword\">new</span> Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\tPutPolicy putPolicy = <span class=\"keyword\">new</span> PutPolicy(QiNiuConfig.QINIU_BUCKNAME);</div><div class=\"line\">\t\tputPolicy.returnBody = <span class=\"string\">\"&#123;\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)&#125;\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString uptoken = putPolicy.token(mac);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:uptoken = \"</span> + uptoken);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> uptoken;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (AuthException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> <a href=\"https://gist.github.com/agehua/f73bcb98af2c0c44a4c49c7c7b7e6bda\" target=\"_blank\" rel=\"external\">点击在Gist上查看上面这些代码</a></p>\n<p>最后，如果有问题欢迎讨论，我的邮箱简介里有 :)  </p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/28/qiniu-android-summary/\">http://agehua.github.io/2016/05/28/qiniu-android-summary/</a></p>\n","readingTime":{"text":"10 min read","minutes":9.11,"time":546599.9999999999,"words":1822},"excerpt":"<h3 id=\"1-在android上实现对七牛空间操作\"><a href=\"#1-在android上实现对七牛空间操作\" class=\"headerlink\" title=\"1.在android上实现对七牛空间操作\"></a>1.在android上实现对七牛空间操作</h3><p>  在android上实现对七牛空间的各种操作，包括list，delete，upload，download。支持私有空间</p>\n<p>  注意：<strong>官方不建议开发者把AccessKey和SecretKey放在前端的java文件里</strong>，最好还是有一台应用服务器</p>\n<p>  如果只是想尝试一下，好吧:)  代码中都有说明，直接上代码</p>","more":"<h3 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2.代码\"></a>2.代码</h3><p>一共有三个类：</p>\n<ul>\n<li>工具类：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.qiniu.ui.utils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap.CompressFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpResponseHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.RequestParams;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UpProgressHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UploadManager;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.storage.UploadOptions;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.android.utils.UrlSafeBase64;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.auth.AuthException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.auth.digest.Mac;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.api.rs.PutPolicy;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.ui.SHA;</div><div class=\"line\"><span class=\"keyword\">import</span> com.qiniu.ui.contains.QiNiuConfig;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.Header;</div><div class=\"line\"><span class=\"keyword\">import</span> org.json.JSONException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.qiniu.ui.SHA.hMacSHA1Encrypt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016年5月26日 上午11:00:43</div><div class=\"line\"> * <span class=\"doctag\">@author</span> lijixin</div><div class=\"line\"> * <span class=\"doctag\">@web</span> https://agehua.github.io</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 七牛云图片操作</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiniuUitls</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String fileName = <span class=\"string\">\"temp.jpg\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String tempJpeg = Environment.getExternalStorageDirectory().getPath() + <span class=\"string\">\"/\"</span> + fileName;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxWidth = <span class=\"number\">720</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxHeight = <span class=\"number\">1080</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QiniuUploadUitlsListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSucess</span><span class=\"params\">(String fileUrl)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> errorCode, String msg)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QiniuRequestListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSucceed</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 将bitmap转换成jpeg，控制图片大小不大于720*1080，可以指定图片压缩质量</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bitmap</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> quality</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">saveBitmapToJpegFile</span><span class=\"params\">(Bitmap bitmap, String filePath, <span class=\"keyword\">int</span> quality)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tFileOutputStream fileOutStr = <span class=\"keyword\">new</span> FileOutputStream(filePath);</div><div class=\"line\">\t\t\tBufferedOutputStream bufOutStr = <span class=\"keyword\">new</span> BufferedOutputStream(fileOutStr);</div><div class=\"line\">\t\t\tresizeBitmap(bitmap).compress(CompressFormat.JPEG, quality, bufOutStr);</div><div class=\"line\">\t\t\tbufOutStr.flush();</div><div class=\"line\">\t\t\tbufOutStr.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception exception) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 缩小图片</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bitmap</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">resizeBitmap</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> width = bitmap.getWidth();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> height = bitmap.getHeight();</div><div class=\"line\">\t\t\t<span class=\"comment\">//宽度大于720</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (width &gt; maxWidth) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//按宽度等比例压缩图片</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pWidth = maxWidth;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pHeight = maxWidth * height / width;</div><div class=\"line\">\t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\tbitmap.recycle();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (height &gt; maxHeight) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//按高度等比例缩小图片</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pHeight = maxHeight;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pWidth = maxHeight * width / height;</div><div class=\"line\">\t\t\t\tBitmap result = Bitmap.createScaledBitmap(bitmap, pWidth, pHeight, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\tbitmap.recycle();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImage</span><span class=\"params\">(Bitmap bitmap, QiniuUploadUitlsListener listener)</span> </span>&#123;</div><div class=\"line\">\t\tsaveBitmapToJpegFile(bitmap, tempJpeg,<span class=\"number\">100</span>);</div><div class=\"line\">\t\tuploadImage(tempJpeg, listener);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 上传图片选择jpg格式，七牛图片api目前支持对jpg格式进行指定图片质量请求</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> listener</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadImage</span><span class=\"params\">(String filePath, <span class=\"keyword\">final</span> QiniuUploadUitlsListener listener)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String fileUrlUUID = getFileUrlUUID();</div><div class=\"line\">\t\tString token = getToken();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tlistener.onError(-<span class=\"number\">1</span>, <span class=\"string\">\"token is null\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tUploadManager uploadManager = <span class=\"keyword\">new</span> UploadManager();</div><div class=\"line\">\t\tuploadManager.put(filePath, fileUrlUUID, token, (key, info, response) -&gt; &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:info = \"</span> + info + <span class=\"string\">\",response = \"</span> + response);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span> &amp;&amp; info.statusCode == <span class=\"number\">200</span>) &#123;<span class=\"comment\">// 上传成功</span></div><div class=\"line\">\t\t\t\tString fileRealUrl = getRealUrl(fileUrlUUID);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"debug:fileRealUrl = \"</span> + fileRealUrl);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onSucess(fileRealUrl);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onError(info.statusCode, info.error);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"keyword\">new</span> UploadOptions(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">new</span> UpProgressHandler() &#123;</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(String key, <span class=\"keyword\">double</span> percent)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tlistener.onProgress((<span class=\"keyword\">int</span>) (percent * <span class=\"number\">100</span>));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"keyword\">null</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 生成远程文件路径（全局唯一）</div><div class=\"line\">\t * &lt;p&gt;格式类似：\t H60-L12__1464851303930__156750_1884&lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getFileUrlUUID</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tString filePath = android.os.Build.MODEL + <span class=\"string\">\"__\"</span> + System.currentTimeMillis() + <span class=\"string\">\"__\"</span> + (<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">500000</span>))</div><div class=\"line\">\t\t\t\t+ <span class=\"string\">\"_\"</span> + (<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10000</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> filePath.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"0\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRealUrl</span><span class=\"params\">(String fileUrlUUID)</span> </span>&#123;</div><div class=\"line\">\t\tString filePath = <span class=\"string\">\"http://\"</span> + QiNiuConfig.QINIU_BUCKNAME + <span class=\"string\">\".qiniudn.com/\"</span> + fileUrlUUID;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> filePath;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取token 本地生成</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tMac mac = <span class=\"keyword\">new</span> Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\tPutPolicy putPolicy = <span class=\"keyword\">new</span> PutPolicy(QiNiuConfig.QINIU_BUCKNAME);</div><div class=\"line\">\t\tputPolicy.returnBody = <span class=\"string\">\"&#123;\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)&#125;\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString uptoken = putPolicy.token(mac);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:uptoken = \"</span> + uptoken);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> uptoken;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (AuthException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 根据host和文件名，生成file的url下载地址，支持私有空间</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> domain host：七牛的私有空间域名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> imgKey file key：空间里的文件名</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> url下载地址</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">downloadFile</span><span class=\"params\">(String domain,String imgKey)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//密钥配置</span></div><div class=\"line\">\t\t<span class=\"comment\">//构造私有空间的需要生成的下载的链接</span></div><div class=\"line\"><span class=\"comment\">//\t\tString domain =\"http://example.xxx.clouddn.com/\";</span></div><div class=\"line\"><span class=\"comment\">//\t\tString path =\"H60-L12__1464917382714__36888_5255\";</span></div><div class=\"line\">\t\tStringBuilder sb =<span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"comment\">//加上过期时间戳字段</span></div><div class=\"line\">\t\tString url = sb.append(domain).append(imgKey).append(<span class=\"string\">\"?e=1478365261\"</span>).toString();</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"encodedEntryURI\"</span>,url);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] sign =<span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tsign = SHA.hMacSHA1Encrypt(url,QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\tsb.append(<span class=\"string\">\"&amp;token=\"</span>).append(QiNiuConfig.QINIU_AK).append(<span class=\"string\">\":\"</span>).append(encodedSign);</div><div class=\"line\">\t\tLog.e(<span class=\"string\">\"download token\"</span>,sb.toString());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 列出空间中指定格式的文件</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bucket 空间名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> prefix 要指定的格式（前缀）</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> listener</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">listFile</span><span class=\"params\">(String bucket, String prefix,<span class=\"keyword\">final</span> QiniuRequestListener listener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">\t\t\tString entryUrl = sb.append(<span class=\"string\">\"bucket=\"</span>).append(bucket)</div><div class=\"line\">\t\t\t\t\t.append(<span class=\"string\">\"&amp;prefix=\"</span>).append(prefix).toString();</div><div class=\"line\">\t\t\tString host = <span class=\"string\">\"http://rsf.qbox.me\"</span>;</div><div class=\"line\">\t\t\tString path = <span class=\"string\">\"/list?\"</span> +entryUrl;</div><div class=\"line\">\t\t\tString url = host+path;</div><div class=\"line\">\t\t\tLog.e(<span class=\"string\">\"AAAAAAA\"</span>, url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] sign = SHA.hMacSHA1Encrypt(path+<span class=\"string\">\"\\n\"</span>, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\t\tString authorization = QiNiuConfig.QINIU_AK + <span class=\"string\">':'</span> + encodedSign;</div><div class=\"line\">\t\t\tAsyncHttpClient client = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"QBox \"</span>+authorization);</div><div class=\"line\">\t\t\tRequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">\t\t\tclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onSucceed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onFailed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 删除空间中的文件</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bucket 删除文件的空间</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> fileName 删除的文件</div><div class=\"line\">\t * */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFile</span><span class=\"params\">(String bucket,String fileName,<span class=\"keyword\">final</span> QiniuRequestListener listener)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t\tString entryUrl = bucket+<span class=\"string\">\":\"</span>+fileName;</div><div class=\"line\">\t\t\tString encodedEntryURI = UrlSafeBase64.encodeToString(entryUrl.getBytes());</div><div class=\"line\">\t\t\tString host = <span class=\"string\">\"http://rs.qiniu.com\"</span>;</div><div class=\"line\">\t\t\tString path = <span class=\"string\">\"/delete/\"</span>+encodedEntryURI;</div><div class=\"line\">\t\t\tString url = host+path;</div><div class=\"line\">\t\t\tLog.e(<span class=\"string\">\"AAAAAAA\"</span>, url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] sign = hMacSHA1Encrypt(path+<span class=\"string\">\"\\n\"</span>, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\t\tString encodedSign = UrlSafeBase64.encodeToString(sign);</div><div class=\"line\">\t\t\tString authorization = QiNiuConfig.QINIU_AK + <span class=\"string\">':'</span> + encodedSign;</div><div class=\"line\"></div><div class=\"line\">\t\t\tAsyncHttpClient client = <span class=\"keyword\">new</span> AsyncHttpClient();</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">\t\t\tclient.addHeader(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"QBox \"</span>+authorization);</div><div class=\"line\">\t\t\tRequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">\t\t\tclient.post(url, params, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onSucceed(bytes);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Header[] headers, <span class=\"keyword\">byte</span>[] bytes, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=listener)</div><div class=\"line\">\t\t\t\t\t\tlistener.onFailed(bytes);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=bytes) &#123;</div><div class=\"line\">\t\t\t\t\t\tString s = <span class=\"keyword\">new</span> String(bytes);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>HMAC-SHA1签名加密类</li>\n</ul>\n<p>使用下面方法生成对应七牛资源管理里用到的<a href=\"http://developer.qiniu.com/article/developer/security/access-token.html\">管理凭证</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 对外提供HMAC-SHA1签名方法</div><div class=\"line\"> * <span class=\"doctag\">@author</span> agehua</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SHA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAC_NAME = <span class=\"string\">\"HmacSHA1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ENCODING = <span class=\"string\">\"UTF-8\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *</div><div class=\"line\">     * 使用 HMAC-SHA1 签名方法对对encryptText进行签名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> encryptText 被签名的字符串</div><div class=\"line\">     * <span class=\"doctag\">@param</span> encryptKey 密钥</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hMacSHA1Encrypt(String encryptText, String encryptKey)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] data = encryptKey.getBytes(ENCODING);</div><div class=\"line\">        <span class=\"comment\">// 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称</span></div><div class=\"line\">        SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(data, MAC_NAME);</div><div class=\"line\">        <span class=\"comment\">// 生成一个指定 Mac 算法 的 Mac 对象</span></div><div class=\"line\">        Mac mac = Mac.getInstance(MAC_NAME);</div><div class=\"line\">        <span class=\"comment\">// 用给定密钥初始化 Mac 对象</span></div><div class=\"line\">        mac.init(secretKey);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] text = encryptText.getBytes(ENCODING);</div><div class=\"line\">        <span class=\"comment\">// 完成 Mac 操作</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mac.doFinal(text);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;  </div><div class=\"line\">~~~  </div><div class=\"line\"></div><div class=\"line\">- 还有一个Config文件</div><div class=\"line\"></div><div class=\"line\">~~~ Java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuConfig</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String token = getToken();</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_AK = <span class=\"string\">\"Your_AccessKey\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_SK = <span class=\"string\">\"Your_SecretKey\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QINIU_BUCKNAME = <span class=\"string\">\"你的私有空间\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getToken</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tMac mac = <span class=\"keyword\">new</span> Mac(QiNiuConfig.QINIU_AK, QiNiuConfig.QINIU_SK);</div><div class=\"line\">\t\tPutPolicy putPolicy = <span class=\"keyword\">new</span> PutPolicy(QiNiuConfig.QINIU_BUCKNAME);</div><div class=\"line\">\t\tputPolicy.returnBody = <span class=\"string\">\"&#123;\\\"name\\\": $(fname),\\\"size\\\": \\\"$(fsize)\\\",\\\"w\\\": \\\"$(imageInfo.width)\\\",\\\"h\\\": \\\"$(imageInfo.height)\\\",\\\"key\\\":$(etag)&#125;\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString uptoken = putPolicy.token(mac);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"debug:uptoken = \"</span> + uptoken);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> uptoken;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (AuthException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> <a href=\"https://gist.github.com/agehua/f73bcb98af2c0c44a4c49c7c7b7e6bda\">点击在Gist上查看上面这些代码</a></p>\n<p>最后，如果有问题欢迎讨论，我的邮箱简介里有 :)  </p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/05/28/qiniu-android-summary/\">http://agehua.github.io/2016/05/28/qiniu-android-summary/</a></p>"},{"layout":"post","title":"Android Webview总结，不断更新中 :(","keywords":"Android Webview, js漏洞","description":"Android Webview总结，遇到问题就在这里记录 :(","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","_content":"\n\n### 1.Android Webview的坑\n\n- 1.webview再次加载页面空白\n\n  - 1.可以关闭掉硬件加速\n\n  - 2.不关闭硬件加速的情况下：在关闭Acivity之前手动调用下面方法，\n\n  <!--more-->\n\n  ~~~ Java\n   public void goFinish(){\n        isLoadWithError =false;\n        if (null!=jsCallBack)\n            mWebView.removeJavascriptInterface(\"XXX\");\n        mWebView.setFocusable(true);\n        mWebView.removeAllViews();\n        try {\n        \tmWebView.clearHistory(); //webview没有历史记录，这里会抛出异常\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        mWebView.destroy();\n\n        try {\n        \t//mWebView为WebView所在类的全局变量名，不可以混淆\n            Field fieldWebView = this.getClass().getDeclaredField(\"mWebView\");\n            fieldWebView.setAccessible(true);\n            WebView webView = (WebView) fieldWebView.get(this);\n            webView.removeAllViews();\n            webView.destroy();\n\n        }catch (NoSuchFieldException e) {\n            e.printStackTrace();\n\n        }catch (IllegalArgumentException e) {\n            e.printStackTrace();\n\n        }catch (IllegalAccessException e) {\n            e.printStackTrace();\n\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        this.finish();\n    }\n   ~~~\n\n> 注意：因为用到了反射去清理webview，所以混淆时，**这个方法所在的类不能混淆**\n\n\n- 2.部分手机h5 game屏幕闪烁\n\n\t在小米的某些手机上，会出现这种情况。抱歉，还没有好的解决办法。谁有好的解决办法可以邮件告知，多谢 :)\n\n- 3.android Webview替代品Crosswalk\n\n\tCrosswalk解决4,2以下的手机浏览器的兼容性问题。对html5的支持更好\n\n\t[Crosswalk官网](https://crosswalk-project.org/)\n\n\t但Crosswalk也有缺点，将Crosswalk嵌入App中，会使APK增加大约20M。具体可以看这个[知乎提问](https://www.zhihu.com/question/26484511)\n\n- 4.腾讯浏览服务\n\n\t[官网地址](http://x5.tencent.com/index)\n\n### 2.WebView防止远程代码攻击\n\n- 1.使用Android4.2以上的系统，通过在Java的远程方法上面声明一个@JavascriptInterface，可以预防改安全漏洞  \n\n- 2.低于Android4.2的系统，如果系统自己添加了一个叫searchBoxJavaBridge_的Js接口，则需要把这个接口删除\n\n  详情参见这篇文章：[Android WebView的Js对象注入漏洞解决方案](http://blog.csdn.net/leehong2005/article/details/11808557/)\n\n  这里贴一个自己整理的webview类：[BaseWebView](https://gist.github.com/agehua/99233b40e05db29ee0ed4f50fb2c7530)\n\n### 3.Android中WebView的JavaScript代码和本地代码交互的三种方式\n来自姜维的博客:[Android中WebView的JavaScript代码和本地代码交互的三种方式](http://blog.csdn.net/jiangwei0910410003/article/details/52687530)\n","source":"_posts/2016-07-25-android-webview-summary.md","raw":"---\nlayout: post\ntitle: Android Webview总结，不断更新中 :(\ncategory: accumulation\ntags:\n  - ANDROID\n  - webview\nkeywords: Android Webview, js漏洞\ndescription: Android Webview总结，遇到问题就在这里记录 :(\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\n---\n\n\n### 1.Android Webview的坑\n\n- 1.webview再次加载页面空白\n\n  - 1.可以关闭掉硬件加速\n\n  - 2.不关闭硬件加速的情况下：在关闭Acivity之前手动调用下面方法，\n\n  <!--more-->\n\n  ~~~ Java\n   public void goFinish(){\n        isLoadWithError =false;\n        if (null!=jsCallBack)\n            mWebView.removeJavascriptInterface(\"XXX\");\n        mWebView.setFocusable(true);\n        mWebView.removeAllViews();\n        try {\n        \tmWebView.clearHistory(); //webview没有历史记录，这里会抛出异常\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        mWebView.destroy();\n\n        try {\n        \t//mWebView为WebView所在类的全局变量名，不可以混淆\n            Field fieldWebView = this.getClass().getDeclaredField(\"mWebView\");\n            fieldWebView.setAccessible(true);\n            WebView webView = (WebView) fieldWebView.get(this);\n            webView.removeAllViews();\n            webView.destroy();\n\n        }catch (NoSuchFieldException e) {\n            e.printStackTrace();\n\n        }catch (IllegalArgumentException e) {\n            e.printStackTrace();\n\n        }catch (IllegalAccessException e) {\n            e.printStackTrace();\n\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n        this.finish();\n    }\n   ~~~\n\n> 注意：因为用到了反射去清理webview，所以混淆时，**这个方法所在的类不能混淆**\n\n\n- 2.部分手机h5 game屏幕闪烁\n\n\t在小米的某些手机上，会出现这种情况。抱歉，还没有好的解决办法。谁有好的解决办法可以邮件告知，多谢 :)\n\n- 3.android Webview替代品Crosswalk\n\n\tCrosswalk解决4,2以下的手机浏览器的兼容性问题。对html5的支持更好\n\n\t[Crosswalk官网](https://crosswalk-project.org/)\n\n\t但Crosswalk也有缺点，将Crosswalk嵌入App中，会使APK增加大约20M。具体可以看这个[知乎提问](https://www.zhihu.com/question/26484511)\n\n- 4.腾讯浏览服务\n\n\t[官网地址](http://x5.tencent.com/index)\n\n### 2.WebView防止远程代码攻击\n\n- 1.使用Android4.2以上的系统，通过在Java的远程方法上面声明一个@JavascriptInterface，可以预防改安全漏洞  \n\n- 2.低于Android4.2的系统，如果系统自己添加了一个叫searchBoxJavaBridge_的Js接口，则需要把这个接口删除\n\n  详情参见这篇文章：[Android WebView的Js对象注入漏洞解决方案](http://blog.csdn.net/leehong2005/article/details/11808557/)\n\n  这里贴一个自己整理的webview类：[BaseWebView](https://gist.github.com/agehua/99233b40e05db29ee0ed4f50fb2c7530)\n\n### 3.Android中WebView的JavaScript代码和本地代码交互的三种方式\n来自姜维的博客:[Android中WebView的JavaScript代码和本地代码交互的三种方式](http://blog.csdn.net/jiangwei0910410003/article/details/52687530)\n","slug":"android-webview-summary","published":1,"date":"2016-07-24T16:00:00.000Z","updated":"2017-11-23T07:24:24.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxf000zd6ykcgubw7g7","content":"<h3 id=\"1-Android-Webview的坑\"><a href=\"#1-Android-Webview的坑\" class=\"headerlink\" title=\"1.Android Webview的坑\"></a>1.Android Webview的坑</h3><ul>\n<li><p>1.webview再次加载页面空白</p>\n<ul>\n<li><p>1.可以关闭掉硬件加速</p>\n</li>\n<li><p>2.不关闭硬件加速的情况下：在关闭Acivity之前手动调用下面方法，</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">goFinish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">     isLoadWithError =<span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=jsCallBack)</div><div class=\"line\">         mWebView.removeJavascriptInterface(<span class=\"string\">\"XXX\"</span>);</div><div class=\"line\">     mWebView.setFocusable(<span class=\"keyword\">true</span>);</div><div class=\"line\">     mWebView.removeAllViews();</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     \tmWebView.clearHistory(); <span class=\"comment\">//webview没有历史记录，这里会抛出异常</span></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">     mWebView.destroy();</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     \t<span class=\"comment\">//mWebView为WebView所在类的全局变量名，不可以混淆</span></div><div class=\"line\">         Field fieldWebView = <span class=\"keyword\">this</span>.getClass().getDeclaredField(<span class=\"string\">\"mWebView\"</span>);</div><div class=\"line\">         fieldWebView.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         WebView webView = (WebView) fieldWebView.get(<span class=\"keyword\">this</span>);</div><div class=\"line\">         webView.removeAllViews();</div><div class=\"line\">         webView.destroy();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">this</span>.finish();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>注意：因为用到了反射去清理webview，所以混淆时，<strong>这个方法所在的类不能混淆</strong></p>\n</blockquote>\n<ul>\n<li><p>2.部分手机h5 game屏幕闪烁</p>\n<p>  在小米的某些手机上，会出现这种情况。抱歉，还没有好的解决办法。谁有好的解决办法可以邮件告知，多谢 :)</p>\n</li>\n<li><p>3.android Webview替代品Crosswalk</p>\n<p>  Crosswalk解决4,2以下的手机浏览器的兼容性问题。对html5的支持更好</p>\n<p>  <a href=\"https://crosswalk-project.org/\" target=\"_blank\" rel=\"external\">Crosswalk官网</a></p>\n<p>  但Crosswalk也有缺点，将Crosswalk嵌入App中，会使APK增加大约20M。具体可以看这个<a href=\"https://www.zhihu.com/question/26484511\" target=\"_blank\" rel=\"external\">知乎提问</a></p>\n</li>\n<li><p>4.腾讯浏览服务</p>\n<p>  <a href=\"http://x5.tencent.com/index\" target=\"_blank\" rel=\"external\">官网地址</a></p>\n</li>\n</ul>\n<h3 id=\"2-WebView防止远程代码攻击\"><a href=\"#2-WebView防止远程代码攻击\" class=\"headerlink\" title=\"2.WebView防止远程代码攻击\"></a>2.WebView防止远程代码攻击</h3><ul>\n<li><p>1.使用Android4.2以上的系统，通过在Java的远程方法上面声明一个@JavascriptInterface，可以预防改安全漏洞  </p>\n</li>\n<li><p>2.低于Android4.2的系统，如果系统自己添加了一个叫searchBoxJavaBridge_的Js接口，则需要把这个接口删除</p>\n<p>详情参见这篇文章：<a href=\"http://blog.csdn.net/leehong2005/article/details/11808557/\" target=\"_blank\" rel=\"external\">Android WebView的Js对象注入漏洞解决方案</a></p>\n<p>这里贴一个自己整理的webview类：<a href=\"https://gist.github.com/agehua/99233b40e05db29ee0ed4f50fb2c7530\" target=\"_blank\" rel=\"external\">BaseWebView</a></p>\n</li>\n</ul>\n<h3 id=\"3-Android中WebView的JavaScript代码和本地代码交互的三种方式\"><a href=\"#3-Android中WebView的JavaScript代码和本地代码交互的三种方式\" class=\"headerlink\" title=\"3.Android中WebView的JavaScript代码和本地代码交互的三种方式\"></a>3.Android中WebView的JavaScript代码和本地代码交互的三种方式</h3><p>来自姜维的博客:<a href=\"http://blog.csdn.net/jiangwei0910410003/article/details/52687530\" target=\"_blank\" rel=\"external\">Android中WebView的JavaScript代码和本地代码交互的三种方式</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/07/25/android-webview-summary/\">http://agehua.github.io/2016/07/25/android-webview-summary/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.86,"time":51600,"words":172},"excerpt":"<h3 id=\"1-Android-Webview的坑\"><a href=\"#1-Android-Webview的坑\" class=\"headerlink\" title=\"1.Android Webview的坑\"></a>1.Android Webview的坑</h3><ul>\n<li><p>1.webview再次加载页面空白</p>\n<ul>\n<li><p>1.可以关闭掉硬件加速</p>\n</li>\n<li><p>2.不关闭硬件加速的情况下：在关闭Acivity之前手动调用下面方法，</p>\n</li>\n</ul>","more":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">goFinish</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">     isLoadWithError =<span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span>!=jsCallBack)</div><div class=\"line\">         mWebView.removeJavascriptInterface(<span class=\"string\">\"XXX\"</span>);</div><div class=\"line\">     mWebView.setFocusable(<span class=\"keyword\">true</span>);</div><div class=\"line\">     mWebView.removeAllViews();</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     \tmWebView.clearHistory(); <span class=\"comment\">//webview没有历史记录，这里会抛出异常</span></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">     mWebView.destroy();</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     \t<span class=\"comment\">//mWebView为WebView所在类的全局变量名，不可以混淆</span></div><div class=\"line\">         Field fieldWebView = <span class=\"keyword\">this</span>.getClass().getDeclaredField(<span class=\"string\">\"mWebView\"</span>);</div><div class=\"line\">         fieldWebView.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">         WebView webView = (WebView) fieldWebView.get(<span class=\"keyword\">this</span>);</div><div class=\"line\">         webView.removeAllViews();</div><div class=\"line\">         webView.destroy();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">     &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">this</span>.finish();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>注意：因为用到了反射去清理webview，所以混淆时，<strong>这个方法所在的类不能混淆</strong></p>\n</blockquote>\n<ul>\n<li><p>2.部分手机h5 game屏幕闪烁</p>\n<p>  在小米的某些手机上，会出现这种情况。抱歉，还没有好的解决办法。谁有好的解决办法可以邮件告知，多谢 :)</p>\n</li>\n<li><p>3.android Webview替代品Crosswalk</p>\n<p>  Crosswalk解决4,2以下的手机浏览器的兼容性问题。对html5的支持更好</p>\n<p>  <a href=\"https://crosswalk-project.org/\">Crosswalk官网</a></p>\n<p>  但Crosswalk也有缺点，将Crosswalk嵌入App中，会使APK增加大约20M。具体可以看这个<a href=\"https://www.zhihu.com/question/26484511\">知乎提问</a></p>\n</li>\n<li><p>4.腾讯浏览服务</p>\n<p>  <a href=\"http://x5.tencent.com/index\">官网地址</a></p>\n</li>\n</ul>\n<h3 id=\"2-WebView防止远程代码攻击\"><a href=\"#2-WebView防止远程代码攻击\" class=\"headerlink\" title=\"2.WebView防止远程代码攻击\"></a>2.WebView防止远程代码攻击</h3><ul>\n<li><p>1.使用Android4.2以上的系统，通过在Java的远程方法上面声明一个@JavascriptInterface，可以预防改安全漏洞  </p>\n</li>\n<li><p>2.低于Android4.2的系统，如果系统自己添加了一个叫searchBoxJavaBridge_的Js接口，则需要把这个接口删除</p>\n<p>详情参见这篇文章：<a href=\"http://blog.csdn.net/leehong2005/article/details/11808557/\">Android WebView的Js对象注入漏洞解决方案</a></p>\n<p>这里贴一个自己整理的webview类：<a href=\"https://gist.github.com/agehua/99233b40e05db29ee0ed4f50fb2c7530\">BaseWebView</a></p>\n</li>\n</ul>\n<h3 id=\"3-Android中WebView的JavaScript代码和本地代码交互的三种方式\"><a href=\"#3-Android中WebView的JavaScript代码和本地代码交互的三种方式\" class=\"headerlink\" title=\"3.Android中WebView的JavaScript代码和本地代码交互的三种方式\"></a>3.Android中WebView的JavaScript代码和本地代码交互的三种方式</h3><p>来自姜维的博客:<a href=\"http://blog.csdn.net/jiangwei0910410003/article/details/52687530\">Android中WebView的JavaScript代码和本地代码交互的三种方式</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/07/25/android-webview-summary/\">http://agehua.github.io/2016/07/25/android-webview-summary/</a></p>"},{"layout":"post","title":"Android手机定位服务","keywords":"LocationListener","description":"Android使用手机定位服务使用，GPS服务不可用则跳转到手机位置服务设置页面","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg","_content":"\n\n\n### 1.LocationListener使用\n\n优先使用网络定位服务，当GPS服务不可用则跳转到手机位置服务设置页面\n\n<!--more-->\n\n代码收集：\n\n~~~ Java\n/**\n  * 使用手机定位服务\n  */\nprivate void startLocationService(){\n    locationListener = new LocationListener() {\n\n        @Override\n        public void onStatusChanged(String provider, int status, Bundle extras) {\n        }\n        @Override\n        public void onProviderEnabled(String provider) {\n            // 当GPS LocationProvider可用时，更新位置\n            location = locManager.getLastKnownLocation(provider);\n        }\n        @Override\n        public void onProviderDisabled(String provider) {\n            isLocatedSuccess = false;\n            if (provider.equals(\"network\")) {\n                    locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3 * 1000, 8,locationListener);\n            }else if(provider.equals(\"gps\")){//GPS服务不可用，跳到位置服务设置页面\n                startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\n            }else {\n                updateToNewLocation(null);\n            }\n        }\n        @Override\n        public void onLocationChanged(Location location) {\n            // 当定位信息发生改变时，更新位置\n            isLocatedSuccess = true;\n            updateToNewLocation(location);\n            locManager.removeUpdates(this);\n        }\n    };\n\n    if (locManager.getProvider(LocationManager.NETWORK_PROVIDER) != null)\n        locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 3 * 1000, 8,locationListener);\n    else if (locManager.getProvider(LocationManager.GPS_PROVIDER) != null)\n        locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3 * 1000, 8,locationListener);\n    else Toast.makeText(mActivity(), \"获取手机位置信息错误\", Toast.LENGTH_SHORT).show();\n}\n~~~\n","source":"_posts/2016-08-03-android-LocationListener.md","raw":"---\nlayout: post\ntitle: Android手机定位服务\ncategory: technology\ntags:\n  - ANDROID\n  - LocationListener\nkeywords: LocationListener\ndescription: Android使用手机定位服务使用，GPS服务不可用则跳转到手机位置服务设置页面\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg\n---\n\n\n\n### 1.LocationListener使用\n\n优先使用网络定位服务，当GPS服务不可用则跳转到手机位置服务设置页面\n\n<!--more-->\n\n代码收集：\n\n~~~ Java\n/**\n  * 使用手机定位服务\n  */\nprivate void startLocationService(){\n    locationListener = new LocationListener() {\n\n        @Override\n        public void onStatusChanged(String provider, int status, Bundle extras) {\n        }\n        @Override\n        public void onProviderEnabled(String provider) {\n            // 当GPS LocationProvider可用时，更新位置\n            location = locManager.getLastKnownLocation(provider);\n        }\n        @Override\n        public void onProviderDisabled(String provider) {\n            isLocatedSuccess = false;\n            if (provider.equals(\"network\")) {\n                    locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3 * 1000, 8,locationListener);\n            }else if(provider.equals(\"gps\")){//GPS服务不可用，跳到位置服务设置页面\n                startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\n            }else {\n                updateToNewLocation(null);\n            }\n        }\n        @Override\n        public void onLocationChanged(Location location) {\n            // 当定位信息发生改变时，更新位置\n            isLocatedSuccess = true;\n            updateToNewLocation(location);\n            locManager.removeUpdates(this);\n        }\n    };\n\n    if (locManager.getProvider(LocationManager.NETWORK_PROVIDER) != null)\n        locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 3 * 1000, 8,locationListener);\n    else if (locManager.getProvider(LocationManager.GPS_PROVIDER) != null)\n        locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3 * 1000, 8,locationListener);\n    else Toast.makeText(mActivity(), \"获取手机位置信息错误\", Toast.LENGTH_SHORT).show();\n}\n~~~\n","slug":"android-LocationListener","published":1,"date":"2016-08-02T16:00:00.000Z","updated":"2017-11-23T07:24:27.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxi0014d6ykplzczbw9","content":"<h3 id=\"1-LocationListener使用\"><a href=\"#1-LocationListener使用\" class=\"headerlink\" title=\"1.LocationListener使用\"></a>1.LocationListener使用</h3><p>优先使用网络定位服务，当GPS服务不可用则跳转到手机位置服务设置页面</p>\n<a id=\"more\"></a>\n<p>代码收集：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * 使用手机定位服务</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startLocationService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    locationListener = <span class=\"keyword\">new</span> LocationListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStatusChanged</span><span class=\"params\">(String provider, <span class=\"keyword\">int</span> status, Bundle extras)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderEnabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当GPS LocationProvider可用时，更新位置</span></div><div class=\"line\">            location = locManager.getLastKnownLocation(provider);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">            isLocatedSuccess = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (provider.equals(<span class=\"string\">\"network\"</span>)) &#123;</div><div class=\"line\">                    locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(provider.equals(<span class=\"string\">\"gps\"</span>))&#123;<span class=\"comment\">//GPS服务不可用，跳到位置服务设置页面</span></div><div class=\"line\">                startActivity(<span class=\"keyword\">new</span> Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                updateToNewLocation(<span class=\"keyword\">null</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLocationChanged</span><span class=\"params\">(Location location)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当定位信息发生改变时，更新位置</span></div><div class=\"line\">            isLocatedSuccess = <span class=\"keyword\">true</span>;</div><div class=\"line\">            updateToNewLocation(location);</div><div class=\"line\">            locManager.removeUpdates(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (locManager.getProvider(LocationManager.NETWORK_PROVIDER) != <span class=\"keyword\">null</span>)</div><div class=\"line\">        locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (locManager.getProvider(LocationManager.GPS_PROVIDER) != <span class=\"keyword\">null</span>)</div><div class=\"line\">        locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">    <span class=\"keyword\">else</span> Toast.makeText(mActivity(), <span class=\"string\">\"获取手机位置信息错误\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/08/03/android-LocationListener/\">http://agehua.github.io/2016/08/03/android-LocationListener/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.13,"time":67800,"words":226},"excerpt":"<h3 id=\"1-LocationListener使用\"><a href=\"#1-LocationListener使用\" class=\"headerlink\" title=\"1.LocationListener使用\"></a>1.LocationListener使用</h3><p>优先使用网络定位服务，当GPS服务不可用则跳转到手机位置服务设置页面</p>","more":"<p>代码收集：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * 使用手机定位服务</div><div class=\"line\">  */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startLocationService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    locationListener = <span class=\"keyword\">new</span> LocationListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStatusChanged</span><span class=\"params\">(String provider, <span class=\"keyword\">int</span> status, Bundle extras)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderEnabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当GPS LocationProvider可用时，更新位置</span></div><div class=\"line\">            location = locManager.getLastKnownLocation(provider);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;</div><div class=\"line\">            isLocatedSuccess = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (provider.equals(<span class=\"string\">\"network\"</span>)) &#123;</div><div class=\"line\">                    locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(provider.equals(<span class=\"string\">\"gps\"</span>))&#123;<span class=\"comment\">//GPS服务不可用，跳到位置服务设置页面</span></div><div class=\"line\">                startActivity(<span class=\"keyword\">new</span> Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                updateToNewLocation(<span class=\"keyword\">null</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLocationChanged</span><span class=\"params\">(Location location)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当定位信息发生改变时，更新位置</span></div><div class=\"line\">            isLocatedSuccess = <span class=\"keyword\">true</span>;</div><div class=\"line\">            updateToNewLocation(location);</div><div class=\"line\">            locManager.removeUpdates(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (locManager.getProvider(LocationManager.NETWORK_PROVIDER) != <span class=\"keyword\">null</span>)</div><div class=\"line\">        locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (locManager.getProvider(LocationManager.GPS_PROVIDER) != <span class=\"keyword\">null</span>)</div><div class=\"line\">        locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">3</span> * <span class=\"number\">1000</span>, <span class=\"number\">8</span>,locationListener);</div><div class=\"line\">    <span class=\"keyword\">else</span> Toast.makeText(mActivity(), <span class=\"string\">\"获取手机位置信息错误\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/08/03/android-LocationListener/\">http://agehua.github.io/2016/08/03/android-LocationListener/</a></p>"},{"layout":"post","title":"RxJava 学习","keywords":"RxJava RxAndroid","description":"RxAndroid学习","banner":"http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg","_content":"\n\n### 1.向前辈致敬\n[给Android开发者的RxJava详解](http://gank.io/post/560e15be2dca930e00da1083)，这篇文章讲解详细，如果耐心看完，相信肯定收获不小\n\n    本篇博文用作学习RxJava过程中，记录知识和心得，如有冒犯还请见谅！\n\n### 2.简单介绍\nRxJava是通过一种扩展的观察者模式来实现的。\nRxJava有四个基本概念：Observable(可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable和Observer通过subscribe()方法实现订阅关系，从而Observable可以在需要的时候发出事件来通知Observer。\n\n<!--more-->\n\n与传统观察者模式不同， RxJava 的事件回调方法除了普通事件onNext()（相当于onClick()/onEvent()）之外，还定义了两个特殊的事件：onCompleted()和onError()。\n\n> RxJava的基本实现主要有三点：Observer的创建、Observable的创建、Scheduler线程控制\n\n### 3.Observer的创建方法\n\nObserver 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：\n\n~~~ Java\nObserver<String> observer = new Observer<String>() {\n    @Override\n    public void onNext(String s) {\n        Log.d(tag, \"Item: \" + s);\n    }\n\n    @Override\n    public void onCompleted() {\n        Log.d(tag, \"Completed!\");\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        Log.d(tag, \"Error!\");\n    }\n};\n~~~\n除了 Observer 接口之外，RxJava还内置了一个实现了Observer的抽象类：Subscriber。 Subscriber对Observer接口进行了一些扩展，但他们的基本使用方式是完全一样的：\n\n~~~ Java\nSubscriber<String> subscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) {\n        Log.d(tag, \"Item: \" + s);\n    }\n\n    @Override\n    public void onCompleted() {\n        Log.d(tag, \"Completed!\");\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        Log.d(tag, \"Error!\");\n    }\n};\n~~~\n\nObserver和Subscriber区别对于使用者来说主要有两点：\n\n- onStart(): 这是Subscriber增加的方法。\n\n    它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。\n    > 需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart()就不适用了，因为它总是在subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。\n\n- unsubscribe(): 这是Subscriber所实现的另一个接口Subscription的方法，用于取消订阅。\n\n    在这个方法被调用后，Subscriber将不再接收事件。一般在这个方法调用前，可以使用isUnsubscribed()先判断一下状态。 **unsubscribe()**这个方法很重要，因为在subscribe()之后，Observable会持有 Subscriber 的引用，这个引用**如果不能及时被释放**，将有**内存泄露的风险**。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。\n\n### 4.Observable的几种创建方法：\n\n#### **1.Observable.just(T...)和from(T[])/from(Iterable<? extends T>)**\n\n  - 1). just(T...): 将传入的参数依次发送出来\n\n  - 2). from(T[])/from(Iterable<? extends T>): 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。\n\n  - 3). 由这两个方法创建的Observable对象的特点是：所有Observer一旦订阅这个Observable就会立即调用onNext()方法并传入Observable.just()/from()的参数，而后因为Observable没有数据可以发送了，onComplete()方法会被调用。\n\n  ~~~ Java\n  Observable<List<String>> listObservable = Observable.just(getColorList());\n  ~~~\n\n  > 注意，如果just()中传入的是耗时方法，该方法会被立即执行并阻塞UI线程。这里的getColorList()是一个不耗时的方法.\n\n    下一步，我们写一个Observer来观察Observable。\n\n~~~ Java\nlistObservable.subscribe(new Observer<List<String>>() {\n\n    @Override\n    public void onCompleted() { }\n\n    @Override\n    public void onError(Throwable e) { }\n\n    @Override\n    public void onNext(List<String> colors) {\n        mSimpleStringAdapter.setStrings(colors);\n    }\n});\n~~~\n  在这个例子中我们不关心Observable何时完成数据的传输，所以我们不用在onComplete()方法里写代码。而且在这里不会有异常抛出，所以我们也不用管onError()方法\n\n#### **2.Observable.fromCallable()**\n\n  先看代码：\n\n~~~ Java\nObservable<List<String>> tvShowObservable = Observable.fromCallable(new Callable<List<String>>() {\n\n      @Override\n      public List<String> call() {\n          return mRestClient.getFavoriteTvShows();\n      }\n});\n~~~\n\n使用Observable.fromCallable()方法有两点好处：\n\n  - 1).获取要发送的数据的代码只会在有Observer订阅之后执行。\n\n  - 2).获取数据的代码（指的是call()方法）可以在子线程中执行。对比just()中传入的方法只能运行在主线程。\n\n    这两点好处有时可能非常重要。\n\n现在让我们订阅这个Observable。\n\n~~~ Java\nmTvShowSubscription = tvShowObservable\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new Observer<List<String>>() {\n\n        @Override\n        public void onCompleted() { }\n\n        @Override\n        public void onError(Throwable e) { }\n\n        @Override\n        public void onNext(List<String> tvShows){\n            displayTvShows(tvShows);\n        }\n});\n~~~\n\n  上面代码逐一介绍：\n\n  - 1).subscribeOn() 指定事件发生的线程\n\n    在默认情况下Observable的所有代码，都会在执行subscribe()方法的线程中运行。而通过subscribeOn()方法，这些代码可以在其他线程中执行。在上面的例子中，我们让代码在\"IO Scheduler\"中执行（Schedulers.io()）。现在我们可以只把Scheduler当做一个可以工作的子线程。\n\n  - 2).observeOn() 会指定onNext()方法发生的线程\n\n    通过在observeOn()方法中指定另一个Scheduler来完成onNext()的内容，在这里也就是AndroidSchedules.mainThread()所返回的Scheduler(UI线程的Scheduler)。\n\n  - 3).subscribe() Callable只会在有在Observable调用subscribe()后执行。\n\n    Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：\n\n~~~ Java  \n// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。\n// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。\npublic Subscription subscribe(Subscriber subscriber) {\n    subscriber.onStart();\n    onSubscribe.call(subscriber);\n    return subscriber;\n}\n~~~\n  可以看到，subscriber()做了3件事：\n\n>   ①.调用Subscriber.onStart()。这个方法在前面已经介绍过，是一个可选的准备方法。\n   ②.调用Observable中的OnSubscribe.call(Subscriber)。在这里，事件发送的逻辑开始运行。从这也可以看出，在RxJava中， Observable并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe()方法执行的时候。\n   ③.将传入的Subscriber作为Subscription返回。这是为了方便unsubscribe().\n\n  - 4).mTvShowSubscription\n\n    每当Observer订阅Observable时就会生成一个Subscription对象。一个Subscription代表了一个Observer与Observable之间的连接。有时我们需要操作这个连接，这里拿在Activity的onDestroy()方法中的代码举个例子：\n\n~~~ Java  \nif (mTvShowSubscription != null && !mTvShowSubscription.isUnsubscribed()) {\n      mTvShowSubscription.unsubscribe(); //取消订阅\n}\n~~~\n   unsubscribe()方法告诉Observable它所发送的数据不再被Observer所接收。在调用unsubscribe()方法后，我们创建的Observer就不再会收到数据了，以免Observable异步加载数据时发生意外。\n\n#### **3.使用Single**\n\nSingle是Observable的精简版，一种特殊的只发射单个值的Observable，几乎和Observable一模一样，但其回调方法不是onComplete()/onNext()/onError()，而是onSuccess()/onError()。\n\n  我们现在把刚才写过的Observable用Single重写一遍。首先我们要创建一个Single:\n\n~~~ Java\nSingle<List<String>> tvShowSingle = Single.fromCallable(new Callable<List<String>>() {\n    @Override\n    public List<String> call() throws Exception {\n        mRestClient.getFavoriteTvShows();\n    }\n});\n~~~\n\n  然后订阅一下\n\n~~~ Java\nmTvShowSubscription = tvShowSingle\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new SingleSubscriber<List<String>>() {\n\n        @Override\n        public void onSuccess(List<String> tvShows) {\n            displayTvShows(tvShows);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            displayErrorMessage();\n        }\n});\n~~~\n\n\n但这次我们不再使用Observer，而是使用一个叫SingleSubscriber的类。这个类和Observer非常像，只不过它只有上述两个方法：onSuccess()和onError()。SingleSubscriber之于Single就如Observer之于Observable。\n\n订阅一个Single的同时也会自动创建一个Subscription对象。这里的Subscription和上面的例子没有区别，一定要在onDestroy()中解除订阅。\n\n### 5.线程控制——Scheduler\n\n  RxJava已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：\n\n> - 1.Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。\n- 2.Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n- 3.Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n- 4.Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n- 5.另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。\n\n### 6.特殊的情况\n\n1.Subject Observable和Observer的复合体，也是二者的桥梁\n\n  Subjects = Observable + Observer，Subject继承自Observable实现了Observer\n\n  Rxjava提供的四种Subject:\n\n>    ①PublishSubject ： subject的基础子类。\n    ②BehaviorSubject : 会首先向它的订阅者发送截止订阅前最新的一个数据，然后正常发送订阅后的数据流。\n    ③ReplaySubject ： 会缓存它所订阅的所有数据，向所有订阅它的观察者重发。\n    ④AsyncSubject ： 只会发布最后一个数据给已经订阅的每一个观察者。\n","source":"_posts/2016-08-16-RxAndroid-Learning.md","raw":"---\nlayout: post\ntitle: RxJava 学习\ncategory: technology\ntags:\n  - RxJava\n  - RxAndroid\nkeywords: RxJava RxAndroid\ndescription: RxAndroid学习\nbanner: http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg\n---\n\n\n### 1.向前辈致敬\n[给Android开发者的RxJava详解](http://gank.io/post/560e15be2dca930e00da1083)，这篇文章讲解详细，如果耐心看完，相信肯定收获不小\n\n    本篇博文用作学习RxJava过程中，记录知识和心得，如有冒犯还请见谅！\n\n### 2.简单介绍\nRxJava是通过一种扩展的观察者模式来实现的。\nRxJava有四个基本概念：Observable(可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable和Observer通过subscribe()方法实现订阅关系，从而Observable可以在需要的时候发出事件来通知Observer。\n\n<!--more-->\n\n与传统观察者模式不同， RxJava 的事件回调方法除了普通事件onNext()（相当于onClick()/onEvent()）之外，还定义了两个特殊的事件：onCompleted()和onError()。\n\n> RxJava的基本实现主要有三点：Observer的创建、Observable的创建、Scheduler线程控制\n\n### 3.Observer的创建方法\n\nObserver 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：\n\n~~~ Java\nObserver<String> observer = new Observer<String>() {\n    @Override\n    public void onNext(String s) {\n        Log.d(tag, \"Item: \" + s);\n    }\n\n    @Override\n    public void onCompleted() {\n        Log.d(tag, \"Completed!\");\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        Log.d(tag, \"Error!\");\n    }\n};\n~~~\n除了 Observer 接口之外，RxJava还内置了一个实现了Observer的抽象类：Subscriber。 Subscriber对Observer接口进行了一些扩展，但他们的基本使用方式是完全一样的：\n\n~~~ Java\nSubscriber<String> subscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) {\n        Log.d(tag, \"Item: \" + s);\n    }\n\n    @Override\n    public void onCompleted() {\n        Log.d(tag, \"Completed!\");\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        Log.d(tag, \"Error!\");\n    }\n};\n~~~\n\nObserver和Subscriber区别对于使用者来说主要有两点：\n\n- onStart(): 这是Subscriber增加的方法。\n\n    它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。\n    > 需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart()就不适用了，因为它总是在subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。\n\n- unsubscribe(): 这是Subscriber所实现的另一个接口Subscription的方法，用于取消订阅。\n\n    在这个方法被调用后，Subscriber将不再接收事件。一般在这个方法调用前，可以使用isUnsubscribed()先判断一下状态。 **unsubscribe()**这个方法很重要，因为在subscribe()之后，Observable会持有 Subscriber 的引用，这个引用**如果不能及时被释放**，将有**内存泄露的风险**。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。\n\n### 4.Observable的几种创建方法：\n\n#### **1.Observable.just(T...)和from(T[])/from(Iterable<? extends T>)**\n\n  - 1). just(T...): 将传入的参数依次发送出来\n\n  - 2). from(T[])/from(Iterable<? extends T>): 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。\n\n  - 3). 由这两个方法创建的Observable对象的特点是：所有Observer一旦订阅这个Observable就会立即调用onNext()方法并传入Observable.just()/from()的参数，而后因为Observable没有数据可以发送了，onComplete()方法会被调用。\n\n  ~~~ Java\n  Observable<List<String>> listObservable = Observable.just(getColorList());\n  ~~~\n\n  > 注意，如果just()中传入的是耗时方法，该方法会被立即执行并阻塞UI线程。这里的getColorList()是一个不耗时的方法.\n\n    下一步，我们写一个Observer来观察Observable。\n\n~~~ Java\nlistObservable.subscribe(new Observer<List<String>>() {\n\n    @Override\n    public void onCompleted() { }\n\n    @Override\n    public void onError(Throwable e) { }\n\n    @Override\n    public void onNext(List<String> colors) {\n        mSimpleStringAdapter.setStrings(colors);\n    }\n});\n~~~\n  在这个例子中我们不关心Observable何时完成数据的传输，所以我们不用在onComplete()方法里写代码。而且在这里不会有异常抛出，所以我们也不用管onError()方法\n\n#### **2.Observable.fromCallable()**\n\n  先看代码：\n\n~~~ Java\nObservable<List<String>> tvShowObservable = Observable.fromCallable(new Callable<List<String>>() {\n\n      @Override\n      public List<String> call() {\n          return mRestClient.getFavoriteTvShows();\n      }\n});\n~~~\n\n使用Observable.fromCallable()方法有两点好处：\n\n  - 1).获取要发送的数据的代码只会在有Observer订阅之后执行。\n\n  - 2).获取数据的代码（指的是call()方法）可以在子线程中执行。对比just()中传入的方法只能运行在主线程。\n\n    这两点好处有时可能非常重要。\n\n现在让我们订阅这个Observable。\n\n~~~ Java\nmTvShowSubscription = tvShowObservable\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new Observer<List<String>>() {\n\n        @Override\n        public void onCompleted() { }\n\n        @Override\n        public void onError(Throwable e) { }\n\n        @Override\n        public void onNext(List<String> tvShows){\n            displayTvShows(tvShows);\n        }\n});\n~~~\n\n  上面代码逐一介绍：\n\n  - 1).subscribeOn() 指定事件发生的线程\n\n    在默认情况下Observable的所有代码，都会在执行subscribe()方法的线程中运行。而通过subscribeOn()方法，这些代码可以在其他线程中执行。在上面的例子中，我们让代码在\"IO Scheduler\"中执行（Schedulers.io()）。现在我们可以只把Scheduler当做一个可以工作的子线程。\n\n  - 2).observeOn() 会指定onNext()方法发生的线程\n\n    通过在observeOn()方法中指定另一个Scheduler来完成onNext()的内容，在这里也就是AndroidSchedules.mainThread()所返回的Scheduler(UI线程的Scheduler)。\n\n  - 3).subscribe() Callable只会在有在Observable调用subscribe()后执行。\n\n    Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：\n\n~~~ Java  \n// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。\n// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。\npublic Subscription subscribe(Subscriber subscriber) {\n    subscriber.onStart();\n    onSubscribe.call(subscriber);\n    return subscriber;\n}\n~~~\n  可以看到，subscriber()做了3件事：\n\n>   ①.调用Subscriber.onStart()。这个方法在前面已经介绍过，是一个可选的准备方法。\n   ②.调用Observable中的OnSubscribe.call(Subscriber)。在这里，事件发送的逻辑开始运行。从这也可以看出，在RxJava中， Observable并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe()方法执行的时候。\n   ③.将传入的Subscriber作为Subscription返回。这是为了方便unsubscribe().\n\n  - 4).mTvShowSubscription\n\n    每当Observer订阅Observable时就会生成一个Subscription对象。一个Subscription代表了一个Observer与Observable之间的连接。有时我们需要操作这个连接，这里拿在Activity的onDestroy()方法中的代码举个例子：\n\n~~~ Java  \nif (mTvShowSubscription != null && !mTvShowSubscription.isUnsubscribed()) {\n      mTvShowSubscription.unsubscribe(); //取消订阅\n}\n~~~\n   unsubscribe()方法告诉Observable它所发送的数据不再被Observer所接收。在调用unsubscribe()方法后，我们创建的Observer就不再会收到数据了，以免Observable异步加载数据时发生意外。\n\n#### **3.使用Single**\n\nSingle是Observable的精简版，一种特殊的只发射单个值的Observable，几乎和Observable一模一样，但其回调方法不是onComplete()/onNext()/onError()，而是onSuccess()/onError()。\n\n  我们现在把刚才写过的Observable用Single重写一遍。首先我们要创建一个Single:\n\n~~~ Java\nSingle<List<String>> tvShowSingle = Single.fromCallable(new Callable<List<String>>() {\n    @Override\n    public List<String> call() throws Exception {\n        mRestClient.getFavoriteTvShows();\n    }\n});\n~~~\n\n  然后订阅一下\n\n~~~ Java\nmTvShowSubscription = tvShowSingle\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new SingleSubscriber<List<String>>() {\n\n        @Override\n        public void onSuccess(List<String> tvShows) {\n            displayTvShows(tvShows);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            displayErrorMessage();\n        }\n});\n~~~\n\n\n但这次我们不再使用Observer，而是使用一个叫SingleSubscriber的类。这个类和Observer非常像，只不过它只有上述两个方法：onSuccess()和onError()。SingleSubscriber之于Single就如Observer之于Observable。\n\n订阅一个Single的同时也会自动创建一个Subscription对象。这里的Subscription和上面的例子没有区别，一定要在onDestroy()中解除订阅。\n\n### 5.线程控制——Scheduler\n\n  RxJava已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：\n\n> - 1.Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。\n- 2.Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n- 3.Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n- 4.Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n- 5.另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。\n\n### 6.特殊的情况\n\n1.Subject Observable和Observer的复合体，也是二者的桥梁\n\n  Subjects = Observable + Observer，Subject继承自Observable实现了Observer\n\n  Rxjava提供的四种Subject:\n\n>    ①PublishSubject ： subject的基础子类。\n    ②BehaviorSubject : 会首先向它的订阅者发送截止订阅前最新的一个数据，然后正常发送订阅后的数据流。\n    ③ReplaySubject ： 会缓存它所订阅的所有数据，向所有订阅它的观察者重发。\n    ④AsyncSubject ： 只会发布最后一个数据给已经订阅的每一个观察者。\n","slug":"RxAndroid-Learning","published":1,"date":"2016-08-15T16:00:00.000Z","updated":"2017-11-23T07:06:24.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxo0017d6yk943ra445","content":"<h3 id=\"1-向前辈致敬\"><a href=\"#1-向前辈致敬\" class=\"headerlink\" title=\"1.向前辈致敬\"></a>1.向前辈致敬</h3><p><a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">给Android开发者的RxJava详解</a>，这篇文章讲解详细，如果耐心看完，相信肯定收获不小</p>\n<pre><code>本篇博文用作学习RxJava过程中，记录知识和心得，如有冒犯还请见谅！\n</code></pre><h3 id=\"2-简单介绍\"><a href=\"#2-简单介绍\" class=\"headerlink\" title=\"2.简单介绍\"></a>2.简单介绍</h3><p>RxJava是通过一种扩展的观察者模式来实现的。<br>RxJava有四个基本概念：Observable(可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable和Observer通过subscribe()方法实现订阅关系，从而Observable可以在需要的时候发出事件来通知Observer。</p>\n<a id=\"more\"></a>\n<p>与传统观察者模式不同， RxJava 的事件回调方法除了普通事件onNext()（相当于onClick()/onEvent()）之外，还定义了两个特殊的事件：onCompleted()和onError()。</p>\n<blockquote>\n<p>RxJava的基本实现主要有三点：Observer的创建、Observable的创建、Scheduler线程控制</p>\n</blockquote>\n<h3 id=\"3-Observer的创建方法\"><a href=\"#3-Observer的创建方法\" class=\"headerlink\" title=\"3.Observer的创建方法\"></a>3.Observer的创建方法</h3><p>Observer 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observer&lt;String&gt; observer = <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>除了 Observer 接口之外，RxJava还内置了一个实现了Observer的抽象类：Subscriber。 Subscriber对Observer接口进行了一些扩展，但他们的基本使用方式是完全一样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Observer和Subscriber区别对于使用者来说主要有两点：</p>\n<ul>\n<li><p>onStart(): 这是Subscriber增加的方法。</p>\n<p>  它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。</p>\n<blockquote>\n<p>需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart()就不适用了，因为它总是在subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。</p>\n</blockquote>\n</li>\n<li><p>unsubscribe(): 这是Subscriber所实现的另一个接口Subscription的方法，用于取消订阅。</p>\n<p>  在这个方法被调用后，Subscriber将不再接收事件。一般在这个方法调用前，可以使用isUnsubscribed()先判断一下状态。 <strong>unsubscribe()</strong>这个方法很重要，因为在subscribe()之后，Observable会持有 Subscriber 的引用，这个引用<strong>如果不能及时被释放</strong>，将有<strong>内存泄露的风险</strong>。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。</p>\n</li>\n</ul>\n<h3 id=\"4-Observable的几种创建方法：\"><a href=\"#4-Observable的几种创建方法：\" class=\"headerlink\" title=\"4.Observable的几种创建方法：\"></a>4.Observable的几种创建方法：</h3><h4 id=\"1-Observable-just-T…-和from-T-from-Iterable-lt-extends-T-gt\"><a href=\"#1-Observable-just-T…-和from-T-from-Iterable-lt-extends-T-gt\" class=\"headerlink\" title=\"1.Observable.just(T…)和from(T[])/from(Iterable&lt;? extends T&gt;)\"></a><strong>1.Observable.just(T…)和from(T[])/from(Iterable&lt;? extends T&gt;)</strong></h4><ul>\n<li><p>1). just(T…): 将传入的参数依次发送出来</p>\n</li>\n<li><p>2). from(T[])/from(Iterable&lt;? extends T&gt;): 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</p>\n</li>\n<li><p>3). 由这两个方法创建的Observable对象的特点是：所有Observer一旦订阅这个Observable就会立即调用onNext()方法并传入Observable.just()/from()的参数，而后因为Observable没有数据可以发送了，onComplete()方法会被调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observable&lt;List&lt;String&gt;&gt; listObservable = Observable.just(getColorList());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，如果just()中传入的是耗时方法，该方法会被立即执行并阻塞UI线程。这里的getColorList()是一个不耗时的方法.</p>\n</blockquote>\n<p>下一步，我们写一个Observer来观察Observable。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">listObservable.subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; colors)</span> </span>&#123;</div><div class=\"line\">        mSimpleStringAdapter.setStrings(colors);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  在这个例子中我们不关心Observable何时完成数据的传输，所以我们不用在onComplete()方法里写代码。而且在这里不会有异常抛出，所以我们也不用管onError()方法</p>\n<h4 id=\"2-Observable-fromCallable\"><a href=\"#2-Observable-fromCallable\" class=\"headerlink\" title=\"2.Observable.fromCallable()\"></a><strong>2.Observable.fromCallable()</strong></h4><p>  先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observable&lt;List&lt;String&gt;&gt; tvShowObservable = Observable.fromCallable(<span class=\"keyword\">new</span> Callable&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> mRestClient.getFavoriteTvShows();</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用Observable.fromCallable()方法有两点好处：</p>\n<ul>\n<li><p>1).获取要发送的数据的代码只会在有Observer订阅之后执行。</p>\n</li>\n<li><p>2).获取数据的代码（指的是call()方法）可以在子线程中执行。对比just()中传入的方法只能运行在主线程。</p>\n<p>这两点好处有时可能非常重要。</p>\n</li>\n</ul>\n<p>现在让我们订阅这个Observable。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mTvShowSubscription = tvShowObservable</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; tvShows)</span></span>&#123;</div><div class=\"line\">            displayTvShows(tvShows);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  上面代码逐一介绍：</p>\n<ul>\n<li><p>1).subscribeOn() 指定事件发生的线程</p>\n<p>在默认情况下Observable的所有代码，都会在执行subscribe()方法的线程中运行。而通过subscribeOn()方法，这些代码可以在其他线程中执行。在上面的例子中，我们让代码在”IO Scheduler”中执行（Schedulers.io()）。现在我们可以只把Scheduler当做一个可以工作的子线程。</p>\n</li>\n<li><p>2).observeOn() 会指定onNext()方法发生的线程</p>\n<p>通过在observeOn()方法中指定另一个Scheduler来完成onNext()的内容，在这里也就是AndroidSchedules.mainThread()所返回的Scheduler(UI线程的Scheduler)。</p>\n</li>\n<li><p>3).subscribe() Callable只会在有在Observable调用subscribe()后执行。</p>\n<p>Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class=\"line\"><span class=\"comment\">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Subscription <span class=\"title\">subscribe</span><span class=\"params\">(Subscriber subscriber)</span> </span>&#123;</div><div class=\"line\">    subscriber.onStart();</div><div class=\"line\">    onSubscribe.call(subscriber);</div><div class=\"line\">    <span class=\"keyword\">return</span> subscriber;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  可以看到，subscriber()做了3件事：</p>\n<blockquote>\n<p>  ①.调用Subscriber.onStart()。这个方法在前面已经介绍过，是一个可选的准备方法。<br>   ②.调用Observable中的OnSubscribe.call(Subscriber)。在这里，事件发送的逻辑开始运行。从这也可以看出，在RxJava中， Observable并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe()方法执行的时候。<br>   ③.将传入的Subscriber作为Subscription返回。这是为了方便unsubscribe().</p>\n</blockquote>\n<ul>\n<li><p>4).mTvShowSubscription</p>\n<p>每当Observer订阅Observable时就会生成一个Subscription对象。一个Subscription代表了一个Observer与Observable之间的连接。有时我们需要操作这个连接，这里拿在Activity的onDestroy()方法中的代码举个例子：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mTvShowSubscription != <span class=\"keyword\">null</span> &amp;&amp; !mTvShowSubscription.isUnsubscribed()) &#123;</div><div class=\"line\">      mTvShowSubscription.unsubscribe(); <span class=\"comment\">//取消订阅</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   unsubscribe()方法告诉Observable它所发送的数据不再被Observer所接收。在调用unsubscribe()方法后，我们创建的Observer就不再会收到数据了，以免Observable异步加载数据时发生意外。</p>\n<h4 id=\"3-使用Single\"><a href=\"#3-使用Single\" class=\"headerlink\" title=\"3.使用Single\"></a><strong>3.使用Single</strong></h4><p>Single是Observable的精简版，一种特殊的只发射单个值的Observable，几乎和Observable一模一样，但其回调方法不是onComplete()/onNext()/onError()，而是onSuccess()/onError()。</p>\n<p>  我们现在把刚才写过的Observable用Single重写一遍。首先我们要创建一个Single:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Single&lt;List&lt;String&gt;&gt; tvShowSingle = Single.fromCallable(<span class=\"keyword\">new</span> Callable&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        mRestClient.getFavoriteTvShows();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  然后订阅一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mTvShowSubscription = tvShowSingle</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(<span class=\"keyword\">new</span> SingleSubscriber&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(List&lt;String&gt; tvShows)</span> </span>&#123;</div><div class=\"line\">            displayTvShows(tvShows);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable error)</span> </span>&#123;</div><div class=\"line\">            displayErrorMessage();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>但这次我们不再使用Observer，而是使用一个叫SingleSubscriber的类。这个类和Observer非常像，只不过它只有上述两个方法：onSuccess()和onError()。SingleSubscriber之于Single就如Observer之于Observable。</p>\n<p>订阅一个Single的同时也会自动创建一个Subscription对象。这里的Subscription和上面的例子没有区别，一定要在onDestroy()中解除订阅。</p>\n<h3 id=\"5-线程控制——Scheduler\"><a href=\"#5-线程控制——Scheduler\" class=\"headerlink\" title=\"5.线程控制——Scheduler\"></a>5.线程控制——Scheduler</h3><p>  RxJava已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：</p>\n<blockquote>\n<ul>\n<li>1.Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>\n<li>2.Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li>\n<li>3.Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>\n<li>4.Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>\n<li>5.另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。</li>\n</ul>\n</blockquote>\n<h3 id=\"6-特殊的情况\"><a href=\"#6-特殊的情况\" class=\"headerlink\" title=\"6.特殊的情况\"></a>6.特殊的情况</h3><p>1.Subject Observable和Observer的复合体，也是二者的桥梁</p>\n<p>  Subjects = Observable + Observer，Subject继承自Observable实现了Observer</p>\n<p>  Rxjava提供的四种Subject:</p>\n<blockquote>\n<p>   ①PublishSubject ： subject的基础子类。<br>    ②BehaviorSubject : 会首先向它的订阅者发送截止订阅前最新的一个数据，然后正常发送订阅后的数据流。<br>    ③ReplaySubject ： 会缓存它所订阅的所有数据，向所有订阅它的观察者重发。<br>    ④AsyncSubject ： 只会发布最后一个数据给已经订阅的每一个观察者。</p>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/08/16/RxAndroid-Learning/\">http://agehua.github.io/2016/08/16/RxAndroid-Learning/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.345,"time":200700.00000000003,"words":669},"excerpt":"<h3 id=\"1-向前辈致敬\"><a href=\"#1-向前辈致敬\" class=\"headerlink\" title=\"1.向前辈致敬\"></a>1.向前辈致敬</h3><p><a href=\"http://gank.io/post/560e15be2dca930e00da1083\">给Android开发者的RxJava详解</a>，这篇文章讲解详细，如果耐心看完，相信肯定收获不小</p>\n<pre><code>本篇博文用作学习RxJava过程中，记录知识和心得，如有冒犯还请见谅！\n</code></pre><h3 id=\"2-简单介绍\"><a href=\"#2-简单介绍\" class=\"headerlink\" title=\"2.简单介绍\"></a>2.简单介绍</h3><p>RxJava是通过一种扩展的观察者模式来实现的。<br>RxJava有四个基本概念：Observable(可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable和Observer通过subscribe()方法实现订阅关系，从而Observable可以在需要的时候发出事件来通知Observer。</p>","more":"<p>与传统观察者模式不同， RxJava 的事件回调方法除了普通事件onNext()（相当于onClick()/onEvent()）之外，还定义了两个特殊的事件：onCompleted()和onError()。</p>\n<blockquote>\n<p>RxJava的基本实现主要有三点：Observer的创建、Observable的创建、Scheduler线程控制</p>\n</blockquote>\n<h3 id=\"3-Observer的创建方法\"><a href=\"#3-Observer的创建方法\" class=\"headerlink\" title=\"3.Observer的创建方法\"></a>3.Observer的创建方法</h3><p>Observer 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observer&lt;String&gt; observer = <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>除了 Observer 接口之外，RxJava还内置了一个实现了Observer的抽象类：Subscriber。 Subscriber对Observer接口进行了一些扩展，但他们的基本使用方式是完全一样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Item: \"</span> + s);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Completed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">        Log.d(tag, <span class=\"string\">\"Error!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Observer和Subscriber区别对于使用者来说主要有两点：</p>\n<ul>\n<li><p>onStart(): 这是Subscriber增加的方法。</p>\n<p>  它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。</p>\n<blockquote>\n<p>需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart()就不适用了，因为它总是在subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。</p>\n</blockquote>\n</li>\n<li><p>unsubscribe(): 这是Subscriber所实现的另一个接口Subscription的方法，用于取消订阅。</p>\n<p>  在这个方法被调用后，Subscriber将不再接收事件。一般在这个方法调用前，可以使用isUnsubscribed()先判断一下状态。 <strong>unsubscribe()</strong>这个方法很重要，因为在subscribe()之后，Observable会持有 Subscriber 的引用，这个引用<strong>如果不能及时被释放</strong>，将有<strong>内存泄露的风险</strong>。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。</p>\n</li>\n</ul>\n<h3 id=\"4-Observable的几种创建方法：\"><a href=\"#4-Observable的几种创建方法：\" class=\"headerlink\" title=\"4.Observable的几种创建方法：\"></a>4.Observable的几种创建方法：</h3><h4 id=\"1-Observable-just-T…-和from-T-from-Iterable-lt-extends-T-gt\"><a href=\"#1-Observable-just-T…-和from-T-from-Iterable-lt-extends-T-gt\" class=\"headerlink\" title=\"1.Observable.just(T…)和from(T[])/from(Iterable&lt;? extends T&gt;)\"></a><strong>1.Observable.just(T…)和from(T[])/from(Iterable&lt;? extends T&gt;)</strong></h4><ul>\n<li><p>1). just(T…): 将传入的参数依次发送出来</p>\n</li>\n<li><p>2). from(T[])/from(Iterable&lt;? extends T&gt;): 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</p>\n</li>\n<li><p>3). 由这两个方法创建的Observable对象的特点是：所有Observer一旦订阅这个Observable就会立即调用onNext()方法并传入Observable.just()/from()的参数，而后因为Observable没有数据可以发送了，onComplete()方法会被调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observable&lt;List&lt;String&gt;&gt; listObservable = Observable.just(getColorList());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，如果just()中传入的是耗时方法，该方法会被立即执行并阻塞UI线程。这里的getColorList()是一个不耗时的方法.</p>\n</blockquote>\n<p>下一步，我们写一个Observer来观察Observable。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">listObservable.subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; colors)</span> </span>&#123;</div><div class=\"line\">        mSimpleStringAdapter.setStrings(colors);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  在这个例子中我们不关心Observable何时完成数据的传输，所以我们不用在onComplete()方法里写代码。而且在这里不会有异常抛出，所以我们也不用管onError()方法</p>\n<h4 id=\"2-Observable-fromCallable\"><a href=\"#2-Observable-fromCallable\" class=\"headerlink\" title=\"2.Observable.fromCallable()\"></a><strong>2.Observable.fromCallable()</strong></h4><p>  先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Observable&lt;List&lt;String&gt;&gt; tvShowObservable = Observable.fromCallable(<span class=\"keyword\">new</span> Callable&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> mRestClient.getFavoriteTvShows();</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用Observable.fromCallable()方法有两点好处：</p>\n<ul>\n<li><p>1).获取要发送的数据的代码只会在有Observer订阅之后执行。</p>\n</li>\n<li><p>2).获取数据的代码（指的是call()方法）可以在子线程中执行。对比just()中传入的方法只能运行在主线程。</p>\n<p>这两点好处有时可能非常重要。</p>\n</li>\n</ul>\n<p>现在让我们订阅这个Observable。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mTvShowSubscription = tvShowObservable</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; tvShows)</span></span>&#123;</div><div class=\"line\">            displayTvShows(tvShows);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  上面代码逐一介绍：</p>\n<ul>\n<li><p>1).subscribeOn() 指定事件发生的线程</p>\n<p>在默认情况下Observable的所有代码，都会在执行subscribe()方法的线程中运行。而通过subscribeOn()方法，这些代码可以在其他线程中执行。在上面的例子中，我们让代码在”IO Scheduler”中执行（Schedulers.io()）。现在我们可以只把Scheduler当做一个可以工作的子线程。</p>\n</li>\n<li><p>2).observeOn() 会指定onNext()方法发生的线程</p>\n<p>通过在observeOn()方法中指定另一个Scheduler来完成onNext()的内容，在这里也就是AndroidSchedules.mainThread()所返回的Scheduler(UI线程的Scheduler)。</p>\n</li>\n<li><p>3).subscribe() Callable只会在有在Observable调用subscribe()后执行。</p>\n<p>Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class=\"line\"><span class=\"comment\">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Subscription <span class=\"title\">subscribe</span><span class=\"params\">(Subscriber subscriber)</span> </span>&#123;</div><div class=\"line\">    subscriber.onStart();</div><div class=\"line\">    onSubscribe.call(subscriber);</div><div class=\"line\">    <span class=\"keyword\">return</span> subscriber;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  可以看到，subscriber()做了3件事：</p>\n<blockquote>\n<p>  ①.调用Subscriber.onStart()。这个方法在前面已经介绍过，是一个可选的准备方法。<br>   ②.调用Observable中的OnSubscribe.call(Subscriber)。在这里，事件发送的逻辑开始运行。从这也可以看出，在RxJava中， Observable并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe()方法执行的时候。<br>   ③.将传入的Subscriber作为Subscription返回。这是为了方便unsubscribe().</p>\n</blockquote>\n<ul>\n<li><p>4).mTvShowSubscription</p>\n<p>每当Observer订阅Observable时就会生成一个Subscription对象。一个Subscription代表了一个Observer与Observable之间的连接。有时我们需要操作这个连接，这里拿在Activity的onDestroy()方法中的代码举个例子：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mTvShowSubscription != <span class=\"keyword\">null</span> &amp;&amp; !mTvShowSubscription.isUnsubscribed()) &#123;</div><div class=\"line\">      mTvShowSubscription.unsubscribe(); <span class=\"comment\">//取消订阅</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   unsubscribe()方法告诉Observable它所发送的数据不再被Observer所接收。在调用unsubscribe()方法后，我们创建的Observer就不再会收到数据了，以免Observable异步加载数据时发生意外。</p>\n<h4 id=\"3-使用Single\"><a href=\"#3-使用Single\" class=\"headerlink\" title=\"3.使用Single\"></a><strong>3.使用Single</strong></h4><p>Single是Observable的精简版，一种特殊的只发射单个值的Observable，几乎和Observable一模一样，但其回调方法不是onComplete()/onNext()/onError()，而是onSuccess()/onError()。</p>\n<p>  我们现在把刚才写过的Observable用Single重写一遍。首先我们要创建一个Single:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Single&lt;List&lt;String&gt;&gt; tvShowSingle = Single.fromCallable(<span class=\"keyword\">new</span> Callable&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        mRestClient.getFavoriteTvShows();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>  然后订阅一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mTvShowSubscription = tvShowSingle</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(<span class=\"keyword\">new</span> SingleSubscriber&lt;List&lt;String&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(List&lt;String&gt; tvShows)</span> </span>&#123;</div><div class=\"line\">            displayTvShows(tvShows);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable error)</span> </span>&#123;</div><div class=\"line\">            displayErrorMessage();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>但这次我们不再使用Observer，而是使用一个叫SingleSubscriber的类。这个类和Observer非常像，只不过它只有上述两个方法：onSuccess()和onError()。SingleSubscriber之于Single就如Observer之于Observable。</p>\n<p>订阅一个Single的同时也会自动创建一个Subscription对象。这里的Subscription和上面的例子没有区别，一定要在onDestroy()中解除订阅。</p>\n<h3 id=\"5-线程控制——Scheduler\"><a href=\"#5-线程控制——Scheduler\" class=\"headerlink\" title=\"5.线程控制——Scheduler\"></a>5.线程控制——Scheduler</h3><p>  RxJava已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：</p>\n<blockquote>\n<ul>\n<li>1.Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>\n<li>2.Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li>\n<li>3.Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>\n<li>4.Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>\n<li>5.另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。</li>\n</ul>\n</blockquote>\n<h3 id=\"6-特殊的情况\"><a href=\"#6-特殊的情况\" class=\"headerlink\" title=\"6.特殊的情况\"></a>6.特殊的情况</h3><p>1.Subject Observable和Observer的复合体，也是二者的桥梁</p>\n<p>  Subjects = Observable + Observer，Subject继承自Observable实现了Observer</p>\n<p>  Rxjava提供的四种Subject:</p>\n<blockquote>\n<p>   ①PublishSubject ： subject的基础子类。<br>    ②BehaviorSubject : 会首先向它的订阅者发送截止订阅前最新的一个数据，然后正常发送订阅后的数据流。<br>    ③ReplaySubject ： 会缓存它所订阅的所有数据，向所有订阅它的观察者重发。<br>    ④AsyncSubject ： 只会发布最后一个数据给已经订阅的每一个观察者。</p>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/08/16/RxAndroid-Learning/\">http://agehua.github.io/2016/08/16/RxAndroid-Learning/</a></p>"},{"layout":"post","title":"ThreadLocal、HandlerThread、Looper区别","keywords":"ThreadLocal, HandlerThread, Looper","banner":"http://obxk8w81b.bkt.clouddn.com/A%20Lane%20in%20the%20Public%20Garden%20at%20Arles.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/A%20Lane%20in%20the%20Public%20Garden%20at%20Arles.jpg","_content":"\n\n### 1.前言\n\n    Android中非UI线程（WorkThread）不能操作UI线程（MainThread）\n\nhandler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。\n\n### 2.ThreadLocal<T>\n\nThread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals ，这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。\n\n<!--more-->\n\n简单理解就是每个线程维护一个map，然后可以用一定的关键字取出这个map里的目标类（比如一个bean），这个“一定的关键字”说的就是这个ThreadLocal 。\n\nThreadLocal隔离了各个线程，让各线程之间没有什么共享的问题。\n\n参考：[Android 中 Handler，Looper，HandlerThread 的使用](http://www.jianshu.com/p/08cb3665972f)\n\n\n### 3.Looper\nLooper是Android handler机制的重要组成部分，Looper这个名字起的很形象，翻译过来是：打环的人，就是维护一个循环的人。\nLooper里有一个静态变量：private static final ThreadLocal sThreadLocal = new ThreadLocal();\n这是典型的Android里用到ThreadLocal的一个情况，调用Looper.prepare的时候，唯一做的事情就是把sThreadLocal作为key，把一个new出来的looper对象作为value put到相应线程的map里。然后以后用到Looper.loop的时候，就从这个sThreadLocal里取出这个Looper，然后死循环（阻塞循环）MessageQueue，取出Message并执行message指向的Handler。\n\n### 4.Handler\nSDK中关于Handler的说明如下：\n\n> A Handler allows you to sendand process Messageand Runnable objects associated with a thread's MessageQueue.Each Handler instance is associated with a single thread and that thread'smessage queue. When you create a new Handler, it is bound to the thread /message queue of the thread that is creating it -- from that point on, it willdeliver messages and runnables to that message queue and execute them as theycome out of the message queue.\n\n#### 4.1 Handler的作用\n\n> There are two main uses for aHandler: (1) to schedule messages and runnables to be executed as some point inthe future; and (2) to enqueue an action to be performed on a different thread than your own.\n\n在线程中实例化Handler需要保证线程当中包含Looper(注意：UI-Thread默认包含Looper)。\n\n#### 4.2 不是所有的Handler都能更新UI\n\nHandler处理消息总是在创建Handler的线程里运行。而我们的消息处理中，不乏更新UI的操作，不正确的线程直接更新UI将引发异常。因此，需要时刻关心Handler在哪个线程里创建的。如何更新UI才能不出异常呢？SDK告诉我们，有以下4种方式可以从其它线程访问UI线程(也即线程间通信)：\n\n- Activity.runOnUiThread(Runnable)\n- View.post(Runnable)\n- View.postDelayed(Runnable, long)\n- 在UI线程中创建的Handler\n\n几点小结\n- Handler的处理过程运行在创建Handler的线程里\n- 一个Looper对应一个MessageQueue，一个线程对应一个Looper，一个Looper可以对应多个Handler\n- 不确定当前线程时，更新UI时尽量调用View.post方法\n- handler应该由处理消息的线程创建。\n- handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在handler中进行耗时的操作，会阻塞创建它的线程。\n- Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程（UI线程）就是一个消息循环的线程。\n- Looper.myLooper();      //获得当前的Looper\n  Looper.getMainLooper() //获得UI线程的Looper\n- Handle的初始化函数（构造函数），如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数，就是用对应的线程的Looper。\n- 如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用Looper.loop();之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。\n\n### 5.消息的发送与处理\n\n我们简单地看一下消息的循环过程：\n\n#### 5.1 消息的生成\n~~~ Java\nMessage msg =mHandler.obtainMessage();\nmsg.what = what;\nmsg.sendToTarget();\n~~~\n\n#### 5.2 消息的发送\n\n~~~ Java\nMessageQueue queue= mQueue;\n  if (queue != null){\n  msg.target =this;\n  sent =queue.enqueueMessage(msg, uptimeMillis);\n}\n~~~\n在Handler.java的sendMessageAtTime(Messagemsg, long uptimeMillis)方法中，我们看到，它找到它所引用的MessageQueue，然后将Message的target设定成自己（目的是为了在处理消息环节，Message能找到正确的Handler），再将这个Message纳入到消息队列中。\n\n#### 5.3 消息的抽取\n~~~ Java\nLooper me =myLooper();\nMessageQueue queue= me.mQueue;\nwhile (true) {\n  Message msg =queue.next(); // might block\n  if (msg !=null) {\n    if(msg.target == null) {\n      // Notarget is a magic identifier for the quit message.\n      return;\n    }\n    msg.target.dispatchMessage(msg);\n    msg.recycle();\n  }\n}\n~~~\n\n在Looper.java的loop()函数里，我们看到，这里有一个死循环，不断地从MessageQueue中获取下一个（next方法）Message，然后通过Message中携带的target信息，交由正确的Handler处理（dispatchMessage方法）。\n\n#### 5.4 消息的处理\n~~~ Java\nif (msg.callback!= null) {\n  handleCallback(msg);\n} else {\n  if (mCallback!= null) {\n    if(mCallback.handleMessage(msg)) {\n      return;\n    }\n  }\n handleMessage(msg);\n}\n~~~\n在Handler.java的dispatchMessage(Messagemsg)方法里，其中的一个分支就是调用handleMessage方法来处理这条Message，而这也正是我们在职责处描述使用Handler时需要实现handleMessage(Messagemsg)的原因。\n至于dispatchMessage方法中的另外一个分支，我将会在后面的内容中说明。\n至此，我们看到，一个Message经由Handler的发送，MessageQueue的入队，Looper的抽取，又再一次地回到Handler的怀抱。而绕的这一圈，也正好帮助我们将同步操作变成了异步操作。\n\n参考上面的消息的发送与处理，这里再解释一下View.post(Runnable)方法。\n\n- 在post(Runnableaction)方法里，View获得当前线程（即UI线程）的Handler，然后将action对象post到Handler里。\n- 在Handler里，它将传递过来的action对象包装成一个Message（Message的callback为action），然后将其投入UI线程的消息循环中。\n- 在 Handler再次处理该Message时，有一条分支就是为它所设，直接调用mCallback.handleMessage的方法，返回到runnable的run方法。\n- 而此时，已经路由到UI线程里，因此，我们可以毫无顾虑的来更新UI。\n\n\n### 5.HandlerThread\nHandlerThread就是在普通的Thread基础上加上了Looper的支持，让用户不必自己去创建Looper了，同时方便了Handler的使用。\n\n创建HandlerThread时需要把它启动了，即调用start()方法。然后创建Handler时将HandlerThread中的looper对象传入。\n\n~~~ Java\nHandlerThread thread = new HandlerThread(\"MyHandlerThread\");\nthread.start();\nmHandler = new Handler(thread.getLooper());\nmHandler.post(new Runnable(){...});\n~~~\n\n那么这个Handler对象就是与HandlerThread这个线程绑定了（这时就不再是与UI线程绑定了，这样在Handler中处理耗时操作将不会阻塞UI）。\n\n如果想让HandlerThread退出，则需要调用handlerThread.quit()。\n\n具体可以看下面代码：\n\n~~~ Java\npublic class HandlerThreadActivity extends Activity {\n    private static final String TAG = \"HandlerThreadActivity\";\n    private HandlerThreadmHandlerThread;\n    private MyHandler mMyHandler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       // TODO Auto-generatedmethod stub\n       super.onCreate(savedInstanceState);\n       TextView text = new TextView(this);\n       text.setText(\"HandlerThreadActivity\");\n       setContentView(text);\n\n       Log.d(TAG, \"The mainthread id = \" + Thread.currentThread().getId());\n\n       //生成一个HandlerThread对象，实现了使用Looper来处理消息队列的功能，\n       //这个类由Android应用程序框架提供\n       mHandlerThread = new HandlerThread(\"handler_thread\");\n\n       //在使用HandlerThread的getLooper()方法之前，必须先调用该类的start();\n       mHandlerThread.start();\n       //即这个Handler是运行在mHandlerThread这个线程中\n       mMyHandler = new MyHandler(mHandlerThread.getLooper());\n\n       mMyHandler.sendEmptyMessage(1);\n    }\n\n    private class MyHandler extends Handler {\n\n       public MyHandler(Looper looper) {\n           super(looper);\n       }\n\n       @Override\n       public void handleMessage(Message msg) {\n           Log.d(TAG, \"MyHandler-->handleMessage-->threadid = \" + Thread.currentThread().getId());\n           super.handleMessage(msg);\n       }\n    }\n}\n~~~\n","source":"_posts/2016-09-05-ThreadLocal-HandlerThread-Looper.md","raw":"---\nlayout: post\ntitle:  ThreadLocal、HandlerThread、Looper区别\ncategory: accumulation\ntags:\n  - ThreadLocal\n  - HandlerThread\n  - Looper\nkeywords: ThreadLocal, HandlerThread, Looper\nbanner: http://obxk8w81b.bkt.clouddn.com/A%20Lane%20in%20the%20Public%20Garden%20at%20Arles.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/A%20Lane%20in%20the%20Public%20Garden%20at%20Arles.jpg\n---\n\n\n### 1.前言\n\n    Android中非UI线程（WorkThread）不能操作UI线程（MainThread）\n\nhandler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。\n\n### 2.ThreadLocal<T>\n\nThread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals ，这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。\n\n<!--more-->\n\n简单理解就是每个线程维护一个map，然后可以用一定的关键字取出这个map里的目标类（比如一个bean），这个“一定的关键字”说的就是这个ThreadLocal 。\n\nThreadLocal隔离了各个线程，让各线程之间没有什么共享的问题。\n\n参考：[Android 中 Handler，Looper，HandlerThread 的使用](http://www.jianshu.com/p/08cb3665972f)\n\n\n### 3.Looper\nLooper是Android handler机制的重要组成部分，Looper这个名字起的很形象，翻译过来是：打环的人，就是维护一个循环的人。\nLooper里有一个静态变量：private static final ThreadLocal sThreadLocal = new ThreadLocal();\n这是典型的Android里用到ThreadLocal的一个情况，调用Looper.prepare的时候，唯一做的事情就是把sThreadLocal作为key，把一个new出来的looper对象作为value put到相应线程的map里。然后以后用到Looper.loop的时候，就从这个sThreadLocal里取出这个Looper，然后死循环（阻塞循环）MessageQueue，取出Message并执行message指向的Handler。\n\n### 4.Handler\nSDK中关于Handler的说明如下：\n\n> A Handler allows you to sendand process Messageand Runnable objects associated with a thread's MessageQueue.Each Handler instance is associated with a single thread and that thread'smessage queue. When you create a new Handler, it is bound to the thread /message queue of the thread that is creating it -- from that point on, it willdeliver messages and runnables to that message queue and execute them as theycome out of the message queue.\n\n#### 4.1 Handler的作用\n\n> There are two main uses for aHandler: (1) to schedule messages and runnables to be executed as some point inthe future; and (2) to enqueue an action to be performed on a different thread than your own.\n\n在线程中实例化Handler需要保证线程当中包含Looper(注意：UI-Thread默认包含Looper)。\n\n#### 4.2 不是所有的Handler都能更新UI\n\nHandler处理消息总是在创建Handler的线程里运行。而我们的消息处理中，不乏更新UI的操作，不正确的线程直接更新UI将引发异常。因此，需要时刻关心Handler在哪个线程里创建的。如何更新UI才能不出异常呢？SDK告诉我们，有以下4种方式可以从其它线程访问UI线程(也即线程间通信)：\n\n- Activity.runOnUiThread(Runnable)\n- View.post(Runnable)\n- View.postDelayed(Runnable, long)\n- 在UI线程中创建的Handler\n\n几点小结\n- Handler的处理过程运行在创建Handler的线程里\n- 一个Looper对应一个MessageQueue，一个线程对应一个Looper，一个Looper可以对应多个Handler\n- 不确定当前线程时，更新UI时尽量调用View.post方法\n- handler应该由处理消息的线程创建。\n- handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在handler中进行耗时的操作，会阻塞创建它的线程。\n- Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程（UI线程）就是一个消息循环的线程。\n- Looper.myLooper();      //获得当前的Looper\n  Looper.getMainLooper() //获得UI线程的Looper\n- Handle的初始化函数（构造函数），如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数，就是用对应的线程的Looper。\n- 如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用Looper.loop();之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。\n\n### 5.消息的发送与处理\n\n我们简单地看一下消息的循环过程：\n\n#### 5.1 消息的生成\n~~~ Java\nMessage msg =mHandler.obtainMessage();\nmsg.what = what;\nmsg.sendToTarget();\n~~~\n\n#### 5.2 消息的发送\n\n~~~ Java\nMessageQueue queue= mQueue;\n  if (queue != null){\n  msg.target =this;\n  sent =queue.enqueueMessage(msg, uptimeMillis);\n}\n~~~\n在Handler.java的sendMessageAtTime(Messagemsg, long uptimeMillis)方法中，我们看到，它找到它所引用的MessageQueue，然后将Message的target设定成自己（目的是为了在处理消息环节，Message能找到正确的Handler），再将这个Message纳入到消息队列中。\n\n#### 5.3 消息的抽取\n~~~ Java\nLooper me =myLooper();\nMessageQueue queue= me.mQueue;\nwhile (true) {\n  Message msg =queue.next(); // might block\n  if (msg !=null) {\n    if(msg.target == null) {\n      // Notarget is a magic identifier for the quit message.\n      return;\n    }\n    msg.target.dispatchMessage(msg);\n    msg.recycle();\n  }\n}\n~~~\n\n在Looper.java的loop()函数里，我们看到，这里有一个死循环，不断地从MessageQueue中获取下一个（next方法）Message，然后通过Message中携带的target信息，交由正确的Handler处理（dispatchMessage方法）。\n\n#### 5.4 消息的处理\n~~~ Java\nif (msg.callback!= null) {\n  handleCallback(msg);\n} else {\n  if (mCallback!= null) {\n    if(mCallback.handleMessage(msg)) {\n      return;\n    }\n  }\n handleMessage(msg);\n}\n~~~\n在Handler.java的dispatchMessage(Messagemsg)方法里，其中的一个分支就是调用handleMessage方法来处理这条Message，而这也正是我们在职责处描述使用Handler时需要实现handleMessage(Messagemsg)的原因。\n至于dispatchMessage方法中的另外一个分支，我将会在后面的内容中说明。\n至此，我们看到，一个Message经由Handler的发送，MessageQueue的入队，Looper的抽取，又再一次地回到Handler的怀抱。而绕的这一圈，也正好帮助我们将同步操作变成了异步操作。\n\n参考上面的消息的发送与处理，这里再解释一下View.post(Runnable)方法。\n\n- 在post(Runnableaction)方法里，View获得当前线程（即UI线程）的Handler，然后将action对象post到Handler里。\n- 在Handler里，它将传递过来的action对象包装成一个Message（Message的callback为action），然后将其投入UI线程的消息循环中。\n- 在 Handler再次处理该Message时，有一条分支就是为它所设，直接调用mCallback.handleMessage的方法，返回到runnable的run方法。\n- 而此时，已经路由到UI线程里，因此，我们可以毫无顾虑的来更新UI。\n\n\n### 5.HandlerThread\nHandlerThread就是在普通的Thread基础上加上了Looper的支持，让用户不必自己去创建Looper了，同时方便了Handler的使用。\n\n创建HandlerThread时需要把它启动了，即调用start()方法。然后创建Handler时将HandlerThread中的looper对象传入。\n\n~~~ Java\nHandlerThread thread = new HandlerThread(\"MyHandlerThread\");\nthread.start();\nmHandler = new Handler(thread.getLooper());\nmHandler.post(new Runnable(){...});\n~~~\n\n那么这个Handler对象就是与HandlerThread这个线程绑定了（这时就不再是与UI线程绑定了，这样在Handler中处理耗时操作将不会阻塞UI）。\n\n如果想让HandlerThread退出，则需要调用handlerThread.quit()。\n\n具体可以看下面代码：\n\n~~~ Java\npublic class HandlerThreadActivity extends Activity {\n    private static final String TAG = \"HandlerThreadActivity\";\n    private HandlerThreadmHandlerThread;\n    private MyHandler mMyHandler;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       // TODO Auto-generatedmethod stub\n       super.onCreate(savedInstanceState);\n       TextView text = new TextView(this);\n       text.setText(\"HandlerThreadActivity\");\n       setContentView(text);\n\n       Log.d(TAG, \"The mainthread id = \" + Thread.currentThread().getId());\n\n       //生成一个HandlerThread对象，实现了使用Looper来处理消息队列的功能，\n       //这个类由Android应用程序框架提供\n       mHandlerThread = new HandlerThread(\"handler_thread\");\n\n       //在使用HandlerThread的getLooper()方法之前，必须先调用该类的start();\n       mHandlerThread.start();\n       //即这个Handler是运行在mHandlerThread这个线程中\n       mMyHandler = new MyHandler(mHandlerThread.getLooper());\n\n       mMyHandler.sendEmptyMessage(1);\n    }\n\n    private class MyHandler extends Handler {\n\n       public MyHandler(Looper looper) {\n           super(looper);\n       }\n\n       @Override\n       public void handleMessage(Message msg) {\n           Log.d(TAG, \"MyHandler-->handleMessage-->threadid = \" + Thread.currentThread().getId());\n           super.handleMessage(msg);\n       }\n    }\n}\n~~~\n","slug":"ThreadLocal-HandlerThread-Looper","published":1,"date":"2016-09-04T16:00:00.000Z","updated":"2017-11-23T07:06:42.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxr001bd6yk8m389gx8","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><pre><code>Android中非UI线程（WorkThread）不能操作UI线程（MainThread）\n</code></pre><p>handler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。</p>\n<h3 id=\"2-ThreadLocal\"><a href=\"#2-ThreadLocal\" class=\"headerlink\" title=\"2.ThreadLocal\"></a>2.ThreadLocal<t></t></h3><p>Thread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals ，这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。</p>\n<a id=\"more\"></a>\n<p>简单理解就是每个线程维护一个map，然后可以用一定的关键字取出这个map里的目标类（比如一个bean），这个“一定的关键字”说的就是这个ThreadLocal 。</p>\n<p>ThreadLocal隔离了各个线程，让各线程之间没有什么共享的问题。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/08cb3665972f\" target=\"_blank\" rel=\"external\">Android 中 Handler，Looper，HandlerThread 的使用</a></p>\n<h3 id=\"3-Looper\"><a href=\"#3-Looper\" class=\"headerlink\" title=\"3.Looper\"></a>3.Looper</h3><p>Looper是Android handler机制的重要组成部分，Looper这个名字起的很形象，翻译过来是：打环的人，就是维护一个循环的人。<br>Looper里有一个静态变量：private static final ThreadLocal sThreadLocal = new ThreadLocal();<br>这是典型的Android里用到ThreadLocal的一个情况，调用Looper.prepare的时候，唯一做的事情就是把sThreadLocal作为key，把一个new出来的looper对象作为value put到相应线程的map里。然后以后用到Looper.loop的时候，就从这个sThreadLocal里取出这个Looper，然后死循环（阻塞循环）MessageQueue，取出Message并执行message指向的Handler。</p>\n<h3 id=\"4-Handler\"><a href=\"#4-Handler\" class=\"headerlink\" title=\"4.Handler\"></a>4.Handler</h3><p>SDK中关于Handler的说明如下：</p>\n<blockquote>\n<p>A Handler allows you to sendand process Messageand Runnable objects associated with a thread’s MessageQueue.Each Handler instance is associated with a single thread and that thread’smessage queue. When you create a new Handler, it is bound to the thread /message queue of the thread that is creating it – from that point on, it willdeliver messages and runnables to that message queue and execute them as theycome out of the message queue.</p>\n</blockquote>\n<h4 id=\"4-1-Handler的作用\"><a href=\"#4-1-Handler的作用\" class=\"headerlink\" title=\"4.1 Handler的作用\"></a>4.1 Handler的作用</h4><blockquote>\n<p>There are two main uses for aHandler: (1) to schedule messages and runnables to be executed as some point inthe future; and (2) to enqueue an action to be performed on a different thread than your own.</p>\n</blockquote>\n<p>在线程中实例化Handler需要保证线程当中包含Looper(注意：UI-Thread默认包含Looper)。</p>\n<h4 id=\"4-2-不是所有的Handler都能更新UI\"><a href=\"#4-2-不是所有的Handler都能更新UI\" class=\"headerlink\" title=\"4.2 不是所有的Handler都能更新UI\"></a>4.2 不是所有的Handler都能更新UI</h4><p>Handler处理消息总是在创建Handler的线程里运行。而我们的消息处理中，不乏更新UI的操作，不正确的线程直接更新UI将引发异常。因此，需要时刻关心Handler在哪个线程里创建的。如何更新UI才能不出异常呢？SDK告诉我们，有以下4种方式可以从其它线程访问UI线程(也即线程间通信)：</p>\n<ul>\n<li>Activity.runOnUiThread(Runnable)</li>\n<li>View.post(Runnable)</li>\n<li>View.postDelayed(Runnable, long)</li>\n<li>在UI线程中创建的Handler</li>\n</ul>\n<p>几点小结</p>\n<ul>\n<li>Handler的处理过程运行在创建Handler的线程里</li>\n<li>一个Looper对应一个MessageQueue，一个线程对应一个Looper，一个Looper可以对应多个Handler</li>\n<li>不确定当前线程时，更新UI时尽量调用View.post方法</li>\n<li>handler应该由处理消息的线程创建。</li>\n<li>handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在handler中进行耗时的操作，会阻塞创建它的线程。</li>\n<li>Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程（UI线程）就是一个消息循环的线程。</li>\n<li>Looper.myLooper();      //获得当前的Looper<br>Looper.getMainLooper() //获得UI线程的Looper</li>\n<li>Handle的初始化函数（构造函数），如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数，就是用对应的线程的Looper。</li>\n<li>如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用Looper.loop();之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。</li>\n</ul>\n<h3 id=\"5-消息的发送与处理\"><a href=\"#5-消息的发送与处理\" class=\"headerlink\" title=\"5.消息的发送与处理\"></a>5.消息的发送与处理</h3><p>我们简单地看一下消息的循环过程：</p>\n<h4 id=\"5-1-消息的生成\"><a href=\"#5-1-消息的生成\" class=\"headerlink\" title=\"5.1 消息的生成\"></a>5.1 消息的生成</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Message msg =mHandler.obtainMessage();</div><div class=\"line\">msg.what = what;</div><div class=\"line\">msg.sendToTarget();</div></pre></td></tr></table></figure>\n<h4 id=\"5-2-消息的发送\"><a href=\"#5-2-消息的发送\" class=\"headerlink\" title=\"5.2 消息的发送\"></a>5.2 消息的发送</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">MessageQueue queue= mQueue;</div><div class=\"line\">  <span class=\"keyword\">if</span> (queue != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">  msg.target =<span class=\"keyword\">this</span>;</div><div class=\"line\">  sent =queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Handler.java的sendMessageAtTime(Messagemsg, long uptimeMillis)方法中，我们看到，它找到它所引用的MessageQueue，然后将Message的target设定成自己（目的是为了在处理消息环节，Message能找到正确的Handler），再将这个Message纳入到消息队列中。</p>\n<h4 id=\"5-3-消息的抽取\"><a href=\"#5-3-消息的抽取\" class=\"headerlink\" title=\"5.3 消息的抽取\"></a>5.3 消息的抽取</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Looper me =myLooper();</div><div class=\"line\">MessageQueue queue= me.mQueue;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">  Message msg =queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (msg !=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Notarget is a magic identifier for the quit message.</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    msg.target.dispatchMessage(msg);</div><div class=\"line\">    msg.recycle();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Looper.java的loop()函数里，我们看到，这里有一个死循环，不断地从MessageQueue中获取下一个（next方法）Message，然后通过Message中携带的target信息，交由正确的Handler处理（dispatchMessage方法）。</p>\n<h4 id=\"5-4-消息的处理\"><a href=\"#5-4-消息的处理\" class=\"headerlink\" title=\"5.4 消息的处理\"></a>5.4 消息的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (msg.callback!= <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  handleCallback(msg);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mCallback!= <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> handleMessage(msg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Handler.java的dispatchMessage(Messagemsg)方法里，其中的一个分支就是调用handleMessage方法来处理这条Message，而这也正是我们在职责处描述使用Handler时需要实现handleMessage(Messagemsg)的原因。<br>至于dispatchMessage方法中的另外一个分支，我将会在后面的内容中说明。<br>至此，我们看到，一个Message经由Handler的发送，MessageQueue的入队，Looper的抽取，又再一次地回到Handler的怀抱。而绕的这一圈，也正好帮助我们将同步操作变成了异步操作。</p>\n<p>参考上面的消息的发送与处理，这里再解释一下View.post(Runnable)方法。</p>\n<ul>\n<li>在post(Runnableaction)方法里，View获得当前线程（即UI线程）的Handler，然后将action对象post到Handler里。</li>\n<li>在Handler里，它将传递过来的action对象包装成一个Message（Message的callback为action），然后将其投入UI线程的消息循环中。</li>\n<li>在 Handler再次处理该Message时，有一条分支就是为它所设，直接调用mCallback.handleMessage的方法，返回到runnable的run方法。</li>\n<li>而此时，已经路由到UI线程里，因此，我们可以毫无顾虑的来更新UI。</li>\n</ul>\n<h3 id=\"5-HandlerThread\"><a href=\"#5-HandlerThread\" class=\"headerlink\" title=\"5.HandlerThread\"></a>5.HandlerThread</h3><p>HandlerThread就是在普通的Thread基础上加上了Looper的支持，让用户不必自己去创建Looper了，同时方便了Handler的使用。</p>\n<p>创建HandlerThread时需要把它启动了，即调用start()方法。然后创建Handler时将HandlerThread中的looper对象传入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">HandlerThread thread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"MyHandlerThread\"</span>);</div><div class=\"line\">thread.start();</div><div class=\"line\">mHandler = <span class=\"keyword\">new</span> Handler(thread.getLooper());</div><div class=\"line\">mHandler.post(<span class=\"keyword\">new</span> Runnable()&#123;...&#125;);</div></pre></td></tr></table></figure>\n<p>那么这个Handler对象就是与HandlerThread这个线程绑定了（这时就不再是与UI线程绑定了，这样在Handler中处理耗时操作将不会阻塞UI）。</p>\n<p>如果想让HandlerThread退出，则需要调用handlerThread.quit()。</p>\n<p>具体可以看下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerThreadActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HandlerThreadActivity\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> HandlerThreadmHandlerThread;</div><div class=\"line\">    <span class=\"keyword\">private</span> MyHandler mMyHandler;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// TODO Auto-generatedmethod stub</span></div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       TextView text = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">       text.setText(<span class=\"string\">\"HandlerThreadActivity\"</span>);</div><div class=\"line\">       setContentView(text);</div><div class=\"line\"></div><div class=\"line\">       Log.d(TAG, <span class=\"string\">\"The mainthread id = \"</span> + Thread.currentThread().getId());</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//生成一个HandlerThread对象，实现了使用Looper来处理消息队列的功能，</span></div><div class=\"line\">       <span class=\"comment\">//这个类由Android应用程序框架提供</span></div><div class=\"line\">       mHandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"handler_thread\"</span>);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//在使用HandlerThread的getLooper()方法之前，必须先调用该类的start();</span></div><div class=\"line\">       mHandlerThread.start();</div><div class=\"line\">       <span class=\"comment\">//即这个Handler是运行在mHandlerThread这个线程中</span></div><div class=\"line\">       mMyHandler = <span class=\"keyword\">new</span> MyHandler(mHandlerThread.getLooper());</div><div class=\"line\"></div><div class=\"line\">       mMyHandler.sendEmptyMessage(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">           Log.d(TAG, <span class=\"string\">\"MyHandler--&gt;handleMessage--&gt;threadid = \"</span> + Thread.currentThread().getId());</div><div class=\"line\">           <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Looper/\">http://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Looper/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.885,"time":173100,"words":577},"excerpt":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><pre><code>Android中非UI线程（WorkThread）不能操作UI线程（MainThread）\n</code></pre><p>handler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。</p>\n<h3 id=\"2-ThreadLocal\"><a href=\"#2-ThreadLocal\" class=\"headerlink\" title=\"2.ThreadLocal\"></a>2.ThreadLocal<T></h3><p>Thread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals ，这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。</p>","more":"<p>简单理解就是每个线程维护一个map，然后可以用一定的关键字取出这个map里的目标类（比如一个bean），这个“一定的关键字”说的就是这个ThreadLocal 。</p>\n<p>ThreadLocal隔离了各个线程，让各线程之间没有什么共享的问题。</p>\n<p>参考：<a href=\"http://www.jianshu.com/p/08cb3665972f\">Android 中 Handler，Looper，HandlerThread 的使用</a></p>\n<h3 id=\"3-Looper\"><a href=\"#3-Looper\" class=\"headerlink\" title=\"3.Looper\"></a>3.Looper</h3><p>Looper是Android handler机制的重要组成部分，Looper这个名字起的很形象，翻译过来是：打环的人，就是维护一个循环的人。<br>Looper里有一个静态变量：private static final ThreadLocal sThreadLocal = new ThreadLocal();<br>这是典型的Android里用到ThreadLocal的一个情况，调用Looper.prepare的时候，唯一做的事情就是把sThreadLocal作为key，把一个new出来的looper对象作为value put到相应线程的map里。然后以后用到Looper.loop的时候，就从这个sThreadLocal里取出这个Looper，然后死循环（阻塞循环）MessageQueue，取出Message并执行message指向的Handler。</p>\n<h3 id=\"4-Handler\"><a href=\"#4-Handler\" class=\"headerlink\" title=\"4.Handler\"></a>4.Handler</h3><p>SDK中关于Handler的说明如下：</p>\n<blockquote>\n<p>A Handler allows you to sendand process Messageand Runnable objects associated with a thread’s MessageQueue.Each Handler instance is associated with a single thread and that thread’smessage queue. When you create a new Handler, it is bound to the thread /message queue of the thread that is creating it – from that point on, it willdeliver messages and runnables to that message queue and execute them as theycome out of the message queue.</p>\n</blockquote>\n<h4 id=\"4-1-Handler的作用\"><a href=\"#4-1-Handler的作用\" class=\"headerlink\" title=\"4.1 Handler的作用\"></a>4.1 Handler的作用</h4><blockquote>\n<p>There are two main uses for aHandler: (1) to schedule messages and runnables to be executed as some point inthe future; and (2) to enqueue an action to be performed on a different thread than your own.</p>\n</blockquote>\n<p>在线程中实例化Handler需要保证线程当中包含Looper(注意：UI-Thread默认包含Looper)。</p>\n<h4 id=\"4-2-不是所有的Handler都能更新UI\"><a href=\"#4-2-不是所有的Handler都能更新UI\" class=\"headerlink\" title=\"4.2 不是所有的Handler都能更新UI\"></a>4.2 不是所有的Handler都能更新UI</h4><p>Handler处理消息总是在创建Handler的线程里运行。而我们的消息处理中，不乏更新UI的操作，不正确的线程直接更新UI将引发异常。因此，需要时刻关心Handler在哪个线程里创建的。如何更新UI才能不出异常呢？SDK告诉我们，有以下4种方式可以从其它线程访问UI线程(也即线程间通信)：</p>\n<ul>\n<li>Activity.runOnUiThread(Runnable)</li>\n<li>View.post(Runnable)</li>\n<li>View.postDelayed(Runnable, long)</li>\n<li>在UI线程中创建的Handler</li>\n</ul>\n<p>几点小结</p>\n<ul>\n<li>Handler的处理过程运行在创建Handler的线程里</li>\n<li>一个Looper对应一个MessageQueue，一个线程对应一个Looper，一个Looper可以对应多个Handler</li>\n<li>不确定当前线程时，更新UI时尽量调用View.post方法</li>\n<li>handler应该由处理消息的线程创建。</li>\n<li>handler与创建它的线程相关联，而且也只与创建它的线程相关联。handler运行在创建它的线程中，所以，如果在handler中进行耗时的操作，会阻塞创建它的线程。</li>\n<li>Android的线程分为有消息循环的线程和没有消息循环的线程，有消息循环的线程一般都会有一个Looper。主线程（UI线程）就是一个消息循环的线程。</li>\n<li>Looper.myLooper();      //获得当前的Looper<br>Looper.getMainLooper() //获得UI线程的Looper</li>\n<li>Handle的初始化函数（构造函数），如果没有参数，那么他就默认使用的是当前的Looper，如果有Looper参数，就是用对应的线程的Looper。</li>\n<li>如果一个线程中调用Looper.prepare()，那么系统就会自动的为该线程建立一个消息队列，然后调用Looper.loop();之后就进入了消息循环，这个之后就可以发消息、取消息、和处理消息。</li>\n</ul>\n<h3 id=\"5-消息的发送与处理\"><a href=\"#5-消息的发送与处理\" class=\"headerlink\" title=\"5.消息的发送与处理\"></a>5.消息的发送与处理</h3><p>我们简单地看一下消息的循环过程：</p>\n<h4 id=\"5-1-消息的生成\"><a href=\"#5-1-消息的生成\" class=\"headerlink\" title=\"5.1 消息的生成\"></a>5.1 消息的生成</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Message msg =mHandler.obtainMessage();</div><div class=\"line\">msg.what = what;</div><div class=\"line\">msg.sendToTarget();</div></pre></td></tr></table></figure>\n<h4 id=\"5-2-消息的发送\"><a href=\"#5-2-消息的发送\" class=\"headerlink\" title=\"5.2 消息的发送\"></a>5.2 消息的发送</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">MessageQueue queue= mQueue;</div><div class=\"line\">  <span class=\"keyword\">if</span> (queue != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">  msg.target =<span class=\"keyword\">this</span>;</div><div class=\"line\">  sent =queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Handler.java的sendMessageAtTime(Messagemsg, long uptimeMillis)方法中，我们看到，它找到它所引用的MessageQueue，然后将Message的target设定成自己（目的是为了在处理消息环节，Message能找到正确的Handler），再将这个Message纳入到消息队列中。</p>\n<h4 id=\"5-3-消息的抽取\"><a href=\"#5-3-消息的抽取\" class=\"headerlink\" title=\"5.3 消息的抽取\"></a>5.3 消息的抽取</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Looper me =myLooper();</div><div class=\"line\">MessageQueue queue= me.mQueue;</div><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">  Message msg =queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (msg !=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Notarget is a magic identifier for the quit message.</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    msg.target.dispatchMessage(msg);</div><div class=\"line\">    msg.recycle();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Looper.java的loop()函数里，我们看到，这里有一个死循环，不断地从MessageQueue中获取下一个（next方法）Message，然后通过Message中携带的target信息，交由正确的Handler处理（dispatchMessage方法）。</p>\n<h4 id=\"5-4-消息的处理\"><a href=\"#5-4-消息的处理\" class=\"headerlink\" title=\"5.4 消息的处理\"></a>5.4 消息的处理</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (msg.callback!= <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  handleCallback(msg);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mCallback!= <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> handleMessage(msg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Handler.java的dispatchMessage(Messagemsg)方法里，其中的一个分支就是调用handleMessage方法来处理这条Message，而这也正是我们在职责处描述使用Handler时需要实现handleMessage(Messagemsg)的原因。<br>至于dispatchMessage方法中的另外一个分支，我将会在后面的内容中说明。<br>至此，我们看到，一个Message经由Handler的发送，MessageQueue的入队，Looper的抽取，又再一次地回到Handler的怀抱。而绕的这一圈，也正好帮助我们将同步操作变成了异步操作。</p>\n<p>参考上面的消息的发送与处理，这里再解释一下View.post(Runnable)方法。</p>\n<ul>\n<li>在post(Runnableaction)方法里，View获得当前线程（即UI线程）的Handler，然后将action对象post到Handler里。</li>\n<li>在Handler里，它将传递过来的action对象包装成一个Message（Message的callback为action），然后将其投入UI线程的消息循环中。</li>\n<li>在 Handler再次处理该Message时，有一条分支就是为它所设，直接调用mCallback.handleMessage的方法，返回到runnable的run方法。</li>\n<li>而此时，已经路由到UI线程里，因此，我们可以毫无顾虑的来更新UI。</li>\n</ul>\n<h3 id=\"5-HandlerThread\"><a href=\"#5-HandlerThread\" class=\"headerlink\" title=\"5.HandlerThread\"></a>5.HandlerThread</h3><p>HandlerThread就是在普通的Thread基础上加上了Looper的支持，让用户不必自己去创建Looper了，同时方便了Handler的使用。</p>\n<p>创建HandlerThread时需要把它启动了，即调用start()方法。然后创建Handler时将HandlerThread中的looper对象传入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">HandlerThread thread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"MyHandlerThread\"</span>);</div><div class=\"line\">thread.start();</div><div class=\"line\">mHandler = <span class=\"keyword\">new</span> Handler(thread.getLooper());</div><div class=\"line\">mHandler.post(<span class=\"keyword\">new</span> Runnable()&#123;...&#125;);</div></pre></td></tr></table></figure>\n<p>那么这个Handler对象就是与HandlerThread这个线程绑定了（这时就不再是与UI线程绑定了，这样在Handler中处理耗时操作将不会阻塞UI）。</p>\n<p>如果想让HandlerThread退出，则需要调用handlerThread.quit()。</p>\n<p>具体可以看下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HandlerThreadActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HandlerThreadActivity\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> HandlerThreadmHandlerThread;</div><div class=\"line\">    <span class=\"keyword\">private</span> MyHandler mMyHandler;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// TODO Auto-generatedmethod stub</span></div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       TextView text = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">       text.setText(<span class=\"string\">\"HandlerThreadActivity\"</span>);</div><div class=\"line\">       setContentView(text);</div><div class=\"line\"></div><div class=\"line\">       Log.d(TAG, <span class=\"string\">\"The mainthread id = \"</span> + Thread.currentThread().getId());</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//生成一个HandlerThread对象，实现了使用Looper来处理消息队列的功能，</span></div><div class=\"line\">       <span class=\"comment\">//这个类由Android应用程序框架提供</span></div><div class=\"line\">       mHandlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"handler_thread\"</span>);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//在使用HandlerThread的getLooper()方法之前，必须先调用该类的start();</span></div><div class=\"line\">       mHandlerThread.start();</div><div class=\"line\">       <span class=\"comment\">//即这个Handler是运行在mHandlerThread这个线程中</span></div><div class=\"line\">       mMyHandler = <span class=\"keyword\">new</span> MyHandler(mHandlerThread.getLooper());</div><div class=\"line\"></div><div class=\"line\">       mMyHandler.sendEmptyMessage(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">           Log.d(TAG, <span class=\"string\">\"MyHandler--&gt;handleMessage--&gt;threadid = \"</span> + Thread.currentThread().getId());</div><div class=\"line\">           <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Looper/\">http://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Looper/</a></p>"},{"layout":"post","title":"apk中含有admob广告插件","keywords":"admob, 去除广告插件","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Pear%20Tree.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Pear%20Tree.jpg","_content":"\n\n### 问题出现\n\n使用这个杀毒软件[antivirus-for-android](http://www.avg.com/no-en/antivirus-for-android)，检测我们团队的apk后，AVG提示警告unwanted software。\n\n生成的报告说是：\nBeware of Adware! 1 Types of Adware Detected\nLast reported adware activity:\tSep 16\nDays with adware in last 30:\t1 days\n\n见下图：\n\n<!--more-->\n\n![avg_warning](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/avg_warning.PNG)\n\n### 排查\n\n使用这个广告插件检测工具[全能工具箱](https://play.google.com/store/apps/details?id=imoblife.toolbox.full&hl=zh)，检测后，确实提示我们的apk含有广告“admob”\n\n但是这个apk是我们团队自己开发的，有项目源码，AndroidManifest文件中没有网络上说的Google AdMob注册，更没有com.google.ads.AdView这个布局文件\n\n代码中没有，可能在第三方库中？\n\n结果就是在排查第三方库的过程中，发现google service的jar包中有名字是ads的文件夹。如下图：\n![google_servcie_ads](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/google_servcie_ads.PNG)\n\n删除后上图中的两个ads文件夹，再打包apk后，用软件检测，果然没有admob插件了。哈哈，恼人的问题解决了。\n","source":"_posts/2016-09-20-AVG-unwanted-software.md","raw":"---\nlayout: post\ntitle:  apk中含有admob广告插件\ncategory: accumulation\ntags:\n  - ANDROID\n  - remove admob\nkeywords: admob, 去除广告插件\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Pear%20Tree.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Pear%20Tree.jpg\n---\n\n\n### 问题出现\n\n使用这个杀毒软件[antivirus-for-android](http://www.avg.com/no-en/antivirus-for-android)，检测我们团队的apk后，AVG提示警告unwanted software。\n\n生成的报告说是：\nBeware of Adware! 1 Types of Adware Detected\nLast reported adware activity:\tSep 16\nDays with adware in last 30:\t1 days\n\n见下图：\n\n<!--more-->\n\n![avg_warning](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/avg_warning.PNG)\n\n### 排查\n\n使用这个广告插件检测工具[全能工具箱](https://play.google.com/store/apps/details?id=imoblife.toolbox.full&hl=zh)，检测后，确实提示我们的apk含有广告“admob”\n\n但是这个apk是我们团队自己开发的，有项目源码，AndroidManifest文件中没有网络上说的Google AdMob注册，更没有com.google.ads.AdView这个布局文件\n\n代码中没有，可能在第三方库中？\n\n结果就是在排查第三方库的过程中，发现google service的jar包中有名字是ads的文件夹。如下图：\n![google_servcie_ads](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/google_servcie_ads.PNG)\n\n删除后上图中的两个ads文件夹，再打包apk后，用软件检测，果然没有admob插件了。哈哈，恼人的问题解决了。\n","slug":"AVG-unwanted-software","published":1,"date":"2016-09-19T16:00:00.000Z","updated":"2017-11-23T07:24:46.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebxy001fd6ykge65rgq0","content":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>使用这个杀毒软件<a href=\"http://www.avg.com/no-en/antivirus-for-android\" target=\"_blank\" rel=\"external\">antivirus-for-android</a>，检测我们团队的apk后，AVG提示警告unwanted software。</p>\n<p>生成的报告说是：<br>Beware of Adware! 1 Types of Adware Detected<br>Last reported adware activity:    Sep 16<br>Days with adware in last 30:    1 days</p>\n<p>见下图：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/avg_warning.PNG\" alt=\"avg_warning\"></p>\n<h3 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h3><p>使用这个广告插件检测工具<a href=\"https://play.google.com/store/apps/details?id=imoblife.toolbox.full&amp;hl=zh\" target=\"_blank\" rel=\"external\">全能工具箱</a>，检测后，确实提示我们的apk含有广告“admob”</p>\n<p>但是这个apk是我们团队自己开发的，有项目源码，AndroidManifest文件中没有网络上说的Google AdMob注册，更没有com.google.ads.AdView这个布局文件</p>\n<p>代码中没有，可能在第三方库中？</p>\n<p>结果就是在排查第三方库的过程中，发现google service的jar包中有名字是ads的文件夹。如下图：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/google_servcie_ads.PNG\" alt=\"google_servcie_ads\"></p>\n<p>删除后上图中的两个ads文件夹，再打包apk后，用软件检测，果然没有admob插件了。哈哈，恼人的问题解决了。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/20/AVG-unwanted-software/\">http://agehua.github.io/2016/09/20/AVG-unwanted-software/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.285,"time":17099.999999999996,"words":57},"excerpt":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>使用这个杀毒软件<a href=\"http://www.avg.com/no-en/antivirus-for-android\">antivirus-for-android</a>，检测我们团队的apk后，AVG提示警告unwanted software。</p>\n<p>生成的报告说是：<br>Beware of Adware! 1 Types of Adware Detected<br>Last reported adware activity:    Sep 16<br>Days with adware in last 30:    1 days</p>\n<p>见下图：</p>","more":"<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/avg_warning.PNG\" alt=\"avg_warning\"></p>\n<h3 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h3><p>使用这个广告插件检测工具<a href=\"https://play.google.com/store/apps/details?id=imoblife.toolbox.full&amp;hl=zh\">全能工具箱</a>，检测后，确实提示我们的apk含有广告“admob”</p>\n<p>但是这个apk是我们团队自己开发的，有项目源码，AndroidManifest文件中没有网络上说的Google AdMob注册，更没有com.google.ads.AdView这个布局文件</p>\n<p>代码中没有，可能在第三方库中？</p>\n<p>结果就是在排查第三方库的过程中，发现google service的jar包中有名字是ads的文件夹。如下图：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/google_servcie_ads.PNG\" alt=\"google_servcie_ads\"></p>\n<p>删除后上图中的两个ads文件夹，再打包apk后，用软件检测，果然没有admob插件了。哈哈，恼人的问题解决了。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/20/AVG-unwanted-software/\">http://agehua.github.io/2016/09/20/AVG-unwanted-software/</a></p>"},{"layout":"post","title":"ANDROID设计模式之单例模式","keywords":"单例模式, ANDROID","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg","_content":"\n### 向大神致敬\n\n本文转载自[stormzhang ANDROID设计模式之单例模式 ](http://stormzhang.com/designpattern/2016/03/27/android-design-pattern-singleton/)，\n稍有修改\n\n### 常用单例模式\n\n什么是设计模式？其实简单的理解就是前人留下来的一些经验总结而已，然后把这些经验起了个名字叫Design Pattern，翻译过来就是设计模式的意思，通过使用设计模式可以让我们的代码复用性更高，可维护性更高，让你的代码写的更优雅。设计模式理论上有23种，但是我只会针对Android平台上常用的一些设计模式做分享，今天就先来分享下最常用的单例模式。\n\n<!--more-->\n#### 饿汉式\n\n~~~ Java\npublic class Singleton{\n\n    private static Singleton instance = new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        return instance;\n    }\n}\n~~~\n\n饿汉式 是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。 但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用饿汉式的单例模式就是不合适的，这时候就需要用到懒汉式的方式去按需延迟加载单例。\n\n#### 懒汉式\n\n~~~ Java\npublic class Singleton{\n    private static Singleton instance = null;\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        if(null == instance){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n~~~\n\n懒汉式与饿汉式的最大区别就是将单例的初始化操作，延迟到需要的时候才进行，这样做在某些场合中有很大用处。比如某个单例用的次数不是很多，但是这个单例提供的功能又非常复杂，而且加载和初始化要消耗大量的资源，这个时候使用懒汉式就是非常不错的选择。\n\n### 多线程下的单例模式\n\n上面介绍了一些单例模式的基本应用方法，但是上面所说的那些使用方式都是有一个隐含的前提，那就是他们都是应用在单线程条件下，一旦换成了多线程就有出错的风险。\n\n如果在多线程的情况下，饿汉式不会出现问题，因为JVM只会加载一次单例类，但是懒汉式可能就会出现重复创建单例对象的问题。为什么会有这样的问题呢？因为懒汉式在创建单例时是 线程不安全的，多个线程可能会并发调用他的newInstance方法导致多个线程可能会创建多份相同的单例出来。\n\n那有没有办法，使懒汉式的单利模式也是线程安全的呢？答案肯定是有的，就是使用加同步锁的方式去实现。\n\n#### 懒汉式同步锁\n\n~~~ Java\npublic class Singleton {\n\n    private static Singleton instance = null;\n\n    private Singleton(){\n    }\n\n    public static Singleton getInstance() {\n        synchronized (Singleton.class) {\n            if (instance == null) {\n                instance = new Singleton();\n            }\n        }\n\n        return instance;\n    }\n}\n~~~\n\n这种是最常见的解决同步问题的一种方式，使用同步锁synchronized (Singleton.class)防止多线程同时进入造成instance被多次实例化。举个在Android使用这种方式的例子：\n\n#### InputMethodManager示例\n\n~~~ Java\npublic final class InputMethodManager {\n    //内部全局唯一实例  \n    static InputMethodManager sInstance;\n\n    //对外api  \n    public static InputMethodManager getInstance() {\n        synchronized (InputMethodManager.class) {\n            if (sInstance == null) {\n                IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);\n                IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);\n                sInstance = new InputMethodManager(service, Looper.getMainLooper());\n            }\n            return sInstance;\n        }\n    }\n}\n~~~\n\n以上是Android源码中输入法类相关的单例使用方式。\n\n但其实还有一种更好的方式如下：\n\n#### 双重校验锁\n\n~~~ Java\npublic class Singleton {\n\n    private static volatile Singleton instance = null;\n\n    private Singleton(){\n    }\n\n    public static Singleton getInstance() {\n        // if already inited, no need to get lock everytime\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n\n        return instance;\n    }\n}\n~~~\n\n可以看到上面在synchronized (Singleton.class)外又添加了一层if，这是为了在instance已经实例化后下次进入不必执行synchronized (Singleton.class)获取对象锁，从而提高性能。\n\n以上两种方式还是挺麻烦的，我们不禁要问，有没有更好的实现方式呢？答案是肯定的。 我们可以利用JVM的类加载机制去实现。在很多情况下JVM已经为我们提供了同步控制，比如：\n\n在static{}区块中初始化的数据\n访问final字段时\n等等\n因为在JVM进行类加载的时候他会保证数据是同步的，我们可以这样实现：\n\n采用内部类，在这个内部类里面去创建对象实例。这样的话，只要应用中不使用内部类 JVM 就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载和线程安全。\n\n实现代码如下：\n\n#### 静态内部类\n\n~~~ Java\npublic class Singleton{\n    //内部类，在装载该内部类时才会去创建单利对象\n    private static class SingletonHolder{\n        public static Singleton instance = new Singleton();\n    }\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        return SingletonHolder.instance;\n    }\n\n    public void doSomething(){\n        //do something\n    }\n}\n~~~\n\n这样实现出来的单例类就是线程安全的，而且使用起来很简洁，麻麻再也不用担心我的单例不是单例了。\n\n然而这还不是最简单的方式，Effective Java中推荐了一种更简洁方便的使用方式，就是使用枚举。\n\n#### 枚举类型单例模式\n\n~~~ Java\npublic enum Singleton{\n    //定义一个枚举的元素，它就是Singleton的一个实例\n    instance;\n\n    public void doSomething(){\n        // do something ...\n    }    \n}\n~~~\n\n使用方法如下：\n\n~~~ Java\npublic static void main(String[] args){\n   Singleton singleton = Singleton.instance;\n   singleton.doSomething();\n}\n~~~\n\n默认枚举实例的创建是线程安全的(创建枚举类的单例在JVM层面也是能保证线程安全的), 所以不需要担心线程安全的问题，所以理论上枚举类来实现单例模式是最简单的方式。\n\n### 总结\n\n一般单例模式包含了5种写法，分别是饿汉、懒汉、双重校验锁、静态内部类和枚举。相信看完之后你对单例模式有了充分的理解了，根据不同的场景选择最你最喜欢的一种单例模式吧！\n","source":"_posts/2016-09-20-android-design-pattern-singleton.md","raw":"---\nlayout: post\ntitle:  ANDROID设计模式之单例模式\ncategory: accumulation\ntags:\n  - ANDROID\n  - Singleton\nkeywords: 单例模式, ANDROID\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg\n---\n\n### 向大神致敬\n\n本文转载自[stormzhang ANDROID设计模式之单例模式 ](http://stormzhang.com/designpattern/2016/03/27/android-design-pattern-singleton/)，\n稍有修改\n\n### 常用单例模式\n\n什么是设计模式？其实简单的理解就是前人留下来的一些经验总结而已，然后把这些经验起了个名字叫Design Pattern，翻译过来就是设计模式的意思，通过使用设计模式可以让我们的代码复用性更高，可维护性更高，让你的代码写的更优雅。设计模式理论上有23种，但是我只会针对Android平台上常用的一些设计模式做分享，今天就先来分享下最常用的单例模式。\n\n<!--more-->\n#### 饿汉式\n\n~~~ Java\npublic class Singleton{\n\n    private static Singleton instance = new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        return instance;\n    }\n}\n~~~\n\n饿汉式 是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。 但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用饿汉式的单例模式就是不合适的，这时候就需要用到懒汉式的方式去按需延迟加载单例。\n\n#### 懒汉式\n\n~~~ Java\npublic class Singleton{\n    private static Singleton instance = null;\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        if(null == instance){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n~~~\n\n懒汉式与饿汉式的最大区别就是将单例的初始化操作，延迟到需要的时候才进行，这样做在某些场合中有很大用处。比如某个单例用的次数不是很多，但是这个单例提供的功能又非常复杂，而且加载和初始化要消耗大量的资源，这个时候使用懒汉式就是非常不错的选择。\n\n### 多线程下的单例模式\n\n上面介绍了一些单例模式的基本应用方法，但是上面所说的那些使用方式都是有一个隐含的前提，那就是他们都是应用在单线程条件下，一旦换成了多线程就有出错的风险。\n\n如果在多线程的情况下，饿汉式不会出现问题，因为JVM只会加载一次单例类，但是懒汉式可能就会出现重复创建单例对象的问题。为什么会有这样的问题呢？因为懒汉式在创建单例时是 线程不安全的，多个线程可能会并发调用他的newInstance方法导致多个线程可能会创建多份相同的单例出来。\n\n那有没有办法，使懒汉式的单利模式也是线程安全的呢？答案肯定是有的，就是使用加同步锁的方式去实现。\n\n#### 懒汉式同步锁\n\n~~~ Java\npublic class Singleton {\n\n    private static Singleton instance = null;\n\n    private Singleton(){\n    }\n\n    public static Singleton getInstance() {\n        synchronized (Singleton.class) {\n            if (instance == null) {\n                instance = new Singleton();\n            }\n        }\n\n        return instance;\n    }\n}\n~~~\n\n这种是最常见的解决同步问题的一种方式，使用同步锁synchronized (Singleton.class)防止多线程同时进入造成instance被多次实例化。举个在Android使用这种方式的例子：\n\n#### InputMethodManager示例\n\n~~~ Java\npublic final class InputMethodManager {\n    //内部全局唯一实例  \n    static InputMethodManager sInstance;\n\n    //对外api  \n    public static InputMethodManager getInstance() {\n        synchronized (InputMethodManager.class) {\n            if (sInstance == null) {\n                IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);\n                IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);\n                sInstance = new InputMethodManager(service, Looper.getMainLooper());\n            }\n            return sInstance;\n        }\n    }\n}\n~~~\n\n以上是Android源码中输入法类相关的单例使用方式。\n\n但其实还有一种更好的方式如下：\n\n#### 双重校验锁\n\n~~~ Java\npublic class Singleton {\n\n    private static volatile Singleton instance = null;\n\n    private Singleton(){\n    }\n\n    public static Singleton getInstance() {\n        // if already inited, no need to get lock everytime\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n\n        return instance;\n    }\n}\n~~~\n\n可以看到上面在synchronized (Singleton.class)外又添加了一层if，这是为了在instance已经实例化后下次进入不必执行synchronized (Singleton.class)获取对象锁，从而提高性能。\n\n以上两种方式还是挺麻烦的，我们不禁要问，有没有更好的实现方式呢？答案是肯定的。 我们可以利用JVM的类加载机制去实现。在很多情况下JVM已经为我们提供了同步控制，比如：\n\n在static{}区块中初始化的数据\n访问final字段时\n等等\n因为在JVM进行类加载的时候他会保证数据是同步的，我们可以这样实现：\n\n采用内部类，在这个内部类里面去创建对象实例。这样的话，只要应用中不使用内部类 JVM 就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载和线程安全。\n\n实现代码如下：\n\n#### 静态内部类\n\n~~~ Java\npublic class Singleton{\n    //内部类，在装载该内部类时才会去创建单利对象\n    private static class SingletonHolder{\n        public static Singleton instance = new Singleton();\n    }\n\n    private Singleton(){}\n\n    public static Singleton newInstance(){\n        return SingletonHolder.instance;\n    }\n\n    public void doSomething(){\n        //do something\n    }\n}\n~~~\n\n这样实现出来的单例类就是线程安全的，而且使用起来很简洁，麻麻再也不用担心我的单例不是单例了。\n\n然而这还不是最简单的方式，Effective Java中推荐了一种更简洁方便的使用方式，就是使用枚举。\n\n#### 枚举类型单例模式\n\n~~~ Java\npublic enum Singleton{\n    //定义一个枚举的元素，它就是Singleton的一个实例\n    instance;\n\n    public void doSomething(){\n        // do something ...\n    }    \n}\n~~~\n\n使用方法如下：\n\n~~~ Java\npublic static void main(String[] args){\n   Singleton singleton = Singleton.instance;\n   singleton.doSomething();\n}\n~~~\n\n默认枚举实例的创建是线程安全的(创建枚举类的单例在JVM层面也是能保证线程安全的), 所以不需要担心线程安全的问题，所以理论上枚举类来实现单例模式是最简单的方式。\n\n### 总结\n\n一般单例模式包含了5种写法，分别是饿汉、懒汉、双重校验锁、静态内部类和枚举。相信看完之后你对单例模式有了充分的理解了，根据不同的场景选择最你最喜欢的一种单例模式吧！\n","slug":"android-design-pattern-singleton","published":1,"date":"2016-09-19T16:00:00.000Z","updated":"2017-11-23T07:24:42.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7eby8001id6ykckgrycuh","content":"<h3 id=\"向大神致敬\"><a href=\"#向大神致敬\" class=\"headerlink\" title=\"向大神致敬\"></a>向大神致敬</h3><p>本文转载自<a href=\"http://stormzhang.com/designpattern/2016/03/27/android-design-pattern-singleton/\" target=\"_blank\" rel=\"external\">stormzhang ANDROID设计模式之单例模式 </a>，<br>稍有修改</p>\n<h3 id=\"常用单例模式\"><a href=\"#常用单例模式\" class=\"headerlink\" title=\"常用单例模式\"></a>常用单例模式</h3><p>什么是设计模式？其实简单的理解就是前人留下来的一些经验总结而已，然后把这些经验起了个名字叫Design Pattern，翻译过来就是设计模式的意思，通过使用设计模式可以让我们的代码复用性更高，可维护性更高，让你的代码写的更优雅。设计模式理论上有23种，但是我只会针对Android平台上常用的一些设计模式做分享，今天就先来分享下最常用的单例模式。</p>\n<a id=\"more\"></a>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式 是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。 但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用饿汉式的单例模式就是不合适的，这时候就需要用到懒汉式的方式去按需延迟加载单例。</p>\n<h4 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式与饿汉式的最大区别就是将单例的初始化操作，延迟到需要的时候才进行，这样做在某些场合中有很大用处。比如某个单例用的次数不是很多，但是这个单例提供的功能又非常复杂，而且加载和初始化要消耗大量的资源，这个时候使用懒汉式就是非常不错的选择。</p>\n<h3 id=\"多线程下的单例模式\"><a href=\"#多线程下的单例模式\" class=\"headerlink\" title=\"多线程下的单例模式\"></a>多线程下的单例模式</h3><p>上面介绍了一些单例模式的基本应用方法，但是上面所说的那些使用方式都是有一个隐含的前提，那就是他们都是应用在单线程条件下，一旦换成了多线程就有出错的风险。</p>\n<p>如果在多线程的情况下，饿汉式不会出现问题，因为JVM只会加载一次单例类，但是懒汉式可能就会出现重复创建单例对象的问题。为什么会有这样的问题呢？因为懒汉式在创建单例时是 线程不安全的，多个线程可能会并发调用他的newInstance方法导致多个线程可能会创建多份相同的单例出来。</p>\n<p>那有没有办法，使懒汉式的单利模式也是线程安全的呢？答案肯定是有的，就是使用加同步锁的方式去实现。</p>\n<h4 id=\"懒汉式同步锁\"><a href=\"#懒汉式同步锁\" class=\"headerlink\" title=\"懒汉式同步锁\"></a>懒汉式同步锁</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种是最常见的解决同步问题的一种方式，使用同步锁synchronized (Singleton.class)防止多线程同时进入造成instance被多次实例化。举个在Android使用这种方式的例子：</p>\n<h4 id=\"InputMethodManager示例\"><a href=\"#InputMethodManager示例\" class=\"headerlink\" title=\"InputMethodManager示例\"></a>InputMethodManager示例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputMethodManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//内部全局唯一实例  </span></div><div class=\"line\">    <span class=\"keyword\">static</span> InputMethodManager sInstance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对外api  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InputMethodManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (InputMethodManager.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">                IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);</div><div class=\"line\">                sInstance = <span class=\"keyword\">new</span> InputMethodManager(service, Looper.getMainLooper());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上是Android源码中输入法类相关的单例使用方式。</p>\n<p>但其实还有一种更好的方式如下：</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a>双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// if already inited, no need to get lock everytime</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面在synchronized (Singleton.class)外又添加了一层if，这是为了在instance已经实例化后下次进入不必执行synchronized (Singleton.class)获取对象锁，从而提高性能。</p>\n<p>以上两种方式还是挺麻烦的，我们不禁要问，有没有更好的实现方式呢？答案是肯定的。 我们可以利用JVM的类加载机制去实现。在很多情况下JVM已经为我们提供了同步控制，比如：</p>\n<p>在static{}区块中初始化的数据<br>访问final字段时<br>等等<br>因为在JVM进行类加载的时候他会保证数据是同步的，我们可以这样实现：</p>\n<p>采用内部类，在这个内部类里面去创建对象实例。这样的话，只要应用中不使用内部类 JVM 就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载和线程安全。</p>\n<p>实现代码如下：</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//内部类，在装载该内部类时才会去创建单利对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样实现出来的单例类就是线程安全的，而且使用起来很简洁，麻麻再也不用担心我的单例不是单例了。</p>\n<p>然而这还不是最简单的方式，Effective Java中推荐了一种更简洁方便的使用方式，就是使用枚举。</p>\n<h4 id=\"枚举类型单例模式\"><a href=\"#枚举类型单例模式\" class=\"headerlink\" title=\"枚举类型单例模式\"></a>枚举类型单例模式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton&#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个枚举的元素，它就是Singleton的一个实例</span></div><div class=\"line\">    instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something ...</span></div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">   Singleton singleton = Singleton.instance;</div><div class=\"line\">   singleton.doSomething();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认枚举实例的创建是线程安全的(创建枚举类的单例在JVM层面也是能保证线程安全的), 所以不需要担心线程安全的问题，所以理论上枚举类来实现单例模式是最简单的方式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>一般单例模式包含了5种写法，分别是饿汉、懒汉、双重校验锁、静态内部类和枚举。相信看完之后你对单例模式有了充分的理解了，根据不同的场景选择最你最喜欢的一种单例模式吧！</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/20/android-design-pattern-singleton/\">http://agehua.github.io/2016/09/20/android-design-pattern-singleton/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.9,"time":174000,"words":580},"excerpt":"<h3 id=\"向大神致敬\"><a href=\"#向大神致敬\" class=\"headerlink\" title=\"向大神致敬\"></a>向大神致敬</h3><p>本文转载自<a href=\"http://stormzhang.com/designpattern/2016/03/27/android-design-pattern-singleton/\">stormzhang ANDROID设计模式之单例模式 </a>，<br>稍有修改</p>\n<h3 id=\"常用单例模式\"><a href=\"#常用单例模式\" class=\"headerlink\" title=\"常用单例模式\"></a>常用单例模式</h3><p>什么是设计模式？其实简单的理解就是前人留下来的一些经验总结而已，然后把这些经验起了个名字叫Design Pattern，翻译过来就是设计模式的意思，通过使用设计模式可以让我们的代码复用性更高，可维护性更高，让你的代码写的更优雅。设计模式理论上有23种，但是我只会针对Android平台上常用的一些设计模式做分享，今天就先来分享下最常用的单例模式。</p>","more":"<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式 是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。 但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用饿汉式的单例模式就是不合适的，这时候就需要用到懒汉式的方式去按需延迟加载单例。</p>\n<h4 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == instance)&#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式与饿汉式的最大区别就是将单例的初始化操作，延迟到需要的时候才进行，这样做在某些场合中有很大用处。比如某个单例用的次数不是很多，但是这个单例提供的功能又非常复杂，而且加载和初始化要消耗大量的资源，这个时候使用懒汉式就是非常不错的选择。</p>\n<h3 id=\"多线程下的单例模式\"><a href=\"#多线程下的单例模式\" class=\"headerlink\" title=\"多线程下的单例模式\"></a>多线程下的单例模式</h3><p>上面介绍了一些单例模式的基本应用方法，但是上面所说的那些使用方式都是有一个隐含的前提，那就是他们都是应用在单线程条件下，一旦换成了多线程就有出错的风险。</p>\n<p>如果在多线程的情况下，饿汉式不会出现问题，因为JVM只会加载一次单例类，但是懒汉式可能就会出现重复创建单例对象的问题。为什么会有这样的问题呢？因为懒汉式在创建单例时是 线程不安全的，多个线程可能会并发调用他的newInstance方法导致多个线程可能会创建多份相同的单例出来。</p>\n<p>那有没有办法，使懒汉式的单利模式也是线程安全的呢？答案肯定是有的，就是使用加同步锁的方式去实现。</p>\n<h4 id=\"懒汉式同步锁\"><a href=\"#懒汉式同步锁\" class=\"headerlink\" title=\"懒汉式同步锁\"></a>懒汉式同步锁</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种是最常见的解决同步问题的一种方式，使用同步锁synchronized (Singleton.class)防止多线程同时进入造成instance被多次实例化。举个在Android使用这种方式的例子：</p>\n<h4 id=\"InputMethodManager示例\"><a href=\"#InputMethodManager示例\" class=\"headerlink\" title=\"InputMethodManager示例\"></a>InputMethodManager示例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputMethodManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//内部全局唯一实例  </span></div><div class=\"line\">    <span class=\"keyword\">static</span> InputMethodManager sInstance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对外api  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InputMethodManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (InputMethodManager.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">                IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);</div><div class=\"line\">                sInstance = <span class=\"keyword\">new</span> InputMethodManager(service, Looper.getMainLooper());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上是Android源码中输入法类相关的单例使用方式。</p>\n<p>但其实还有一种更好的方式如下：</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a>双重校验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// if already inited, no need to get lock everytime</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到上面在synchronized (Singleton.class)外又添加了一层if，这是为了在instance已经实例化后下次进入不必执行synchronized (Singleton.class)获取对象锁，从而提高性能。</p>\n<p>以上两种方式还是挺麻烦的，我们不禁要问，有没有更好的实现方式呢？答案是肯定的。 我们可以利用JVM的类加载机制去实现。在很多情况下JVM已经为我们提供了同步控制，比如：</p>\n<p>在static{}区块中初始化的数据<br>访问final字段时<br>等等<br>因为在JVM进行类加载的时候他会保证数据是同步的，我们可以这样实现：</p>\n<p>采用内部类，在这个内部类里面去创建对象实例。这样的话，只要应用中不使用内部类 JVM 就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载和线程安全。</p>\n<p>实现代码如下：</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//内部类，在装载该内部类时才会去创建单利对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样实现出来的单例类就是线程安全的，而且使用起来很简洁，麻麻再也不用担心我的单例不是单例了。</p>\n<p>然而这还不是最简单的方式，Effective Java中推荐了一种更简洁方便的使用方式，就是使用枚举。</p>\n<h4 id=\"枚举类型单例模式\"><a href=\"#枚举类型单例模式\" class=\"headerlink\" title=\"枚举类型单例模式\"></a>枚举类型单例模式</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Singleton&#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个枚举的元素，它就是Singleton的一个实例</span></div><div class=\"line\">    instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something ...</span></div><div class=\"line\">    &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">   Singleton singleton = Singleton.instance;</div><div class=\"line\">   singleton.doSomething();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认枚举实例的创建是线程安全的(创建枚举类的单例在JVM层面也是能保证线程安全的), 所以不需要担心线程安全的问题，所以理论上枚举类来实现单例模式是最简单的方式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>一般单例模式包含了5种写法，分别是饿汉、懒汉、双重校验锁、静态内部类和枚举。相信看完之后你对单例模式有了充分的理解了，根据不同的场景选择最你最喜欢的一种单例模式吧！</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/20/android-design-pattern-singleton/\">http://agehua.github.io/2016/09/20/android-design-pattern-singleton/</a></p>"},{"layout":"post","title":"使用JNI获取publickey实现","keywords":"JNI, publickey","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg","_content":"\n\n### 1.前言\n之前写过一篇文件是关于[JNI学习和积累](http://agehua.github.io/2016/JNI-Learning)的文章。\n这篇文章主要讲在使用JNI取得Publickey过程中遇到的问题和一些总结。\n\n### 2.JNI获取Publickey实现\n在上篇文章中，最终采用的加密方法来自[github项目](https://github.com/MasonLiuChn/AndroidUltimateEncrypt)。\n\n但该项目中在4.0.4版本的手机上，取得publickey遇到兼容性问题。\n\n<!--more-->\n\n正常的Publickey字段样式是这样的：\n\n~~~ Java\nOpenSSLRSAPublicKey{modulus=a0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb26a73305eea631ab18ec3ce746eb253e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9480cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a312c73cf0b98e0ce9a8cf6a682fa,publicExponent=10001}\n~~~\n\n但是某些低版本手机上（我遇到的是三星GT-S7568 Android版本4.0.4）的Publickey字段样式是：\n\n~~~ Java\nRSA Public Key\n      modulus: a0d169cedabdaac3527c2099eeaca0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb6a73305eea631ab18ec3ce746eb23e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9410cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a313c73cf0b98e0ce9a8cf6a682aff0b98e0ce9a8cf6a682fa\n      public exponent: 10001\n~~~\n第一个字段modulus是一致的，第二个字段一个是“**publicExponent**”，另一个是“**public exponent**”。\n\n所以我在代码中的处理是这样的\n\n~~~ C++\njmethodID substring_mid = env->GetMethodID(string_cls,\"substring\", \"(II)Ljava/lang/String;\");\njmethodID indexOf_mid = env->GetMethodID(string_cls,\"indexOf\", \"(Ljava/lang/String;)I\");\n\njint bb = env->CallIntMethod(publicKey_str,indexOf_mid,param2);\njstring publicKey2_str =NULL;\nif (bb ==-1){\n\tjstring param3 = env->NewStringUTF(\"public exponent\");\n\tjint cc = env->CallIntMethod(publicKey_str,indexOf_mid,param3);\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"CC value is %d\", cc);\n\tpublicKey2_str= static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,cc-1));\n}else {\n\tpublicKey2_str = static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,bb-1));\n}\n~~~\n\n#### 2.1 在JNI native代码中打印日志\n\n上面提供的JNI方法中涉及到了JNI日志打印（“\\__android_log_print”）\n\n~~~ C++\n__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey value is %s\",  jstringTostring(env,publicKey2_str));\n~~~\n\n- 该方法第一个参数以日志级别，有：ANDROID_LOG_INFO，ANDROID_LOG_DEBUG和ANDROID_LOG_ERROR\n- 第二个参数设置过滤的标签，可以在LogCat视图中过滤。\n- 后面参数是具体的日志内容\n\njstringTostring是将jstring转换成char*的方法：\n\n~~~ C++\nchar* jstringTostring(JNIEnv* env, jstring jstr)\n{\n\tchar* rtn = NULL;\n  jclass clsstring = env->FindClass(\"java/lang/String\");\n  jstring strencode = env->NewStringUTF(\"utf-8\");\n  jmethodID mid = env->GetMethodID(clsstring, \"getBytes\", \"(Ljava/lang/String;)[B\");\n  jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);\n  jsize alen = env->GetArrayLength(barr);\n  jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);\n  if (alen > 0)\n  {\n  rtn = (char*)malloc(alen + 1);\n\n  memcpy(rtn, ba, alen);\n  rtn[alen] = 0;\n  }\n  env->ReleaseByteArrayElements(barr, ba, 0);\n  return rtn;\n}\n~~~\n\njstring是Java提供的一个本地类型（Native Type），对应Java语言中的string类型\n\n想了解JNI其他数据类型的，请看这里\n[JNI学习积累之二 ---- 数据类型映射、域描述符说明](http://blog.csdn.net/qinjuning/article/details/7599796)\n\n要使用JNI日志打印还需要：\n\n- 1.导入.h文件及定义宏\n在输出日志的.c文件中加入:\n\n~~~ C++\n#include <android/log.h>\n\n#define LOG_TAG   \"From JNI ===>>\"\n~~~\n\n- 2.在Android.mk中引用日志库\n加入下面这行代码:\n\n~~~ C++\nLOCAL_LDLIBS   := -lm -llog -ljnigraphics\n~~~\n\n具体学习可以移步这两篇文章：\n\n[JNI的native代码中打印日志到eclipse的logcat中](http://www.cnblogs.com/liuling/p/2015-8-5-1.html)\n\n[JNI中使用LOGCAT 进行Debug](http://blog.csdn.net/llwdslal/article/details/31733035)\n\n#### 2.2 完整代码\n\n下面是我修改后的完整代码\n\n~~~ C++\njstring getPublicKey(JNIEnv* env, jobject thiz,jobject context) {\n\tjclass context_cls = env->GetObjectClass(context);\n\n\tjmethodID get_package_manager_mid = env->GetMethodID(context_cls,\n\t\t\t\"getPackageManager\", \"()Landroid/content/pm/PackageManager;\");\n\n\tjmethodID get_package_name_mid = env->GetMethodID(context_cls,\n\t\t\t\"getPackageName\", \"()Ljava/lang/String;\");\n\tenv->DeleteLocalRef(context_cls);\n\tjobject pm_obj = env->CallObjectMethod(context, get_package_manager_mid);\n\tjclass pm_cls = env->FindClass(\"android/content/pm/PackageManager\");\n\n\tjmethodID get_package_info_mid = env->GetMethodID(pm_cls, \"getPackageInfo\",\n\t\t\t\"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\");\n\tjstring package_name = reinterpret_cast<jstring>(env->CallObjectMethod(\n\t\t\tcontext, get_package_name_mid));\n\tjfieldID flag_fid = env->GetStaticFieldID(pm_cls, \"GET_SIGNATURES\", \"I\");\n\tjint flag = env->GetStaticIntField(pm_cls, flag_fid);\n\tenv->DeleteLocalRef(pm_cls);\n\tjobject pi_obj = env->CallObjectMethod(pm_obj, get_package_info_mid,\n\t\t\tpackage_name, flag);\n\tenv->DeleteLocalRef(package_name);\n\n\tjclass pi_cls = env->FindClass(\"android/content/pm/PackageInfo\");\n\tjfieldID signatures_fid = env->GetFieldID(pi_cls, \"signatures\",\n\t\t\t\"[Landroid/content/pm/Signature;\");\n\tenv->DeleteLocalRef(pi_cls);\n\tjobject sig_obj = env->GetObjectField(pi_obj, signatures_fid);\n\tenv->DeleteLocalRef(pi_obj);\n\n\tjobjectArray sigs = reinterpret_cast<jobjectArray>(sig_obj);\n\n\tjclass signature_cls = env->FindClass(\"android/content/pm/Signature\");\n\tjmethodID to_byte_array_mid = env->GetMethodID(signature_cls, \"toByteArray\",\n\t\t\t\"()[B\");\n\n\tjbyteArray sig_bytes = reinterpret_cast<jbyteArray>(env->CallObjectMethod(\n\t\t\tenv->GetObjectArrayElement(sigs, 0), to_byte_array_mid));\n\tjclass certificate_factory_cls = env->FindClass(\n\t\t\t\"java/security/cert/CertificateFactory\");\n\tjmethodID get_certificate_instance_mid = env->GetStaticMethodID(\n\t\t\tcertificate_factory_cls, \"getInstance\",\n\t\t\t\"(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\");\n\n\tjobject certificate_factory_obj = env->CallStaticObjectMethod(\n\t\t\tcertificate_factory_cls, get_certificate_instance_mid,\n\t\t\tenv->NewStringUTF(\"X509\"));\n\tjmethodID generate_certificate_mid = env->GetMethodID(\n\t\t\tcertificate_factory_cls, \"generateCertificate\",\n\t\t\t\"(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\");\n\tenv->DeleteLocalRef(certificate_factory_cls);\n\n\tjclass certificate_cls = env->FindClass(\"java/security/cert/Certificate\");\n\tjclass byte_input_stream_cls = env->FindClass(\n\t\t\t\"java/io/ByteArrayInputStream\");\n\tjmethodID new_sig_bytes_is_mid = env->GetMethodID(byte_input_stream_cls,\n\t\t\t\"<init>\", \"([B)V\");\n\tjobject sig_bytes_is = env->NewObject(byte_input_stream_cls,\n\t\t\tnew_sig_bytes_is_mid, sig_bytes);\n\tenv->DeleteLocalRef(sig_bytes);\n\tenv->DeleteLocalRef(byte_input_stream_cls);\n\tjobject cert = env->CallObjectMethod(certificate_factory_obj,\n\t\t\tgenerate_certificate_mid, sig_bytes_is);\n\tenv->DeleteLocalRef(sig_bytes_is);\n\tenv->DeleteLocalRef(certificate_factory_obj);\n\tjmethodID get_pubic_key_mid = env->GetMethodID(certificate_cls,\n\t\t\t\"getPublicKey\", \"()Ljava/security/PublicKey;\");\n\tenv->DeleteLocalRef(certificate_cls);\n\n\tjobject publicKey  = env->CallObjectMethod(cert, get_pubic_key_mid);\n\tjclass publicKey_cls = env->GetObjectClass(publicKey);\n\tjmethodID toString_mid = env->GetMethodID(publicKey_cls,\"toString\", \"()Ljava/lang/String;\");\n\tjstring publicKey_str = static_cast<jstring>(env->CallObjectMethod(publicKey,toString_mid));\n\tenv->DeleteLocalRef(cert);\n\tenv->DeleteLocalRef(publicKey_cls);\n\tenv->DeleteLocalRef(publicKey);\n\n\n\tjclass string_cls = env->GetObjectClass(publicKey_str);\n\tjmethodID indexOf_mid = env->GetMethodID(string_cls,\"indexOf\", \"(Ljava/lang/String;)I\");\n\tjstring param = env->NewStringUTF(\"modulus\");\n\tjint aa = env->CallIntMethod(publicKey_str,indexOf_mid,param);\n\tjstring param2 = env->NewStringUTF(\"publicExponent\");\n\n\tjmethodID substring_mid = env->GetMethodID(string_cls,\"substring\", \"(II)Ljava/lang/String;\");\n\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey String is %s\", jstringTostring(env,publicKey_str));\n\n\tjint bb = env->CallIntMethod(publicKey_str,indexOf_mid,param2);\n\tjstring publicKey2_str =NULL;\n\tif (bb ==-1){\n\t\tjstring param3 = env->NewStringUTF(\"public exponent\");\n\t\tjint cc = env->CallIntMethod(publicKey_str,indexOf_mid,param3);\n\t\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"CC value is %d\", cc);\n\t\tpublicKey2_str= static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,cc-1));\n\t}else {\n\t\tpublicKey2_str = static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,bb-1));\n\t}\n\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey value is %s\",  jstringTostring(env,publicKey2_str));\n\treturn publicKey2_str;\n}\n~~~\n\n\n### 3.附赠版本兼容的方法问题（随时更新）\n\n低于Jellybean版本报如下错误：\n\n    01-20 08:53:00.141: E/AndroidRuntime(24005): java.lang.NoSuchMethodError:\n\t\tandroid.view.ViewTreeObserver.removeOnGlobalLayoutListener\n\n正确调用方式应该是：\n\n~~~ Java\nif (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n\t\tViewTreeObserver.removeGlobalOnLayoutListener(this);\n}else\n\t\tViewTreeObserver.removeOnGlobalLayoutListener(this);\n~~~\n\n还有一个setBackground方法：\n\n~~~ Java\nif(Build.VERSION.SzDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\tView.setBackground(new ColorDrawable(Color.parseColor(\"#CCCCCC\")));\n} else {\n\t\tView.setBackgroundColor(Color.parseColor(\"#CCCCCC\"));\n}\n~~~\n","source":"_posts/2016-09-22-JNI-get-publickey.md","raw":"---\nlayout: post\ntitle:  使用JNI获取publickey实现\ncategory: technology\ntags:\n  - JNI\n  - publickey\nkeywords: JNI, publickey\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg\n---\n\n\n### 1.前言\n之前写过一篇文件是关于[JNI学习和积累](http://agehua.github.io/2016/JNI-Learning)的文章。\n这篇文章主要讲在使用JNI取得Publickey过程中遇到的问题和一些总结。\n\n### 2.JNI获取Publickey实现\n在上篇文章中，最终采用的加密方法来自[github项目](https://github.com/MasonLiuChn/AndroidUltimateEncrypt)。\n\n但该项目中在4.0.4版本的手机上，取得publickey遇到兼容性问题。\n\n<!--more-->\n\n正常的Publickey字段样式是这样的：\n\n~~~ Java\nOpenSSLRSAPublicKey{modulus=a0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb26a73305eea631ab18ec3ce746eb253e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9480cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a312c73cf0b98e0ce9a8cf6a682fa,publicExponent=10001}\n~~~\n\n但是某些低版本手机上（我遇到的是三星GT-S7568 Android版本4.0.4）的Publickey字段样式是：\n\n~~~ Java\nRSA Public Key\n      modulus: a0d169cedabdaac3527c2099eeaca0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb6a73305eea631ab18ec3ce746eb23e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9410cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a313c73cf0b98e0ce9a8cf6a682aff0b98e0ce9a8cf6a682fa\n      public exponent: 10001\n~~~\n第一个字段modulus是一致的，第二个字段一个是“**publicExponent**”，另一个是“**public exponent**”。\n\n所以我在代码中的处理是这样的\n\n~~~ C++\njmethodID substring_mid = env->GetMethodID(string_cls,\"substring\", \"(II)Ljava/lang/String;\");\njmethodID indexOf_mid = env->GetMethodID(string_cls,\"indexOf\", \"(Ljava/lang/String;)I\");\n\njint bb = env->CallIntMethod(publicKey_str,indexOf_mid,param2);\njstring publicKey2_str =NULL;\nif (bb ==-1){\n\tjstring param3 = env->NewStringUTF(\"public exponent\");\n\tjint cc = env->CallIntMethod(publicKey_str,indexOf_mid,param3);\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"CC value is %d\", cc);\n\tpublicKey2_str= static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,cc-1));\n}else {\n\tpublicKey2_str = static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,bb-1));\n}\n~~~\n\n#### 2.1 在JNI native代码中打印日志\n\n上面提供的JNI方法中涉及到了JNI日志打印（“\\__android_log_print”）\n\n~~~ C++\n__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey value is %s\",  jstringTostring(env,publicKey2_str));\n~~~\n\n- 该方法第一个参数以日志级别，有：ANDROID_LOG_INFO，ANDROID_LOG_DEBUG和ANDROID_LOG_ERROR\n- 第二个参数设置过滤的标签，可以在LogCat视图中过滤。\n- 后面参数是具体的日志内容\n\njstringTostring是将jstring转换成char*的方法：\n\n~~~ C++\nchar* jstringTostring(JNIEnv* env, jstring jstr)\n{\n\tchar* rtn = NULL;\n  jclass clsstring = env->FindClass(\"java/lang/String\");\n  jstring strencode = env->NewStringUTF(\"utf-8\");\n  jmethodID mid = env->GetMethodID(clsstring, \"getBytes\", \"(Ljava/lang/String;)[B\");\n  jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);\n  jsize alen = env->GetArrayLength(barr);\n  jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);\n  if (alen > 0)\n  {\n  rtn = (char*)malloc(alen + 1);\n\n  memcpy(rtn, ba, alen);\n  rtn[alen] = 0;\n  }\n  env->ReleaseByteArrayElements(barr, ba, 0);\n  return rtn;\n}\n~~~\n\njstring是Java提供的一个本地类型（Native Type），对应Java语言中的string类型\n\n想了解JNI其他数据类型的，请看这里\n[JNI学习积累之二 ---- 数据类型映射、域描述符说明](http://blog.csdn.net/qinjuning/article/details/7599796)\n\n要使用JNI日志打印还需要：\n\n- 1.导入.h文件及定义宏\n在输出日志的.c文件中加入:\n\n~~~ C++\n#include <android/log.h>\n\n#define LOG_TAG   \"From JNI ===>>\"\n~~~\n\n- 2.在Android.mk中引用日志库\n加入下面这行代码:\n\n~~~ C++\nLOCAL_LDLIBS   := -lm -llog -ljnigraphics\n~~~\n\n具体学习可以移步这两篇文章：\n\n[JNI的native代码中打印日志到eclipse的logcat中](http://www.cnblogs.com/liuling/p/2015-8-5-1.html)\n\n[JNI中使用LOGCAT 进行Debug](http://blog.csdn.net/llwdslal/article/details/31733035)\n\n#### 2.2 完整代码\n\n下面是我修改后的完整代码\n\n~~~ C++\njstring getPublicKey(JNIEnv* env, jobject thiz,jobject context) {\n\tjclass context_cls = env->GetObjectClass(context);\n\n\tjmethodID get_package_manager_mid = env->GetMethodID(context_cls,\n\t\t\t\"getPackageManager\", \"()Landroid/content/pm/PackageManager;\");\n\n\tjmethodID get_package_name_mid = env->GetMethodID(context_cls,\n\t\t\t\"getPackageName\", \"()Ljava/lang/String;\");\n\tenv->DeleteLocalRef(context_cls);\n\tjobject pm_obj = env->CallObjectMethod(context, get_package_manager_mid);\n\tjclass pm_cls = env->FindClass(\"android/content/pm/PackageManager\");\n\n\tjmethodID get_package_info_mid = env->GetMethodID(pm_cls, \"getPackageInfo\",\n\t\t\t\"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\");\n\tjstring package_name = reinterpret_cast<jstring>(env->CallObjectMethod(\n\t\t\tcontext, get_package_name_mid));\n\tjfieldID flag_fid = env->GetStaticFieldID(pm_cls, \"GET_SIGNATURES\", \"I\");\n\tjint flag = env->GetStaticIntField(pm_cls, flag_fid);\n\tenv->DeleteLocalRef(pm_cls);\n\tjobject pi_obj = env->CallObjectMethod(pm_obj, get_package_info_mid,\n\t\t\tpackage_name, flag);\n\tenv->DeleteLocalRef(package_name);\n\n\tjclass pi_cls = env->FindClass(\"android/content/pm/PackageInfo\");\n\tjfieldID signatures_fid = env->GetFieldID(pi_cls, \"signatures\",\n\t\t\t\"[Landroid/content/pm/Signature;\");\n\tenv->DeleteLocalRef(pi_cls);\n\tjobject sig_obj = env->GetObjectField(pi_obj, signatures_fid);\n\tenv->DeleteLocalRef(pi_obj);\n\n\tjobjectArray sigs = reinterpret_cast<jobjectArray>(sig_obj);\n\n\tjclass signature_cls = env->FindClass(\"android/content/pm/Signature\");\n\tjmethodID to_byte_array_mid = env->GetMethodID(signature_cls, \"toByteArray\",\n\t\t\t\"()[B\");\n\n\tjbyteArray sig_bytes = reinterpret_cast<jbyteArray>(env->CallObjectMethod(\n\t\t\tenv->GetObjectArrayElement(sigs, 0), to_byte_array_mid));\n\tjclass certificate_factory_cls = env->FindClass(\n\t\t\t\"java/security/cert/CertificateFactory\");\n\tjmethodID get_certificate_instance_mid = env->GetStaticMethodID(\n\t\t\tcertificate_factory_cls, \"getInstance\",\n\t\t\t\"(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\");\n\n\tjobject certificate_factory_obj = env->CallStaticObjectMethod(\n\t\t\tcertificate_factory_cls, get_certificate_instance_mid,\n\t\t\tenv->NewStringUTF(\"X509\"));\n\tjmethodID generate_certificate_mid = env->GetMethodID(\n\t\t\tcertificate_factory_cls, \"generateCertificate\",\n\t\t\t\"(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\");\n\tenv->DeleteLocalRef(certificate_factory_cls);\n\n\tjclass certificate_cls = env->FindClass(\"java/security/cert/Certificate\");\n\tjclass byte_input_stream_cls = env->FindClass(\n\t\t\t\"java/io/ByteArrayInputStream\");\n\tjmethodID new_sig_bytes_is_mid = env->GetMethodID(byte_input_stream_cls,\n\t\t\t\"<init>\", \"([B)V\");\n\tjobject sig_bytes_is = env->NewObject(byte_input_stream_cls,\n\t\t\tnew_sig_bytes_is_mid, sig_bytes);\n\tenv->DeleteLocalRef(sig_bytes);\n\tenv->DeleteLocalRef(byte_input_stream_cls);\n\tjobject cert = env->CallObjectMethod(certificate_factory_obj,\n\t\t\tgenerate_certificate_mid, sig_bytes_is);\n\tenv->DeleteLocalRef(sig_bytes_is);\n\tenv->DeleteLocalRef(certificate_factory_obj);\n\tjmethodID get_pubic_key_mid = env->GetMethodID(certificate_cls,\n\t\t\t\"getPublicKey\", \"()Ljava/security/PublicKey;\");\n\tenv->DeleteLocalRef(certificate_cls);\n\n\tjobject publicKey  = env->CallObjectMethod(cert, get_pubic_key_mid);\n\tjclass publicKey_cls = env->GetObjectClass(publicKey);\n\tjmethodID toString_mid = env->GetMethodID(publicKey_cls,\"toString\", \"()Ljava/lang/String;\");\n\tjstring publicKey_str = static_cast<jstring>(env->CallObjectMethod(publicKey,toString_mid));\n\tenv->DeleteLocalRef(cert);\n\tenv->DeleteLocalRef(publicKey_cls);\n\tenv->DeleteLocalRef(publicKey);\n\n\n\tjclass string_cls = env->GetObjectClass(publicKey_str);\n\tjmethodID indexOf_mid = env->GetMethodID(string_cls,\"indexOf\", \"(Ljava/lang/String;)I\");\n\tjstring param = env->NewStringUTF(\"modulus\");\n\tjint aa = env->CallIntMethod(publicKey_str,indexOf_mid,param);\n\tjstring param2 = env->NewStringUTF(\"publicExponent\");\n\n\tjmethodID substring_mid = env->GetMethodID(string_cls,\"substring\", \"(II)Ljava/lang/String;\");\n\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey String is %s\", jstringTostring(env,publicKey_str));\n\n\tjint bb = env->CallIntMethod(publicKey_str,indexOf_mid,param2);\n\tjstring publicKey2_str =NULL;\n\tif (bb ==-1){\n\t\tjstring param3 = env->NewStringUTF(\"public exponent\");\n\t\tjint cc = env->CallIntMethod(publicKey_str,indexOf_mid,param3);\n\t\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"CC value is %d\", cc);\n\t\tpublicKey2_str= static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,cc-1));\n\t}else {\n\t\tpublicKey2_str = static_cast<jstring>(env->CallObjectMethod(publicKey_str,substring_mid,aa+8,bb-1));\n\t}\n\n\t__android_log_print(ANDROID_LOG_ERROR, TAG, \"PublicKey value is %s\",  jstringTostring(env,publicKey2_str));\n\treturn publicKey2_str;\n}\n~~~\n\n\n### 3.附赠版本兼容的方法问题（随时更新）\n\n低于Jellybean版本报如下错误：\n\n    01-20 08:53:00.141: E/AndroidRuntime(24005): java.lang.NoSuchMethodError:\n\t\tandroid.view.ViewTreeObserver.removeOnGlobalLayoutListener\n\n正确调用方式应该是：\n\n~~~ Java\nif (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n\t\tViewTreeObserver.removeGlobalOnLayoutListener(this);\n}else\n\t\tViewTreeObserver.removeOnGlobalLayoutListener(this);\n~~~\n\n还有一个setBackground方法：\n\n~~~ Java\nif(Build.VERSION.SzDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\tView.setBackground(new ColorDrawable(Color.parseColor(\"#CCCCCC\")));\n} else {\n\t\tView.setBackgroundColor(Color.parseColor(\"#CCCCCC\"));\n}\n~~~\n","slug":"JNI-get-publickey","published":1,"date":"2016-09-21T16:00:00.000Z","updated":"2017-11-23T07:08:18.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebyd001ld6ykts3mjggy","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>之前写过一篇文件是关于<a href=\"http://agehua.github.io/2016/JNI-Learning\">JNI学习和积累</a>的文章。<br>这篇文章主要讲在使用JNI取得Publickey过程中遇到的问题和一些总结。</p>\n<h3 id=\"2-JNI获取Publickey实现\"><a href=\"#2-JNI获取Publickey实现\" class=\"headerlink\" title=\"2.JNI获取Publickey实现\"></a>2.JNI获取Publickey实现</h3><p>在上篇文章中，最终采用的加密方法来自<a href=\"https://github.com/MasonLiuChn/AndroidUltimateEncrypt\" target=\"_blank\" rel=\"external\">github项目</a>。</p>\n<p>但该项目中在4.0.4版本的手机上，取得publickey遇到兼容性问题。</p>\n<a id=\"more\"></a>\n<p>正常的Publickey字段样式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">OpenSSLRSAPublicKey&#123;modulus=a0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb26a73305eea631ab18ec3ce746eb253e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9480cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a312c73cf0b98e0ce9a8cf6a682fa,publicExponent=<span class=\"number\">10001</span>&#125;</div></pre></td></tr></table></figure>\n<p>但是某些低版本手机上（我遇到的是三星GT-S7568 Android版本4.0.4）的Publickey字段样式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">RSA Public Key</div><div class=\"line\">      modulus: a0d169cedabdaac3527c2099eeaca0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb6a73305eea631ab18ec3ce746eb23e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9410cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a313c73cf0b98e0ce9a8cf6a682aff0b98e0ce9a8cf6a682fa</div><div class=\"line\">      <span class=\"keyword\">public</span> exponent: <span class=\"number\">10001</span></div></pre></td></tr></table></figure>\n<p>第一个字段modulus是一致的，第二个字段一个是“<strong>publicExponent</strong>”，另一个是“<strong>public exponent</strong>”。</p>\n<p>所以我在代码中的处理是这样的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">jmethodID substring_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"substring\"</span>, <span class=\"string\">\"(II)Ljava/lang/String;\"</span>);</div><div class=\"line\">jmethodID indexOf_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"indexOf\"</span>, <span class=\"string\">\"(Ljava/lang/String;)I\"</span>);</div><div class=\"line\"></div><div class=\"line\">jint bb = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param2);</div><div class=\"line\">jstring publicKey2_str =<span class=\"literal\">NULL</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (bb ==<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\tjstring param3 = env-&gt;NewStringUTF(<span class=\"string\">\"public exponent\"</span>);</div><div class=\"line\">\tjint cc = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param3);</div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"CC value is %d\"</span>, cc);</div><div class=\"line\">\tpublicKey2_str= <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,cc<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tpublicKey2_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,bb<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-1-在JNI-native代码中打印日志\"><a href=\"#2-1-在JNI-native代码中打印日志\" class=\"headerlink\" title=\"2.1 在JNI native代码中打印日志\"></a>2.1 在JNI native代码中打印日志</h4><p>上面提供的JNI方法中涉及到了JNI日志打印（“__android_log_print”）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey value is %s\"</span>,  jstringTostring(env,publicKey2_str));</div></pre></td></tr></table></figure>\n<ul>\n<li>该方法第一个参数以日志级别，有：ANDROID_LOG_INFO，ANDROID_LOG_DEBUG和ANDROID_LOG_ERROR</li>\n<li>第二个参数设置过滤的标签，可以在LogCat视图中过滤。</li>\n<li>后面参数是具体的日志内容</li>\n</ul>\n<p>jstringTostring是将jstring转换成char*的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">jstringTostring</span><span class=\"params\">(JNIEnv* env, jstring jstr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span>* rtn = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  jclass clsstring = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</div><div class=\"line\">  jstring strencode = env-&gt;NewStringUTF(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">  jmethodID mid = env-&gt;GetMethodID(clsstring, <span class=\"string\">\"getBytes\"</span>, <span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);</div><div class=\"line\">  jbyteArray barr= (jbyteArray)env-&gt;CallObjectMethod(jstr, mid, strencode);</div><div class=\"line\">  jsize alen = env-&gt;GetArrayLength(barr);</div><div class=\"line\">  jbyte* ba = env-&gt;GetByteArrayElements(barr, JNI_FALSE);</div><div class=\"line\">  <span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">  rtn = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(alen + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">memcpy</span>(rtn, ba, alen);</div><div class=\"line\">  rtn[alen] = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  env-&gt;ReleaseByteArrayElements(barr, ba, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> rtn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jstring是Java提供的一个本地类型（Native Type），对应Java语言中的string类型</p>\n<p>想了解JNI其他数据类型的，请看这里<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7599796\" target=\"_blank\" rel=\"external\">JNI学习积累之二 —- 数据类型映射、域描述符说明</a></p>\n<p>要使用JNI日志打印还需要：</p>\n<ul>\n<li>1.导入.h文件及定义宏<br>在输出日志的.c文件中加入:</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG_TAG   <span class=\"meta-string\">\"From JNI ===&gt;&gt;\"</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>2.在Android.mk中引用日志库<br>加入下面这行代码:</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">LOCAL_LDLIBS   := -lm -llog -ljnigraphics</div></pre></td></tr></table></figure>\n<p>具体学习可以移步这两篇文章：</p>\n<p><a href=\"http://www.cnblogs.com/liuling/p/2015-8-5-1.html\" target=\"_blank\" rel=\"external\">JNI的native代码中打印日志到eclipse的logcat中</a></p>\n<p><a href=\"http://blog.csdn.net/llwdslal/article/details/31733035\" target=\"_blank\" rel=\"external\">JNI中使用LOGCAT 进行Debug</a></p>\n<h4 id=\"2-2-完整代码\"><a href=\"#2-2-完整代码\" class=\"headerlink\" title=\"2.2 完整代码\"></a>2.2 完整代码</h4><p>下面是我修改后的完整代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jstring <span class=\"title\">getPublicKey</span><span class=\"params\">(JNIEnv* env, jobject thiz,jobject context)</span> </span>&#123;</div><div class=\"line\">\tjclass context_cls = env-&gt;GetObjectClass(context);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_manager_mid = env-&gt;GetMethodID(context_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPackageManager\"</span>, <span class=\"string\">\"()Landroid/content/pm/PackageManager;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_name_mid = env-&gt;GetMethodID(context_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPackageName\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(context_cls);</div><div class=\"line\">\tjobject pm_obj = env-&gt;CallObjectMethod(context, get_package_manager_mid);</div><div class=\"line\">\tjclass pm_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/PackageManager\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_info_mid = env-&gt;GetMethodID(pm_cls, <span class=\"string\">\"getPackageInfo\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\"</span>);</div><div class=\"line\">\tjstring package_name = <span class=\"keyword\">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(</div><div class=\"line\">\t\t\tcontext, get_package_name_mid));</div><div class=\"line\">\tjfieldID flag_fid = env-&gt;GetStaticFieldID(pm_cls, <span class=\"string\">\"GET_SIGNATURES\"</span>, <span class=\"string\">\"I\"</span>);</div><div class=\"line\">\tjint flag = env-&gt;GetStaticIntField(pm_cls, flag_fid);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pm_cls);</div><div class=\"line\">\tjobject pi_obj = env-&gt;CallObjectMethod(pm_obj, get_package_info_mid,</div><div class=\"line\">\t\t\tpackage_name, flag);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(package_name);</div><div class=\"line\"></div><div class=\"line\">\tjclass pi_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/PackageInfo\"</span>);</div><div class=\"line\">\tjfieldID signatures_fid = env-&gt;GetFieldID(pi_cls, <span class=\"string\">\"signatures\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"[Landroid/content/pm/Signature;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pi_cls);</div><div class=\"line\">\tjobject sig_obj = env-&gt;GetObjectField(pi_obj, signatures_fid);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pi_obj);</div><div class=\"line\"></div><div class=\"line\">\tjobjectArray sigs = <span class=\"keyword\">reinterpret_cast</span>&lt;jobjectArray&gt;(sig_obj);</div><div class=\"line\"></div><div class=\"line\">\tjclass signature_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/Signature\"</span>);</div><div class=\"line\">\tjmethodID to_byte_array_mid = env-&gt;GetMethodID(signature_cls, <span class=\"string\">\"toByteArray\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"()[B\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjbyteArray sig_bytes = <span class=\"keyword\">reinterpret_cast</span>&lt;jbyteArray&gt;(env-&gt;CallObjectMethod(</div><div class=\"line\">\t\t\tenv-&gt;GetObjectArrayElement(sigs, <span class=\"number\">0</span>), to_byte_array_mid));</div><div class=\"line\">\tjclass certificate_factory_cls = env-&gt;FindClass(</div><div class=\"line\">\t\t\t<span class=\"string\">\"java/security/cert/CertificateFactory\"</span>);</div><div class=\"line\">\tjmethodID get_certificate_instance_mid = env-&gt;GetStaticMethodID(</div><div class=\"line\">\t\t\tcertificate_factory_cls, <span class=\"string\">\"getInstance\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjobject certificate_factory_obj = env-&gt;CallStaticObjectMethod(</div><div class=\"line\">\t\t\tcertificate_factory_cls, get_certificate_instance_mid,</div><div class=\"line\">\t\t\tenv-&gt;NewStringUTF(<span class=\"string\">\"X509\"</span>));</div><div class=\"line\">\tjmethodID generate_certificate_mid = env-&gt;GetMethodID(</div><div class=\"line\">\t\t\tcertificate_factory_cls, <span class=\"string\">\"generateCertificate\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_factory_cls);</div><div class=\"line\"></div><div class=\"line\">\tjclass certificate_cls = env-&gt;FindClass(<span class=\"string\">\"java/security/cert/Certificate\"</span>);</div><div class=\"line\">\tjclass byte_input_stream_cls = env-&gt;FindClass(</div><div class=\"line\">\t\t\t<span class=\"string\">\"java/io/ByteArrayInputStream\"</span>);</div><div class=\"line\">\tjmethodID new_sig_bytes_is_mid = env-&gt;GetMethodID(byte_input_stream_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&lt;init&gt;\"</span>, <span class=\"string\">\"([B)V\"</span>);</div><div class=\"line\">\tjobject sig_bytes_is = env-&gt;NewObject(byte_input_stream_cls,</div><div class=\"line\">\t\t\tnew_sig_bytes_is_mid, sig_bytes);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(sig_bytes);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(byte_input_stream_cls);</div><div class=\"line\">\tjobject cert = env-&gt;CallObjectMethod(certificate_factory_obj,</div><div class=\"line\">\t\t\tgenerate_certificate_mid, sig_bytes_is);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(sig_bytes_is);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_factory_obj);</div><div class=\"line\">\tjmethodID get_pubic_key_mid = env-&gt;GetMethodID(certificate_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPublicKey\"</span>, <span class=\"string\">\"()Ljava/security/PublicKey;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_cls);</div><div class=\"line\"></div><div class=\"line\">\tjobject publicKey  = env-&gt;CallObjectMethod(cert, get_pubic_key_mid);</div><div class=\"line\">\tjclass publicKey_cls = env-&gt;GetObjectClass(publicKey);</div><div class=\"line\">\tjmethodID toString_mid = env-&gt;GetMethodID(publicKey_cls,<span class=\"string\">\"toString\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</div><div class=\"line\">\tjstring publicKey_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey,toString_mid));</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(cert);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(publicKey_cls);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(publicKey);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tjclass string_cls = env-&gt;GetObjectClass(publicKey_str);</div><div class=\"line\">\tjmethodID indexOf_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"indexOf\"</span>, <span class=\"string\">\"(Ljava/lang/String;)I\"</span>);</div><div class=\"line\">\tjstring param = env-&gt;NewStringUTF(<span class=\"string\">\"modulus\"</span>);</div><div class=\"line\">\tjint aa = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param);</div><div class=\"line\">\tjstring param2 = env-&gt;NewStringUTF(<span class=\"string\">\"publicExponent\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID substring_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"substring\"</span>, <span class=\"string\">\"(II)Ljava/lang/String;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey String is %s\"</span>, jstringTostring(env,publicKey_str));</div><div class=\"line\"></div><div class=\"line\">\tjint bb = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param2);</div><div class=\"line\">\tjstring publicKey2_str =<span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (bb ==<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\tjstring param3 = env-&gt;NewStringUTF(<span class=\"string\">\"public exponent\"</span>);</div><div class=\"line\">\t\tjint cc = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param3);</div><div class=\"line\">\t\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"CC value is %d\"</span>, cc);</div><div class=\"line\">\t\tpublicKey2_str= <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,cc<span class=\"number\">-1</span>));</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tpublicKey2_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,bb<span class=\"number\">-1</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey value is %s\"</span>,  jstringTostring(env,publicKey2_str));</div><div class=\"line\">\t<span class=\"keyword\">return</span> publicKey2_str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-附赠版本兼容的方法问题（随时更新）\"><a href=\"#3-附赠版本兼容的方法问题（随时更新）\" class=\"headerlink\" title=\"3.附赠版本兼容的方法问题（随时更新）\"></a>3.附赠版本兼容的方法问题（随时更新）</h3><p>低于Jellybean版本报如下错误：</p>\n<pre><code>01-20 08:53:00.141: E/AndroidRuntime(24005): java.lang.NoSuchMethodError:\n    android.view.ViewTreeObserver.removeOnGlobalLayoutListener\n</code></pre><p>正确调用方式应该是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class=\"line\">\t\tViewTreeObserver.removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span></div><div class=\"line\">\t\tViewTreeObserver.removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n<p>还有一个setBackground方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SzDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class=\"line\">\t\tView.setBackground(<span class=\"keyword\">new</span> ColorDrawable(Color.parseColor(<span class=\"string\">\"#CCCCCC\"</span>)));</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tView.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#CCCCCC\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/22/JNI-get-publickey/\">http://agehua.github.io/2016/09/22/JNI-get-publickey/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.87,"time":232200.00000000003,"words":774},"excerpt":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>之前写过一篇文件是关于<a href=\"http://agehua.github.io/2016/JNI-Learning\">JNI学习和积累</a>的文章。<br>这篇文章主要讲在使用JNI取得Publickey过程中遇到的问题和一些总结。</p>\n<h3 id=\"2-JNI获取Publickey实现\"><a href=\"#2-JNI获取Publickey实现\" class=\"headerlink\" title=\"2.JNI获取Publickey实现\"></a>2.JNI获取Publickey实现</h3><p>在上篇文章中，最终采用的加密方法来自<a href=\"https://github.com/MasonLiuChn/AndroidUltimateEncrypt\">github项目</a>。</p>\n<p>但该项目中在4.0.4版本的手机上，取得publickey遇到兼容性问题。</p>","more":"<p>正常的Publickey字段样式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">OpenSSLRSAPublicKey&#123;modulus=a0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb26a73305eea631ab18ec3ce746eb253e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9480cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a312c73cf0b98e0ce9a8cf6a682fa,publicExponent=<span class=\"number\">10001</span>&#125;</div></pre></td></tr></table></figure>\n<p>但是某些低版本手机上（我遇到的是三星GT-S7568 Android版本4.0.4）的Publickey字段样式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">RSA Public Key</div><div class=\"line\">      modulus: a0d169cedabdaac3527c2099eeaca0d169cedabdaac3527c2099eeac4cbd74bb9b14c2571bcf6755f49e1d8c8439a37e009b0cb1b1ae9bf164dc976ddc4ee050621c746610d995185accbe8b3c09cc4f8c7afd990db47be814f7f45ec9c489be5b0933e89ff58070c29c98199331160bdb3a19e0687d36e850ee686c565737be4f61328264a58792e198d873b023ec11cb6a73305eea631ab18ec3ce746eb23e47c145503e933ee5da892326ecbb29b5a005aacef2d30d720611f7014aa3f2e40954b9e4deeaca1823dd2f7b2230670acabda70d2f14b1adc9410cf0a48d47866a1aa745ae97d0ab906cd76e5ab76916d03ef153b35edc2ae7284a613b3a3a313c73cf0b98e0ce9a8cf6a682aff0b98e0ce9a8cf6a682fa</div><div class=\"line\">      <span class=\"keyword\">public</span> exponent: <span class=\"number\">10001</span></div></pre></td></tr></table></figure>\n<p>第一个字段modulus是一致的，第二个字段一个是“<strong>publicExponent</strong>”，另一个是“<strong>public exponent</strong>”。</p>\n<p>所以我在代码中的处理是这样的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">jmethodID substring_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"substring\"</span>, <span class=\"string\">\"(II)Ljava/lang/String;\"</span>);</div><div class=\"line\">jmethodID indexOf_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"indexOf\"</span>, <span class=\"string\">\"(Ljava/lang/String;)I\"</span>);</div><div class=\"line\"></div><div class=\"line\">jint bb = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param2);</div><div class=\"line\">jstring publicKey2_str =<span class=\"literal\">NULL</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (bb ==<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\tjstring param3 = env-&gt;NewStringUTF(<span class=\"string\">\"public exponent\"</span>);</div><div class=\"line\">\tjint cc = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param3);</div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"CC value is %d\"</span>, cc);</div><div class=\"line\">\tpublicKey2_str= <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,cc<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tpublicKey2_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,bb<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-1-在JNI-native代码中打印日志\"><a href=\"#2-1-在JNI-native代码中打印日志\" class=\"headerlink\" title=\"2.1 在JNI native代码中打印日志\"></a>2.1 在JNI native代码中打印日志</h4><p>上面提供的JNI方法中涉及到了JNI日志打印（“__android_log_print”）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey value is %s\"</span>,  jstringTostring(env,publicKey2_str));</div></pre></td></tr></table></figure>\n<ul>\n<li>该方法第一个参数以日志级别，有：ANDROID_LOG_INFO，ANDROID_LOG_DEBUG和ANDROID_LOG_ERROR</li>\n<li>第二个参数设置过滤的标签，可以在LogCat视图中过滤。</li>\n<li>后面参数是具体的日志内容</li>\n</ul>\n<p>jstringTostring是将jstring转换成char*的方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">jstringTostring</span><span class=\"params\">(JNIEnv* env, jstring jstr)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span>* rtn = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  jclass clsstring = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</div><div class=\"line\">  jstring strencode = env-&gt;NewStringUTF(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">  jmethodID mid = env-&gt;GetMethodID(clsstring, <span class=\"string\">\"getBytes\"</span>, <span class=\"string\">\"(Ljava/lang/String;)[B\"</span>);</div><div class=\"line\">  jbyteArray barr= (jbyteArray)env-&gt;CallObjectMethod(jstr, mid, strencode);</div><div class=\"line\">  jsize alen = env-&gt;GetArrayLength(barr);</div><div class=\"line\">  jbyte* ba = env-&gt;GetByteArrayElements(barr, JNI_FALSE);</div><div class=\"line\">  <span class=\"keyword\">if</span> (alen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">  rtn = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(alen + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">memcpy</span>(rtn, ba, alen);</div><div class=\"line\">  rtn[alen] = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  env-&gt;ReleaseByteArrayElements(barr, ba, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> rtn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>jstring是Java提供的一个本地类型（Native Type），对应Java语言中的string类型</p>\n<p>想了解JNI其他数据类型的，请看这里<br><a href=\"http://blog.csdn.net/qinjuning/article/details/7599796\">JNI学习积累之二 —- 数据类型映射、域描述符说明</a></p>\n<p>要使用JNI日志打印还需要：</p>\n<ul>\n<li>1.导入.h文件及定义宏<br>在输出日志的.c文件中加入:</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android/log.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG_TAG   <span class=\"meta-string\">\"From JNI ===&gt;&gt;\"</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>2.在Android.mk中引用日志库<br>加入下面这行代码:</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">LOCAL_LDLIBS   := -lm -llog -ljnigraphics</div></pre></td></tr></table></figure>\n<p>具体学习可以移步这两篇文章：</p>\n<p><a href=\"http://www.cnblogs.com/liuling/p/2015-8-5-1.html\">JNI的native代码中打印日志到eclipse的logcat中</a></p>\n<p><a href=\"http://blog.csdn.net/llwdslal/article/details/31733035\">JNI中使用LOGCAT 进行Debug</a></p>\n<h4 id=\"2-2-完整代码\"><a href=\"#2-2-完整代码\" class=\"headerlink\" title=\"2.2 完整代码\"></a>2.2 完整代码</h4><p>下面是我修改后的完整代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jstring <span class=\"title\">getPublicKey</span><span class=\"params\">(JNIEnv* env, jobject thiz,jobject context)</span> </span>&#123;</div><div class=\"line\">\tjclass context_cls = env-&gt;GetObjectClass(context);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_manager_mid = env-&gt;GetMethodID(context_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPackageManager\"</span>, <span class=\"string\">\"()Landroid/content/pm/PackageManager;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_name_mid = env-&gt;GetMethodID(context_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPackageName\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(context_cls);</div><div class=\"line\">\tjobject pm_obj = env-&gt;CallObjectMethod(context, get_package_manager_mid);</div><div class=\"line\">\tjclass pm_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/PackageManager\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID get_package_info_mid = env-&gt;GetMethodID(pm_cls, <span class=\"string\">\"getPackageInfo\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\"</span>);</div><div class=\"line\">\tjstring package_name = <span class=\"keyword\">reinterpret_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(</div><div class=\"line\">\t\t\tcontext, get_package_name_mid));</div><div class=\"line\">\tjfieldID flag_fid = env-&gt;GetStaticFieldID(pm_cls, <span class=\"string\">\"GET_SIGNATURES\"</span>, <span class=\"string\">\"I\"</span>);</div><div class=\"line\">\tjint flag = env-&gt;GetStaticIntField(pm_cls, flag_fid);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pm_cls);</div><div class=\"line\">\tjobject pi_obj = env-&gt;CallObjectMethod(pm_obj, get_package_info_mid,</div><div class=\"line\">\t\t\tpackage_name, flag);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(package_name);</div><div class=\"line\"></div><div class=\"line\">\tjclass pi_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/PackageInfo\"</span>);</div><div class=\"line\">\tjfieldID signatures_fid = env-&gt;GetFieldID(pi_cls, <span class=\"string\">\"signatures\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"[Landroid/content/pm/Signature;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pi_cls);</div><div class=\"line\">\tjobject sig_obj = env-&gt;GetObjectField(pi_obj, signatures_fid);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(pi_obj);</div><div class=\"line\"></div><div class=\"line\">\tjobjectArray sigs = <span class=\"keyword\">reinterpret_cast</span>&lt;jobjectArray&gt;(sig_obj);</div><div class=\"line\"></div><div class=\"line\">\tjclass signature_cls = env-&gt;FindClass(<span class=\"string\">\"android/content/pm/Signature\"</span>);</div><div class=\"line\">\tjmethodID to_byte_array_mid = env-&gt;GetMethodID(signature_cls, <span class=\"string\">\"toByteArray\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"()[B\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjbyteArray sig_bytes = <span class=\"keyword\">reinterpret_cast</span>&lt;jbyteArray&gt;(env-&gt;CallObjectMethod(</div><div class=\"line\">\t\t\tenv-&gt;GetObjectArrayElement(sigs, <span class=\"number\">0</span>), to_byte_array_mid));</div><div class=\"line\">\tjclass certificate_factory_cls = env-&gt;FindClass(</div><div class=\"line\">\t\t\t<span class=\"string\">\"java/security/cert/CertificateFactory\"</span>);</div><div class=\"line\">\tjmethodID get_certificate_instance_mid = env-&gt;GetStaticMethodID(</div><div class=\"line\">\t\t\tcertificate_factory_cls, <span class=\"string\">\"getInstance\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/lang/String;)Ljava/security/cert/CertificateFactory;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjobject certificate_factory_obj = env-&gt;CallStaticObjectMethod(</div><div class=\"line\">\t\t\tcertificate_factory_cls, get_certificate_instance_mid,</div><div class=\"line\">\t\t\tenv-&gt;NewStringUTF(<span class=\"string\">\"X509\"</span>));</div><div class=\"line\">\tjmethodID generate_certificate_mid = env-&gt;GetMethodID(</div><div class=\"line\">\t\t\tcertificate_factory_cls, <span class=\"string\">\"generateCertificate\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"(Ljava/io/InputStream;)Ljava/security/cert/Certificate;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_factory_cls);</div><div class=\"line\"></div><div class=\"line\">\tjclass certificate_cls = env-&gt;FindClass(<span class=\"string\">\"java/security/cert/Certificate\"</span>);</div><div class=\"line\">\tjclass byte_input_stream_cls = env-&gt;FindClass(</div><div class=\"line\">\t\t\t<span class=\"string\">\"java/io/ByteArrayInputStream\"</span>);</div><div class=\"line\">\tjmethodID new_sig_bytes_is_mid = env-&gt;GetMethodID(byte_input_stream_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"&lt;init&gt;\"</span>, <span class=\"string\">\"([B)V\"</span>);</div><div class=\"line\">\tjobject sig_bytes_is = env-&gt;NewObject(byte_input_stream_cls,</div><div class=\"line\">\t\t\tnew_sig_bytes_is_mid, sig_bytes);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(sig_bytes);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(byte_input_stream_cls);</div><div class=\"line\">\tjobject cert = env-&gt;CallObjectMethod(certificate_factory_obj,</div><div class=\"line\">\t\t\tgenerate_certificate_mid, sig_bytes_is);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(sig_bytes_is);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_factory_obj);</div><div class=\"line\">\tjmethodID get_pubic_key_mid = env-&gt;GetMethodID(certificate_cls,</div><div class=\"line\">\t\t\t<span class=\"string\">\"getPublicKey\"</span>, <span class=\"string\">\"()Ljava/security/PublicKey;\"</span>);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(certificate_cls);</div><div class=\"line\"></div><div class=\"line\">\tjobject publicKey  = env-&gt;CallObjectMethod(cert, get_pubic_key_mid);</div><div class=\"line\">\tjclass publicKey_cls = env-&gt;GetObjectClass(publicKey);</div><div class=\"line\">\tjmethodID toString_mid = env-&gt;GetMethodID(publicKey_cls,<span class=\"string\">\"toString\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</div><div class=\"line\">\tjstring publicKey_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey,toString_mid));</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(cert);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(publicKey_cls);</div><div class=\"line\">\tenv-&gt;DeleteLocalRef(publicKey);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tjclass string_cls = env-&gt;GetObjectClass(publicKey_str);</div><div class=\"line\">\tjmethodID indexOf_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"indexOf\"</span>, <span class=\"string\">\"(Ljava/lang/String;)I\"</span>);</div><div class=\"line\">\tjstring param = env-&gt;NewStringUTF(<span class=\"string\">\"modulus\"</span>);</div><div class=\"line\">\tjint aa = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param);</div><div class=\"line\">\tjstring param2 = env-&gt;NewStringUTF(<span class=\"string\">\"publicExponent\"</span>);</div><div class=\"line\"></div><div class=\"line\">\tjmethodID substring_mid = env-&gt;GetMethodID(string_cls,<span class=\"string\">\"substring\"</span>, <span class=\"string\">\"(II)Ljava/lang/String;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey String is %s\"</span>, jstringTostring(env,publicKey_str));</div><div class=\"line\"></div><div class=\"line\">\tjint bb = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param2);</div><div class=\"line\">\tjstring publicKey2_str =<span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (bb ==<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">\t\tjstring param3 = env-&gt;NewStringUTF(<span class=\"string\">\"public exponent\"</span>);</div><div class=\"line\">\t\tjint cc = env-&gt;CallIntMethod(publicKey_str,indexOf_mid,param3);</div><div class=\"line\">\t\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"CC value is %d\"</span>, cc);</div><div class=\"line\">\t\tpublicKey2_str= <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,cc<span class=\"number\">-1</span>));</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tpublicKey2_str = <span class=\"keyword\">static_cast</span>&lt;jstring&gt;(env-&gt;CallObjectMethod(publicKey_str,substring_mid,aa+<span class=\"number\">8</span>,bb<span class=\"number\">-1</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t__android_log_print(ANDROID_LOG_ERROR, TAG, <span class=\"string\">\"PublicKey value is %s\"</span>,  jstringTostring(env,publicKey2_str));</div><div class=\"line\">\t<span class=\"keyword\">return</span> publicKey2_str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-附赠版本兼容的方法问题（随时更新）\"><a href=\"#3-附赠版本兼容的方法问题（随时更新）\" class=\"headerlink\" title=\"3.附赠版本兼容的方法问题（随时更新）\"></a>3.附赠版本兼容的方法问题（随时更新）</h3><p>低于Jellybean版本报如下错误：</p>\n<pre><code>01-20 08:53:00.141: E/AndroidRuntime(24005): java.lang.NoSuchMethodError:\n    android.view.ViewTreeObserver.removeOnGlobalLayoutListener\n</code></pre><p>正确调用方式应该是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class=\"line\">\t\tViewTreeObserver.removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span></div><div class=\"line\">\t\tViewTreeObserver.removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n<p>还有一个setBackground方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(Build.VERSION.SzDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class=\"line\">\t\tView.setBackground(<span class=\"keyword\">new</span> ColorDrawable(Color.parseColor(<span class=\"string\">\"#CCCCCC\"</span>)));</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tView.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#CCCCCC\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/22/JNI-get-publickey/\">http://agehua.github.io/2016/09/22/JNI-get-publickey/</a></p>"},{"layout":"post","title":"gradle 学习","keywords":"Android,gradle","banner":"http://obxk8w81b.bkt.clouddn.com/Crab%20on%20Its%20Back.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Crab%20on%20Its%20Back.jpg","_content":"\n\nGradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。它提供灵活的通用构建工具，就像ant。同时完美兼容Maven或Ivy仓库\n\n### Gradle的基本组成\n\n> 项目(Project) 和 任务(tasks)，Gradle 里的任何东西都是基于这两个基础概念。\n\n<!--more-->\n\n- 项目是指我们的构建产物（比如Jar包）或实施产物（将应用程序部署到生产环境）。\n\n- 任务是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）。\n\n- 每一个构建都是由一个或多个 projects 构成的，每一个 project 是由一个或多个 tasks 构成的，一个 task是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）\n\n![basic structure](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure1.png)\n\n一个工程的Build，是由多个Project组成，而一个Project又是由task组成的\n\n任何一个构建系统都是由多个构建文件组成，如Ant是由build.xml组成，Maven是由pom.xml组成，Make是由makefile组成。这些构建脚本定义了一系列的规则来指定项目编译流程。\n\n#### Gradle构建系统的组成\n\nGradle的构建系统是由以下几个文件组成\n\n- build.gradle 我们称这个文件为一个构建脚本，这个脚本定义了一个模块和编译用的tasks，它一般是放在项目的模块中，也可以放在项目的根目录用来作为编译结构全局设置，它是必须的\n\n- settings.gradle 它描述了哪一个模块需要参与构建。每一个多模块的构建都必须在项目结构的根目录中加入这个设置文件，它也是必须的\n\n- gradle.properties 用来配置构建属性，这个不是必须的\n\n### Gradle插件\nGradle的设计理念是，所有有用的特性都由Gradle插件提供，例如编写一个Java项目时，需要使用到 Java 插件， 它会将许多任务自动的加入到你项目里。Gradle本身提供了一系列的标准插件，无需多余配置只需要在你的build.gradle文件中加入 apply plugin: 'java'\n\n这样就可以引入许多task，只需要使用相应的task命令就可以进行项目构建。例如下列一些task:\n\n- 1.gradle build：编译整个项目，它会执行代码编译、代码检测和单元测试等\n- 2.gradle assemble：编译并打包你的代码, 但是并不运行代码检测和单元测试\n- 3.gradle clean：删除 build 生成的目录和所有生成的文件\n- 4.gradle check：编译并测试你的代码。其它的插件会加入更多的检查步骤，如使用 checkstyle、pmd、findbugs\n\nGradle各个task的关系图：\n\n![basic task](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_task.png)\n\n从上图可以看出，我们通常在执行一个build命令时其实是将一些零散的命令批量执行了，我们也可以根据自己的需求执行其中某一个命令。\n\n#### 外部依赖\n\n通常, 一个 Java 项目将有许多外部的依赖, 既指向外部的 JAR 文件. 为了在项目里引用这些 JAR 文件, 你需要告诉 Gradle 去哪里找它们. 在 Gradle 中, JAR 文件位于一个仓库中，这里的仓库类似于 maven 的仓库。\n\n首先，指定maven的仓库地址：\n\n~~~ Java\nrepositories {\n\tmavenCentral()\n}\n~~~\nmavenCentral() 是Gradle内置的一个maven仓库地址，加入maven仓库后，就可以直接加入maven仓库中的外部依赖，如果这个外部依赖不存在，gradle会联网去maven仓库中自动下载它，并将它缓存到本地，下次再使用时会优先从本地缓存中查找该依赖。\n\n~~~ Java\ndependencies {\n\tcompile group: 'commons-collections', name: 'commons-collections', version: '3.2'\n\t// 简化写法\n\t// compile 'commons-collections:commons-collections:3.2'\n}\n~~~\n引用一个外部依赖需要指定使用的group, name 和 version 属性，三者缺一不可。那从哪里得知JAR包的这三个属性呢？我们可以从mvnrepository中搜索到。\n\n#### 本地依赖\n\nGradle也可以从本地目录中引入JAR包依赖，可以单一引入指定的某一JAR包，也可以引入某目录下所有的JAR包\n\n~~~ Java\ndependencies {\n\tcompile files('dir/file.jar')\n\tcompile fileTree(dir: 'libs', include: '*.jar')\n}\n~~~\n#### 项目依赖\n\n往往一个完整的项目由多个子项目构成。在Gradle中，使用文件settings.gradle定义当前项目的子项目。默认情况下，每个子项目的名称对应着当前操作系统目录下的一个子目录。\n\n~~~ Java\ninclude 'sub-project1', 'sub-project2', 'sub-project3'\n~~~\n如sub-project1依赖sub-project2，则在sub-project1的build.gradle中加入以下配置即可：\n\n~~~ Java\ndependencies {\n\tcompile project(':sub-project2')\n}\n~~~\n#### 依赖关系管理\n\n从宏观上说，依赖关系管理分为两个方面。首先，gradle需要知道你要构建或者运行的项目，以便找到它们。我们将这些导入的文件视为项目的依赖。第二，gradle需要构建或者打包你的项目产品。我们将这些导出的文件视为项目的发布。\n\n例如在编译源码时项目需要Hibernate的某些jar包被加入到工程中，而在进行单元测试时还另需要Junit的某些jar被加入。这些被引入的jar包就是项目的依赖。Gradle允许对依赖进行相应的配置，通过不同的配置可以形成不同的依赖效果。例如：\n\n~~~ Java\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'\n    testCompile group: 'junit', name: 'junit', version: '4.+'\n}\n~~~\n在项目编译时期，junit的jar包不会被引入，只有在单元测试时才会被引入。这样，就可以在不同的场景下加入相应的依赖关系，非常的灵活\n\nJava 插件中定义了许多标准的配置，例如如下：\n\n> - compile\n\t用来编译项目源代码的\n- runtime\n\t在运行时被生成的类使用的依赖。 默认的, 也包含了compile时的依赖。\n- testCompile\n\t编译测试代码的依赖。 默认的, 包含runtime时的依赖和compile时的依赖。\n- testRuntime\n\t运行测试所需要的依赖。 默认的, 包含上面三个依赖。\n","source":"_posts/2016-10-12-gradle-learning.md","raw":"---\nlayout: post\ntitle:  gradle 学习\ncategory: accumulation\ntags:\n  - gradle\nkeywords: Android,gradle\nbanner: http://obxk8w81b.bkt.clouddn.com/Crab%20on%20Its%20Back.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Crab%20on%20Its%20Back.jpg\n---\n\n\nGradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。它提供灵活的通用构建工具，就像ant。同时完美兼容Maven或Ivy仓库\n\n### Gradle的基本组成\n\n> 项目(Project) 和 任务(tasks)，Gradle 里的任何东西都是基于这两个基础概念。\n\n<!--more-->\n\n- 项目是指我们的构建产物（比如Jar包）或实施产物（将应用程序部署到生产环境）。\n\n- 任务是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）。\n\n- 每一个构建都是由一个或多个 projects 构成的，每一个 project 是由一个或多个 tasks 构成的，一个 task是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）\n\n![basic structure](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure1.png)\n\n一个工程的Build，是由多个Project组成，而一个Project又是由task组成的\n\n任何一个构建系统都是由多个构建文件组成，如Ant是由build.xml组成，Maven是由pom.xml组成，Make是由makefile组成。这些构建脚本定义了一系列的规则来指定项目编译流程。\n\n#### Gradle构建系统的组成\n\nGradle的构建系统是由以下几个文件组成\n\n- build.gradle 我们称这个文件为一个构建脚本，这个脚本定义了一个模块和编译用的tasks，它一般是放在项目的模块中，也可以放在项目的根目录用来作为编译结构全局设置，它是必须的\n\n- settings.gradle 它描述了哪一个模块需要参与构建。每一个多模块的构建都必须在项目结构的根目录中加入这个设置文件，它也是必须的\n\n- gradle.properties 用来配置构建属性，这个不是必须的\n\n### Gradle插件\nGradle的设计理念是，所有有用的特性都由Gradle插件提供，例如编写一个Java项目时，需要使用到 Java 插件， 它会将许多任务自动的加入到你项目里。Gradle本身提供了一系列的标准插件，无需多余配置只需要在你的build.gradle文件中加入 apply plugin: 'java'\n\n这样就可以引入许多task，只需要使用相应的task命令就可以进行项目构建。例如下列一些task:\n\n- 1.gradle build：编译整个项目，它会执行代码编译、代码检测和单元测试等\n- 2.gradle assemble：编译并打包你的代码, 但是并不运行代码检测和单元测试\n- 3.gradle clean：删除 build 生成的目录和所有生成的文件\n- 4.gradle check：编译并测试你的代码。其它的插件会加入更多的检查步骤，如使用 checkstyle、pmd、findbugs\n\nGradle各个task的关系图：\n\n![basic task](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_task.png)\n\n从上图可以看出，我们通常在执行一个build命令时其实是将一些零散的命令批量执行了，我们也可以根据自己的需求执行其中某一个命令。\n\n#### 外部依赖\n\n通常, 一个 Java 项目将有许多外部的依赖, 既指向外部的 JAR 文件. 为了在项目里引用这些 JAR 文件, 你需要告诉 Gradle 去哪里找它们. 在 Gradle 中, JAR 文件位于一个仓库中，这里的仓库类似于 maven 的仓库。\n\n首先，指定maven的仓库地址：\n\n~~~ Java\nrepositories {\n\tmavenCentral()\n}\n~~~\nmavenCentral() 是Gradle内置的一个maven仓库地址，加入maven仓库后，就可以直接加入maven仓库中的外部依赖，如果这个外部依赖不存在，gradle会联网去maven仓库中自动下载它，并将它缓存到本地，下次再使用时会优先从本地缓存中查找该依赖。\n\n~~~ Java\ndependencies {\n\tcompile group: 'commons-collections', name: 'commons-collections', version: '3.2'\n\t// 简化写法\n\t// compile 'commons-collections:commons-collections:3.2'\n}\n~~~\n引用一个外部依赖需要指定使用的group, name 和 version 属性，三者缺一不可。那从哪里得知JAR包的这三个属性呢？我们可以从mvnrepository中搜索到。\n\n#### 本地依赖\n\nGradle也可以从本地目录中引入JAR包依赖，可以单一引入指定的某一JAR包，也可以引入某目录下所有的JAR包\n\n~~~ Java\ndependencies {\n\tcompile files('dir/file.jar')\n\tcompile fileTree(dir: 'libs', include: '*.jar')\n}\n~~~\n#### 项目依赖\n\n往往一个完整的项目由多个子项目构成。在Gradle中，使用文件settings.gradle定义当前项目的子项目。默认情况下，每个子项目的名称对应着当前操作系统目录下的一个子目录。\n\n~~~ Java\ninclude 'sub-project1', 'sub-project2', 'sub-project3'\n~~~\n如sub-project1依赖sub-project2，则在sub-project1的build.gradle中加入以下配置即可：\n\n~~~ Java\ndependencies {\n\tcompile project(':sub-project2')\n}\n~~~\n#### 依赖关系管理\n\n从宏观上说，依赖关系管理分为两个方面。首先，gradle需要知道你要构建或者运行的项目，以便找到它们。我们将这些导入的文件视为项目的依赖。第二，gradle需要构建或者打包你的项目产品。我们将这些导出的文件视为项目的发布。\n\n例如在编译源码时项目需要Hibernate的某些jar包被加入到工程中，而在进行单元测试时还另需要Junit的某些jar被加入。这些被引入的jar包就是项目的依赖。Gradle允许对依赖进行相应的配置，通过不同的配置可以形成不同的依赖效果。例如：\n\n~~~ Java\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'\n    testCompile group: 'junit', name: 'junit', version: '4.+'\n}\n~~~\n在项目编译时期，junit的jar包不会被引入，只有在单元测试时才会被引入。这样，就可以在不同的场景下加入相应的依赖关系，非常的灵活\n\nJava 插件中定义了许多标准的配置，例如如下：\n\n> - compile\n\t用来编译项目源代码的\n- runtime\n\t在运行时被生成的类使用的依赖。 默认的, 也包含了compile时的依赖。\n- testCompile\n\t编译测试代码的依赖。 默认的, 包含runtime时的依赖和compile时的依赖。\n- testRuntime\n\t运行测试所需要的依赖。 默认的, 包含上面三个依赖。\n","slug":"gradle-learning","published":1,"date":"2016-10-11T16:00:00.000Z","updated":"2017-11-23T07:09:26.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebym001pd6ykdeokmvms","content":"<p>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。它提供灵活的通用构建工具，就像ant。同时完美兼容Maven或Ivy仓库</p>\n<h3 id=\"Gradle的基本组成\"><a href=\"#Gradle的基本组成\" class=\"headerlink\" title=\"Gradle的基本组成\"></a>Gradle的基本组成</h3><blockquote>\n<p>项目(Project) 和 任务(tasks)，Gradle 里的任何东西都是基于这两个基础概念。</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li><p>项目是指我们的构建产物（比如Jar包）或实施产物（将应用程序部署到生产环境）。</p>\n</li>\n<li><p>任务是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）。</p>\n</li>\n<li><p>每一个构建都是由一个或多个 projects 构成的，每一个 project 是由一个或多个 tasks 构成的，一个 task是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）</p>\n</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure1.png\" alt=\"basic structure\"></p>\n<p>一个工程的Build，是由多个Project组成，而一个Project又是由task组成的</p>\n<p>任何一个构建系统都是由多个构建文件组成，如Ant是由build.xml组成，Maven是由pom.xml组成，Make是由makefile组成。这些构建脚本定义了一系列的规则来指定项目编译流程。</p>\n<h4 id=\"Gradle构建系统的组成\"><a href=\"#Gradle构建系统的组成\" class=\"headerlink\" title=\"Gradle构建系统的组成\"></a>Gradle构建系统的组成</h4><p>Gradle的构建系统是由以下几个文件组成</p>\n<ul>\n<li><p>build.gradle 我们称这个文件为一个构建脚本，这个脚本定义了一个模块和编译用的tasks，它一般是放在项目的模块中，也可以放在项目的根目录用来作为编译结构全局设置，它是必须的</p>\n</li>\n<li><p>settings.gradle 它描述了哪一个模块需要参与构建。每一个多模块的构建都必须在项目结构的根目录中加入这个设置文件，它也是必须的</p>\n</li>\n<li><p>gradle.properties 用来配置构建属性，这个不是必须的</p>\n</li>\n</ul>\n<h3 id=\"Gradle插件\"><a href=\"#Gradle插件\" class=\"headerlink\" title=\"Gradle插件\"></a>Gradle插件</h3><p>Gradle的设计理念是，所有有用的特性都由Gradle插件提供，例如编写一个Java项目时，需要使用到 Java 插件， 它会将许多任务自动的加入到你项目里。Gradle本身提供了一系列的标准插件，无需多余配置只需要在你的build.gradle文件中加入 apply plugin: ‘java’</p>\n<p>这样就可以引入许多task，只需要使用相应的task命令就可以进行项目构建。例如下列一些task:</p>\n<ul>\n<li>1.gradle build：编译整个项目，它会执行代码编译、代码检测和单元测试等</li>\n<li>2.gradle assemble：编译并打包你的代码, 但是并不运行代码检测和单元测试</li>\n<li>3.gradle clean：删除 build 生成的目录和所有生成的文件</li>\n<li>4.gradle check：编译并测试你的代码。其它的插件会加入更多的检查步骤，如使用 checkstyle、pmd、findbugs</li>\n</ul>\n<p>Gradle各个task的关系图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_task.png\" alt=\"basic task\"></p>\n<p>从上图可以看出，我们通常在执行一个build命令时其实是将一些零散的命令批量执行了，我们也可以根据自己的需求执行其中某一个命令。</p>\n<h4 id=\"外部依赖\"><a href=\"#外部依赖\" class=\"headerlink\" title=\"外部依赖\"></a>外部依赖</h4><p>通常, 一个 Java 项目将有许多外部的依赖, 既指向外部的 JAR 文件. 为了在项目里引用这些 JAR 文件, 你需要告诉 Gradle 去哪里找它们. 在 Gradle 中, JAR 文件位于一个仓库中，这里的仓库类似于 maven 的仓库。</p>\n<p>首先，指定maven的仓库地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">\tmavenCentral()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mavenCentral() 是Gradle内置的一个maven仓库地址，加入maven仓库后，就可以直接加入maven仓库中的外部依赖，如果这个外部依赖不存在，gradle会联网去maven仓库中自动下载它，并将它缓存到本地，下次再使用时会优先从本地缓存中查找该依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile group: <span class=\"string\">'commons-collections'</span>, name: <span class=\"string\">'commons-collections'</span>, version: <span class=\"string\">'3.2'</span></div><div class=\"line\">\t<span class=\"comment\">// 简化写法</span></div><div class=\"line\">\t<span class=\"comment\">// compile 'commons-collections:commons-collections:3.2'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>引用一个外部依赖需要指定使用的group, name 和 version 属性，三者缺一不可。那从哪里得知JAR包的这三个属性呢？我们可以从mvnrepository中搜索到。</p>\n<h4 id=\"本地依赖\"><a href=\"#本地依赖\" class=\"headerlink\" title=\"本地依赖\"></a>本地依赖</h4><p>Gradle也可以从本地目录中引入JAR包依赖，可以单一引入指定的某一JAR包，也可以引入某目录下所有的JAR包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"function\">compile <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'dir/file.jar'</span>)</span></span></div><div class=\"line\">\tcompile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: <span class=\"string\">'*.jar'</span>)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h4><p>往往一个完整的项目由多个子项目构成。在Gradle中，使用文件settings.gradle定义当前项目的子项目。默认情况下，每个子项目的名称对应着当前操作系统目录下的一个子目录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">include <span class=\"string\">'sub-project1'</span>, <span class=\"string\">'sub-project2'</span>, <span class=\"string\">'sub-project3'</span></div></pre></td></tr></table></figure>\n<p>如sub-project1依赖sub-project2，则在sub-project1的build.gradle中加入以下配置即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"function\">compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':sub-project2'</span>)</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"依赖关系管理\"><a href=\"#依赖关系管理\" class=\"headerlink\" title=\"依赖关系管理\"></a>依赖关系管理</h4><p>从宏观上说，依赖关系管理分为两个方面。首先，gradle需要知道你要构建或者运行的项目，以便找到它们。我们将这些导入的文件视为项目的依赖。第二，gradle需要构建或者打包你的项目产品。我们将这些导出的文件视为项目的发布。</p>\n<p>例如在编译源码时项目需要Hibernate的某些jar包被加入到工程中，而在进行单元测试时还另需要Junit的某些jar被加入。这些被引入的jar包就是项目的依赖。Gradle允许对依赖进行相应的配置，通过不同的配置可以形成不同的依赖效果。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'java'</span></div><div class=\"line\"></div><div class=\"line\">repositories &#123;</div><div class=\"line\">    mavenCentral()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile group: <span class=\"string\">'org.hibernate'</span>, name: <span class=\"string\">'hibernate-core'</span>, version: <span class=\"string\">'3.6.7.Final'</span></div><div class=\"line\">    testCompile group: <span class=\"string\">'junit'</span>, name: <span class=\"string\">'junit'</span>, version: <span class=\"string\">'4.+'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在项目编译时期，junit的jar包不会被引入，只有在单元测试时才会被引入。这样，就可以在不同的场景下加入相应的依赖关系，非常的灵活</p>\n<p>Java 插件中定义了许多标准的配置，例如如下：</p>\n<blockquote>\n<ul>\n<li>compile<br>  用来编译项目源代码的</li>\n<li>runtime<br>  在运行时被生成的类使用的依赖。 默认的, 也包含了compile时的依赖。</li>\n<li>testCompile<br>  编译测试代码的依赖。 默认的, 包含runtime时的依赖和compile时的依赖。</li>\n<li>testRuntime<br>  运行测试所需要的依赖。 默认的, 包含上面三个依赖。</li>\n</ul>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/10/12/gradle-learning/\">http://agehua.github.io/2016/10/12/gradle-learning/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.365,"time":81900,"words":273},"excerpt":"<p>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。它提供灵活的通用构建工具，就像ant。同时完美兼容Maven或Ivy仓库</p>\n<h3 id=\"Gradle的基本组成\"><a href=\"#Gradle的基本组成\" class=\"headerlink\" title=\"Gradle的基本组成\"></a>Gradle的基本组成</h3><blockquote>\n<p>项目(Project) 和 任务(tasks)，Gradle 里的任何东西都是基于这两个基础概念。</p>\n</blockquote>","more":"<ul>\n<li><p>项目是指我们的构建产物（比如Jar包）或实施产物（将应用程序部署到生产环境）。</p>\n</li>\n<li><p>任务是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）。</p>\n</li>\n<li><p>每一个构建都是由一个或多个 projects 构成的，每一个 project 是由一个或多个 tasks 构成的，一个 task是指不可分的最小工作单元，执行构建工作（比如编译项目或执行测试）</p>\n</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure1.png\" alt=\"basic structure\"></p>\n<p>一个工程的Build，是由多个Project组成，而一个Project又是由task组成的</p>\n<p>任何一个构建系统都是由多个构建文件组成，如Ant是由build.xml组成，Maven是由pom.xml组成，Make是由makefile组成。这些构建脚本定义了一系列的规则来指定项目编译流程。</p>\n<h4 id=\"Gradle构建系统的组成\"><a href=\"#Gradle构建系统的组成\" class=\"headerlink\" title=\"Gradle构建系统的组成\"></a>Gradle构建系统的组成</h4><p>Gradle的构建系统是由以下几个文件组成</p>\n<ul>\n<li><p>build.gradle 我们称这个文件为一个构建脚本，这个脚本定义了一个模块和编译用的tasks，它一般是放在项目的模块中，也可以放在项目的根目录用来作为编译结构全局设置，它是必须的</p>\n</li>\n<li><p>settings.gradle 它描述了哪一个模块需要参与构建。每一个多模块的构建都必须在项目结构的根目录中加入这个设置文件，它也是必须的</p>\n</li>\n<li><p>gradle.properties 用来配置构建属性，这个不是必须的</p>\n</li>\n</ul>\n<h3 id=\"Gradle插件\"><a href=\"#Gradle插件\" class=\"headerlink\" title=\"Gradle插件\"></a>Gradle插件</h3><p>Gradle的设计理念是，所有有用的特性都由Gradle插件提供，例如编写一个Java项目时，需要使用到 Java 插件， 它会将许多任务自动的加入到你项目里。Gradle本身提供了一系列的标准插件，无需多余配置只需要在你的build.gradle文件中加入 apply plugin: ‘java’</p>\n<p>这样就可以引入许多task，只需要使用相应的task命令就可以进行项目构建。例如下列一些task:</p>\n<ul>\n<li>1.gradle build：编译整个项目，它会执行代码编译、代码检测和单元测试等</li>\n<li>2.gradle assemble：编译并打包你的代码, 但是并不运行代码检测和单元测试</li>\n<li>3.gradle clean：删除 build 生成的目录和所有生成的文件</li>\n<li>4.gradle check：编译并测试你的代码。其它的插件会加入更多的检查步骤，如使用 checkstyle、pmd、findbugs</li>\n</ul>\n<p>Gradle各个task的关系图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_task.png\" alt=\"basic task\"></p>\n<p>从上图可以看出，我们通常在执行一个build命令时其实是将一些零散的命令批量执行了，我们也可以根据自己的需求执行其中某一个命令。</p>\n<h4 id=\"外部依赖\"><a href=\"#外部依赖\" class=\"headerlink\" title=\"外部依赖\"></a>外部依赖</h4><p>通常, 一个 Java 项目将有许多外部的依赖, 既指向外部的 JAR 文件. 为了在项目里引用这些 JAR 文件, 你需要告诉 Gradle 去哪里找它们. 在 Gradle 中, JAR 文件位于一个仓库中，这里的仓库类似于 maven 的仓库。</p>\n<p>首先，指定maven的仓库地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">\tmavenCentral()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mavenCentral() 是Gradle内置的一个maven仓库地址，加入maven仓库后，就可以直接加入maven仓库中的外部依赖，如果这个外部依赖不存在，gradle会联网去maven仓库中自动下载它，并将它缓存到本地，下次再使用时会优先从本地缓存中查找该依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\tcompile group: <span class=\"string\">'commons-collections'</span>, name: <span class=\"string\">'commons-collections'</span>, version: <span class=\"string\">'3.2'</span></div><div class=\"line\">\t<span class=\"comment\">// 简化写法</span></div><div class=\"line\">\t<span class=\"comment\">// compile 'commons-collections:commons-collections:3.2'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>引用一个外部依赖需要指定使用的group, name 和 version 属性，三者缺一不可。那从哪里得知JAR包的这三个属性呢？我们可以从mvnrepository中搜索到。</p>\n<h4 id=\"本地依赖\"><a href=\"#本地依赖\" class=\"headerlink\" title=\"本地依赖\"></a>本地依赖</h4><p>Gradle也可以从本地目录中引入JAR包依赖，可以单一引入指定的某一JAR包，也可以引入某目录下所有的JAR包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"function\">compile <span class=\"title\">files</span><span class=\"params\">(<span class=\"string\">'dir/file.jar'</span>)</span></div><div class=\"line\">\tcompile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: <span class=\"string\">'*.jar'</span>)</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h4><p>往往一个完整的项目由多个子项目构成。在Gradle中，使用文件settings.gradle定义当前项目的子项目。默认情况下，每个子项目的名称对应着当前操作系统目录下的一个子目录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">include <span class=\"string\">'sub-project1'</span>, <span class=\"string\">'sub-project2'</span>, <span class=\"string\">'sub-project3'</span></div></pre></td></tr></table></figure>\n<p>如sub-project1依赖sub-project2，则在sub-project1的build.gradle中加入以下配置即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">\t<span class=\"function\">compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':sub-project2'</span>)</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"依赖关系管理\"><a href=\"#依赖关系管理\" class=\"headerlink\" title=\"依赖关系管理\"></a>依赖关系管理</h4><p>从宏观上说，依赖关系管理分为两个方面。首先，gradle需要知道你要构建或者运行的项目，以便找到它们。我们将这些导入的文件视为项目的依赖。第二，gradle需要构建或者打包你的项目产品。我们将这些导出的文件视为项目的发布。</p>\n<p>例如在编译源码时项目需要Hibernate的某些jar包被加入到工程中，而在进行单元测试时还另需要Junit的某些jar被加入。这些被引入的jar包就是项目的依赖。Gradle允许对依赖进行相应的配置，通过不同的配置可以形成不同的依赖效果。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'java'</span></div><div class=\"line\"></div><div class=\"line\">repositories &#123;</div><div class=\"line\">    mavenCentral()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile group: <span class=\"string\">'org.hibernate'</span>, name: <span class=\"string\">'hibernate-core'</span>, version: <span class=\"string\">'3.6.7.Final'</span></div><div class=\"line\">    testCompile group: <span class=\"string\">'junit'</span>, name: <span class=\"string\">'junit'</span>, version: <span class=\"string\">'4.+'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在项目编译时期，junit的jar包不会被引入，只有在单元测试时才会被引入。这样，就可以在不同的场景下加入相应的依赖关系，非常的灵活</p>\n<p>Java 插件中定义了许多标准的配置，例如如下：</p>\n<blockquote>\n<ul>\n<li>compile<br>  用来编译项目源代码的</li>\n<li>runtime<br>  在运行时被生成的类使用的依赖。 默认的, 也包含了compile时的依赖。</li>\n<li>testCompile<br>  编译测试代码的依赖。 默认的, 包含runtime时的依赖和compile时的依赖。</li>\n<li>testRuntime<br>  运行测试所需要的依赖。 默认的, 包含上面三个依赖。</li>\n</ul>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/10/12/gradle-learning/\">http://agehua.github.io/2016/10/12/gradle-learning/</a></p>"},{"layout":"post","title":"Android 退出整个应用程序解决方案","keywords":"Android,退出整个应用","banner":"http://obxk8w81b.bkt.clouddn.com/Enclosed%20Field%20with%20Ploughman.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Enclosed%20Field%20with%20Ploughman.jpg","_content":"\n\n关于这个功能，每个公司项目都有自己的解决方案\n\n搜索了一下，网上大概有以下几种方法解决这个问题：\n\n- (1)System.exit(0);\n\n- (2)Process.killProcess(Process.myPid());\n\n- (3)ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE);\n\n    activityManager.restartPackage(\"packagename\");\n\n\n但这些貌似不是万能的，有的说在2.2版本后就失效了，那我们怎么办呢？\n\n<!--more-->\n\n### 1、通过广播\n\n在起初的一个项目里我用了一个比较笨的方法，我用一个类来专门管理所有的Activity。这个类里有一个List，每打开一个Activity我就把这个Activity放到这个List中，当退出时再将List中所有的Activity一个一个的关闭。\n\n在后来的项目中发现了一个更好地方法，就是通过广播来完成退出功能，具体实现过程是这样的：在每个Activity创建时（onCreate时）给Activity注册一个广播接收器，当退出时发送该广播即可。大概的代码如下：\n\n~~~ Java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n       super.onCreate(savedInstanceState);\n       IntentFilter filter = new IntentFilter();\n       filter.addAction(\"finish\");\n       registerReceiver(mFinishReceiver, filter);\n       ……\n}\n\nprivate BroadcastReceiver mFinishReceiver = new BroadcastReceiver() {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n           if(\"finish\".equals(intent.getAction())) {\n              Log.e(\"#########\", \"I am \" + getLocalClassName()\n                     + \",now finishing myself...\");\n              finish();\n       }\n    }\n};\n~~~\n\n相信聪明的大家会把上面的代码写在一个基类里面，因为如果你的项目中Activity很多的话，写起来很麻烦，而且也不符合代码规范。\n\n在退出时执行以下代码即可关闭所有界面完全退出程序：\n\ngetApplicationContext().sendBroadcast(new Intent(\"finish\"));\n\n转载：http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html\n\n### 2、使用退出类\n\n~~~ Java\npublic class CloseActivity\n{\n    private static LinkedList<Activity> acys = new LinkedList<Activity>();\n\n    public static Activity curActivity;\n\n    public static void add(Activity acy)\n    {\n        acys.add(acy);\n    }\n\n    public static void remove(Activity acy) {\n        acys.remove(acy);\n    }\n\n    public static void close()\n    {\n        Activity acy;\n        while (acys.size() != 0)\n        {\n            acy = acys.poll();\n            if (!acy.isFinishing())\n            {\n                acy.finish();\n            }\n        }\n//        android.os.Process.killProcess(android.os.Process.myPid());\n    }\n}\n~~~\n\n### 3.利用activity stack的原理\n我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现，\n这里我们在D窗口打开A窗口时在Intent中直接加入标志Intent.FLAG_ACTIVITY_CLEAR_TOP，再次开启A时将会清除该进程空间的所有Activity。\n\n在D中使用下面的代码:\n\n~~~ Java\nIntent intent = new Intent();\nintent.setClass(D.this, A.class);\nintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  //注意本行的FLAG设置\nstartActivity(intent);\nfinish();\n~~~\n\n关掉自己，在A中加入代码：\n\n~~~ Java\n@Override\nprotected void onNewIntent(Intent intent) { // TODO Auto-generated method stub\n    super.onNewIntent(intent);\n        //退出\n    if ((Intent.FLAG_ACTIVITY_CLEAR_TOP & intent.getFlags()) != 0) {\n         finish();\n    }\n}\n~~~\n\n      A的Manifest.xml配置成android:launchMode=\"singleTop\"\n\n原理总结： 一般A是程序的入口点，从D起一个A的activity，加入标识Intent.FLAG_ACTIVITY_CLEAR_TOP这个过程中会把栈中B，C，都清理掉。因为A是android:launchMode=\"singleTop\" 不会调用oncreate(),而是响应onNewIntent（）这时候判断Intent.FLAG_ACTIVITY_CLEAR_TOP，然后把A finish（）掉。 栈中A,B,C,D全部被清理。所以整个程序退出了。\n\n\n### 4.JNI实现守护进程\n请看这篇博客[Android 通过JNI实现守护进程](http://blog.csdn.net/yyh352091626/article/details/50542554)\n","source":"_posts/2016-09-22-quit-whole-application.md","raw":"---\nlayout: post\ntitle:  Android 退出整个应用程序解决方案\ncategory: technology\ntags:\n  - ANDROID\n  - exitApplication\nkeywords: Android,退出整个应用\nbanner: http://obxk8w81b.bkt.clouddn.com/Enclosed%20Field%20with%20Ploughman.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Enclosed%20Field%20with%20Ploughman.jpg\n---\n\n\n关于这个功能，每个公司项目都有自己的解决方案\n\n搜索了一下，网上大概有以下几种方法解决这个问题：\n\n- (1)System.exit(0);\n\n- (2)Process.killProcess(Process.myPid());\n\n- (3)ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE);\n\n    activityManager.restartPackage(\"packagename\");\n\n\n但这些貌似不是万能的，有的说在2.2版本后就失效了，那我们怎么办呢？\n\n<!--more-->\n\n### 1、通过广播\n\n在起初的一个项目里我用了一个比较笨的方法，我用一个类来专门管理所有的Activity。这个类里有一个List，每打开一个Activity我就把这个Activity放到这个List中，当退出时再将List中所有的Activity一个一个的关闭。\n\n在后来的项目中发现了一个更好地方法，就是通过广播来完成退出功能，具体实现过程是这样的：在每个Activity创建时（onCreate时）给Activity注册一个广播接收器，当退出时发送该广播即可。大概的代码如下：\n\n~~~ Java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n       super.onCreate(savedInstanceState);\n       IntentFilter filter = new IntentFilter();\n       filter.addAction(\"finish\");\n       registerReceiver(mFinishReceiver, filter);\n       ……\n}\n\nprivate BroadcastReceiver mFinishReceiver = new BroadcastReceiver() {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n           if(\"finish\".equals(intent.getAction())) {\n              Log.e(\"#########\", \"I am \" + getLocalClassName()\n                     + \",now finishing myself...\");\n              finish();\n       }\n    }\n};\n~~~\n\n相信聪明的大家会把上面的代码写在一个基类里面，因为如果你的项目中Activity很多的话，写起来很麻烦，而且也不符合代码规范。\n\n在退出时执行以下代码即可关闭所有界面完全退出程序：\n\ngetApplicationContext().sendBroadcast(new Intent(\"finish\"));\n\n转载：http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html\n\n### 2、使用退出类\n\n~~~ Java\npublic class CloseActivity\n{\n    private static LinkedList<Activity> acys = new LinkedList<Activity>();\n\n    public static Activity curActivity;\n\n    public static void add(Activity acy)\n    {\n        acys.add(acy);\n    }\n\n    public static void remove(Activity acy) {\n        acys.remove(acy);\n    }\n\n    public static void close()\n    {\n        Activity acy;\n        while (acys.size() != 0)\n        {\n            acy = acys.poll();\n            if (!acy.isFinishing())\n            {\n                acy.finish();\n            }\n        }\n//        android.os.Process.killProcess(android.os.Process.myPid());\n    }\n}\n~~~\n\n### 3.利用activity stack的原理\n我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现，\n这里我们在D窗口打开A窗口时在Intent中直接加入标志Intent.FLAG_ACTIVITY_CLEAR_TOP，再次开启A时将会清除该进程空间的所有Activity。\n\n在D中使用下面的代码:\n\n~~~ Java\nIntent intent = new Intent();\nintent.setClass(D.this, A.class);\nintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  //注意本行的FLAG设置\nstartActivity(intent);\nfinish();\n~~~\n\n关掉自己，在A中加入代码：\n\n~~~ Java\n@Override\nprotected void onNewIntent(Intent intent) { // TODO Auto-generated method stub\n    super.onNewIntent(intent);\n        //退出\n    if ((Intent.FLAG_ACTIVITY_CLEAR_TOP & intent.getFlags()) != 0) {\n         finish();\n    }\n}\n~~~\n\n      A的Manifest.xml配置成android:launchMode=\"singleTop\"\n\n原理总结： 一般A是程序的入口点，从D起一个A的activity，加入标识Intent.FLAG_ACTIVITY_CLEAR_TOP这个过程中会把栈中B，C，都清理掉。因为A是android:launchMode=\"singleTop\" 不会调用oncreate(),而是响应onNewIntent（）这时候判断Intent.FLAG_ACTIVITY_CLEAR_TOP，然后把A finish（）掉。 栈中A,B,C,D全部被清理。所以整个程序退出了。\n\n\n### 4.JNI实现守护进程\n请看这篇博客[Android 通过JNI实现守护进程](http://blog.csdn.net/yyh352091626/article/details/50542554)\n","slug":"quit-whole-application","published":1,"date":"2016-09-21T16:00:00.000Z","updated":"2017-11-23T07:24:52.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebys001sd6ykew0aco4p","content":"<p>关于这个功能，每个公司项目都有自己的解决方案</p>\n<p>搜索了一下，网上大概有以下几种方法解决这个问题：</p>\n<ul>\n<li><p>(1)System.exit(0);</p>\n</li>\n<li><p>(2)Process.killProcess(Process.myPid());</p>\n</li>\n<li><p>(3)ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE);</p>\n<p>  activityManager.restartPackage(“packagename”);</p>\n</li>\n</ul>\n<p>但这些貌似不是万能的，有的说在2.2版本后就失效了，那我们怎么办呢？</p>\n<a id=\"more\"></a>\n<h3 id=\"1、通过广播\"><a href=\"#1、通过广播\" class=\"headerlink\" title=\"1、通过广播\"></a>1、通过广播</h3><p>在起初的一个项目里我用了一个比较笨的方法，我用一个类来专门管理所有的Activity。这个类里有一个List，每打开一个Activity我就把这个Activity放到这个List中，当退出时再将List中所有的Activity一个一个的关闭。</p>\n<p>在后来的项目中发现了一个更好地方法，就是通过广播来完成退出功能，具体实现过程是这样的：在每个Activity创建时（onCreate时）给Activity注册一个广播接收器，当退出时发送该广播即可。大概的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       IntentFilter filter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">       filter.addAction(<span class=\"string\">\"finish\"</span>);</div><div class=\"line\">       registerReceiver(mFinishReceiver, filter);</div><div class=\"line\">       ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> BroadcastReceiver mFinishReceiver = <span class=\"keyword\">new</span> BroadcastReceiver() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(<span class=\"string\">\"finish\"</span>.equals(intent.getAction())) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"#########\"</span>, <span class=\"string\">\"I am \"</span> + getLocalClassName()</div><div class=\"line\">                     + <span class=\"string\">\",now finishing myself...\"</span>);</div><div class=\"line\">              finish();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>相信聪明的大家会把上面的代码写在一个基类里面，因为如果你的项目中Activity很多的话，写起来很麻烦，而且也不符合代码规范。</p>\n<p>在退出时执行以下代码即可关闭所有界面完全退出程序：</p>\n<p>getApplicationContext().sendBroadcast(new Intent(“finish”));</p>\n<p>转载：<a href=\"http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html</a></p>\n<h3 id=\"2、使用退出类\"><a href=\"#2、使用退出类\" class=\"headerlink\" title=\"2、使用退出类\"></a>2、使用退出类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloseActivity</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Activity&gt; acys = <span class=\"keyword\">new</span> LinkedList&lt;Activity&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Activity curActivity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Activity acy)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        acys.add(acy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Activity acy)</span> </span>&#123;</div><div class=\"line\">        acys.remove(acy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Activity acy;</div><div class=\"line\">        <span class=\"keyword\">while</span> (acys.size() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            acy = acys.poll();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!acy.isFinishing())</div><div class=\"line\">            &#123;</div><div class=\"line\">                acy.finish();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        android.os.Process.killProcess(android.os.Process.myPid());</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-利用activity-stack的原理\"><a href=\"#3-利用activity-stack的原理\" class=\"headerlink\" title=\"3.利用activity stack的原理\"></a>3.利用activity stack的原理</h3><p>我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现，<br>这里我们在D窗口打开A窗口时在Intent中直接加入标志Intent.FLAG_ACTIVITY_CLEAR_TOP，再次开启A时将会清除该进程空间的所有Activity。</p>\n<p>在D中使用下面的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">intent.setClass(D.<span class=\"keyword\">this</span>, A.class);</div><div class=\"line\">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  <span class=\"comment\">//注意本行的FLAG设置</span></div><div class=\"line\">startActivity(intent);</div><div class=\"line\">finish();</div></pre></td></tr></table></figure>\n<p>关掉自己，在A中加入代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123; <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.onNewIntent(intent);</div><div class=\"line\">        <span class=\"comment\">//退出</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((Intent.FLAG_ACTIVITY_CLEAR_TOP &amp; intent.getFlags()) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         finish();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>A的Manifest.xml配置成android:launchMode=&quot;singleTop&quot;\n</code></pre><p>原理总结： 一般A是程序的入口点，从D起一个A的activity，加入标识Intent.FLAG_ACTIVITY_CLEAR_TOP这个过程中会把栈中B，C，都清理掉。因为A是android:launchMode=”singleTop” 不会调用oncreate(),而是响应onNewIntent（）这时候判断Intent.FLAG_ACTIVITY_CLEAR_TOP，然后把A finish（）掉。 栈中A,B,C,D全部被清理。所以整个程序退出了。</p>\n<h3 id=\"4-JNI实现守护进程\"><a href=\"#4-JNI实现守护进程\" class=\"headerlink\" title=\"4.JNI实现守护进程\"></a>4.JNI实现守护进程</h3><p>请看这篇博客<a href=\"http://blog.csdn.net/yyh352091626/article/details/50542554\" target=\"_blank\" rel=\"external\">Android 通过JNI实现守护进程</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/22/quit-whole-application/\">http://agehua.github.io/2016/09/22/quit-whole-application/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.635,"time":98100,"words":327},"excerpt":"<p>关于这个功能，每个公司项目都有自己的解决方案</p>\n<p>搜索了一下，网上大概有以下几种方法解决这个问题：</p>\n<ul>\n<li><p>(1)System.exit(0);</p>\n</li>\n<li><p>(2)Process.killProcess(Process.myPid());</p>\n</li>\n<li><p>(3)ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE);</p>\n<p>  activityManager.restartPackage(“packagename”);</p>\n</li>\n</ul>\n<p>但这些貌似不是万能的，有的说在2.2版本后就失效了，那我们怎么办呢？</p>","more":"<h3 id=\"1、通过广播\"><a href=\"#1、通过广播\" class=\"headerlink\" title=\"1、通过广播\"></a>1、通过广播</h3><p>在起初的一个项目里我用了一个比较笨的方法，我用一个类来专门管理所有的Activity。这个类里有一个List，每打开一个Activity我就把这个Activity放到这个List中，当退出时再将List中所有的Activity一个一个的关闭。</p>\n<p>在后来的项目中发现了一个更好地方法，就是通过广播来完成退出功能，具体实现过程是这样的：在每个Activity创建时（onCreate时）给Activity注册一个广播接收器，当退出时发送该广播即可。大概的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       IntentFilter filter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">       filter.addAction(<span class=\"string\">\"finish\"</span>);</div><div class=\"line\">       registerReceiver(mFinishReceiver, filter);</div><div class=\"line\">       ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> BroadcastReceiver mFinishReceiver = <span class=\"keyword\">new</span> BroadcastReceiver() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(<span class=\"string\">\"finish\"</span>.equals(intent.getAction())) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"#########\"</span>, <span class=\"string\">\"I am \"</span> + getLocalClassName()</div><div class=\"line\">                     + <span class=\"string\">\",now finishing myself...\"</span>);</div><div class=\"line\">              finish();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>相信聪明的大家会把上面的代码写在一个基类里面，因为如果你的项目中Activity很多的话，写起来很麻烦，而且也不符合代码规范。</p>\n<p>在退出时执行以下代码即可关闭所有界面完全退出程序：</p>\n<p>getApplicationContext().sendBroadcast(new Intent(“finish”));</p>\n<p>转载：<a href=\"http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html\">http://www.cnblogs.com/wader2011/archive/2011/10/10/2205161.html</a></p>\n<h3 id=\"2、使用退出类\"><a href=\"#2、使用退出类\" class=\"headerlink\" title=\"2、使用退出类\"></a>2、使用退出类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloseActivity</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LinkedList&lt;Activity&gt; acys = <span class=\"keyword\">new</span> LinkedList&lt;Activity&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Activity curActivity;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Activity acy)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        acys.add(acy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Activity acy)</span> </span>&#123;</div><div class=\"line\">        acys.remove(acy);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        Activity acy;</div><div class=\"line\">        <span class=\"keyword\">while</span> (acys.size() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            acy = acys.poll();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!acy.isFinishing())</div><div class=\"line\">            &#123;</div><div class=\"line\">                acy.finish();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        android.os.Process.killProcess(android.os.Process.myPid());</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-利用activity-stack的原理\"><a href=\"#3-利用activity-stack的原理\" class=\"headerlink\" title=\"3.利用activity stack的原理\"></a>3.利用activity stack的原理</h3><p>我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现，<br>这里我们在D窗口打开A窗口时在Intent中直接加入标志Intent.FLAG_ACTIVITY_CLEAR_TOP，再次开启A时将会清除该进程空间的所有Activity。</p>\n<p>在D中使用下面的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">intent.setClass(D.<span class=\"keyword\">this</span>, A.class);</div><div class=\"line\">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  <span class=\"comment\">//注意本行的FLAG设置</span></div><div class=\"line\">startActivity(intent);</div><div class=\"line\">finish();</div></pre></td></tr></table></figure>\n<p>关掉自己，在A中加入代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123; <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.onNewIntent(intent);</div><div class=\"line\">        <span class=\"comment\">//退出</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((Intent.FLAG_ACTIVITY_CLEAR_TOP &amp; intent.getFlags()) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         finish();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>A的Manifest.xml配置成android:launchMode=&quot;singleTop&quot;\n</code></pre><p>原理总结： 一般A是程序的入口点，从D起一个A的activity，加入标识Intent.FLAG_ACTIVITY_CLEAR_TOP这个过程中会把栈中B，C，都清理掉。因为A是android:launchMode=”singleTop” 不会调用oncreate(),而是响应onNewIntent（）这时候判断Intent.FLAG_ACTIVITY_CLEAR_TOP，然后把A finish（）掉。 栈中A,B,C,D全部被清理。所以整个程序退出了。</p>\n<h3 id=\"4-JNI实现守护进程\"><a href=\"#4-JNI实现守护进程\" class=\"headerlink\" title=\"4.JNI实现守护进程\"></a>4.JNI实现守护进程</h3><p>请看这篇博客<a href=\"http://blog.csdn.net/yyh352091626/article/details/50542554\">Android 通过JNI实现守护进程</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/22/quit-whole-application/\">http://agehua.github.io/2016/09/22/quit-whole-application/</a></p>"},{"layout":"post","title":"Android面试知识点整理","keywords":"Android,面试题","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","_content":"\n\n只整理android面试中涉及到的知识点。不断补充中。。。\n\n#### 1.Android事件传递机制\n下面内容摘选自《Android开发艺术探索》\n\n- (1) 当一个点击事件发生之后，传递过程遵循如下顺序：**Activity -> Window -> View**。\n如果一个view的onTouchEvent方法返回false，那么它的父容器的onTouchEvent方法将会被调用，依此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给Activity处理(调用Activity的onTouchEvent方法)。\n\n<!--more-->\n- (2) 正常情况下，一个事件序列只能被一个view拦截并消耗，因为一旦某个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，并且该元素的**onInterceptTouchEvent**方法不会再被调用了。\n- (3) 某个view一旦开始处理事件，如果它不消耗ACTION_DOWN事件，那么**同一事件序列的其他事件都不会再交给它来处理**，并且事件将重新交给它的**父容器去处理**(调用父容器的onTouchEvent方法)；如果它消耗ACTION_DOWN事件，但是不消耗其他类型事件，那么这个点击事件会消失，父容器的onTouchEvent方法不会被调用，**当前view依然可以收到后续的事件**，但是这些事件最后都会传递给Activity处理。\n- (4) ViewGroup默认不拦截任何事件，因为它的**onInterceptTouchEvent**方法默认返回false。view没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。\n- (5) View的**onTouchEvent**默认都会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable都为false)。view的longClickable默认是false的，clickable则不一定，Button默认是true，而TextView默认是false。\n- (6) **View的enable属性不影响onTouchEvent的默认返回值**。哪怕一个view是disable状态，只要它的clickable或者longClickable有一个是true，那么它的onTouchEvent就会返回true。\n- (7) 事件传递过程总是**先传递给父元素**，然后再由**父元素分发给子view**，通过**requestDisallowInterceptTouchEvent**方法可以在**子元素中干预父元素的事件分发过程**，但是**ACTION_DOWN事件除外**，即当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件。\nViewGroup的dispatchTouchEvent方法中有一个标志位**FLAG_DISALLOW_INTERCEPT**，这个标志位就是通过**子view调用requestDisallowInterceptTouchEvent方法**来设置的，一旦设置为true，那么ViewGroup不会拦截该事件。\n- (8) 以上结论均可以在书中的源码解析部分得到解释。Window的实现类为PhoneWindow，获取Activity的contentView的方法\n\n~~~ Java\n((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(0);\n~~~\n\n#### 2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序\n如果给一个view设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看**onTouch**的返回值，如果返回false，那么当前view的**onTouchEvent方法**会被调用；如果返回true，那么onTouchEvent方法将不会被调用。\n在onTouchEvent方法中，如果当前view设置了OnClickListener，那么它的onClick方法会被调用，所以OnClickListener的优先级最低。\n\n#### 3.AsyncTask的方法介绍\n\n#### 4.项目中Handler怎么使用？\n\n#### 5.项目中图片的适配问题怎么解决？\n\n#### 6.Android存储敏感信息的方式有？\n\n#### 7.自定义广播\n- 继承自BroadcastReceiver\n- 重写onReceive(Context,Intent)\n      Intent.getAction\n- 动态注册（Context.registerReceiver()），静态注册（使用IntentFilter指定action）\n\n\n#### 8.加分项\n- JNI开发\n- 性能优化\n- 优秀作品\n\n#### 9.Sqlite数据库更新并保留升级前的数据\n我们知道在SQLiteOpenHelper的构造方法:\n\n    super(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n\n中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法:\n\n    onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n\n所以我们的重点是在该方法中实现SQLite数据库版本升级的管理\n\n对于保留升级前的数据，有两种解决办法：\n\n**SQLite提供了ALTER TABLE命令**，允许用户重命名或添加新的字段到已有表中，但是不能从表中删除字段。并且只能在表的末尾添加字段，比如，为Subscription添加两个字段：\n\n- ALTER TABLE Subscription ADD COLUMN Activation BLOB;\n- ALTER TABLE Subscription ADD COLUMN Key BLOB;\n\n**注释**：Sqlite支持BLOB(二进制大对象)数据类型\n\n**保留数据删除原表创建新表**，具体思路是：\n\n- 1：将表A重新命名：例如重新命名为：temp_A\n- 2：创建新表A\n- 3：将temp_A中的数据【也就是更新前的数据】插入到新表A\n\n具体操作如下：\n\n~~~ Java\n//重命名原来的数据表\npublic static final String TEMP_SQL_CREATE_TABLE_SUBSCRIBE = \"alter table \"\n            + A + \" rename to temp_A\";\n\n//然后把备份表temp_A中的数据copy到新创建的数据库表A中，这个表A没发生结构上的变化\npublic static final String INSERT_SUBSCRIBE = \"select 'insert into A (code,name,username,tablename)\n                        values (\"code\",\"name\",\"cnki\",\"tablename\")' as insertSQL from temp_A\";\n\n//删除备份表\npublic static final String DELETE_TEMP_SUBSCRIBE = \"delete from temp_A \";\npublic static final String DROP_TEMP_SUBSCRIBE = \"drop table if exists temp_A\";\n\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n        for (int j = oldVersion; j <= newVersion; j++) {\n            switch (j) {\n            case 2:\n　　　　　　　　　//创建临时表\n                db.execSQL(TEMP_SQL_CREATE_TABLE_SUBSCRIBE);\n　　 　　　　　　//执行OnCreate方法，这个方法中放的是表的初始化操作工作，比如创建新表之类的\n                onCreate(db);\n　　　　　　　　　//删除之前的表里面的默认数据\n                for (int i = 0; i < arrWhereAct.length; i++) {\n                    db.execSQL(DELETE_TEMP_SUBSCRIBE + arrWhereAct[i]);\n                }\n\n                //将临时表中的数据放入表A\n　　　　　　　　　Cursor cursor = db.rawQuery(INSERT_SUBSCRIBE, null);\n                if (cursor.moveToFirst()) {\n                    do {\n                        db.execSQL(cursor.getString(cursor\n                                .getColumnIndex(\"insertSQL\")));\n                    } while (cursor.moveToNext());\n                }\n\n                cursor.close();\n　　　　　　　　　//将临时表删除掉\n                db.execSQL(DROP_TEMP_SUBSCRIBE);\n\n                break;\n\n            default:\n                break;\n            }\n        }\n}\n~~~\n\n> **注意**，为什么要在方法里写for循环，主要是考虑到跨版本升级，比如有的用户一直不升级版本，数据库版本号一直是1，而客户端最新版本其实对应的数据库版本已经是4了，那么我中途可能对数据库做了很多修改，通过这个for循环，可以迭代升级，不会发生错误。\n\n\n#### 10.AIDL支持的数据类型\n其实AIDL这门语言非常的简单，基本上它的语法和 Java 是一样的，只是在一些细微处有些许差别——毕竟它只是被创造出来简化Android程序员工作的，太复杂不好——所以在这里我就着重的说一下它和 Java 不一样的地方。主要有下面这些点：\n\n**文件类型**：用AIDL书写的文件的后缀是 .aidl，而不是 .java。\n\n**数据类型**：AIDL默认支持一些数据类型，在使用这些数据类型的时候是不需要导包的，但是除了这些类型之外的数据类型，在使用之前必须导包，就算目标文件与当前正在编写的 .aidl 文件在同一个包下——在 Java 中，这种情况是不需要导包的。比如，现在我们编写了两个文件，一个叫做Book.java ，另一个叫做 BookManager.aidl，它们都在 com.lypeer.aidldemo 包下 ，现在我们需要在 .aidl 文件里使用 Book 对象，那么我们就必须在 .aidl 文件里面写上 import com.lypeer.aidldemo.Book; 哪怕 .java 文件和 .aidl 文件就在一个包下。\n\n   默认支持的数据类型包括：\n\n- Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。\n- String 类型。\n- CharSequence类型。\n- List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable（下文关于这个会有详解）。List可以使用泛型。\n- Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable。Map是不支持泛型的。\n\n**定向tag**：这是一个极易被忽略的点——这里的“被忽略”指的不是大家都不知道，而是很少人会正确的使用它。在我的理解里，定向tag是这样的：AIDL中的定向tag表示了在跨进程通信中数据的流向，其中**in表示数据只能由客户端流向服务端**，**out表示数据只能由服务端流向客户端**，**而inout则表示数据可在服务端与客户端之间双向流通**。其中，**数据流向是针对在客户端中的那个传入方法的对象而言的**。in为定向tag的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out的话表现为服务端将会接收到那个对象的的空对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout为定向tag的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。\n\n另外，Java 中的基本类型和String，CharSequence的定向tag默认且只能是in。还有，请注意，请不要滥用定向tag，而是要根据需要选取合适的——要是不管三七二十一，全都一上来就用inout，等工程大了系统的开销就会大很多——因为排列整理参数的开销是很昂贵的。\n\n**两种AIDL文件**：在我的理解里，所有的AIDL文件大致可以分为两类。**一类是用来定义parcelable对象**，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。**一类是用来定义方法接口**，以供系统使用来完成跨进程通信的。可以看到，两类文件都是在“定义”些什么，而不涉及具体的实现，这就是为什么它叫做“Android接口定义语言”。\n注：所有的非默认支持数据类型必须通过第一类AIDL文件定义才能被使用。\n\n下面是两个例子，对于常见的AIDL文件都有所涉及：\n\n~~~ Java\n// Book.aidl\n//第一类AIDL文件的例子\n//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用\n//注意：Book.aidl与Book.java的包名应当是一样的\npackage com.lypeer.ipcclient;\n\n//注意parcelable是小写\nparcelable Book;\n\n// BookManager.aidl\n//第二类AIDL文件的例子\npackage com.lypeer.ipcclient;\n//导入所需要使用的非默认支持数据类型的包\nimport com.lypeer.ipcclient.Book;\n\ninterface BookManager {\n\n    //所有的返回值前都不需要加任何东西，不管是什么数据类型\n    List<Book> getBooks();\n    Book getBook();\n    int getBookCount();\n\n    //传参时除了Java基本类型以及String，CharSequence之外的类型\n    //都需要在前面加上定向tag，具体加什么量需而定\n    void setBookPrice(in Book book , int price)\n    void setBookName(in Book book , String name)\n    void addBookIn(in Book book);\n    void addBookOut(out Book book);\n    void addBookInout(inout Book book);\n}\n~~~\n\n\n#### 11.Android布局的优化方案\n\n- 层级观察器(Hierarchy Viewer)：\n- 使用layoutopt工具输出\n- 重用布局文件：<include>\n- 使用< merge />标签减少布局的嵌套层次；\n- 仅在需要时才加载布局，ViewStub\n\n#### 12.Android性能调优\n- UI卡顿\n- ANR异常\n- 内存性能优化\n- Android API使用：\n        StringBuffer/String、HashMap/ArrayMap/SparseArray\n\n性能调优参考这篇博客[Andoid应用开发性能优化完全分析](http://blog.csdn.net/yanbober/article/details/48394201)\n","source":"_posts/2016-09-28-Android-interview-questions.md","raw":"---\nlayout: post\ntitle:  Android面试知识点整理\ncategory: accumulation\ntags:\n  - ANDROID\n  - Interview Knowledge\nkeywords: Android,面试题\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\n---\n\n\n只整理android面试中涉及到的知识点。不断补充中。。。\n\n#### 1.Android事件传递机制\n下面内容摘选自《Android开发艺术探索》\n\n- (1) 当一个点击事件发生之后，传递过程遵循如下顺序：**Activity -> Window -> View**。\n如果一个view的onTouchEvent方法返回false，那么它的父容器的onTouchEvent方法将会被调用，依此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给Activity处理(调用Activity的onTouchEvent方法)。\n\n<!--more-->\n- (2) 正常情况下，一个事件序列只能被一个view拦截并消耗，因为一旦某个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，并且该元素的**onInterceptTouchEvent**方法不会再被调用了。\n- (3) 某个view一旦开始处理事件，如果它不消耗ACTION_DOWN事件，那么**同一事件序列的其他事件都不会再交给它来处理**，并且事件将重新交给它的**父容器去处理**(调用父容器的onTouchEvent方法)；如果它消耗ACTION_DOWN事件，但是不消耗其他类型事件，那么这个点击事件会消失，父容器的onTouchEvent方法不会被调用，**当前view依然可以收到后续的事件**，但是这些事件最后都会传递给Activity处理。\n- (4) ViewGroup默认不拦截任何事件，因为它的**onInterceptTouchEvent**方法默认返回false。view没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。\n- (5) View的**onTouchEvent**默认都会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable都为false)。view的longClickable默认是false的，clickable则不一定，Button默认是true，而TextView默认是false。\n- (6) **View的enable属性不影响onTouchEvent的默认返回值**。哪怕一个view是disable状态，只要它的clickable或者longClickable有一个是true，那么它的onTouchEvent就会返回true。\n- (7) 事件传递过程总是**先传递给父元素**，然后再由**父元素分发给子view**，通过**requestDisallowInterceptTouchEvent**方法可以在**子元素中干预父元素的事件分发过程**，但是**ACTION_DOWN事件除外**，即当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件。\nViewGroup的dispatchTouchEvent方法中有一个标志位**FLAG_DISALLOW_INTERCEPT**，这个标志位就是通过**子view调用requestDisallowInterceptTouchEvent方法**来设置的，一旦设置为true，那么ViewGroup不会拦截该事件。\n- (8) 以上结论均可以在书中的源码解析部分得到解释。Window的实现类为PhoneWindow，获取Activity的contentView的方法\n\n~~~ Java\n((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(0);\n~~~\n\n#### 2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序\n如果给一个view设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看**onTouch**的返回值，如果返回false，那么当前view的**onTouchEvent方法**会被调用；如果返回true，那么onTouchEvent方法将不会被调用。\n在onTouchEvent方法中，如果当前view设置了OnClickListener，那么它的onClick方法会被调用，所以OnClickListener的优先级最低。\n\n#### 3.AsyncTask的方法介绍\n\n#### 4.项目中Handler怎么使用？\n\n#### 5.项目中图片的适配问题怎么解决？\n\n#### 6.Android存储敏感信息的方式有？\n\n#### 7.自定义广播\n- 继承自BroadcastReceiver\n- 重写onReceive(Context,Intent)\n      Intent.getAction\n- 动态注册（Context.registerReceiver()），静态注册（使用IntentFilter指定action）\n\n\n#### 8.加分项\n- JNI开发\n- 性能优化\n- 优秀作品\n\n#### 9.Sqlite数据库更新并保留升级前的数据\n我们知道在SQLiteOpenHelper的构造方法:\n\n    super(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n\n中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法:\n\n    onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n\n所以我们的重点是在该方法中实现SQLite数据库版本升级的管理\n\n对于保留升级前的数据，有两种解决办法：\n\n**SQLite提供了ALTER TABLE命令**，允许用户重命名或添加新的字段到已有表中，但是不能从表中删除字段。并且只能在表的末尾添加字段，比如，为Subscription添加两个字段：\n\n- ALTER TABLE Subscription ADD COLUMN Activation BLOB;\n- ALTER TABLE Subscription ADD COLUMN Key BLOB;\n\n**注释**：Sqlite支持BLOB(二进制大对象)数据类型\n\n**保留数据删除原表创建新表**，具体思路是：\n\n- 1：将表A重新命名：例如重新命名为：temp_A\n- 2：创建新表A\n- 3：将temp_A中的数据【也就是更新前的数据】插入到新表A\n\n具体操作如下：\n\n~~~ Java\n//重命名原来的数据表\npublic static final String TEMP_SQL_CREATE_TABLE_SUBSCRIBE = \"alter table \"\n            + A + \" rename to temp_A\";\n\n//然后把备份表temp_A中的数据copy到新创建的数据库表A中，这个表A没发生结构上的变化\npublic static final String INSERT_SUBSCRIBE = \"select 'insert into A (code,name,username,tablename)\n                        values (\"code\",\"name\",\"cnki\",\"tablename\")' as insertSQL from temp_A\";\n\n//删除备份表\npublic static final String DELETE_TEMP_SUBSCRIBE = \"delete from temp_A \";\npublic static final String DROP_TEMP_SUBSCRIBE = \"drop table if exists temp_A\";\n\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n        for (int j = oldVersion; j <= newVersion; j++) {\n            switch (j) {\n            case 2:\n　　　　　　　　　//创建临时表\n                db.execSQL(TEMP_SQL_CREATE_TABLE_SUBSCRIBE);\n　　 　　　　　　//执行OnCreate方法，这个方法中放的是表的初始化操作工作，比如创建新表之类的\n                onCreate(db);\n　　　　　　　　　//删除之前的表里面的默认数据\n                for (int i = 0; i < arrWhereAct.length; i++) {\n                    db.execSQL(DELETE_TEMP_SUBSCRIBE + arrWhereAct[i]);\n                }\n\n                //将临时表中的数据放入表A\n　　　　　　　　　Cursor cursor = db.rawQuery(INSERT_SUBSCRIBE, null);\n                if (cursor.moveToFirst()) {\n                    do {\n                        db.execSQL(cursor.getString(cursor\n                                .getColumnIndex(\"insertSQL\")));\n                    } while (cursor.moveToNext());\n                }\n\n                cursor.close();\n　　　　　　　　　//将临时表删除掉\n                db.execSQL(DROP_TEMP_SUBSCRIBE);\n\n                break;\n\n            default:\n                break;\n            }\n        }\n}\n~~~\n\n> **注意**，为什么要在方法里写for循环，主要是考虑到跨版本升级，比如有的用户一直不升级版本，数据库版本号一直是1，而客户端最新版本其实对应的数据库版本已经是4了，那么我中途可能对数据库做了很多修改，通过这个for循环，可以迭代升级，不会发生错误。\n\n\n#### 10.AIDL支持的数据类型\n其实AIDL这门语言非常的简单，基本上它的语法和 Java 是一样的，只是在一些细微处有些许差别——毕竟它只是被创造出来简化Android程序员工作的，太复杂不好——所以在这里我就着重的说一下它和 Java 不一样的地方。主要有下面这些点：\n\n**文件类型**：用AIDL书写的文件的后缀是 .aidl，而不是 .java。\n\n**数据类型**：AIDL默认支持一些数据类型，在使用这些数据类型的时候是不需要导包的，但是除了这些类型之外的数据类型，在使用之前必须导包，就算目标文件与当前正在编写的 .aidl 文件在同一个包下——在 Java 中，这种情况是不需要导包的。比如，现在我们编写了两个文件，一个叫做Book.java ，另一个叫做 BookManager.aidl，它们都在 com.lypeer.aidldemo 包下 ，现在我们需要在 .aidl 文件里使用 Book 对象，那么我们就必须在 .aidl 文件里面写上 import com.lypeer.aidldemo.Book; 哪怕 .java 文件和 .aidl 文件就在一个包下。\n\n   默认支持的数据类型包括：\n\n- Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。\n- String 类型。\n- CharSequence类型。\n- List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable（下文关于这个会有详解）。List可以使用泛型。\n- Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable。Map是不支持泛型的。\n\n**定向tag**：这是一个极易被忽略的点——这里的“被忽略”指的不是大家都不知道，而是很少人会正确的使用它。在我的理解里，定向tag是这样的：AIDL中的定向tag表示了在跨进程通信中数据的流向，其中**in表示数据只能由客户端流向服务端**，**out表示数据只能由服务端流向客户端**，**而inout则表示数据可在服务端与客户端之间双向流通**。其中，**数据流向是针对在客户端中的那个传入方法的对象而言的**。in为定向tag的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out的话表现为服务端将会接收到那个对象的的空对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout为定向tag的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。\n\n另外，Java 中的基本类型和String，CharSequence的定向tag默认且只能是in。还有，请注意，请不要滥用定向tag，而是要根据需要选取合适的——要是不管三七二十一，全都一上来就用inout，等工程大了系统的开销就会大很多——因为排列整理参数的开销是很昂贵的。\n\n**两种AIDL文件**：在我的理解里，所有的AIDL文件大致可以分为两类。**一类是用来定义parcelable对象**，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。**一类是用来定义方法接口**，以供系统使用来完成跨进程通信的。可以看到，两类文件都是在“定义”些什么，而不涉及具体的实现，这就是为什么它叫做“Android接口定义语言”。\n注：所有的非默认支持数据类型必须通过第一类AIDL文件定义才能被使用。\n\n下面是两个例子，对于常见的AIDL文件都有所涉及：\n\n~~~ Java\n// Book.aidl\n//第一类AIDL文件的例子\n//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用\n//注意：Book.aidl与Book.java的包名应当是一样的\npackage com.lypeer.ipcclient;\n\n//注意parcelable是小写\nparcelable Book;\n\n// BookManager.aidl\n//第二类AIDL文件的例子\npackage com.lypeer.ipcclient;\n//导入所需要使用的非默认支持数据类型的包\nimport com.lypeer.ipcclient.Book;\n\ninterface BookManager {\n\n    //所有的返回值前都不需要加任何东西，不管是什么数据类型\n    List<Book> getBooks();\n    Book getBook();\n    int getBookCount();\n\n    //传参时除了Java基本类型以及String，CharSequence之外的类型\n    //都需要在前面加上定向tag，具体加什么量需而定\n    void setBookPrice(in Book book , int price)\n    void setBookName(in Book book , String name)\n    void addBookIn(in Book book);\n    void addBookOut(out Book book);\n    void addBookInout(inout Book book);\n}\n~~~\n\n\n#### 11.Android布局的优化方案\n\n- 层级观察器(Hierarchy Viewer)：\n- 使用layoutopt工具输出\n- 重用布局文件：<include>\n- 使用< merge />标签减少布局的嵌套层次；\n- 仅在需要时才加载布局，ViewStub\n\n#### 12.Android性能调优\n- UI卡顿\n- ANR异常\n- 内存性能优化\n- Android API使用：\n        StringBuffer/String、HashMap/ArrayMap/SparseArray\n\n性能调优参考这篇博客[Andoid应用开发性能优化完全分析](http://blog.csdn.net/yanbober/article/details/48394201)\n","slug":"Android-interview-questions","published":1,"date":"2016-09-27T16:00:00.000Z","updated":"2017-11-23T07:24:55.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebyx001vd6yk1k19obak","content":"<p>只整理android面试中涉及到的知识点。不断补充中。。。</p>\n<h4 id=\"1-Android事件传递机制\"><a href=\"#1-Android事件传递机制\" class=\"headerlink\" title=\"1.Android事件传递机制\"></a>1.Android事件传递机制</h4><p>下面内容摘选自《Android开发艺术探索》</p>\n<ul>\n<li>(1) 当一个点击事件发生之后，传递过程遵循如下顺序：<strong>Activity -&gt; Window -&gt; View</strong>。<br>如果一个view的onTouchEvent方法返回false，那么它的父容器的onTouchEvent方法将会被调用，依此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给Activity处理(调用Activity的onTouchEvent方法)。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>(2) 正常情况下，一个事件序列只能被一个view拦截并消耗，因为一旦某个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，并且该元素的<strong>onInterceptTouchEvent</strong>方法不会再被调用了。</li>\n<li>(3) 某个view一旦开始处理事件，如果它不消耗ACTION_DOWN事件，那么<strong>同一事件序列的其他事件都不会再交给它来处理</strong>，并且事件将重新交给它的<strong>父容器去处理</strong>(调用父容器的onTouchEvent方法)；如果它消耗ACTION_DOWN事件，但是不消耗其他类型事件，那么这个点击事件会消失，父容器的onTouchEvent方法不会被调用，<strong>当前view依然可以收到后续的事件</strong>，但是这些事件最后都会传递给Activity处理。</li>\n<li>(4) ViewGroup默认不拦截任何事件，因为它的<strong>onInterceptTouchEvent</strong>方法默认返回false。view没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>\n<li>(5) View的<strong>onTouchEvent</strong>默认都会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable都为false)。view的longClickable默认是false的，clickable则不一定，Button默认是true，而TextView默认是false。</li>\n<li>(6) <strong>View的enable属性不影响onTouchEvent的默认返回值</strong>。哪怕一个view是disable状态，只要它的clickable或者longClickable有一个是true，那么它的onTouchEvent就会返回true。</li>\n<li>(7) 事件传递过程总是<strong>先传递给父元素</strong>，然后再由<strong>父元素分发给子view</strong>，通过<strong>requestDisallowInterceptTouchEvent</strong>方法可以在<strong>子元素中干预父元素的事件分发过程</strong>，但是<strong>ACTION_DOWN事件除外</strong>，即当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件。<br>ViewGroup的dispatchTouchEvent方法中有一个标志位<strong>FLAG_DISALLOW_INTERCEPT</strong>，这个标志位就是通过<strong>子view调用requestDisallowInterceptTouchEvent方法</strong>来设置的，一旦设置为true，那么ViewGroup不会拦截该事件。</li>\n<li>(8) 以上结论均可以在书中的源码解析部分得到解释。Window的实现类为PhoneWindow，获取Activity的contentView的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-OnTouchListener、onTouchEvent、OnClickListener优先级顺序\"><a href=\"#2-OnTouchListener、onTouchEvent、OnClickListener优先级顺序\" class=\"headerlink\" title=\"2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序\"></a>2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序</h4><p>如果给一个view设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看<strong>onTouch</strong>的返回值，如果返回false，那么当前view的<strong>onTouchEvent方法</strong>会被调用；如果返回true，那么onTouchEvent方法将不会被调用。<br>在onTouchEvent方法中，如果当前view设置了OnClickListener，那么它的onClick方法会被调用，所以OnClickListener的优先级最低。</p>\n<h4 id=\"3-AsyncTask的方法介绍\"><a href=\"#3-AsyncTask的方法介绍\" class=\"headerlink\" title=\"3.AsyncTask的方法介绍\"></a>3.AsyncTask的方法介绍</h4><h4 id=\"4-项目中Handler怎么使用？\"><a href=\"#4-项目中Handler怎么使用？\" class=\"headerlink\" title=\"4.项目中Handler怎么使用？\"></a>4.项目中Handler怎么使用？</h4><h4 id=\"5-项目中图片的适配问题怎么解决？\"><a href=\"#5-项目中图片的适配问题怎么解决？\" class=\"headerlink\" title=\"5.项目中图片的适配问题怎么解决？\"></a>5.项目中图片的适配问题怎么解决？</h4><h4 id=\"6-Android存储敏感信息的方式有？\"><a href=\"#6-Android存储敏感信息的方式有？\" class=\"headerlink\" title=\"6.Android存储敏感信息的方式有？\"></a>6.Android存储敏感信息的方式有？</h4><h4 id=\"7-自定义广播\"><a href=\"#7-自定义广播\" class=\"headerlink\" title=\"7.自定义广播\"></a>7.自定义广播</h4><ul>\n<li>继承自BroadcastReceiver</li>\n<li>重写onReceive(Context,Intent)<pre><code>Intent.getAction\n</code></pre></li>\n<li>动态注册（Context.registerReceiver()），静态注册（使用IntentFilter指定action）</li>\n</ul>\n<h4 id=\"8-加分项\"><a href=\"#8-加分项\" class=\"headerlink\" title=\"8.加分项\"></a>8.加分项</h4><ul>\n<li>JNI开发</li>\n<li>性能优化</li>\n<li>优秀作品</li>\n</ul>\n<h4 id=\"9-Sqlite数据库更新并保留升级前的数据\"><a href=\"#9-Sqlite数据库更新并保留升级前的数据\" class=\"headerlink\" title=\"9.Sqlite数据库更新并保留升级前的数据\"></a>9.Sqlite数据库更新并保留升级前的数据</h4><p>我们知道在SQLiteOpenHelper的构造方法:</p>\n<pre><code>super(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n</code></pre><p>中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法:</p>\n<pre><code>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n</code></pre><p>所以我们的重点是在该方法中实现SQLite数据库版本升级的管理</p>\n<p>对于保留升级前的数据，有两种解决办法：</p>\n<p><strong>SQLite提供了ALTER TABLE命令</strong>，允许用户重命名或添加新的字段到已有表中，但是不能从表中删除字段。并且只能在表的末尾添加字段，比如，为Subscription添加两个字段：</p>\n<ul>\n<li>ALTER TABLE Subscription ADD COLUMN Activation BLOB;</li>\n<li>ALTER TABLE Subscription ADD COLUMN Key BLOB;</li>\n</ul>\n<p><strong>注释</strong>：Sqlite支持BLOB(二进制大对象)数据类型</p>\n<p><strong>保留数据删除原表创建新表</strong>，具体思路是：</p>\n<ul>\n<li>1：将表A重新命名：例如重新命名为：temp_A</li>\n<li>2：创建新表A</li>\n<li>3：将temp_A中的数据【也就是更新前的数据】插入到新表A</li>\n</ul>\n<p>具体操作如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//重命名原来的数据表</div><div class=\"line\">public static final String TEMP_SQL_CREATE_TABLE_SUBSCRIBE = \"alter table \"</div><div class=\"line\">            + A + \" rename to temp_A\";</div><div class=\"line\"></div><div class=\"line\">//然后把备份表temp_A中的数据copy到新创建的数据库表A中，这个表A没发生结构上的变化</div><div class=\"line\">public static final String INSERT_SUBSCRIBE = \"select 'insert into A (code,name,username,tablename)</div><div class=\"line\">                        values (\"code\",\"name\",\"cnki\",\"tablename\")' as insertSQL from temp_A\";</div><div class=\"line\"></div><div class=\"line\">//删除备份表</div><div class=\"line\">public static final String DELETE_TEMP_SUBSCRIBE = \"delete from temp_A \";</div><div class=\"line\">public static final String DROP_TEMP_SUBSCRIBE = \"drop table if exists temp_A\";</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (int j = oldVersion; j &lt;= newVersion; j++) &#123;</div><div class=\"line\">            switch (j) &#123;</div><div class=\"line\">            case 2:</div><div class=\"line\">　　　　　　　　　//创建临时表</div><div class=\"line\">                db.execSQL(TEMP_SQL_CREATE_TABLE_SUBSCRIBE);</div><div class=\"line\">　　 　　　　　　//执行OnCreate方法，这个方法中放的是表的初始化操作工作，比如创建新表之类的</div><div class=\"line\">                onCreate(db);</div><div class=\"line\">　　　　　　　　　//删除之前的表里面的默认数据</div><div class=\"line\">                for (int i = 0; i &lt; arrWhereAct.length; i++) &#123;</div><div class=\"line\">                    db.execSQL(DELETE_TEMP_SUBSCRIBE + arrWhereAct[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                //将临时表中的数据放入表A</div><div class=\"line\">　　　　　　　　　Cursor cursor = db.rawQuery(INSERT_SUBSCRIBE, null);</div><div class=\"line\">                if (cursor.moveToFirst()) &#123;</div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        db.execSQL(cursor.getString(cursor</div><div class=\"line\">                                .getColumnIndex(\"insertSQL\")));</div><div class=\"line\">                    &#125; while (cursor.moveToNext());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                cursor.close();</div><div class=\"line\">　　　　　　　　　//将临时表删除掉</div><div class=\"line\">                db.execSQL(DROP_TEMP_SUBSCRIBE);</div><div class=\"line\"></div><div class=\"line\">                break;</div><div class=\"line\"></div><div class=\"line\">            default:</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>，为什么要在方法里写for循环，主要是考虑到跨版本升级，比如有的用户一直不升级版本，数据库版本号一直是1，而客户端最新版本其实对应的数据库版本已经是4了，那么我中途可能对数据库做了很多修改，通过这个for循环，可以迭代升级，不会发生错误。</p>\n</blockquote>\n<h4 id=\"10-AIDL支持的数据类型\"><a href=\"#10-AIDL支持的数据类型\" class=\"headerlink\" title=\"10.AIDL支持的数据类型\"></a>10.AIDL支持的数据类型</h4><p>其实AIDL这门语言非常的简单，基本上它的语法和 Java 是一样的，只是在一些细微处有些许差别——毕竟它只是被创造出来简化Android程序员工作的，太复杂不好——所以在这里我就着重的说一下它和 Java 不一样的地方。主要有下面这些点：</p>\n<p><strong>文件类型</strong>：用AIDL书写的文件的后缀是 .aidl，而不是 .java。</p>\n<p><strong>数据类型</strong>：AIDL默认支持一些数据类型，在使用这些数据类型的时候是不需要导包的，但是除了这些类型之外的数据类型，在使用之前必须导包，就算目标文件与当前正在编写的 .aidl 文件在同一个包下——在 Java 中，这种情况是不需要导包的。比如，现在我们编写了两个文件，一个叫做Book.java ，另一个叫做 BookManager.aidl，它们都在 com.lypeer.aidldemo 包下 ，现在我们需要在 .aidl 文件里使用 Book 对象，那么我们就必须在 .aidl 文件里面写上 import com.lypeer.aidldemo.Book; 哪怕 .java 文件和 .aidl 文件就在一个包下。</p>\n<p>   默认支持的数据类型包括：</p>\n<ul>\n<li>Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。</li>\n<li>String 类型。</li>\n<li>CharSequence类型。</li>\n<li>List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable（下文关于这个会有详解）。List可以使用泛型。</li>\n<li>Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable。Map是不支持泛型的。</li>\n</ul>\n<p><strong>定向tag</strong>：这是一个极易被忽略的点——这里的“被忽略”指的不是大家都不知道，而是很少人会正确的使用它。在我的理解里，定向tag是这样的：AIDL中的定向tag表示了在跨进程通信中数据的流向，其中<strong>in表示数据只能由客户端流向服务端</strong>，<strong>out表示数据只能由服务端流向客户端</strong>，<strong>而inout则表示数据可在服务端与客户端之间双向流通</strong>。其中，<strong>数据流向是针对在客户端中的那个传入方法的对象而言的</strong>。in为定向tag的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out的话表现为服务端将会接收到那个对象的的空对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout为定向tag的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。</p>\n<p>另外，Java 中的基本类型和String，CharSequence的定向tag默认且只能是in。还有，请注意，请不要滥用定向tag，而是要根据需要选取合适的——要是不管三七二十一，全都一上来就用inout，等工程大了系统的开销就会大很多——因为排列整理参数的开销是很昂贵的。</p>\n<p><strong>两种AIDL文件</strong>：在我的理解里，所有的AIDL文件大致可以分为两类。<strong>一类是用来定义parcelable对象</strong>，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。<strong>一类是用来定义方法接口</strong>，以供系统使用来完成跨进程通信的。可以看到，两类文件都是在“定义”些什么，而不涉及具体的实现，这就是为什么它叫做“Android接口定义语言”。<br>注：所有的非默认支持数据类型必须通过第一类AIDL文件定义才能被使用。</p>\n<p>下面是两个例子，对于常见的AIDL文件都有所涉及：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Book.aidl</span></div><div class=\"line\"><span class=\"comment\">//第一类AIDL文件的例子</span></div><div class=\"line\"><span class=\"comment\">//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用</span></div><div class=\"line\"><span class=\"comment\">//注意：Book.aidl与Book.java的包名应当是一样的</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.lypeer.ipcclient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意parcelable是小写</span></div><div class=\"line\">parcelable Book;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BookManager.aidl</span></div><div class=\"line\"><span class=\"comment\">//第二类AIDL文件的例子</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.lypeer.ipcclient;</div><div class=\"line\"><span class=\"comment\">//导入所需要使用的非默认支持数据类型的包</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.lypeer.ipcclient.Book;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//所有的返回值前都不需要加任何东西，不管是什么数据类型</span></div><div class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBooks</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">getBook</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBookCount</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//传参时除了Java基本类型以及String，CharSequence之外的类型</span></div><div class=\"line\">    <span class=\"comment\">//都需要在前面加上定向tag，具体加什么量需而定</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBookPrice</span><span class=\"params\">(in Book book , <span class=\"keyword\">int</span> price)</span></span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">setBookName</span><span class=\"params\">(in Book book , String name)</span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addBookIn</span><span class=\"params\">(in Book book)</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBookOut</span><span class=\"params\">(out Book book)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBookInout</span><span class=\"params\">(inout Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"11-Android布局的优化方案\"><a href=\"#11-Android布局的优化方案\" class=\"headerlink\" title=\"11.Android布局的优化方案\"></a>11.Android布局的优化方案</h4><ul>\n<li>层级观察器(Hierarchy Viewer)：</li>\n<li>使用layoutopt工具输出</li>\n<li>重用布局文件：<include></include></li>\n<li>使用&lt; merge /&gt;标签减少布局的嵌套层次；</li>\n<li>仅在需要时才加载布局，ViewStub</li>\n</ul>\n<h4 id=\"12-Android性能调优\"><a href=\"#12-Android性能调优\" class=\"headerlink\" title=\"12.Android性能调优\"></a>12.Android性能调优</h4><ul>\n<li>UI卡顿</li>\n<li>ANR异常</li>\n<li>内存性能优化</li>\n<li>Android API使用：<pre><code>StringBuffer/String、HashMap/ArrayMap/SparseArray\n</code></pre></li>\n</ul>\n<p>性能调优参考这篇博客<a href=\"http://blog.csdn.net/yanbober/article/details/48394201\" target=\"_blank\" rel=\"external\">Andoid应用开发性能优化完全分析</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/28/Android-interview-questions/\">http://agehua.github.io/2016/09/28/Android-interview-questions/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.52,"time":151200,"words":504},"excerpt":"<p>只整理android面试中涉及到的知识点。不断补充中。。。</p>\n<h4 id=\"1-Android事件传递机制\"><a href=\"#1-Android事件传递机制\" class=\"headerlink\" title=\"1.Android事件传递机制\"></a>1.Android事件传递机制</h4><p>下面内容摘选自《Android开发艺术探索》</p>\n<ul>\n<li>(1) 当一个点击事件发生之后，传递过程遵循如下顺序：<strong>Activity -&gt; Window -&gt; View</strong>。<br>如果一个view的onTouchEvent方法返回false，那么它的父容器的onTouchEvent方法将会被调用，依此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给Activity处理(调用Activity的onTouchEvent方法)。</li>\n</ul>","more":"<ul>\n<li>(2) 正常情况下，一个事件序列只能被一个view拦截并消耗，因为一旦某个元素拦截了某个事件，那么同一个事件序列内的所有事件都会直接交给它处理，并且该元素的<strong>onInterceptTouchEvent</strong>方法不会再被调用了。</li>\n<li>(3) 某个view一旦开始处理事件，如果它不消耗ACTION_DOWN事件，那么<strong>同一事件序列的其他事件都不会再交给它来处理</strong>，并且事件将重新交给它的<strong>父容器去处理</strong>(调用父容器的onTouchEvent方法)；如果它消耗ACTION_DOWN事件，但是不消耗其他类型事件，那么这个点击事件会消失，父容器的onTouchEvent方法不会被调用，<strong>当前view依然可以收到后续的事件</strong>，但是这些事件最后都会传递给Activity处理。</li>\n<li>(4) ViewGroup默认不拦截任何事件，因为它的<strong>onInterceptTouchEvent</strong>方法默认返回false。view没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>\n<li>(5) View的<strong>onTouchEvent</strong>默认都会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable都为false)。view的longClickable默认是false的，clickable则不一定，Button默认是true，而TextView默认是false。</li>\n<li>(6) <strong>View的enable属性不影响onTouchEvent的默认返回值</strong>。哪怕一个view是disable状态，只要它的clickable或者longClickable有一个是true，那么它的onTouchEvent就会返回true。</li>\n<li>(7) 事件传递过程总是<strong>先传递给父元素</strong>，然后再由<strong>父元素分发给子view</strong>，通过<strong>requestDisallowInterceptTouchEvent</strong>方法可以在<strong>子元素中干预父元素的事件分发过程</strong>，但是<strong>ACTION_DOWN事件除外</strong>，即当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件。<br>ViewGroup的dispatchTouchEvent方法中有一个标志位<strong>FLAG_DISALLOW_INTERCEPT</strong>，这个标志位就是通过<strong>子view调用requestDisallowInterceptTouchEvent方法</strong>来设置的，一旦设置为true，那么ViewGroup不会拦截该事件。</li>\n<li>(8) 以上结论均可以在书中的源码解析部分得到解释。Window的实现类为PhoneWindow，获取Activity的contentView的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-OnTouchListener、onTouchEvent、OnClickListener优先级顺序\"><a href=\"#2-OnTouchListener、onTouchEvent、OnClickListener优先级顺序\" class=\"headerlink\" title=\"2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序\"></a>2.OnTouchListener、onTouchEvent、OnClickListener优先级顺序</h4><p>如果给一个view设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看<strong>onTouch</strong>的返回值，如果返回false，那么当前view的<strong>onTouchEvent方法</strong>会被调用；如果返回true，那么onTouchEvent方法将不会被调用。<br>在onTouchEvent方法中，如果当前view设置了OnClickListener，那么它的onClick方法会被调用，所以OnClickListener的优先级最低。</p>\n<h4 id=\"3-AsyncTask的方法介绍\"><a href=\"#3-AsyncTask的方法介绍\" class=\"headerlink\" title=\"3.AsyncTask的方法介绍\"></a>3.AsyncTask的方法介绍</h4><h4 id=\"4-项目中Handler怎么使用？\"><a href=\"#4-项目中Handler怎么使用？\" class=\"headerlink\" title=\"4.项目中Handler怎么使用？\"></a>4.项目中Handler怎么使用？</h4><h4 id=\"5-项目中图片的适配问题怎么解决？\"><a href=\"#5-项目中图片的适配问题怎么解决？\" class=\"headerlink\" title=\"5.项目中图片的适配问题怎么解决？\"></a>5.项目中图片的适配问题怎么解决？</h4><h4 id=\"6-Android存储敏感信息的方式有？\"><a href=\"#6-Android存储敏感信息的方式有？\" class=\"headerlink\" title=\"6.Android存储敏感信息的方式有？\"></a>6.Android存储敏感信息的方式有？</h4><h4 id=\"7-自定义广播\"><a href=\"#7-自定义广播\" class=\"headerlink\" title=\"7.自定义广播\"></a>7.自定义广播</h4><ul>\n<li>继承自BroadcastReceiver</li>\n<li>重写onReceive(Context,Intent)<pre><code>Intent.getAction\n</code></pre></li>\n<li>动态注册（Context.registerReceiver()），静态注册（使用IntentFilter指定action）</li>\n</ul>\n<h4 id=\"8-加分项\"><a href=\"#8-加分项\" class=\"headerlink\" title=\"8.加分项\"></a>8.加分项</h4><ul>\n<li>JNI开发</li>\n<li>性能优化</li>\n<li>优秀作品</li>\n</ul>\n<h4 id=\"9-Sqlite数据库更新并保留升级前的数据\"><a href=\"#9-Sqlite数据库更新并保留升级前的数据\" class=\"headerlink\" title=\"9.Sqlite数据库更新并保留升级前的数据\"></a>9.Sqlite数据库更新并保留升级前的数据</h4><p>我们知道在SQLiteOpenHelper的构造方法:</p>\n<pre><code>super(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n</code></pre><p>中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法:</p>\n<pre><code>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n</code></pre><p>所以我们的重点是在该方法中实现SQLite数据库版本升级的管理</p>\n<p>对于保留升级前的数据，有两种解决办法：</p>\n<p><strong>SQLite提供了ALTER TABLE命令</strong>，允许用户重命名或添加新的字段到已有表中，但是不能从表中删除字段。并且只能在表的末尾添加字段，比如，为Subscription添加两个字段：</p>\n<ul>\n<li>ALTER TABLE Subscription ADD COLUMN Activation BLOB;</li>\n<li>ALTER TABLE Subscription ADD COLUMN Key BLOB;</li>\n</ul>\n<p><strong>注释</strong>：Sqlite支持BLOB(二进制大对象)数据类型</p>\n<p><strong>保留数据删除原表创建新表</strong>，具体思路是：</p>\n<ul>\n<li>1：将表A重新命名：例如重新命名为：temp_A</li>\n<li>2：创建新表A</li>\n<li>3：将temp_A中的数据【也就是更新前的数据】插入到新表A</li>\n</ul>\n<p>具体操作如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//重命名原来的数据表</div><div class=\"line\">public static final String TEMP_SQL_CREATE_TABLE_SUBSCRIBE = \"alter table \"</div><div class=\"line\">            + A + \" rename to temp_A\";</div><div class=\"line\"></div><div class=\"line\">//然后把备份表temp_A中的数据copy到新创建的数据库表A中，这个表A没发生结构上的变化</div><div class=\"line\">public static final String INSERT_SUBSCRIBE = \"select 'insert into A (code,name,username,tablename)</div><div class=\"line\">                        values (\"code\",\"name\",\"cnki\",\"tablename\")' as insertSQL from temp_A\";</div><div class=\"line\"></div><div class=\"line\">//删除备份表</div><div class=\"line\">public static final String DELETE_TEMP_SUBSCRIBE = \"delete from temp_A \";</div><div class=\"line\">public static final String DROP_TEMP_SUBSCRIBE = \"drop table if exists temp_A\";</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">        for (int j = oldVersion; j &lt;= newVersion; j++) &#123;</div><div class=\"line\">            switch (j) &#123;</div><div class=\"line\">            case 2:</div><div class=\"line\">　　　　　　　　　//创建临时表</div><div class=\"line\">                db.execSQL(TEMP_SQL_CREATE_TABLE_SUBSCRIBE);</div><div class=\"line\">　　 　　　　　　//执行OnCreate方法，这个方法中放的是表的初始化操作工作，比如创建新表之类的</div><div class=\"line\">                onCreate(db);</div><div class=\"line\">　　　　　　　　　//删除之前的表里面的默认数据</div><div class=\"line\">                for (int i = 0; i &lt; arrWhereAct.length; i++) &#123;</div><div class=\"line\">                    db.execSQL(DELETE_TEMP_SUBSCRIBE + arrWhereAct[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                //将临时表中的数据放入表A</div><div class=\"line\">　　　　　　　　　Cursor cursor = db.rawQuery(INSERT_SUBSCRIBE, null);</div><div class=\"line\">                if (cursor.moveToFirst()) &#123;</div><div class=\"line\">                    do &#123;</div><div class=\"line\">                        db.execSQL(cursor.getString(cursor</div><div class=\"line\">                                .getColumnIndex(\"insertSQL\")));</div><div class=\"line\">                    &#125; while (cursor.moveToNext());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                cursor.close();</div><div class=\"line\">　　　　　　　　　//将临时表删除掉</div><div class=\"line\">                db.execSQL(DROP_TEMP_SUBSCRIBE);</div><div class=\"line\"></div><div class=\"line\">                break;</div><div class=\"line\"></div><div class=\"line\">            default:</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>，为什么要在方法里写for循环，主要是考虑到跨版本升级，比如有的用户一直不升级版本，数据库版本号一直是1，而客户端最新版本其实对应的数据库版本已经是4了，那么我中途可能对数据库做了很多修改，通过这个for循环，可以迭代升级，不会发生错误。</p>\n</blockquote>\n<h4 id=\"10-AIDL支持的数据类型\"><a href=\"#10-AIDL支持的数据类型\" class=\"headerlink\" title=\"10.AIDL支持的数据类型\"></a>10.AIDL支持的数据类型</h4><p>其实AIDL这门语言非常的简单，基本上它的语法和 Java 是一样的，只是在一些细微处有些许差别——毕竟它只是被创造出来简化Android程序员工作的，太复杂不好——所以在这里我就着重的说一下它和 Java 不一样的地方。主要有下面这些点：</p>\n<p><strong>文件类型</strong>：用AIDL书写的文件的后缀是 .aidl，而不是 .java。</p>\n<p><strong>数据类型</strong>：AIDL默认支持一些数据类型，在使用这些数据类型的时候是不需要导包的，但是除了这些类型之外的数据类型，在使用之前必须导包，就算目标文件与当前正在编写的 .aidl 文件在同一个包下——在 Java 中，这种情况是不需要导包的。比如，现在我们编写了两个文件，一个叫做Book.java ，另一个叫做 BookManager.aidl，它们都在 com.lypeer.aidldemo 包下 ，现在我们需要在 .aidl 文件里使用 Book 对象，那么我们就必须在 .aidl 文件里面写上 import com.lypeer.aidldemo.Book; 哪怕 .java 文件和 .aidl 文件就在一个包下。</p>\n<p>   默认支持的数据类型包括：</p>\n<ul>\n<li>Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。</li>\n<li>String 类型。</li>\n<li>CharSequence类型。</li>\n<li>List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable（下文关于这个会有详解）。List可以使用泛型。</li>\n<li>Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable。Map是不支持泛型的。</li>\n</ul>\n<p><strong>定向tag</strong>：这是一个极易被忽略的点——这里的“被忽略”指的不是大家都不知道，而是很少人会正确的使用它。在我的理解里，定向tag是这样的：AIDL中的定向tag表示了在跨进程通信中数据的流向，其中<strong>in表示数据只能由客户端流向服务端</strong>，<strong>out表示数据只能由服务端流向客户端</strong>，<strong>而inout则表示数据可在服务端与客户端之间双向流通</strong>。其中，<strong>数据流向是针对在客户端中的那个传入方法的对象而言的</strong>。in为定向tag的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out的话表现为服务端将会接收到那个对象的的空对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout为定向tag的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。</p>\n<p>另外，Java 中的基本类型和String，CharSequence的定向tag默认且只能是in。还有，请注意，请不要滥用定向tag，而是要根据需要选取合适的——要是不管三七二十一，全都一上来就用inout，等工程大了系统的开销就会大很多——因为排列整理参数的开销是很昂贵的。</p>\n<p><strong>两种AIDL文件</strong>：在我的理解里，所有的AIDL文件大致可以分为两类。<strong>一类是用来定义parcelable对象</strong>，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。<strong>一类是用来定义方法接口</strong>，以供系统使用来完成跨进程通信的。可以看到，两类文件都是在“定义”些什么，而不涉及具体的实现，这就是为什么它叫做“Android接口定义语言”。<br>注：所有的非默认支持数据类型必须通过第一类AIDL文件定义才能被使用。</p>\n<p>下面是两个例子，对于常见的AIDL文件都有所涉及：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Book.aidl</span></div><div class=\"line\"><span class=\"comment\">//第一类AIDL文件的例子</span></div><div class=\"line\"><span class=\"comment\">//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用</span></div><div class=\"line\"><span class=\"comment\">//注意：Book.aidl与Book.java的包名应当是一样的</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.lypeer.ipcclient;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意parcelable是小写</span></div><div class=\"line\">parcelable Book;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BookManager.aidl</span></div><div class=\"line\"><span class=\"comment\">//第二类AIDL文件的例子</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.lypeer.ipcclient;</div><div class=\"line\"><span class=\"comment\">//导入所需要使用的非默认支持数据类型的包</span></div><div class=\"line\"><span class=\"keyword\">import</span> com.lypeer.ipcclient.Book;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//所有的返回值前都不需要加任何东西，不管是什么数据类型</span></div><div class=\"line\">    <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBooks</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">getBook</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getBookCount</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//传参时除了Java基本类型以及String，CharSequence之外的类型</span></div><div class=\"line\">    <span class=\"comment\">//都需要在前面加上定向tag，具体加什么量需而定</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBookPrice</span><span class=\"params\">(in Book book , <span class=\"keyword\">int</span> price)</span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">setBookName</span><span class=\"params\">(in Book book , String name)</span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addBookIn</span><span class=\"params\">(in Book book)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBookOut</span><span class=\"params\">(out Book book)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBookInout</span><span class=\"params\">(inout Book book)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"11-Android布局的优化方案\"><a href=\"#11-Android布局的优化方案\" class=\"headerlink\" title=\"11.Android布局的优化方案\"></a>11.Android布局的优化方案</h4><ul>\n<li>层级观察器(Hierarchy Viewer)：</li>\n<li>使用layoutopt工具输出</li>\n<li>重用布局文件：<include></li>\n<li>使用&lt; merge /&gt;标签减少布局的嵌套层次；</li>\n<li>仅在需要时才加载布局，ViewStub</li>\n</ul>\n<h4 id=\"12-Android性能调优\"><a href=\"#12-Android性能调优\" class=\"headerlink\" title=\"12.Android性能调优\"></a>12.Android性能调优</h4><ul>\n<li>UI卡顿</li>\n<li>ANR异常</li>\n<li>内存性能优化</li>\n<li>Android API使用：<pre><code>StringBuffer/String、HashMap/ArrayMap/SparseArray\n</code></pre></li>\n</ul>\n<p>性能调优参考这篇博客<a href=\"http://blog.csdn.net/yanbober/article/details/48394201\">Andoid应用开发性能优化完全分析</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/09/28/Android-interview-questions/\">http://agehua.github.io/2016/09/28/Android-interview-questions/</a></p>"},{"layout":"post","title":"Hexo 出错情况收集","keywords":"Hexo","banner":"http://obxk8w81b.bkt.clouddn.com/Couple%20Out%20for%20a%20Stroll.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Couple%20Out%20for%20a%20Stroll.jpg","_content":"\n#### Error: Cannot find module './build/Release/DTraceProviderBindings'\n\n我在更新hexo，准备安装别的module时，不小心按到了 ctrl+c，结果发现使用hexo命令会报如下错误：\n~~~ Java\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }    \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n~~~\n<!--more-->\n网上一大堆的解决办法都不好用，这里特别记录下我找到的一个解决办法，亲测可用\n\n**1. 重新安装Hexo，需要手动删除隐藏的hexo文件**\n\n- 需要删除 /usr/local/lib/node_modules/ 目录下的**hexo文件夹**\n- /usr/local/bin/ 下的**hexo文件**. 直接删掉就好了.\n> 注意这两个都是隐藏文件，要想在finder中显示隐藏文件，需要在Terminal中执行：\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n\n**2. 重新执行命令：npm install -g hexo --save**\n\n这样就可以了  :)\n","source":"_posts/2016-11-03-hexo-mac-module-not-found.md","raw":"---\nlayout: post\ntitle:  Hexo 出错情况收集\ncategory: accumulation\ntags:\n  - Hexo\nkeywords: Hexo\nbanner: http://obxk8w81b.bkt.clouddn.com/Couple%20Out%20for%20a%20Stroll.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Couple%20Out%20for%20a%20Stroll.jpg\n---\n\n#### Error: Cannot find module './build/Release/DTraceProviderBindings'\n\n我在更新hexo，准备安装别的module时，不小心按到了 ctrl+c，结果发现使用hexo命令会报如下错误：\n~~~ Java\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }    \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n~~~\n<!--more-->\n网上一大堆的解决办法都不好用，这里特别记录下我找到的一个解决办法，亲测可用\n\n**1. 重新安装Hexo，需要手动删除隐藏的hexo文件**\n\n- 需要删除 /usr/local/lib/node_modules/ 目录下的**hexo文件夹**\n- /usr/local/bin/ 下的**hexo文件**. 直接删掉就好了.\n> 注意这两个都是隐藏文件，要想在finder中显示隐藏文件，需要在Terminal中执行：\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n\n**2. 重新执行命令：npm install -g hexo --save**\n\n这样就可以了  :)\n","slug":"hexo-mac-module-not-found","published":1,"date":"2016-11-02T16:00:00.000Z","updated":"2017-11-23T07:09:46.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebz3001yd6ykf5kdyo3u","content":"<h4 id=\"Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’\"><a href=\"#Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’\" class=\"headerlink\" title=\"Error: Cannot find module ‘./build/Release/DTraceProviderBindings’\"></a>Error: Cannot find module ‘./build/Release/DTraceProviderBindings’</h4><p>我在更新hexo，准备安装别的module时，不小心按到了 ctrl+c，结果发现使用hexo命令会报如下错误：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;    </div><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>网上一大堆的解决办法都不好用，这里特别记录下我找到的一个解决办法，亲测可用</p>\n<p><strong>1. 重新安装Hexo，需要手动删除隐藏的hexo文件</strong></p>\n<ul>\n<li>需要删除 /usr/local/lib/node_modules/ 目录下的<strong>hexo文件夹</strong></li>\n<li>/usr/local/bin/ 下的<strong>hexo文件</strong>. 直接删掉就好了.<blockquote>\n<p>注意这两个都是隐藏文件，要想在finder中显示隐藏文件，需要在Terminal中执行：<br>defaults write com.apple.finder AppleShowAllFiles -bool true</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>2. 重新执行命令：npm install -g hexo –save</strong></p>\n<p>这样就可以了  :)</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/11/03/hexo-mac-module-not-found/\">http://agehua.github.io/2016/11/03/hexo-mac-module-not-found/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.47,"time":28200,"words":94},"excerpt":"<h4 id=\"Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’\"><a href=\"#Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’\" class=\"headerlink\" title=\"Error: Cannot find module ‘./build/Release/DTraceProviderBindings’\"></a>Error: Cannot find module ‘./build/Release/DTraceProviderBindings’</h4><p>我在更新hexo，准备安装别的module时，不小心按到了 ctrl+c，结果发现使用hexo命令会报如下错误：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;    </div><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [Error: Cannot find <span class=\"keyword\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure></p>","more":"<p>网上一大堆的解决办法都不好用，这里特别记录下我找到的一个解决办法，亲测可用</p>\n<p><strong>1. 重新安装Hexo，需要手动删除隐藏的hexo文件</strong></p>\n<ul>\n<li>需要删除 /usr/local/lib/node_modules/ 目录下的<strong>hexo文件夹</strong></li>\n<li>/usr/local/bin/ 下的<strong>hexo文件</strong>. 直接删掉就好了.<blockquote>\n<p>注意这两个都是隐藏文件，要想在finder中显示隐藏文件，需要在Terminal中执行：<br>defaults write com.apple.finder AppleShowAllFiles -bool true</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>2. 重新执行命令：npm install -g hexo –save</strong></p>\n<p>这样就可以了  :)</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/11/03/hexo-mac-module-not-found/\">http://agehua.github.io/2016/11/03/hexo-mac-module-not-found/</a></p>"},{"layout":"post","title":"gradle 学习2——生成指定文件名的apk","keywords":"Android,gradle","banner":"http://obxk8w81b.bkt.clouddn.com/Cart%20with%20Red%20and%20White%20Ox.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cart%20with%20Red%20and%20White%20Ox.jpg","_content":"\n上一篇[Gradle学习]()了解了Gradle的基本结构和依赖关系，这篇文章介绍下怎么在Android上使用Gradle生成指定包名的APK\n\n### 需求场景\n在我们Android开发基本进入测试阶段后，会根据后台的不同环境，打包出对应不同环境（如SIT、UAT、PRD等）的APK安装包。\n\n每次去手动修改Java类改变后台环境太麻烦还容易忘记修改。打包成功后，还需要手动将默认的包名app-release.apk改成我们需要的包名，也是非常麻烦，有没有直接指定环境，生成指定文件名的安装包呢？\n\n方法是有的，就是利用gradle的分渠道打包特性，下面上代码分别解释。\n\n> 主要在这两个个地方修改：\n- buildType（构建类型）\n- productFlavors （不同定制的产品）\n\n<!--more-->\n#### buildType（构建类型）介绍\n\n默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。\n\n可以创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n以下是一些可能使用到的属性和默认值：\n\n|*Property name\t*|*Default values for debug\t*|*Default values for release / other*|\n|:--------:|:-------:|:--------:|\n|debuggable\t            | true\t|false |\n|jniDebugBuild\t        | false\t|false|\n|renderscriptDebugBuild\t| false\t|false|\n|renderscriptOptimLevel\t|   3\t|3|\n|applicationIdSuffix\t|  null\t|null|\n|versionNameSuffix\t    |  null\t|null|\n|signingConfig\t  |android.signingConfigs.debug\t|null|\n|zipAlign\t             |false\t|true|\n|runProguard\t         |false\t|false|\n|proguardFile\t     |N/A (set only)\t|N/A (set only)|\n|proguardFiles\t     |N/A (set only)\t|N/A (set only)|\n\n上面介绍摘选自[Gralde plugin User Guide 中文版](https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/basic_project/build_types.html)\n\n\n#### Product flavors（不同定制的产品）介绍\n一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。\n\n这个新的设计概念是为了解决不同的版本之间的差异非常小的情况。虽然最项目终生成了多个定制的版本，但是它们本质上都是同一个应用，那么这种做法可能是比使用库项目更好的实现方式。\n\nProduct flavor需要在productFlavors这个DSL容器中声明：\n\n~~~ Java\nandroid {\n    ....\n\n    productFlavors {\n        flavor1 {\n            ...\n        }\n\n        flavor2 {\n            ...\n        }\n    }\n}\n~~~\n这里创建了两个flavor，名为flavor1和flavor2。\n\n> 注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。\n\n#### Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\n正如前面章节所提到的，每一个Build Type都会生成一个新的APK。\n\nProduct Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。\n\n每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。\n\n例如，在上面的Flavor声明例子中与默认的debug和release两个Build Type将会生成4个Build Variant：\n\n- Flavor1 - debug\n- Flavor1 - release\n- Flavor2 - debug\n- Flavor2 - release\n\n项目中如果没有定义flavor同样也会有Build Variant，只是使用的是默认的flavor和配置。default(默认)的flavor/config是没有名字的，所以生成的Build Variant列表看起来就跟Build Type列表一样。\n\n### 具体使用\n我们的需求就要用到**Build Type**和**Product Flavor**\n我在项目中**Build Type**的使用，先看代码：\n\n~~~ Java\nbuildTypes {\n        release {\n            buildConfigField \"boolean\", \"LEO_DEBUG\", \"false\"\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n            debuggable false\n            jniDebuggable false\n        }\n        debug {\n            buildConfigField \"int\", \"buildType\", \"2\"\n            buildConfigField \"boolean\", \"LEO_DEBUG\", \"true\"\n        }\n    }\n~~~\n和**Product Flavor**的使用\n\n~~~ Java\nproductFlavors{\n\tkaifa{\n\t\tbuildConfigField \"int\", \"buildType\", \"1\"\n\t}\n\tceshi {\n\t\tbuildConfigField \"int\", \"buildType\", \"2\"\n\t}\n\tSIT {\n\t\tbuildConfigField \"int\", \"buildType\", \"3\"\n\t}\n\tUAT {\n\t\tbuildConfigField \"int\", \"buildType\", \"4\"\n\t}\n\tPRD {\n\t\tbuildConfigField \"int\", \"buildType\", \"5\"\n\t}\n}\n~~~\n每一个构建过的productFlavors都会在**app->build->generated->source->buildConfig**目录下创建自己对应的一个flavor目录，如下图：\n\n![Gradle build structure](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure2.png)\n\n而，buildConfigField会在指定的目录，**flavor->release/debug->包名**，下生成一个BuildConfig.java文件，我的代码在BuildConfig.java中定义了一个int类型的buildType和boolean类型的LEO_DEBUG。要使用这两个字段只需要:\n\n~~~ Java\nif (BuildConfig.LEO_DEBUG){\n\t\t//用来控制本地Log日志\n}\nif (Environment ==BuildConfig.buildType){\n\t\t//用来控制开发环境\n}\n~~~\n\n#### gradle中修改apk生成名字的方法\n这个方法是定义在productFlavors同一层级的\n\n~~~ Java\nandroid.applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                //这里修改apk文件名\n                def flavorname =variant.productFlavors[0].name\n                if (flavorname.equals('kaifa'))\n                    flavorname = 'debug'\n                else if (flavorname.equals('ceshi'))\n                    flavorname = 'release'\n\n                def fileName = \"app-${flavorname}-${defaultConfig.versionName}-${releaseTime() }.apk\"\n                output.outputFile = new File(outputFile.parent, fileName)\n            }\n        }\n    }\n~~~\n\n这个方法要定义在最外层\n~~~ Java\ndef releaseTime() {\n    return new Date().format(\"MMdd\", TimeZone.getTimeZone(\"UTC\"))\n}\n~~~\n\n最后生成的apk名字\n\n### Mac下Android Studio中获取SHA1和MD5\n打开Android Studio中的Terminal，也可以直接打开系统的终端\n\n#### 获取debug.keystore的SHA1和MD5\n\n输入: **keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android**\n\n获取其他keystore的，如正式签名文件的，**keytool -list -v -keystore ~/User/你的用户名/debug.keystore -alias androiddebugkey -storepass android -keypass android** 需要把路径和密码改成相应的就可以了\n","source":"_posts/2016-10-13-gradle-learning2.md","raw":"---\nlayout: post\ntitle:  gradle 学习2——生成指定文件名的apk\ncategory: accumulation\ntags:\n  - gradle\nkeywords: Android,gradle\nbanner: http://obxk8w81b.bkt.clouddn.com/Cart%20with%20Red%20and%20White%20Ox.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cart%20with%20Red%20and%20White%20Ox.jpg\n---\n\n上一篇[Gradle学习]()了解了Gradle的基本结构和依赖关系，这篇文章介绍下怎么在Android上使用Gradle生成指定包名的APK\n\n### 需求场景\n在我们Android开发基本进入测试阶段后，会根据后台的不同环境，打包出对应不同环境（如SIT、UAT、PRD等）的APK安装包。\n\n每次去手动修改Java类改变后台环境太麻烦还容易忘记修改。打包成功后，还需要手动将默认的包名app-release.apk改成我们需要的包名，也是非常麻烦，有没有直接指定环境，生成指定文件名的安装包呢？\n\n方法是有的，就是利用gradle的分渠道打包特性，下面上代码分别解释。\n\n> 主要在这两个个地方修改：\n- buildType（构建类型）\n- productFlavors （不同定制的产品）\n\n<!--more-->\n#### buildType（构建类型）介绍\n\n默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。\n\n可以创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n以下是一些可能使用到的属性和默认值：\n\n|*Property name\t*|*Default values for debug\t*|*Default values for release / other*|\n|:--------:|:-------:|:--------:|\n|debuggable\t            | true\t|false |\n|jniDebugBuild\t        | false\t|false|\n|renderscriptDebugBuild\t| false\t|false|\n|renderscriptOptimLevel\t|   3\t|3|\n|applicationIdSuffix\t|  null\t|null|\n|versionNameSuffix\t    |  null\t|null|\n|signingConfig\t  |android.signingConfigs.debug\t|null|\n|zipAlign\t             |false\t|true|\n|runProguard\t         |false\t|false|\n|proguardFile\t     |N/A (set only)\t|N/A (set only)|\n|proguardFiles\t     |N/A (set only)\t|N/A (set only)|\n\n上面介绍摘选自[Gralde plugin User Guide 中文版](https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/basic_project/build_types.html)\n\n\n#### Product flavors（不同定制的产品）介绍\n一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。\n\n这个新的设计概念是为了解决不同的版本之间的差异非常小的情况。虽然最项目终生成了多个定制的版本，但是它们本质上都是同一个应用，那么这种做法可能是比使用库项目更好的实现方式。\n\nProduct flavor需要在productFlavors这个DSL容器中声明：\n\n~~~ Java\nandroid {\n    ....\n\n    productFlavors {\n        flavor1 {\n            ...\n        }\n\n        flavor2 {\n            ...\n        }\n    }\n}\n~~~\n这里创建了两个flavor，名为flavor1和flavor2。\n\n> 注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。\n\n#### Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\n正如前面章节所提到的，每一个Build Type都会生成一个新的APK。\n\nProduct Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。\n\n每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。\n\n例如，在上面的Flavor声明例子中与默认的debug和release两个Build Type将会生成4个Build Variant：\n\n- Flavor1 - debug\n- Flavor1 - release\n- Flavor2 - debug\n- Flavor2 - release\n\n项目中如果没有定义flavor同样也会有Build Variant，只是使用的是默认的flavor和配置。default(默认)的flavor/config是没有名字的，所以生成的Build Variant列表看起来就跟Build Type列表一样。\n\n### 具体使用\n我们的需求就要用到**Build Type**和**Product Flavor**\n我在项目中**Build Type**的使用，先看代码：\n\n~~~ Java\nbuildTypes {\n        release {\n            buildConfigField \"boolean\", \"LEO_DEBUG\", \"false\"\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n            debuggable false\n            jniDebuggable false\n        }\n        debug {\n            buildConfigField \"int\", \"buildType\", \"2\"\n            buildConfigField \"boolean\", \"LEO_DEBUG\", \"true\"\n        }\n    }\n~~~\n和**Product Flavor**的使用\n\n~~~ Java\nproductFlavors{\n\tkaifa{\n\t\tbuildConfigField \"int\", \"buildType\", \"1\"\n\t}\n\tceshi {\n\t\tbuildConfigField \"int\", \"buildType\", \"2\"\n\t}\n\tSIT {\n\t\tbuildConfigField \"int\", \"buildType\", \"3\"\n\t}\n\tUAT {\n\t\tbuildConfigField \"int\", \"buildType\", \"4\"\n\t}\n\tPRD {\n\t\tbuildConfigField \"int\", \"buildType\", \"5\"\n\t}\n}\n~~~\n每一个构建过的productFlavors都会在**app->build->generated->source->buildConfig**目录下创建自己对应的一个flavor目录，如下图：\n\n![Gradle build structure](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure2.png)\n\n而，buildConfigField会在指定的目录，**flavor->release/debug->包名**，下生成一个BuildConfig.java文件，我的代码在BuildConfig.java中定义了一个int类型的buildType和boolean类型的LEO_DEBUG。要使用这两个字段只需要:\n\n~~~ Java\nif (BuildConfig.LEO_DEBUG){\n\t\t//用来控制本地Log日志\n}\nif (Environment ==BuildConfig.buildType){\n\t\t//用来控制开发环境\n}\n~~~\n\n#### gradle中修改apk生成名字的方法\n这个方法是定义在productFlavors同一层级的\n\n~~~ Java\nandroid.applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n            def outputFile = output.outputFile\n            if (outputFile != null && outputFile.name.endsWith('.apk')) {\n                //这里修改apk文件名\n                def flavorname =variant.productFlavors[0].name\n                if (flavorname.equals('kaifa'))\n                    flavorname = 'debug'\n                else if (flavorname.equals('ceshi'))\n                    flavorname = 'release'\n\n                def fileName = \"app-${flavorname}-${defaultConfig.versionName}-${releaseTime() }.apk\"\n                output.outputFile = new File(outputFile.parent, fileName)\n            }\n        }\n    }\n~~~\n\n这个方法要定义在最外层\n~~~ Java\ndef releaseTime() {\n    return new Date().format(\"MMdd\", TimeZone.getTimeZone(\"UTC\"))\n}\n~~~\n\n最后生成的apk名字\n\n### Mac下Android Studio中获取SHA1和MD5\n打开Android Studio中的Terminal，也可以直接打开系统的终端\n\n#### 获取debug.keystore的SHA1和MD5\n\n输入: **keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android**\n\n获取其他keystore的，如正式签名文件的，**keytool -list -v -keystore ~/User/你的用户名/debug.keystore -alias androiddebugkey -storepass android -keypass android** 需要把路径和密码改成相应的就可以了\n","slug":"gradle-learning2","published":1,"date":"2016-10-12T16:00:00.000Z","updated":"2017-11-23T07:09:33.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebz80021d6ykyugil0ez","content":"<p>上一篇<a href=\"\">Gradle学习</a>了解了Gradle的基本结构和依赖关系，这篇文章介绍下怎么在Android上使用Gradle生成指定包名的APK</p>\n<h3 id=\"需求场景\"><a href=\"#需求场景\" class=\"headerlink\" title=\"需求场景\"></a>需求场景</h3><p>在我们Android开发基本进入测试阶段后，会根据后台的不同环境，打包出对应不同环境（如SIT、UAT、PRD等）的APK安装包。</p>\n<p>每次去手动修改Java类改变后台环境太麻烦还容易忘记修改。打包成功后，还需要手动将默认的包名app-release.apk改成我们需要的包名，也是非常麻烦，有没有直接指定环境，生成指定文件名的安装包呢？</p>\n<p>方法是有的，就是利用gradle的分渠道打包特性，下面上代码分别解释。</p>\n<blockquote>\n<p>主要在这两个个地方修改：</p>\n<ul>\n<li>buildType（构建类型）</li>\n<li>productFlavors （不同定制的产品）</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"buildType（构建类型）介绍\"><a href=\"#buildType（构建类型）介绍\" class=\"headerlink\" title=\"buildType（构建类型）介绍\"></a>buildType（构建类型）介绍</h4><p>默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。</p>\n<p>可以创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<p>以下是一些可能使用到的属性和默认值：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Property name    </em></th>\n<th style=\"text-align:center\"><em>Default values for debug    </em></th>\n<th style=\"text-align:center\"><em>Default values for release / other</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">debuggable</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jniDebugBuild</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">renderscriptDebugBuild</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">renderscriptOptimLevel</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">applicationIdSuffix</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">versionNameSuffix</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">signingConfig</td>\n<td style=\"text-align:center\">android.signingConfigs.debug</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zipAlign</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">runProguard</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">proguardFile</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">proguardFiles</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n</tr>\n</tbody>\n</table>\n<p>上面介绍摘选自<a href=\"https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/basic_project/build_types.html\" target=\"_blank\" rel=\"external\">Gralde plugin User Guide 中文版</a></p>\n<h4 id=\"Product-flavors（不同定制的产品）介绍\"><a href=\"#Product-flavors（不同定制的产品）介绍\" class=\"headerlink\" title=\"Product flavors（不同定制的产品）介绍\"></a>Product flavors（不同定制的产品）介绍</h4><p>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。</p>\n<p>这个新的设计概念是为了解决不同的版本之间的差异非常小的情况。虽然最项目终生成了多个定制的版本，但是它们本质上都是同一个应用，那么这种做法可能是比使用库项目更好的实现方式。</p>\n<p>Product flavor需要在productFlavors这个DSL容器中声明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\"></div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">        flavor1 &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flavor2 &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里创建了两个flavor，名为flavor1和flavor2。</p>\n<blockquote>\n<p>注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。</p>\n</blockquote>\n<h4 id=\"Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\"><a href=\"#Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\" class=\"headerlink\" title=\"Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\"></a>Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）</h4><p>正如前面章节所提到的，每一个Build Type都会生成一个新的APK。</p>\n<p>Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。</p>\n<p>每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。</p>\n<p>例如，在上面的Flavor声明例子中与默认的debug和release两个Build Type将会生成4个Build Variant：</p>\n<ul>\n<li>Flavor1 - debug</li>\n<li>Flavor1 - release</li>\n<li>Flavor2 - debug</li>\n<li>Flavor2 - release</li>\n</ul>\n<p>项目中如果没有定义flavor同样也会有Build Variant，只是使用的是默认的flavor和配置。default(默认)的flavor/config是没有名字的，所以生成的Build Variant列表看起来就跟Build Type列表一样。</p>\n<h3 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h3><p>我们的需求就要用到<strong>Build Type</strong>和<strong>Product Flavor</strong><br>我在项目中<strong>Build Type</strong>的使用，先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"LEO_DEBUG\"</span>, <span class=\"string\">\"false\"</span></div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">true</span></span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.txt'</div><div class=\"line\">            debuggable <span class=\"keyword\">false</span></div><div class=\"line\">            jniDebuggable <span class=\"keyword\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            buildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"2\"</span></div><div class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"LEO_DEBUG\"</span>, <span class=\"string\">\"true\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>和<strong>Product Flavor</strong>的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">productFlavors&#123;</div><div class=\"line\">\tkaifa&#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tceshi &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"2\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tSIT &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"3\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tUAT &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"4\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tPRD &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"5\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每一个构建过的productFlavors都会在<strong>app-&gt;build-&gt;generated-&gt;source-&gt;buildConfig</strong>目录下创建自己对应的一个flavor目录，如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure2.png\" alt=\"Gradle build structure\"></p>\n<p>而，buildConfigField会在指定的目录，<strong>flavor-&gt;release/debug-&gt;包名</strong>，下生成一个BuildConfig.java文件，我的代码在BuildConfig.java中定义了一个int类型的buildType和boolean类型的LEO_DEBUG。要使用这两个字段只需要:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.LEO_DEBUG)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//用来控制本地Log日志</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (Environment ==BuildConfig.buildType)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//用来控制开发环境</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"gradle中修改apk生成名字的方法\"><a href=\"#gradle中修改apk生成名字的方法\" class=\"headerlink\" title=\"gradle中修改apk生成名字的方法\"></a>gradle中修改apk生成名字的方法</h4><p>这个方法是定义在productFlavors同一层级的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">android.applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">        variant.outputs.each &#123; output -&gt;</div><div class=\"line\">            def outputFile = output.<span class=\"function\">outputFile</span></div><div class=\"line\">            <span class=\"title\">if</span> <span class=\"params\">(outputFile != <span class=\"keyword\">null</span> &amp;&amp; outputFile.name.endsWith(<span class=\"string\">'.apk'</span>)</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//这里修改apk文件名</span></div><div class=\"line\">                def flavorname =variant.productFlavors[<span class=\"number\">0</span>].<span class=\"function\">name</span></div><div class=\"line\">                <span class=\"title\">if</span> <span class=\"params\">(flavorname.equals(<span class=\"string\">'kaifa'</span>)</span>)</div><div class=\"line\">                    flavorname = <span class=\"string\">'debug'</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flavorname.equals(<span class=\"string\">'ceshi'</span>))</div><div class=\"line\">                    flavorname = <span class=\"string\">'release'</span></div><div class=\"line\"></div><div class=\"line\">                def fileName = <span class=\"string\">\"app-$&#123;flavorname&#125;-$&#123;defaultConfig.versionName&#125;-$&#123;releaseTime() &#125;.apk\"</span></div><div class=\"line\">                output.outputFile = <span class=\"keyword\">new</span> File(outputFile.parent, fileName)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个方法要定义在最外层<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">def <span class=\"title\">releaseTime</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date().format(<span class=\"string\">\"MMdd\"</span>, TimeZone.getTimeZone(<span class=\"string\">\"UTC\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后生成的apk名字</p>\n<h3 id=\"Mac下Android-Studio中获取SHA1和MD5\"><a href=\"#Mac下Android-Studio中获取SHA1和MD5\" class=\"headerlink\" title=\"Mac下Android Studio中获取SHA1和MD5\"></a>Mac下Android Studio中获取SHA1和MD5</h3><p>打开Android Studio中的Terminal，也可以直接打开系统的终端</p>\n<h4 id=\"获取debug-keystore的SHA1和MD5\"><a href=\"#获取debug-keystore的SHA1和MD5\" class=\"headerlink\" title=\"获取debug.keystore的SHA1和MD5\"></a>获取debug.keystore的SHA1和MD5</h4><p>输入: <strong>keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android</strong></p>\n<p>获取其他keystore的，如正式签名文件的，<strong>keytool -list -v -keystore ~/User/你的用户名/debug.keystore -alias androiddebugkey -storepass android -keypass android</strong> 需要把路径和密码改成相应的就可以了</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/10/13/gradle-learning2/\">http://agehua.github.io/2016/10/13/gradle-learning2/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.465,"time":147899.99999999997,"words":493},"excerpt":"<p>上一篇<a href=\"\">Gradle学习</a>了解了Gradle的基本结构和依赖关系，这篇文章介绍下怎么在Android上使用Gradle生成指定包名的APK</p>\n<h3 id=\"需求场景\"><a href=\"#需求场景\" class=\"headerlink\" title=\"需求场景\"></a>需求场景</h3><p>在我们Android开发基本进入测试阶段后，会根据后台的不同环境，打包出对应不同环境（如SIT、UAT、PRD等）的APK安装包。</p>\n<p>每次去手动修改Java类改变后台环境太麻烦还容易忘记修改。打包成功后，还需要手动将默认的包名app-release.apk改成我们需要的包名，也是非常麻烦，有没有直接指定环境，生成指定文件名的安装包呢？</p>\n<p>方法是有的，就是利用gradle的分渠道打包特性，下面上代码分别解释。</p>\n<blockquote>\n<p>主要在这两个个地方修改：</p>\n<ul>\n<li>buildType（构建类型）</li>\n<li>productFlavors （不同定制的产品）</li>\n</ul>\n</blockquote>","more":"<h4 id=\"buildType（构建类型）介绍\"><a href=\"#buildType（构建类型）介绍\" class=\"headerlink\" title=\"buildType（构建类型）介绍\"></a>buildType（构建类型）介绍</h4><p>默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。</p>\n<p>可以创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<p>以下是一些可能使用到的属性和默认值：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>Property name    </em></th>\n<th style=\"text-align:center\"><em>Default values for debug    </em></th>\n<th style=\"text-align:center\"><em>Default values for release / other</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">debuggable</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jniDebugBuild</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">renderscriptDebugBuild</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">renderscriptOptimLevel</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">applicationIdSuffix</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">versionNameSuffix</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">signingConfig</td>\n<td style=\"text-align:center\">android.signingConfigs.debug</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zipAlign</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">runProguard</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">proguardFile</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">proguardFiles</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n<td style=\"text-align:center\">N/A (set only)</td>\n</tr>\n</tbody>\n</table>\n<p>上面介绍摘选自<a href=\"https://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/basic_project/build_types.html\">Gralde plugin User Guide 中文版</a></p>\n<h4 id=\"Product-flavors（不同定制的产品）介绍\"><a href=\"#Product-flavors（不同定制的产品）介绍\" class=\"headerlink\" title=\"Product flavors（不同定制的产品）介绍\"></a>Product flavors（不同定制的产品）介绍</h4><p>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。</p>\n<p>这个新的设计概念是为了解决不同的版本之间的差异非常小的情况。虽然最项目终生成了多个定制的版本，但是它们本质上都是同一个应用，那么这种做法可能是比使用库项目更好的实现方式。</p>\n<p>Product flavor需要在productFlavors这个DSL容器中声明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\"></div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">        flavor1 &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        flavor2 &#123;</div><div class=\"line\">            ...</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里创建了两个flavor，名为flavor1和flavor2。</p>\n<blockquote>\n<p>注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。</p>\n</blockquote>\n<h4 id=\"Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\"><a href=\"#Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\" class=\"headerlink\" title=\"Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\"></a>Build Type + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）</h4><p>正如前面章节所提到的，每一个Build Type都会生成一个新的APK。</p>\n<p>Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。</p>\n<p>每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。</p>\n<p>例如，在上面的Flavor声明例子中与默认的debug和release两个Build Type将会生成4个Build Variant：</p>\n<ul>\n<li>Flavor1 - debug</li>\n<li>Flavor1 - release</li>\n<li>Flavor2 - debug</li>\n<li>Flavor2 - release</li>\n</ul>\n<p>项目中如果没有定义flavor同样也会有Build Variant，只是使用的是默认的flavor和配置。default(默认)的flavor/config是没有名字的，所以生成的Build Variant列表看起来就跟Build Type列表一样。</p>\n<h3 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h3><p>我们的需求就要用到<strong>Build Type</strong>和<strong>Product Flavor</strong><br>我在项目中<strong>Build Type</strong>的使用，先看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"LEO_DEBUG\"</span>, <span class=\"string\">\"false\"</span></div><div class=\"line\">            <span class=\"function\">minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            proguardFiles <span class=\"title\">getDefaultProguardFile</span><span class=\"params\">(<span class=\"string\">'proguard-android.txt'</span>)</span>, 'proguard-rules.txt'</div><div class=\"line\">            debuggable <span class=\"keyword\">false</span></div><div class=\"line\">            jniDebuggable <span class=\"keyword\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug </span>&#123;</div><div class=\"line\">            buildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"2\"</span></div><div class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"LEO_DEBUG\"</span>, <span class=\"string\">\"true\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>和<strong>Product Flavor</strong>的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">productFlavors&#123;</div><div class=\"line\">\tkaifa&#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"1\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tceshi &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"2\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tSIT &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"3\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tUAT &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"4\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tPRD &#123;</div><div class=\"line\">\t\tbuildConfigField <span class=\"string\">\"int\"</span>, <span class=\"string\">\"buildType\"</span>, <span class=\"string\">\"5\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每一个构建过的productFlavors都会在<strong>app-&gt;build-&gt;generated-&gt;source-&gt;buildConfig</strong>目录下创建自己对应的一个flavor目录，如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/gradle_structure2.png\" alt=\"Gradle build structure\"></p>\n<p>而，buildConfigField会在指定的目录，<strong>flavor-&gt;release/debug-&gt;包名</strong>，下生成一个BuildConfig.java文件，我的代码在BuildConfig.java中定义了一个int类型的buildType和boolean类型的LEO_DEBUG。要使用这两个字段只需要:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.LEO_DEBUG)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//用来控制本地Log日志</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (Environment ==BuildConfig.buildType)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//用来控制开发环境</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"gradle中修改apk生成名字的方法\"><a href=\"#gradle中修改apk生成名字的方法\" class=\"headerlink\" title=\"gradle中修改apk生成名字的方法\"></a>gradle中修改apk生成名字的方法</h4><p>这个方法是定义在productFlavors同一层级的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">android.applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">        variant.outputs.each &#123; output -&gt;</div><div class=\"line\">            def outputFile = output.<span class=\"function\">outputFile</div><div class=\"line\">            <span class=\"title\">if</span> <span class=\"params\">(outputFile != <span class=\"keyword\">null</span> &amp;&amp; outputFile.name.endsWith(<span class=\"string\">'.apk'</span>)</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//这里修改apk文件名</span></div><div class=\"line\">                def flavorname =variant.productFlavors[<span class=\"number\">0</span>].<span class=\"function\">name</div><div class=\"line\">                <span class=\"title\">if</span> <span class=\"params\">(flavorname.equals(<span class=\"string\">'kaifa'</span>)</span>)</div><div class=\"line\">                    flavorname </span>= <span class=\"string\">'debug'</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flavorname.equals(<span class=\"string\">'ceshi'</span>))</div><div class=\"line\">                    flavorname = <span class=\"string\">'release'</span></div><div class=\"line\"></div><div class=\"line\">                def fileName = <span class=\"string\">\"app-$&#123;flavorname&#125;-$&#123;defaultConfig.versionName&#125;-$&#123;releaseTime() &#125;.apk\"</span></div><div class=\"line\">                output.outputFile = <span class=\"keyword\">new</span> File(outputFile.parent, fileName)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个方法要定义在最外层<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">def <span class=\"title\">releaseTime</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date().format(<span class=\"string\">\"MMdd\"</span>, TimeZone.getTimeZone(<span class=\"string\">\"UTC\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后生成的apk名字</p>\n<h3 id=\"Mac下Android-Studio中获取SHA1和MD5\"><a href=\"#Mac下Android-Studio中获取SHA1和MD5\" class=\"headerlink\" title=\"Mac下Android Studio中获取SHA1和MD5\"></a>Mac下Android Studio中获取SHA1和MD5</h3><p>打开Android Studio中的Terminal，也可以直接打开系统的终端</p>\n<h4 id=\"获取debug-keystore的SHA1和MD5\"><a href=\"#获取debug-keystore的SHA1和MD5\" class=\"headerlink\" title=\"获取debug.keystore的SHA1和MD5\"></a>获取debug.keystore的SHA1和MD5</h4><p>输入: <strong>keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android</strong></p>\n<p>获取其他keystore的，如正式签名文件的，<strong>keytool -list -v -keystore ~/User/你的用户名/debug.keystore -alias androiddebugkey -storepass android -keypass android</strong> 需要把路径和密码改成相应的就可以了</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/10/13/gradle-learning2/\">http://agehua.github.io/2016/10/13/gradle-learning2/</a></p>"},{"layout":"post","title":"JAVA泛型通配符T，E，K，V区别，T以及Class<T>，Class<?>的区别","keywords":"Java, 泛型","banner":"http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Apples.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Apples.jpg","toc":true,"_content":"> 文章转载自[《JAVA泛型通配符T，E，K，V区别，T以及Class<T>，Class<?>的区别》](http://www.jianshu.com/p/95f349258afb)\n\n### 1. 先解释下泛型概念\n\n泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。Java语言引入泛型的好处是安全简单。\n\n在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n<!--more-->\n\n泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率。\n\n      以上内容摘自百度百科\n\n举个栗子:\nBox类定义为一个泛型类\n~~~ Java\npublic class Box<T> {\n    private T object;\n\n    public void set(T object) { this.object = object; }\n    public T get() { return object; }\n}\n~~~\n创建一个Box对象，不带泛型参数，发现获取对象的时候需要强制转换\n\n~~~ Java\nBox box2 = new Box();\nbox2.set(new Apple());\nApple apple = (Apple) box2.get();\n~~~\n创建一个Box对象，带泛型参数，获取对象的时候就不需要强制转换\n\n~~~ Java\nBox<Apple> box = new Box<Apple>();\nbox.set(new Apple());\nApple apple = box.get();\n~~~\n总结下泛型的好处就是：\n\n**省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上**\n\n但是我们定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符T，E，K，V等等，这些通配符又都是什么意思呢？继续往下看\n\n### 2. 下来说说泛型通配符T，E，K，V区别\n\n这些全都属于java泛型的通配符，刚开始我看到这么多通配符，一下晕了，这几个其实没什么区别，只不过是一个约定好的代码，也就是说\n使用大写字母A,B,C,D......X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已\n\n- ？ 表示不确定的java类型\n- T (type) 表示具体的一个java类型\n- K V (key value) 分别代表java键值中的Key Value\n- E (element) 代表Element\n\n举个栗子：\n~~~ Java\npublic class Test<T> {    \n  public List<T> list = new ArrayList<T>();   \n  public static void main(String[] args) {\n        Test<String> test = new Test<String>();\n        test.list.add(\"hello\");\n        System.out.println(test.list);\n}}\n~~~\n和\n~~~ Java\npublic class Test<A> {    \n  public List<A> list = new ArrayList<A>();   \n  public static void main(String[] args) {\n        Test<String> test = new Test<String>();\n        test.list.add(\"hello\");\n        System.out.println(test.list);\n}}\n~~~\n将T换成了A，在执行效果上是没有任何区别的，只不过我们约定好了T代表type，所以还是按照约定规范来比较好，增加了代码的可读性。\n\n如果要定义多个泛型参数，比如说两个泛型参数，很典型的一个栗子是Map的key,value泛型，我们也可以定义一个这样的\n~~~ Java\npublic interface Mymap<K, V> {\n    public K getKey();\n    public V getValue();\n}\n\npublic class MymapImpl<K, V> implements Mymap<K, V> {\n\n    private K key;\n    private V value;\n\n    public MymapImpl(K key, V value) {\n    this.key = key;\n    this.value = value;\n    }\n\n    public K getKey()    { return key; }\n    public V getValue() { return value; }\n}\n~~~\n下来就可以传入任意类型，创建实例了，不用转化类型\n~~~ Java\nMymap<String, Integer> mp1= new MymapImpl<String, Integer>(\"Even\", 8);\nMymap<String, String>  mp2= new MymapImpl<String, String>(\"hello\", \"world\");\nMymap<Integer, Integer> mp3= new MymapImpl<Integer, Integer>(888, 888);\n~~~\n如果要定义超过两个，三个或三个以上的泛型参数可以使用T1, T2, ..., Tn，像这样子\n~~~ Java\npublic class Test<T1,T2,T3> {\n   public void print(T1 t1,T2 t2,T3 t3){\n        System.out.println(t1.getClass());\n        System.out.println(t2.getClass());\n        System.out.println(t3.getClass());\n    }\n}\n~~~\n### 3. 下来说说T，Class<T>，Class<?>区别\n\nT是一种具体的类，例如String,List,Map......等等，这些都是属于具体的类，这个比较好理解\n\nClass是什么呢，Class也是一个类，但Class是存放上面String,List,Map......类信息的一个类，有点抽象，我们一步一步来看 。\n\n如何获取到Class类呢，有三种方式：\n\n- 1. 调用Object类的getClass()方法来得到Class对象，这也是最常见的产生Class对象的方法。例如：\n~~~ Java\nList list = null;\nClass clazz = list.getClass();\n~~~\n\n- 2. 使用Class类的中静态forName()方法获得与字符串对应的Class对象。例如：\n\n~~~ Java\nClass clazz = Class.forName(\"com.lyang.demo.fanxing.People\");\n~~~\n\n- 3.获取Class类型对象的第三个方法非常简单。如果T是一个Java类型，那么T.class就代表了匹配的类对象。\n~~~ Java\nClass clazz = List.class;\n~~~\n> 那么问题来了？Class类是创建出来了，但是Class<T>和Class<?>适用于什么时候呢？？？\n\n使用Class<T>和Class<?>多发生在**反射**场景下，先看看如果我们不使用泛型，反射创建一个类是什么样的。\n~~~ Java\nPeople people = (People) Class.forName(\"com.lyang.demo.fanxing.People\").newInstance();\n~~~\n看到了么，需要强转，如果反射的类型不是People类，就会报java.lang.ClassCastException错误。\n\n使用Class<T>泛型后，不用强转了\n~~~ Java\npublic class Test {\n    public static <T> T createInstance(Class<T> clazz) throws IllegalAccessException, InstantiationException {\n        return clazz.newInstance();\n    }\n\n    public static void main(String[] args)  throws IllegalAccessException, InstantiationException  {\n            Fruit fruit= createInstance(Fruit .class);\n            People people= createInstance(People.class);\n    }\n}\n~~~\n> 那Class<T>和Class<?>有什么区别呢？\n\n- Class<T>在实例化的时候，T要替换成具体类\n- Class<?>它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况\n\n例如可以声明一个\n~~~ Java\npublic Class<?> clazz;\n~~~\n但是你不能声明一个\n~~~ Java\npublic Class<T> clazz;\n~~~\n因为T需要指定类型\n\n所以当不知道定声明什么类型的Class的时候可以定义一个Class<?>,Class<?>可以用于参数类型定义，方法返回值定义等。\n","source":"_posts/2016-11-21-Difference_between-T-E-K-V.md","raw":"---\nlayout: post\ntitle:  JAVA泛型通配符T，E，K，V区别，T以及Class<T>，Class<?>的区别\ncategory: accumulation\ntags:\n  - Java\n  - genericity\nkeywords: Java, 泛型\nbanner: http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Apples.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Apples.jpg\ntoc: true\n---\n> 文章转载自[《JAVA泛型通配符T，E，K，V区别，T以及Class<T>，Class<?>的区别》](http://www.jianshu.com/p/95f349258afb)\n\n### 1. 先解释下泛型概念\n\n泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。Java语言引入泛型的好处是安全简单。\n\n在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\n\n<!--more-->\n\n泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率。\n\n      以上内容摘自百度百科\n\n举个栗子:\nBox类定义为一个泛型类\n~~~ Java\npublic class Box<T> {\n    private T object;\n\n    public void set(T object) { this.object = object; }\n    public T get() { return object; }\n}\n~~~\n创建一个Box对象，不带泛型参数，发现获取对象的时候需要强制转换\n\n~~~ Java\nBox box2 = new Box();\nbox2.set(new Apple());\nApple apple = (Apple) box2.get();\n~~~\n创建一个Box对象，带泛型参数，获取对象的时候就不需要强制转换\n\n~~~ Java\nBox<Apple> box = new Box<Apple>();\nbox.set(new Apple());\nApple apple = box.get();\n~~~\n总结下泛型的好处就是：\n\n**省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上**\n\n但是我们定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符T，E，K，V等等，这些通配符又都是什么意思呢？继续往下看\n\n### 2. 下来说说泛型通配符T，E，K，V区别\n\n这些全都属于java泛型的通配符，刚开始我看到这么多通配符，一下晕了，这几个其实没什么区别，只不过是一个约定好的代码，也就是说\n使用大写字母A,B,C,D......X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已\n\n- ？ 表示不确定的java类型\n- T (type) 表示具体的一个java类型\n- K V (key value) 分别代表java键值中的Key Value\n- E (element) 代表Element\n\n举个栗子：\n~~~ Java\npublic class Test<T> {    \n  public List<T> list = new ArrayList<T>();   \n  public static void main(String[] args) {\n        Test<String> test = new Test<String>();\n        test.list.add(\"hello\");\n        System.out.println(test.list);\n}}\n~~~\n和\n~~~ Java\npublic class Test<A> {    \n  public List<A> list = new ArrayList<A>();   \n  public static void main(String[] args) {\n        Test<String> test = new Test<String>();\n        test.list.add(\"hello\");\n        System.out.println(test.list);\n}}\n~~~\n将T换成了A，在执行效果上是没有任何区别的，只不过我们约定好了T代表type，所以还是按照约定规范来比较好，增加了代码的可读性。\n\n如果要定义多个泛型参数，比如说两个泛型参数，很典型的一个栗子是Map的key,value泛型，我们也可以定义一个这样的\n~~~ Java\npublic interface Mymap<K, V> {\n    public K getKey();\n    public V getValue();\n}\n\npublic class MymapImpl<K, V> implements Mymap<K, V> {\n\n    private K key;\n    private V value;\n\n    public MymapImpl(K key, V value) {\n    this.key = key;\n    this.value = value;\n    }\n\n    public K getKey()    { return key; }\n    public V getValue() { return value; }\n}\n~~~\n下来就可以传入任意类型，创建实例了，不用转化类型\n~~~ Java\nMymap<String, Integer> mp1= new MymapImpl<String, Integer>(\"Even\", 8);\nMymap<String, String>  mp2= new MymapImpl<String, String>(\"hello\", \"world\");\nMymap<Integer, Integer> mp3= new MymapImpl<Integer, Integer>(888, 888);\n~~~\n如果要定义超过两个，三个或三个以上的泛型参数可以使用T1, T2, ..., Tn，像这样子\n~~~ Java\npublic class Test<T1,T2,T3> {\n   public void print(T1 t1,T2 t2,T3 t3){\n        System.out.println(t1.getClass());\n        System.out.println(t2.getClass());\n        System.out.println(t3.getClass());\n    }\n}\n~~~\n### 3. 下来说说T，Class<T>，Class<?>区别\n\nT是一种具体的类，例如String,List,Map......等等，这些都是属于具体的类，这个比较好理解\n\nClass是什么呢，Class也是一个类，但Class是存放上面String,List,Map......类信息的一个类，有点抽象，我们一步一步来看 。\n\n如何获取到Class类呢，有三种方式：\n\n- 1. 调用Object类的getClass()方法来得到Class对象，这也是最常见的产生Class对象的方法。例如：\n~~~ Java\nList list = null;\nClass clazz = list.getClass();\n~~~\n\n- 2. 使用Class类的中静态forName()方法获得与字符串对应的Class对象。例如：\n\n~~~ Java\nClass clazz = Class.forName(\"com.lyang.demo.fanxing.People\");\n~~~\n\n- 3.获取Class类型对象的第三个方法非常简单。如果T是一个Java类型，那么T.class就代表了匹配的类对象。\n~~~ Java\nClass clazz = List.class;\n~~~\n> 那么问题来了？Class类是创建出来了，但是Class<T>和Class<?>适用于什么时候呢？？？\n\n使用Class<T>和Class<?>多发生在**反射**场景下，先看看如果我们不使用泛型，反射创建一个类是什么样的。\n~~~ Java\nPeople people = (People) Class.forName(\"com.lyang.demo.fanxing.People\").newInstance();\n~~~\n看到了么，需要强转，如果反射的类型不是People类，就会报java.lang.ClassCastException错误。\n\n使用Class<T>泛型后，不用强转了\n~~~ Java\npublic class Test {\n    public static <T> T createInstance(Class<T> clazz) throws IllegalAccessException, InstantiationException {\n        return clazz.newInstance();\n    }\n\n    public static void main(String[] args)  throws IllegalAccessException, InstantiationException  {\n            Fruit fruit= createInstance(Fruit .class);\n            People people= createInstance(People.class);\n    }\n}\n~~~\n> 那Class<T>和Class<?>有什么区别呢？\n\n- Class<T>在实例化的时候，T要替换成具体类\n- Class<?>它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况\n\n例如可以声明一个\n~~~ Java\npublic Class<?> clazz;\n~~~\n但是你不能声明一个\n~~~ Java\npublic Class<T> clazz;\n~~~\n因为T需要指定类型\n\n所以当不知道定声明什么类型的Class的时候可以定义一个Class<?>,Class<?>可以用于参数类型定义，方法返回值定义等。\n","slug":"Difference_between-T-E-K-V","published":1,"date":"2016-11-20T16:00:00.000Z","updated":"2017-11-23T07:11:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebzc0025d6ykvhddwd65","content":"<blockquote>\n<p>文章转载自<a href=\"http://www.jianshu.com/p/95f349258afb\" target=\"_blank\" rel=\"external\">《JAVA泛型通配符T，E，K，V区别，T以及Class<t>，Class&lt;?&gt;的区别》</t></a></p>\n</blockquote>\n<h3 id=\"1-先解释下泛型概念\"><a href=\"#1-先解释下泛型概念\" class=\"headerlink\" title=\"1. 先解释下泛型概念\"></a>1. 先解释下泛型概念</h3><p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。Java语言引入泛型的好处是安全简单。</p>\n<p>在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。</p>\n<a id=\"more\"></a>\n<p>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率。</p>\n<pre><code>以上内容摘自百度百科\n</code></pre><p>举个栗子:<br>Box类定义为一个泛型类<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> T object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T object)</span> </span>&#123; <span class=\"keyword\">this</span>.object = object; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> object; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个Box对象，不带泛型参数，发现获取对象的时候需要强制转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Box box2 = <span class=\"keyword\">new</span> Box();</div><div class=\"line\">box2.set(<span class=\"keyword\">new</span> Apple());</div><div class=\"line\">Apple apple = (Apple) box2.get();</div></pre></td></tr></table></figure>\n<p>创建一个Box对象，带泛型参数，获取对象的时候就不需要强制转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Box&lt;Apple&gt; box = <span class=\"keyword\">new</span> Box&lt;Apple&gt;();</div><div class=\"line\">box.set(<span class=\"keyword\">new</span> Apple());</div><div class=\"line\">Apple apple = box.get();</div></pre></td></tr></table></figure>\n<p>总结下泛型的好处就是：</p>\n<p><strong>省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上</strong></p>\n<p>但是我们定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符T，E，K，V等等，这些通配符又都是什么意思呢？继续往下看</p>\n<h3 id=\"2-下来说说泛型通配符T，E，K，V区别\"><a href=\"#2-下来说说泛型通配符T，E，K，V区别\" class=\"headerlink\" title=\"2. 下来说说泛型通配符T，E，K，V区别\"></a>2. 下来说说泛型通配符T，E，K，V区别</h3><p>这些全都属于java泛型的通配符，刚开始我看到这么多通配符，一下晕了，这几个其实没什么区别，只不过是一个约定好的代码，也就是说<br>使用大写字母A,B,C,D……X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已</p>\n<ul>\n<li>？ 表示不确定的java类型</li>\n<li>T (type) 表示具体的一个java类型</li>\n<li>K V (key value) 分别代表java键值中的Key Value</li>\n<li>E (element) 代表Element</li>\n</ul>\n<p>举个栗子：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </div><div class=\"line\">  <span class=\"keyword\">public</span> List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Test&lt;String&gt; test = <span class=\"keyword\">new</span> Test&lt;String&gt;();</div><div class=\"line\">        test.list.add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        System.out.println(test.list);</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>和<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;    </div><div class=\"line\">  <span class=\"keyword\">public</span> List&lt;A&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;A&gt;();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Test&lt;String&gt; test = <span class=\"keyword\">new</span> Test&lt;String&gt;();</div><div class=\"line\">        test.list.add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        System.out.println(test.list);</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>将T换成了A，在执行效果上是没有任何区别的，只不过我们约定好了T代表type，所以还是按照约定规范来比较好，增加了代码的可读性。</p>\n<p>如果要定义多个泛型参数，比如说两个泛型参数，很典型的一个栗子是Map的key,value泛型，我们也可以定义一个这样的<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mymap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MymapImpl</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Mymap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> K key;</div><div class=\"line\">    <span class=\"keyword\">private</span> V value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MymapImpl</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>    </span>&#123; <span class=\"keyword\">return</span> key; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下来就可以传入任意类型，创建实例了，不用转化类型<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Mymap&lt;String, Integer&gt; mp1= <span class=\"keyword\">new</span> MymapImpl&lt;String, Integer&gt;(<span class=\"string\">\"Even\"</span>, <span class=\"number\">8</span>);</div><div class=\"line\">Mymap&lt;String, String&gt;  mp2= <span class=\"keyword\">new</span> MymapImpl&lt;String, String&gt;(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>);</div><div class=\"line\">Mymap&lt;Integer, Integer&gt; mp3= <span class=\"keyword\">new</span> MymapImpl&lt;Integer, Integer&gt;(<span class=\"number\">888</span>, <span class=\"number\">888</span>);</div></pre></td></tr></table></figure></p>\n<p>如果要定义超过两个，三个或三个以上的泛型参数可以使用T1, T2, …, Tn，像这样子<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">T1</span>,<span class=\"title\">T2</span>,<span class=\"title\">T3</span>&gt; </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(T1 t1,T2 t2,T3 t3)</span></span>&#123;</div><div class=\"line\">        System.out.println(t1.getClass());</div><div class=\"line\">        System.out.println(t2.getClass());</div><div class=\"line\">        System.out.println(t3.getClass());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-下来说说T，Class，Class-lt-gt-区别\"><a href=\"#3-下来说说T，Class，Class-lt-gt-区别\" class=\"headerlink\" title=\"3. 下来说说T，Class，Class&lt;?&gt;区别\"></a>3. 下来说说T，Class<t>，Class&lt;?&gt;区别</t></h3><p>T是一种具体的类，例如String,List,Map……等等，这些都是属于具体的类，这个比较好理解</p>\n<p>Class是什么呢，Class也是一个类，但Class是存放上面String,List,Map……类信息的一个类，有点抽象，我们一步一步来看 。</p>\n<p>如何获取到Class类呢，有三种方式：</p>\n<ul>\n<li><ol>\n<li>调用Object类的getClass()方法来得到Class对象，这也是最常见的产生Class对象的方法。例如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">List list = <span class=\"keyword\">null</span>;</div><div class=\"line\">Class clazz = list.getClass();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol>\n<li>使用Class类的中静态forName()方法获得与字符串对应的Class对象。例如：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Class clazz = Class.forName(<span class=\"string\">\"com.lyang.demo.fanxing.People\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>3.获取Class类型对象的第三个方法非常简单。如果T是一个Java类型，那么T.class就代表了匹配的类对象。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Class clazz = List.class;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>那么问题来了？Class类是创建出来了，但是Class<t>和Class&lt;?&gt;适用于什么时候呢？？？</t></p>\n</blockquote>\n<p>使用Class<t>和Class&lt;?&gt;多发生在<strong>反射</strong>场景下，先看看如果我们不使用泛型，反射创建一个类是什么样的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">People people = (People) Class.forName(<span class=\"string\">\"com.lyang.demo.fanxing.People\"</span>).newInstance();</div></pre></td></tr></table></figure></t></p>\n<p>看到了么，需要强转，如果反射的类型不是People类，就会报java.lang.ClassCastException错误。</p>\n<p>使用Class<t>泛型后，不用强转了<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">createInstance</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException  </span>&#123;</div><div class=\"line\">            Fruit fruit= createInstance(Fruit .class);</div><div class=\"line\">            People people= createInstance(People.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></t></p>\n<blockquote>\n<p>那Class<t>和Class&lt;?&gt;有什么区别呢？</t></p>\n</blockquote>\n<ul>\n<li>Class<t>在实例化的时候，T要替换成具体类</t></li>\n<li>Class&lt;?&gt;它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况</li>\n</ul>\n<p>例如可以声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; clazz;</div></pre></td></tr></table></figure></p>\n<p>但是你不能声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;T&gt; clazz;</div></pre></td></tr></table></figure></p>\n<p>因为T需要指定类型</p>\n<p>所以当不知道定声明什么类型的Class的时候可以定义一个Class&lt;?&gt;,Class&lt;?&gt;可以用于参数类型定义，方法返回值定义等。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/11/21/Difference_between-T-E-K-V/\">http://agehua.github.io/2016/11/21/Difference_between-T-E-K-V/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.945,"time":176700,"words":589},"excerpt":"<blockquote>\n<p>文章转载自<a href=\"http://www.jianshu.com/p/95f349258afb\">《JAVA泛型通配符T，E，K，V区别，T以及Class<T>，Class&lt;?&gt;的区别》</a></p>\n</blockquote>\n<h3 id=\"1-先解释下泛型概念\"><a href=\"#1-先解释下泛型概念\" class=\"headerlink\" title=\"1. 先解释下泛型概念\"></a>1. 先解释下泛型概念</h3><p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。Java语言引入泛型的好处是安全简单。</p>\n<p>在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。</p>","more":"<p>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率。</p>\n<pre><code>以上内容摘自百度百科\n</code></pre><p>举个栗子:<br>Box类定义为一个泛型类<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> T object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T object)</span> </span>&#123; <span class=\"keyword\">this</span>.object = object; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> object; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建一个Box对象，不带泛型参数，发现获取对象的时候需要强制转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Box box2 = <span class=\"keyword\">new</span> Box();</div><div class=\"line\">box2.set(<span class=\"keyword\">new</span> Apple());</div><div class=\"line\">Apple apple = (Apple) box2.get();</div></pre></td></tr></table></figure>\n<p>创建一个Box对象，带泛型参数，获取对象的时候就不需要强制转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Box&lt;Apple&gt; box = <span class=\"keyword\">new</span> Box&lt;Apple&gt;();</div><div class=\"line\">box.set(<span class=\"keyword\">new</span> Apple());</div><div class=\"line\">Apple apple = box.get();</div></pre></td></tr></table></figure>\n<p>总结下泛型的好处就是：</p>\n<p><strong>省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上</strong></p>\n<p>但是我们定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符T，E，K，V等等，这些通配符又都是什么意思呢？继续往下看</p>\n<h3 id=\"2-下来说说泛型通配符T，E，K，V区别\"><a href=\"#2-下来说说泛型通配符T，E，K，V区别\" class=\"headerlink\" title=\"2. 下来说说泛型通配符T，E，K，V区别\"></a>2. 下来说说泛型通配符T，E，K，V区别</h3><p>这些全都属于java泛型的通配符，刚开始我看到这么多通配符，一下晕了，这几个其实没什么区别，只不过是一个约定好的代码，也就是说<br>使用大写字母A,B,C,D……X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已</p>\n<ul>\n<li>？ 表示不确定的java类型</li>\n<li>T (type) 表示具体的一个java类型</li>\n<li>K V (key value) 分别代表java键值中的Key Value</li>\n<li>E (element) 代表Element</li>\n</ul>\n<p>举个栗子：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;    </div><div class=\"line\">  <span class=\"keyword\">public</span> List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Test&lt;String&gt; test = <span class=\"keyword\">new</span> Test&lt;String&gt;();</div><div class=\"line\">        test.list.add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        System.out.println(test.list);</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>和<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;    </div><div class=\"line\">  <span class=\"keyword\">public</span> List&lt;A&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;A&gt;();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Test&lt;String&gt; test = <span class=\"keyword\">new</span> Test&lt;String&gt;();</div><div class=\"line\">        test.list.add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        System.out.println(test.list);</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>将T换成了A，在执行效果上是没有任何区别的，只不过我们约定好了T代表type，所以还是按照约定规范来比较好，增加了代码的可读性。</p>\n<p>如果要定义多个泛型参数，比如说两个泛型参数，很典型的一个栗子是Map的key,value泛型，我们也可以定义一个这样的<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mymap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MymapImpl</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Mymap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> K key;</div><div class=\"line\">    <span class=\"keyword\">private</span> V value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MymapImpl</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>    </span>&#123; <span class=\"keyword\">return</span> key; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下来就可以传入任意类型，创建实例了，不用转化类型<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Mymap&lt;String, Integer&gt; mp1= <span class=\"keyword\">new</span> MymapImpl&lt;String, Integer&gt;(<span class=\"string\">\"Even\"</span>, <span class=\"number\">8</span>);</div><div class=\"line\">Mymap&lt;String, String&gt;  mp2= <span class=\"keyword\">new</span> MymapImpl&lt;String, String&gt;(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>);</div><div class=\"line\">Mymap&lt;Integer, Integer&gt; mp3= <span class=\"keyword\">new</span> MymapImpl&lt;Integer, Integer&gt;(<span class=\"number\">888</span>, <span class=\"number\">888</span>);</div></pre></td></tr></table></figure></p>\n<p>如果要定义超过两个，三个或三个以上的泛型参数可以使用T1, T2, …, Tn，像这样子<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span>&lt;<span class=\"title\">T1</span>,<span class=\"title\">T2</span>,<span class=\"title\">T3</span>&gt; </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(T1 t1,T2 t2,T3 t3)</span></span>&#123;</div><div class=\"line\">        System.out.println(t1.getClass());</div><div class=\"line\">        System.out.println(t2.getClass());</div><div class=\"line\">        System.out.println(t3.getClass());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-下来说说T，Class，Class-lt-gt-区别\"><a href=\"#3-下来说说T，Class，Class-lt-gt-区别\" class=\"headerlink\" title=\"3. 下来说说T，Class，Class&lt;?&gt;区别\"></a>3. 下来说说T，Class<T>，Class&lt;?&gt;区别</h3><p>T是一种具体的类，例如String,List,Map……等等，这些都是属于具体的类，这个比较好理解</p>\n<p>Class是什么呢，Class也是一个类，但Class是存放上面String,List,Map……类信息的一个类，有点抽象，我们一步一步来看 。</p>\n<p>如何获取到Class类呢，有三种方式：</p>\n<ul>\n<li><ol>\n<li>调用Object类的getClass()方法来得到Class对象，这也是最常见的产生Class对象的方法。例如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">List list = <span class=\"keyword\">null</span>;</div><div class=\"line\">Class clazz = list.getClass();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol>\n<li>使用Class类的中静态forName()方法获得与字符串对应的Class对象。例如：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Class clazz = Class.forName(<span class=\"string\">\"com.lyang.demo.fanxing.People\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>3.获取Class类型对象的第三个方法非常简单。如果T是一个Java类型，那么T.class就代表了匹配的类对象。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Class clazz = List.class;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>那么问题来了？Class类是创建出来了，但是Class<T>和Class&lt;?&gt;适用于什么时候呢？？？</p>\n</blockquote>\n<p>使用Class<T>和Class&lt;?&gt;多发生在<strong>反射</strong>场景下，先看看如果我们不使用泛型，反射创建一个类是什么样的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">People people = (People) Class.forName(<span class=\"string\">\"com.lyang.demo.fanxing.People\"</span>).newInstance();</div></pre></td></tr></table></figure></p>\n<p>看到了么，需要强转，如果反射的类型不是People类，就会报java.lang.ClassCastException错误。</p>\n<p>使用Class<T>泛型后，不用强转了<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">createInstance</span><span class=\"params\">(Class&lt;T&gt; clazz)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException  </span>&#123;</div><div class=\"line\">            Fruit fruit= createInstance(Fruit .class);</div><div class=\"line\">            People people= createInstance(People.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>那Class<T>和Class&lt;?&gt;有什么区别呢？</p>\n</blockquote>\n<ul>\n<li>Class<T>在实例化的时候，T要替换成具体类</li>\n<li>Class&lt;?&gt;它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况</li>\n</ul>\n<p>例如可以声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; clazz;</div></pre></td></tr></table></figure></p>\n<p>但是你不能声明一个<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;T&gt; clazz;</div></pre></td></tr></table></figure></p>\n<p>因为T需要指定类型</p>\n<p>所以当不知道定声明什么类型的Class的时候可以定义一个Class&lt;?&gt;,Class&lt;?&gt;可以用于参数类型定义，方法返回值定义等。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/11/21/Difference_between-T-E-K-V/\">http://agehua.github.io/2016/11/21/Difference_between-T-E-K-V/</a></p>"},{"layout":"post","title":"Hexo 模板学习——Hexo 结构","keywords":"Hexo结构","banner":"http://obxk8w81b.bkt.clouddn.com/Boy%20Cutting%20Grass%20with%20a%20Sickle.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Boy%20Cutting%20Grass%20with%20a%20Sickle.jpg","_content":"\n### 起步\nHexo会读取根目录下的_config.yml里面的theme属性, 从而采用对应的主题。而主题都是放在themes/目录下面的，然后你会发现他里面有个landscape的目录，这个就是默认主题啦。\n\n接着，我们查看themes/landscape/目录，以及根据文档docs-themes，我们很容易得出：一个主题其实由4部分组成。\n\n- _config.yml: 主题的配置文件\n- source/: 放我们的CSS文件以及图片\n- layout/: 模板文件\n- scripts: 放JavaScript文件，他们会自动加载\n\n根据文档[docs-templates](https://hexo.io/docs/templates.html)，下面表格中每个页面都有一个可用的模板，可以没有这些模板，但至少要有一个index模板。\n\n<!--more-->\n\n|Template|Page|\tFallback|\n|:--------:|:-------:|:--------:|\n|index\t|Home page | |\n|post\t|Posts\t|index|\n|page|\tPages |index|\n|archive\t|Archives|\tindex|\n|category\t|Category archives\t|archive|\n|tag\t|Tag archives|\tarchive|\n\n\n\n每次当我们在浏览器访问时，Hexo都会去解析sources目录下对应的模板文件。不同的URL对应不同的文件，所以才有了不同的页面。那么，我们怎么知道哪个URL对应哪个页面呢？(下面我们以EJS为例)\n\n无论URL是什么，Hexo先读取layout.ejs，然后里面的body变量会替换成上面表格里的模板：(Fallback的意思是如果访问/archives时，我们的archives.ejs不存在的话，就会返回index.ejs)\n\n\n### 布局\n#### 编写布局文件(layout.ejs)\n\n模板文件在layout文件夹下，文件名对应Hexo中的模板名，有index,post,page,archive,category,tag几种，对于普通的header + content + footer的页面结构，header和footer往往是可以复用的，因此我们可以使用layout.ejs进行布局，动态的内容使用body变量去动态渲染，所以我的layout.ejs大概长这样:\n\n~~~ JavaScript\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"/>\n    <title><%= config.title %></title>\n    <%- css('css/style') %>\n</head>\n<body>\n    <%- partial('_partial/header') %>\n    <div class=\"main\">\n        <%- body %>\n    </div>\n    <%- partial('_partial/footer') %>\n    <%- js('js/index.js') %>\n</body>\n</html>\n~~~\n\npartial,js和css是Hexo提供的辅助函数，后面再说。\n\n#### 其他模板文件\n\n每一个模板文件对应的是一种布局，当你使用hexo new <title>的时候，其实忽略了一个参数，完整的命令是hexo new [layout] <title>，这个layout就决定了文章使用何种方式布局，比如创建一个自己简介的About页面，hexo new page \"about\"其实就是使用了page布局。每种布局对应到我们的模板文件上就是index.ejs(首页),post.ejs(文章),archive.ejs(归档),tag.ejs(标签归档),page.ejs(分页)。\n\n##### index.ejs\n\n首页一般是一些博文的摘要和一个分页器，通过Hexo的page变量拿到页面的数据渲染即可，这里我们不直接在index.ejs中写HTML结构，新建一个_partial/article.ejs，将文章数据传给子模板渲染，然后再额外传入一个参数{index: true}，对后面的post.ejs和page.ejs加以区分，让子模板能正确渲染。最后，index.ejs大致是这样的:\n\n~~~ JavaScript\n//index.ejs\n<% page.posts.each(function(post, index){ %>\n    <%- partial('_partial/article', {index: true, post: post}) %>\n<% }) %>\n<div class=\"pagination\">\n    <%- paginator({ total: Math.ceil(site.posts.length / config.per_page)}) %>\n</div>\n~~~\n##### post.ejs\n\n文章模板和首页差不多，只是对应的是一篇具体的文章，所以就把文章传入，再额外传入{index: false}告诉子模板不要按首页的方式去渲染就好了。就一行代码(因为都在子模板里 XD\n\n~~~ JavaScript\n//post.ejs\n<%- partial('_partial/article', {index: false, post: page}) %>\n~~~\n##### page.ejs\n\n我个人对Page模板其实是有点懵逼的，在我自己的实践中是添加about(hexo new page \"about\")页面后，访问/about会走分页布局，实际上这个页面对应的内容是/source/about里的index.md，也相当于对文章的渲染，因此我把Page模板也写成了和文章模板一样:\n\n~~~ JavaScript\n//page.ejs\n<%- partial('_partial/article', {index: false, post: page}) %>\n_partial/article.ejs\n~~~\n前面一共有三处共用了article模板，另外page和post的一样的，所以实际上只有两种情况:主页(index: true)和非主页(index: false)。对应的_partial/article.ejs里只要判断这个值就可以正确渲染了，基本结构如下：\n\n~~~ JavaScript\n//_partial/article.ejs\n<% if(index){ %>\n    //index logic...\n<% }else{ %>\n    //post or page logic...\n<% } %>\n~~~\n\n##### tag.ejs\n\n标签归档页内容很少，直接用Hexo的辅助函数list_tags生成一个标签的列表就ok了:\n\n~~~ JavaScript\n//tag.ejs\n<%- list_tags() %>\n~~~\n归档页模板和首页差不多，归档页只需要展示文章标题和最后的分页器就好:\n\n~~~ JavaScript\n//archive.ejs\n<div class=\"archive\">\n  <% var lastyear; %>\n  <% page.posts.each(function(post){ %>\n    <% var year = post.date.year() %>\n    <% if(lastyear !== year){ %>\n      <h4 class=\"year\"><%= year %></h4>\n      <% lastyear = year %>\n    <% } %>\n    <div class=\"archive_item\">\n      <a class=\"title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      <span class=\"date\"><%= post.date.format('YYYY-MM-DD') %></span>\n    </div>\n  <% }) %>\n  <div class=\"pagination\">\n    <%- paginator({ total: Math.ceil(site.posts.length / config.per_page)}) %>\n  </div>\n</div>\n~~~\n至此，模板文件就写好了，对于category模板就放弃了，感觉比较鸡肋。。。\n\n### 变量\n其实在模板文件中我们已经看到了page.post,site.posts.length,config.per_page等等，页面的内容就是根据这些变量获取的，由Hexo提供，拿来直接用，Hexo提供了很多变量，但不是都很常用，一般就用到以下变量:\n\n- site: 对应整个网站的变量，一般会用到site.posts.length制作分页器\n\n- page: 对应当前页面的信息，例如我在index.ejs中使用page.posts获取了当前页面的所有文章而不是使用site.posts。\n\n- config: 博客的配置信息，博客根目录下的_config.yml。\n\n- theme: 主题的配置信息，对于主题根目录下的_config.yml。\n\n#### 辅助函数(Helper)\n制作一个分页器，我们需要知道文章的总数和每页展示的文章数，然后通过循环生成每个link标签，还要根据当前页面判断link标签的active状态，但是在Hexo中这些都不用我们自己来做了!Hexo提供了**paginator**这一辅助函数帮助我们生成分页器，只需要将文章总数site.posts.length和每页文章数config.per_page传入就可以生成了。\n\n##### 其他的Helper:\n\n- **list_tags([options])**: 快速生成标签列表\n\n- **js(path/to/js), css(path/to/css)** 用来载入静态资源，path可以是字符串或数组(载入多个资源)，默认会去source文件夹下去找。\n\n- **partial(path/to/partial)** 引用字模板，默认会去layout文件夹下找。\n\n### 样式\n知道了Hexo的渲染方式，我们就可以使用HTML标签+CSS样式个性化我们的主题了，推荐大家使用CSS预处理语言的一种来写样式，这样就可以通过预处理语言自身的特点让样式更灵活。\n\n### 其他\n#### 添加对多说和Disqus的支持\n\n评论是很常用的功能，不如就直接在我们的主题里支持了，然后通过配置变量决定是否开启，评论区跟在文章内容下面，对于这种三方的代码块，最好也以partial的方式提取出来，方便移除或是替换。\n\n~~~ JavaScript\n//_partial/article.ejs\n<section class='post-content'>\n    <%- post.content %>\n</section>\n//评论部分，post.comments判断是否开启评论，config.duoshuo_shortname\n和config.disqus_shortname来判断启用那种评论插件，这里优先判断了多说\n<% if(post.comments){ %>\n    <section id=\"comments\">\n    <% if (config.duoshuo_shortname){ %>\n            <%- partial('_partial/duoshuo') %>\n        <% }else if(config.disqus_shortname){ %>\n            <%- partial('_partial/disqus') %>\n        <% } %>\n    </section>\n<% } %>\n~~~\n再将多说和Disqus提供的js脚本代码放在**_partial/duoshuo.ejs和_partial/disqus.ejs**下就ok了~\n\n#### 使用highlight.js提供代码高亮\n\nhighlight.js提供了多种语言的支持和多种皮肤，用法也很简单，载入文件后调用初始化方法，一切都帮你搞定，对于使用那种皮肤，喜好因人而异，我们干脆在主题的配置文件中做成配置项让用户自己选择:\n\n~~~ JavaScript\n//showonne/_config.yml\n\n...other configs\n\n# highlight.js\nhighlight_theme: zenburn\n~~~\n对应的layout.ejs中:\n\n~~~ JavaScript\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/<%= theme.highlight_theme %>.min.css\">\n~~~\n样式文件通过CDN引入，因为不同皮肤对应不同的文件名，所以十分灵活。\n\n### 最后\n当初是对应着landscape照葫芦画瓢写的，最近回头来发现一些不合理的地方，所以就又改了改，也对应着写了这么一篇总结，接下来准备再把样式划分一下，对于颜色这类样式通过变量的方式提取出来，也变得可配置，能让主题更灵活一些。\n\n### 参考资源\n","source":"_posts/2016-12-06-hexo-learning1.md","raw":"---\nlayout: post\ntitle:  Hexo 模板学习——Hexo 结构\ncategory: accumulation\ntags:\n  - Hexo\n  - Hexo structure\nkeywords: Hexo结构\nbanner: http://obxk8w81b.bkt.clouddn.com/Boy%20Cutting%20Grass%20with%20a%20Sickle.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Boy%20Cutting%20Grass%20with%20a%20Sickle.jpg\n---\n\n### 起步\nHexo会读取根目录下的_config.yml里面的theme属性, 从而采用对应的主题。而主题都是放在themes/目录下面的，然后你会发现他里面有个landscape的目录，这个就是默认主题啦。\n\n接着，我们查看themes/landscape/目录，以及根据文档docs-themes，我们很容易得出：一个主题其实由4部分组成。\n\n- _config.yml: 主题的配置文件\n- source/: 放我们的CSS文件以及图片\n- layout/: 模板文件\n- scripts: 放JavaScript文件，他们会自动加载\n\n根据文档[docs-templates](https://hexo.io/docs/templates.html)，下面表格中每个页面都有一个可用的模板，可以没有这些模板，但至少要有一个index模板。\n\n<!--more-->\n\n|Template|Page|\tFallback|\n|:--------:|:-------:|:--------:|\n|index\t|Home page | |\n|post\t|Posts\t|index|\n|page|\tPages |index|\n|archive\t|Archives|\tindex|\n|category\t|Category archives\t|archive|\n|tag\t|Tag archives|\tarchive|\n\n\n\n每次当我们在浏览器访问时，Hexo都会去解析sources目录下对应的模板文件。不同的URL对应不同的文件，所以才有了不同的页面。那么，我们怎么知道哪个URL对应哪个页面呢？(下面我们以EJS为例)\n\n无论URL是什么，Hexo先读取layout.ejs，然后里面的body变量会替换成上面表格里的模板：(Fallback的意思是如果访问/archives时，我们的archives.ejs不存在的话，就会返回index.ejs)\n\n\n### 布局\n#### 编写布局文件(layout.ejs)\n\n模板文件在layout文件夹下，文件名对应Hexo中的模板名，有index,post,page,archive,category,tag几种，对于普通的header + content + footer的页面结构，header和footer往往是可以复用的，因此我们可以使用layout.ejs进行布局，动态的内容使用body变量去动态渲染，所以我的layout.ejs大概长这样:\n\n~~~ JavaScript\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"/>\n    <title><%= config.title %></title>\n    <%- css('css/style') %>\n</head>\n<body>\n    <%- partial('_partial/header') %>\n    <div class=\"main\">\n        <%- body %>\n    </div>\n    <%- partial('_partial/footer') %>\n    <%- js('js/index.js') %>\n</body>\n</html>\n~~~\n\npartial,js和css是Hexo提供的辅助函数，后面再说。\n\n#### 其他模板文件\n\n每一个模板文件对应的是一种布局，当你使用hexo new <title>的时候，其实忽略了一个参数，完整的命令是hexo new [layout] <title>，这个layout就决定了文章使用何种方式布局，比如创建一个自己简介的About页面，hexo new page \"about\"其实就是使用了page布局。每种布局对应到我们的模板文件上就是index.ejs(首页),post.ejs(文章),archive.ejs(归档),tag.ejs(标签归档),page.ejs(分页)。\n\n##### index.ejs\n\n首页一般是一些博文的摘要和一个分页器，通过Hexo的page变量拿到页面的数据渲染即可，这里我们不直接在index.ejs中写HTML结构，新建一个_partial/article.ejs，将文章数据传给子模板渲染，然后再额外传入一个参数{index: true}，对后面的post.ejs和page.ejs加以区分，让子模板能正确渲染。最后，index.ejs大致是这样的:\n\n~~~ JavaScript\n//index.ejs\n<% page.posts.each(function(post, index){ %>\n    <%- partial('_partial/article', {index: true, post: post}) %>\n<% }) %>\n<div class=\"pagination\">\n    <%- paginator({ total: Math.ceil(site.posts.length / config.per_page)}) %>\n</div>\n~~~\n##### post.ejs\n\n文章模板和首页差不多，只是对应的是一篇具体的文章，所以就把文章传入，再额外传入{index: false}告诉子模板不要按首页的方式去渲染就好了。就一行代码(因为都在子模板里 XD\n\n~~~ JavaScript\n//post.ejs\n<%- partial('_partial/article', {index: false, post: page}) %>\n~~~\n##### page.ejs\n\n我个人对Page模板其实是有点懵逼的，在我自己的实践中是添加about(hexo new page \"about\")页面后，访问/about会走分页布局，实际上这个页面对应的内容是/source/about里的index.md，也相当于对文章的渲染，因此我把Page模板也写成了和文章模板一样:\n\n~~~ JavaScript\n//page.ejs\n<%- partial('_partial/article', {index: false, post: page}) %>\n_partial/article.ejs\n~~~\n前面一共有三处共用了article模板，另外page和post的一样的，所以实际上只有两种情况:主页(index: true)和非主页(index: false)。对应的_partial/article.ejs里只要判断这个值就可以正确渲染了，基本结构如下：\n\n~~~ JavaScript\n//_partial/article.ejs\n<% if(index){ %>\n    //index logic...\n<% }else{ %>\n    //post or page logic...\n<% } %>\n~~~\n\n##### tag.ejs\n\n标签归档页内容很少，直接用Hexo的辅助函数list_tags生成一个标签的列表就ok了:\n\n~~~ JavaScript\n//tag.ejs\n<%- list_tags() %>\n~~~\n归档页模板和首页差不多，归档页只需要展示文章标题和最后的分页器就好:\n\n~~~ JavaScript\n//archive.ejs\n<div class=\"archive\">\n  <% var lastyear; %>\n  <% page.posts.each(function(post){ %>\n    <% var year = post.date.year() %>\n    <% if(lastyear !== year){ %>\n      <h4 class=\"year\"><%= year %></h4>\n      <% lastyear = year %>\n    <% } %>\n    <div class=\"archive_item\">\n      <a class=\"title\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n      <span class=\"date\"><%= post.date.format('YYYY-MM-DD') %></span>\n    </div>\n  <% }) %>\n  <div class=\"pagination\">\n    <%- paginator({ total: Math.ceil(site.posts.length / config.per_page)}) %>\n  </div>\n</div>\n~~~\n至此，模板文件就写好了，对于category模板就放弃了，感觉比较鸡肋。。。\n\n### 变量\n其实在模板文件中我们已经看到了page.post,site.posts.length,config.per_page等等，页面的内容就是根据这些变量获取的，由Hexo提供，拿来直接用，Hexo提供了很多变量，但不是都很常用，一般就用到以下变量:\n\n- site: 对应整个网站的变量，一般会用到site.posts.length制作分页器\n\n- page: 对应当前页面的信息，例如我在index.ejs中使用page.posts获取了当前页面的所有文章而不是使用site.posts。\n\n- config: 博客的配置信息，博客根目录下的_config.yml。\n\n- theme: 主题的配置信息，对于主题根目录下的_config.yml。\n\n#### 辅助函数(Helper)\n制作一个分页器，我们需要知道文章的总数和每页展示的文章数，然后通过循环生成每个link标签，还要根据当前页面判断link标签的active状态，但是在Hexo中这些都不用我们自己来做了!Hexo提供了**paginator**这一辅助函数帮助我们生成分页器，只需要将文章总数site.posts.length和每页文章数config.per_page传入就可以生成了。\n\n##### 其他的Helper:\n\n- **list_tags([options])**: 快速生成标签列表\n\n- **js(path/to/js), css(path/to/css)** 用来载入静态资源，path可以是字符串或数组(载入多个资源)，默认会去source文件夹下去找。\n\n- **partial(path/to/partial)** 引用字模板，默认会去layout文件夹下找。\n\n### 样式\n知道了Hexo的渲染方式，我们就可以使用HTML标签+CSS样式个性化我们的主题了，推荐大家使用CSS预处理语言的一种来写样式，这样就可以通过预处理语言自身的特点让样式更灵活。\n\n### 其他\n#### 添加对多说和Disqus的支持\n\n评论是很常用的功能，不如就直接在我们的主题里支持了，然后通过配置变量决定是否开启，评论区跟在文章内容下面，对于这种三方的代码块，最好也以partial的方式提取出来，方便移除或是替换。\n\n~~~ JavaScript\n//_partial/article.ejs\n<section class='post-content'>\n    <%- post.content %>\n</section>\n//评论部分，post.comments判断是否开启评论，config.duoshuo_shortname\n和config.disqus_shortname来判断启用那种评论插件，这里优先判断了多说\n<% if(post.comments){ %>\n    <section id=\"comments\">\n    <% if (config.duoshuo_shortname){ %>\n            <%- partial('_partial/duoshuo') %>\n        <% }else if(config.disqus_shortname){ %>\n            <%- partial('_partial/disqus') %>\n        <% } %>\n    </section>\n<% } %>\n~~~\n再将多说和Disqus提供的js脚本代码放在**_partial/duoshuo.ejs和_partial/disqus.ejs**下就ok了~\n\n#### 使用highlight.js提供代码高亮\n\nhighlight.js提供了多种语言的支持和多种皮肤，用法也很简单，载入文件后调用初始化方法，一切都帮你搞定，对于使用那种皮肤，喜好因人而异，我们干脆在主题的配置文件中做成配置项让用户自己选择:\n\n~~~ JavaScript\n//showonne/_config.yml\n\n...other configs\n\n# highlight.js\nhighlight_theme: zenburn\n~~~\n对应的layout.ejs中:\n\n~~~ JavaScript\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/<%= theme.highlight_theme %>.min.css\">\n~~~\n样式文件通过CDN引入，因为不同皮肤对应不同的文件名，所以十分灵活。\n\n### 最后\n当初是对应着landscape照葫芦画瓢写的，最近回头来发现一些不合理的地方，所以就又改了改，也对应着写了这么一篇总结，接下来准备再把样式划分一下，对于颜色这类样式通过变量的方式提取出来，也变得可配置，能让主题更灵活一些。\n\n### 参考资源\n","slug":"hexo-learning1","published":1,"date":"2016-12-05T16:00:00.000Z","updated":"2017-11-23T07:11:47.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebzh0028d6ykai5f5jkl","content":"<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><p>Hexo会读取根目录下的_config.yml里面的theme属性, 从而采用对应的主题。而主题都是放在themes/目录下面的，然后你会发现他里面有个landscape的目录，这个就是默认主题啦。</p>\n<p>接着，我们查看themes/landscape/目录，以及根据文档docs-themes，我们很容易得出：一个主题其实由4部分组成。</p>\n<ul>\n<li>_config.yml: 主题的配置文件</li>\n<li>source/: 放我们的CSS文件以及图片</li>\n<li>layout/: 模板文件</li>\n<li>scripts: 放JavaScript文件，他们会自动加载</li>\n</ul>\n<p>根据文档<a href=\"https://hexo.io/docs/templates.html\" target=\"_blank\" rel=\"external\">docs-templates</a>，下面表格中每个页面都有一个可用的模板，可以没有这些模板，但至少要有一个index模板。</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Template</th>\n<th style=\"text-align:center\">Page</th>\n<th style=\"text-align:center\">Fallback</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">Home page</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">post</td>\n<td style=\"text-align:center\">Posts</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">page</td>\n<td style=\"text-align:center\">Pages</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">archive</td>\n<td style=\"text-align:center\">Archives</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">category</td>\n<td style=\"text-align:center\">Category archives</td>\n<td style=\"text-align:center\">archive</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tag</td>\n<td style=\"text-align:center\">Tag archives</td>\n<td style=\"text-align:center\">archive</td>\n</tr>\n</tbody>\n</table>\n<p>每次当我们在浏览器访问时，Hexo都会去解析sources目录下对应的模板文件。不同的URL对应不同的文件，所以才有了不同的页面。那么，我们怎么知道哪个URL对应哪个页面呢？(下面我们以EJS为例)</p>\n<p>无论URL是什么，Hexo先读取layout.ejs，然后里面的body变量会替换成上面表格里的模板：(Fallback的意思是如果访问/archives时，我们的archives.ejs不存在的话，就会返回index.ejs)</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><h4 id=\"编写布局文件-layout-ejs\"><a href=\"#编写布局文件-layout-ejs\" class=\"headerlink\" title=\"编写布局文件(layout.ejs)\"></a>编写布局文件(layout.ejs)</h4><p>模板文件在layout文件夹下，文件名对应Hexo中的模板名，有index,post,page,archive,category,tag几种，对于普通的header + content + footer的页面结构，header和footer往往是可以复用的，因此我们可以使用layout.ejs进行布局，动态的内容使用body变量去动态渲染，所以我的layout.ejs大概长这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=\"en\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"/&gt;</div><div class=\"line\">    &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;%- css('css/style') %&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;%- partial('_partial/header') %&gt;</div><div class=\"line\">    &lt;div class=\"main\"&gt;</div><div class=\"line\">        &lt;%- body %&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;%- partial('_partial/footer') %&gt;</div><div class=\"line\">    &lt;%- js('js/index.js') %&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>partial,js和css是Hexo提供的辅助函数，后面再说。</p>\n<h4 id=\"其他模板文件\"><a href=\"#其他模板文件\" class=\"headerlink\" title=\"其他模板文件\"></a>其他模板文件</h4><p>每一个模板文件对应的是一种布局，当你使用hexo new <title>的时候，其实忽略了一个参数，完整的命令是hexo new [layout] <title>，这个layout就决定了文章使用何种方式布局，比如创建一个自己简介的About页面，hexo new page “about”其实就是使用了page布局。每种布局对应到我们的模板文件上就是index.ejs(首页),post.ejs(文章),archive.ejs(归档),tag.ejs(标签归档),page.ejs(分页)。</title></title></p>\n<h5 id=\"index-ejs\"><a href=\"#index-ejs\" class=\"headerlink\" title=\"index.ejs\"></a>index.ejs</h5><p>首页一般是一些博文的摘要和一个分页器，通过Hexo的page变量拿到页面的数据渲染即可，这里我们不直接在index.ejs中写HTML结构，新建一个_partial/article.ejs，将文章数据传给子模板渲染，然后再额外传入一个参数{index: true}，对后面的post.ejs和page.ejs加以区分，让子模板能正确渲染。最后，index.ejs大致是这样的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.ejs</span></div><div class=\"line\">&lt;% page.posts.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post, index</span>)</span>&#123; %&gt;</div><div class=\"line\">    &lt;%- partial('_partial/article', &#123;index: true, post: post&#125;) %&gt;</div><div class=\"line\">&lt;% &#125;) %&gt;</div><div class=\"line\">&lt;div class=\"pagination\"&gt;</div><div class=\"line\">    &lt;%- paginator(&#123; total: Math.ceil(site.posts.length / config.per_page)&#125;) %&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"post-ejs\"><a href=\"#post-ejs\" class=\"headerlink\" title=\"post.ejs\"></a>post.ejs</h5><p>文章模板和首页差不多，只是对应的是一篇具体的文章，所以就把文章传入，再额外传入{index: false}告诉子模板不要按首页的方式去渲染就好了。就一行代码(因为都在子模板里 XD</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//post.ejs</span></div><div class=\"line\">&lt;%- partial(<span class=\"string\">'_partial/article'</span>, &#123;<span class=\"attr\">index</span>: <span class=\"literal\">false</span>, <span class=\"attr\">post</span>: page&#125;) %&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"page-ejs\"><a href=\"#page-ejs\" class=\"headerlink\" title=\"page.ejs\"></a>page.ejs</h5><p>我个人对Page模板其实是有点懵逼的，在我自己的实践中是添加about(hexo new page “about”)页面后，访问/about会走分页布局，实际上这个页面对应的内容是/source/about里的index.md，也相当于对文章的渲染，因此我把Page模板也写成了和文章模板一样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//page.ejs</span></div><div class=\"line\">&lt;%- partial(<span class=\"string\">'_partial/article'</span>, &#123;<span class=\"attr\">index</span>: <span class=\"literal\">false</span>, <span class=\"attr\">post</span>: page&#125;) %&gt;</div><div class=\"line\">_partial/article.ejs</div></pre></td></tr></table></figure>\n<p>前面一共有三处共用了article模板，另外page和post的一样的，所以实际上只有两种情况:主页(index: true)和非主页(index: false)。对应的_partial/article.ejs里只要判断这个值就可以正确渲染了，基本结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_partial/article.ejs</span></div><div class=\"line\">&lt;% <span class=\"keyword\">if</span>(index)&#123; %&gt;</div><div class=\"line\">    <span class=\"comment\">//index logic...</span></div><div class=\"line\">&lt;% &#125;<span class=\"keyword\">else</span>&#123; %&gt;</div><div class=\"line\">    <span class=\"comment\">//post or page logic...</span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"tag-ejs\"><a href=\"#tag-ejs\" class=\"headerlink\" title=\"tag.ejs\"></a>tag.ejs</h5><p>标签归档页内容很少，直接用Hexo的辅助函数list_tags生成一个标签的列表就ok了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//tag.ejs</span></div><div class=\"line\">&lt;%- list_tags() %&gt;</div></pre></td></tr></table></figure>\n<p>归档页模板和首页差不多，归档页只需要展示文章标题和最后的分页器就好:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//archive.ejs</span></div><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"archive\"</span>&gt;</div><div class=\"line\">  &lt;% var lastyear; %&gt;</div><div class=\"line\">  &lt;% page.posts.each(function(post)&#123; %&gt;</div><div class=\"line\">    &lt;% var year = post.date.year() %&gt;</div><div class=\"line\">    &lt;% if(lastyear !== year)&#123; %&gt;</div><div class=\"line\">      &lt;h4 class=\"year\"&gt;&lt;%= year %&gt;&lt;/h4&gt;</div><div class=\"line\">      &lt;% lastyear = year %&gt;</div><div class=\"line\">    &lt;% &#125; %&gt;</div><div class=\"line\">    &lt;div class=\"archive_item\"&gt;</div><div class=\"line\">      &lt;a class=\"title\" href=\"&lt;%- url_for(post.path) %&gt;\"&gt;&lt;%= post.title %&gt;&lt;/a&gt;</div><div class=\"line\">      &lt;span class=\"date\"&gt;&lt;%= post.date.format('YYYY-MM-DD') %&gt;&lt;/span&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;% &#125;) %&gt;</div><div class=\"line\">  &lt;div class=\"pagination\"&gt;</div><div class=\"line\">    &lt;%- paginator(&#123; total: Math.ceil(site.posts.length / config.per_page)&#125;) %&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>至此，模板文件就写好了，对于category模板就放弃了，感觉比较鸡肋。。。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>其实在模板文件中我们已经看到了page.post,site.posts.length,config.per_page等等，页面的内容就是根据这些变量获取的，由Hexo提供，拿来直接用，Hexo提供了很多变量，但不是都很常用，一般就用到以下变量:</p>\n<ul>\n<li><p>site: 对应整个网站的变量，一般会用到site.posts.length制作分页器</p>\n</li>\n<li><p>page: 对应当前页面的信息，例如我在index.ejs中使用page.posts获取了当前页面的所有文章而不是使用site.posts。</p>\n</li>\n<li><p>config: 博客的配置信息，博客根目录下的_config.yml。</p>\n</li>\n<li><p>theme: 主题的配置信息，对于主题根目录下的_config.yml。</p>\n</li>\n</ul>\n<h4 id=\"辅助函数-Helper\"><a href=\"#辅助函数-Helper\" class=\"headerlink\" title=\"辅助函数(Helper)\"></a>辅助函数(Helper)</h4><p>制作一个分页器，我们需要知道文章的总数和每页展示的文章数，然后通过循环生成每个link标签，还要根据当前页面判断link标签的active状态，但是在Hexo中这些都不用我们自己来做了!Hexo提供了<strong>paginator</strong>这一辅助函数帮助我们生成分页器，只需要将文章总数site.posts.length和每页文章数config.per_page传入就可以生成了。</p>\n<h5 id=\"其他的Helper\"><a href=\"#其他的Helper\" class=\"headerlink\" title=\"其他的Helper:\"></a>其他的Helper:</h5><ul>\n<li><p><strong>list_tags([options])</strong>: 快速生成标签列表</p>\n</li>\n<li><p><strong>js(path/to/js), css(path/to/css)</strong> 用来载入静态资源，path可以是字符串或数组(载入多个资源)，默认会去source文件夹下去找。</p>\n</li>\n<li><p><strong>partial(path/to/partial)</strong> 引用字模板，默认会去layout文件夹下找。</p>\n</li>\n</ul>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><p>知道了Hexo的渲染方式，我们就可以使用HTML标签+CSS样式个性化我们的主题了，推荐大家使用CSS预处理语言的一种来写样式，这样就可以通过预处理语言自身的特点让样式更灵活。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"添加对多说和Disqus的支持\"><a href=\"#添加对多说和Disqus的支持\" class=\"headerlink\" title=\"添加对多说和Disqus的支持\"></a>添加对多说和Disqus的支持</h4><p>评论是很常用的功能，不如就直接在我们的主题里支持了，然后通过配置变量决定是否开启，评论区跟在文章内容下面，对于这种三方的代码块，最好也以partial的方式提取出来，方便移除或是替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_partial/article.ejs</span></div><div class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">'post-content'</span>&gt;</div><div class=\"line\">    &lt;%- post.content %&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\"><span class=\"comment\">//评论部分，post.comments判断是否开启评论，config.duoshuo_shortname</span></div><div class=\"line\">和config.disqus_shortname来判断启用那种评论插件，这里优先判断了多说</div><div class=\"line\">&lt;% <span class=\"keyword\">if</span>(post.comments)&#123; %&gt;</div><div class=\"line\">    &lt;section id=\"comments\"&gt;</div><div class=\"line\">    &lt;% if (config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">            &lt;%- partial('_partial/duoshuo') %&gt;</div><div class=\"line\">        &lt;% &#125;else if(config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">            &lt;%- partial('_partial/disqus') %&gt;</div><div class=\"line\">        &lt;% &#125; %&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>再将多说和Disqus提供的js脚本代码放在<strong>_partial/duoshuo.ejs和_partial/disqus.ejs</strong>下就ok了~</p>\n<h4 id=\"使用highlight-js提供代码高亮\"><a href=\"#使用highlight-js提供代码高亮\" class=\"headerlink\" title=\"使用highlight.js提供代码高亮\"></a>使用highlight.js提供代码高亮</h4><p>highlight.js提供了多种语言的支持和多种皮肤，用法也很简单，载入文件后调用初始化方法，一切都帮你搞定，对于使用那种皮肤，喜好因人而异，我们干脆在主题的配置文件中做成配置项让用户自己选择:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//showonne/_config.yml</div><div class=\"line\"></div><div class=\"line\">...other configs</div><div class=\"line\"></div><div class=\"line\"># highlight.js</div><div class=\"line\">highlight_theme: zenburn</div></pre></td></tr></table></figure>\n<p>对应的layout.ejs中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/&lt;%= theme.highlight_theme %&gt;.min.css\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>样式文件通过CDN引入，因为不同皮肤对应不同的文件名，所以十分灵活。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>当初是对应着landscape照葫芦画瓢写的，最近回头来发现一些不合理的地方，所以就又改了改，也对应着写了这么一篇总结，接下来准备再把样式划分一下，对于颜色这类样式通过变量的方式提取出来，也变得可配置，能让主题更灵活一些。</p>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/06/hexo-learning1/\">http://agehua.github.io/2016/12/06/hexo-learning1/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.365,"time":141900,"words":473},"excerpt":"<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><p>Hexo会读取根目录下的_config.yml里面的theme属性, 从而采用对应的主题。而主题都是放在themes/目录下面的，然后你会发现他里面有个landscape的目录，这个就是默认主题啦。</p>\n<p>接着，我们查看themes/landscape/目录，以及根据文档docs-themes，我们很容易得出：一个主题其实由4部分组成。</p>\n<ul>\n<li>_config.yml: 主题的配置文件</li>\n<li>source/: 放我们的CSS文件以及图片</li>\n<li>layout/: 模板文件</li>\n<li>scripts: 放JavaScript文件，他们会自动加载</li>\n</ul>\n<p>根据文档<a href=\"https://hexo.io/docs/templates.html\">docs-templates</a>，下面表格中每个页面都有一个可用的模板，可以没有这些模板，但至少要有一个index模板。</p>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Template</th>\n<th style=\"text-align:center\">Page</th>\n<th style=\"text-align:center\">Fallback</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">Home page</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">post</td>\n<td style=\"text-align:center\">Posts</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">page</td>\n<td style=\"text-align:center\">Pages</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">archive</td>\n<td style=\"text-align:center\">Archives</td>\n<td style=\"text-align:center\">index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">category</td>\n<td style=\"text-align:center\">Category archives</td>\n<td style=\"text-align:center\">archive</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tag</td>\n<td style=\"text-align:center\">Tag archives</td>\n<td style=\"text-align:center\">archive</td>\n</tr>\n</tbody>\n</table>\n<p>每次当我们在浏览器访问时，Hexo都会去解析sources目录下对应的模板文件。不同的URL对应不同的文件，所以才有了不同的页面。那么，我们怎么知道哪个URL对应哪个页面呢？(下面我们以EJS为例)</p>\n<p>无论URL是什么，Hexo先读取layout.ejs，然后里面的body变量会替换成上面表格里的模板：(Fallback的意思是如果访问/archives时，我们的archives.ejs不存在的话，就会返回index.ejs)</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><h4 id=\"编写布局文件-layout-ejs\"><a href=\"#编写布局文件-layout-ejs\" class=\"headerlink\" title=\"编写布局文件(layout.ejs)\"></a>编写布局文件(layout.ejs)</h4><p>模板文件在layout文件夹下，文件名对应Hexo中的模板名，有index,post,page,archive,category,tag几种，对于普通的header + content + footer的页面结构，header和footer往往是可以复用的，因此我们可以使用layout.ejs进行布局，动态的内容使用body变量去动态渲染，所以我的layout.ejs大概长这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=\"en\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"/&gt;</div><div class=\"line\">    &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;%- css('css/style') %&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;%- partial('_partial/header') %&gt;</div><div class=\"line\">    &lt;div class=\"main\"&gt;</div><div class=\"line\">        &lt;%- body %&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;%- partial('_partial/footer') %&gt;</div><div class=\"line\">    &lt;%- js('js/index.js') %&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>partial,js和css是Hexo提供的辅助函数，后面再说。</p>\n<h4 id=\"其他模板文件\"><a href=\"#其他模板文件\" class=\"headerlink\" title=\"其他模板文件\"></a>其他模板文件</h4><p>每一个模板文件对应的是一种布局，当你使用hexo new <title>的时候，其实忽略了一个参数，完整的命令是hexo new [layout] <title>，这个layout就决定了文章使用何种方式布局，比如创建一个自己简介的About页面，hexo new page “about”其实就是使用了page布局。每种布局对应到我们的模板文件上就是index.ejs(首页),post.ejs(文章),archive.ejs(归档),tag.ejs(标签归档),page.ejs(分页)。</p>\n<h5 id=\"index-ejs\"><a href=\"#index-ejs\" class=\"headerlink\" title=\"index.ejs\"></a>index.ejs</h5><p>首页一般是一些博文的摘要和一个分页器，通过Hexo的page变量拿到页面的数据渲染即可，这里我们不直接在index.ejs中写HTML结构，新建一个_partial/article.ejs，将文章数据传给子模板渲染，然后再额外传入一个参数{index: true}，对后面的post.ejs和page.ejs加以区分，让子模板能正确渲染。最后，index.ejs大致是这样的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.ejs</span></div><div class=\"line\">&lt;% page.posts.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post, index</span>)</span>&#123; %&gt;</div><div class=\"line\">    &lt;%- partial('_partial/article', &#123;index: true, post: post&#125;) %&gt;</div><div class=\"line\">&lt;% &#125;) %&gt;</div><div class=\"line\">&lt;div class=\"pagination\"&gt;</div><div class=\"line\">    &lt;%- paginator(&#123; total: Math.ceil(site.posts.length / config.per_page)&#125;) %&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"post-ejs\"><a href=\"#post-ejs\" class=\"headerlink\" title=\"post.ejs\"></a>post.ejs</h5><p>文章模板和首页差不多，只是对应的是一篇具体的文章，所以就把文章传入，再额外传入{index: false}告诉子模板不要按首页的方式去渲染就好了。就一行代码(因为都在子模板里 XD</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//post.ejs</span></div><div class=\"line\">&lt;%- partial(<span class=\"string\">'_partial/article'</span>, &#123;<span class=\"attr\">index</span>: <span class=\"literal\">false</span>, <span class=\"attr\">post</span>: page&#125;) %&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"page-ejs\"><a href=\"#page-ejs\" class=\"headerlink\" title=\"page.ejs\"></a>page.ejs</h5><p>我个人对Page模板其实是有点懵逼的，在我自己的实践中是添加about(hexo new page “about”)页面后，访问/about会走分页布局，实际上这个页面对应的内容是/source/about里的index.md，也相当于对文章的渲染，因此我把Page模板也写成了和文章模板一样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//page.ejs</span></div><div class=\"line\">&lt;%- partial(<span class=\"string\">'_partial/article'</span>, &#123;<span class=\"attr\">index</span>: <span class=\"literal\">false</span>, <span class=\"attr\">post</span>: page&#125;) %&gt;</div><div class=\"line\">_partial/article.ejs</div></pre></td></tr></table></figure>\n<p>前面一共有三处共用了article模板，另外page和post的一样的，所以实际上只有两种情况:主页(index: true)和非主页(index: false)。对应的_partial/article.ejs里只要判断这个值就可以正确渲染了，基本结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_partial/article.ejs</span></div><div class=\"line\">&lt;% <span class=\"keyword\">if</span>(index)&#123; %&gt;</div><div class=\"line\">    <span class=\"comment\">//index logic...</span></div><div class=\"line\">&lt;% &#125;<span class=\"keyword\">else</span>&#123; %&gt;</div><div class=\"line\">    <span class=\"comment\">//post or page logic...</span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"tag-ejs\"><a href=\"#tag-ejs\" class=\"headerlink\" title=\"tag.ejs\"></a>tag.ejs</h5><p>标签归档页内容很少，直接用Hexo的辅助函数list_tags生成一个标签的列表就ok了:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//tag.ejs</span></div><div class=\"line\">&lt;%- list_tags() %&gt;</div></pre></td></tr></table></figure>\n<p>归档页模板和首页差不多，归档页只需要展示文章标题和最后的分页器就好:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//archive.ejs</span></div><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"archive\"</span>&gt;</div><div class=\"line\">  &lt;% var lastyear; %&gt;</div><div class=\"line\">  &lt;% page.posts.each(function(post)&#123; %&gt;</div><div class=\"line\">    &lt;% var year = post.date.year() %&gt;</div><div class=\"line\">    &lt;% if(lastyear !== year)&#123; %&gt;</div><div class=\"line\">      &lt;h4 class=\"year\"&gt;&lt;%= year %&gt;&lt;/h4&gt;</div><div class=\"line\">      &lt;% lastyear = year %&gt;</div><div class=\"line\">    &lt;% &#125; %&gt;</div><div class=\"line\">    &lt;div class=\"archive_item\"&gt;</div><div class=\"line\">      &lt;a class=\"title\" href=\"&lt;%- url_for(post.path) %&gt;\"&gt;&lt;%= post.title %&gt;&lt;/a&gt;</div><div class=\"line\">      &lt;span class=\"date\"&gt;&lt;%= post.date.format('YYYY-MM-DD') %&gt;&lt;/span&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;% &#125;) %&gt;</div><div class=\"line\">  &lt;div class=\"pagination\"&gt;</div><div class=\"line\">    &lt;%- paginator(&#123; total: Math.ceil(site.posts.length / config.per_page)&#125;) %&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>至此，模板文件就写好了，对于category模板就放弃了，感觉比较鸡肋。。。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>其实在模板文件中我们已经看到了page.post,site.posts.length,config.per_page等等，页面的内容就是根据这些变量获取的，由Hexo提供，拿来直接用，Hexo提供了很多变量，但不是都很常用，一般就用到以下变量:</p>\n<ul>\n<li><p>site: 对应整个网站的变量，一般会用到site.posts.length制作分页器</p>\n</li>\n<li><p>page: 对应当前页面的信息，例如我在index.ejs中使用page.posts获取了当前页面的所有文章而不是使用site.posts。</p>\n</li>\n<li><p>config: 博客的配置信息，博客根目录下的_config.yml。</p>\n</li>\n<li><p>theme: 主题的配置信息，对于主题根目录下的_config.yml。</p>\n</li>\n</ul>\n<h4 id=\"辅助函数-Helper\"><a href=\"#辅助函数-Helper\" class=\"headerlink\" title=\"辅助函数(Helper)\"></a>辅助函数(Helper)</h4><p>制作一个分页器，我们需要知道文章的总数和每页展示的文章数，然后通过循环生成每个link标签，还要根据当前页面判断link标签的active状态，但是在Hexo中这些都不用我们自己来做了!Hexo提供了<strong>paginator</strong>这一辅助函数帮助我们生成分页器，只需要将文章总数site.posts.length和每页文章数config.per_page传入就可以生成了。</p>\n<h5 id=\"其他的Helper\"><a href=\"#其他的Helper\" class=\"headerlink\" title=\"其他的Helper:\"></a>其他的Helper:</h5><ul>\n<li><p><strong>list_tags([options])</strong>: 快速生成标签列表</p>\n</li>\n<li><p><strong>js(path/to/js), css(path/to/css)</strong> 用来载入静态资源，path可以是字符串或数组(载入多个资源)，默认会去source文件夹下去找。</p>\n</li>\n<li><p><strong>partial(path/to/partial)</strong> 引用字模板，默认会去layout文件夹下找。</p>\n</li>\n</ul>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><p>知道了Hexo的渲染方式，我们就可以使用HTML标签+CSS样式个性化我们的主题了，推荐大家使用CSS预处理语言的一种来写样式，这样就可以通过预处理语言自身的特点让样式更灵活。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"添加对多说和Disqus的支持\"><a href=\"#添加对多说和Disqus的支持\" class=\"headerlink\" title=\"添加对多说和Disqus的支持\"></a>添加对多说和Disqus的支持</h4><p>评论是很常用的功能，不如就直接在我们的主题里支持了，然后通过配置变量决定是否开启，评论区跟在文章内容下面，对于这种三方的代码块，最好也以partial的方式提取出来，方便移除或是替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_partial/article.ejs</span></div><div class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">'post-content'</span>&gt;</div><div class=\"line\">    &lt;%- post.content %&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\"><span class=\"comment\">//评论部分，post.comments判断是否开启评论，config.duoshuo_shortname</span></div><div class=\"line\">和config.disqus_shortname来判断启用那种评论插件，这里优先判断了多说</div><div class=\"line\">&lt;% <span class=\"keyword\">if</span>(post.comments)&#123; %&gt;</div><div class=\"line\">    &lt;section id=\"comments\"&gt;</div><div class=\"line\">    &lt;% if (config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">            &lt;%- partial('_partial/duoshuo') %&gt;</div><div class=\"line\">        &lt;% &#125;else if(config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">            &lt;%- partial('_partial/disqus') %&gt;</div><div class=\"line\">        &lt;% &#125; %&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>再将多说和Disqus提供的js脚本代码放在<strong>_partial/duoshuo.ejs和_partial/disqus.ejs</strong>下就ok了~</p>\n<h4 id=\"使用highlight-js提供代码高亮\"><a href=\"#使用highlight-js提供代码高亮\" class=\"headerlink\" title=\"使用highlight.js提供代码高亮\"></a>使用highlight.js提供代码高亮</h4><p>highlight.js提供了多种语言的支持和多种皮肤，用法也很简单，载入文件后调用初始化方法，一切都帮你搞定，对于使用那种皮肤，喜好因人而异，我们干脆在主题的配置文件中做成配置项让用户自己选择:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">//showonne/_config.yml</div><div class=\"line\"></div><div class=\"line\">...other configs</div><div class=\"line\"></div><div class=\"line\"># highlight.js</div><div class=\"line\">highlight_theme: zenburn</div></pre></td></tr></table></figure>\n<p>对应的layout.ejs中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/&lt;%= theme.highlight_theme %&gt;.min.css\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>样式文件通过CDN引入，因为不同皮肤对应不同的文件名，所以十分灵活。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>当初是对应着landscape照葫芦画瓢写的，最近回头来发现一些不合理的地方，所以就又改了改，也对应着写了这么一篇总结，接下来准备再把样式划分一下，对于颜色这类样式通过变量的方式提取出来，也变得可配置，能让主题更灵活一些。</p>\n<h3 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h3><hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/06/hexo-learning1/\">http://agehua.github.io/2016/12/06/hexo-learning1/</a></p>"},{"layout":"post","title":"Hexo 模板学习——EJS介绍","keywords":"EJS介绍","banner":"http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg","toc":true,"_content":"\n### 什么是EJS？\n\nEJS是JavaScript模板库，用来从JSON数据中生成HTML字符串\n\n### EJS的语法和功能：\n#### 1、缓存功能，能够缓存已经解析好的html模版\n\n#### 2、&lt;% code %&gt;用于执行其中javascript代码。\n~~~ javascript\n<% alert('hello world') %>\n~~~\n#### 3、&lt;%= code =%&gt;会对code进行html转义；\n\n<!--more-->\n\n~~~ javascript\n<h1><%=title %></h1>                    注：会把title里面存的值给显示出来在h1中。\n<p><%= 'hello world' %></p>             注：会把hello world显示在h1中。\n<h1><%= '<b>hello world</b>' %></h1>    注：会把hello world变粗，然后显示在h1中。\n~~~ javascript\n#### 4、<%- code %>将不会进行转义；，这一行代码不会执行，像是被注释了一样，然后显示原来的html。也不会影响整个页面的执行。\n\n~~~ javascript\n<h1><%-title %>asd</h1>          最后显示asd，及显示原网页\n<p><%# 'hello world' %>asd</p>   最后显示asd，及显示原网页\n~~~\n#### 5、支持自定义标签，比如'&lt;%'可以使用'{{'，'%&gt;'用'}}'代替；\n\n    ejs 里，默认的闭合标记是 <%  .. %>，我们也可以定义自己的标签。例如：\n\n~~~ javascript\napp.set(\"view options\",{                                                                                  \n   \"open\":\"{{\",                                                                                  \n   \"close\":\"}}\"\n});\n~~~\n#### 6、提供一些辅助函数，用于模版中使用\n\n- 1)、first，返回数组的第一个元素；\n- 2)、last，返回数组的最后一个元素；\n- 3)、capitalize，返回首字母大写的字符串；\n- 4)、downcase，返回字符串的小写；\n- 5)、upcase，返回字符串的大写；\n- 6)、sort，排序（Object.create(obj).sort()？）；\n- 7)、sort_by:'prop'，按照指定的prop属性进行升序排序；\n- 8)、size，返回长度，即length属性，不一定非是数组才行；\n- 9)、plus:n，加上n，将转化为Number进行运算；\n- 10)、minus:n，减去n，将转化为Number进行运算；\n- 11)、times:n，乘以n，将转化为Number进行运算；\n- 12)、divided_by:n，除以n，将转化为Number进行运算；\n- 13)、join:'val'，将数组用'val'最为分隔符，进行合并成一个字符串；\n- 14)、truncate:n，截取前n个字符，超过长度时，将返回一个副本\n- 15)、truncate_words:n，取得字符串中的前n个word，word以空格进行分割；\n- 16)、replace:pattern,substitution，字符串替换，substitution不提供将删除匹配的子串；\n- 17)、prepend:val，如果操作数为数组，则进行合并；为字符串则添加val在前面；\n- 18)、append:val，如果操作数为数组，则进行合并；为字符串则添加val在后面；\n- 19)、map:'prop'，返回对象数组中属性为prop的值组成的数组；\n- 20)、reverse，翻转数组或字符串；\n- 21)、get:'prop'，取得属性为'prop'的值；\n- 22)、json，转化为json格式字符串\n\n**利用&lt;%- include filename %&gt;加载其他页面模版；**\n\n#### ejs我的总结：\n\nejs 写法：\n\n- 1.普通传入并使用变量：\n\n~~~ JavaScript\n<%= title %>\n~~~\n\n- 2.普通for执行js代码（for中间的代码一定可以执行到）：\n\n~~~ JavaScript\n<% for(var i=0; i<headerNavbar.length; i++) {%>\n    <li><a href=\"/reg\"><%= headerNavbar[i].name %></a></li>\n<% } %>\n~~~\n\n- 3.特殊if语句的js代码（if中间的额代码不一定可以执行到）：\n\n~~~ JavaScript\n <% if(active=='index'){%>\nclass=\"active\"\n <% }%>\n~~~\n\n### stylus介绍\n部分内容转载自：[stylus入门使用方法](https://segmentfault.com/a/1190000002712872)\n\nstylus项目地址：http://stylus-lang.com/\n\nStylus 是一个CSS的预处理框架，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似，应该是有很多借鉴，所以近似脚本的方式去写CSS代码。\n\nStylus功能上更为强壮，和js联系更加紧密（EXPRESSIVE, DYNAMIC, ROBUST CSS）\n\n#### Stylus安装\n\n使用node包管理器，全局安装\n~~~ JavaScript\n$ npm install stylus -g\n~~~\n\n#### 生成CSS\n建立一个stylusExample/，再在里面建立 src 目录专门存放 stylus 文件，在里面建立 example.styl 文件。然后在 stylusExample 目录下面执行下面命令\n~~~ JavaScript\n$ stylus --compress src/\n~~~\n\n输出compiled src/example.css ，这个时候表示你生成成功了，带上--compress参数表示你生成压缩的CSS文件。\n~~~ JavaScript\n$ stylus --css css/example.css css/out.styl CSS转换成styl\n$ stylus help box-shadow CSS属性的帮助\n$ stylus --css test.css 输出基本名一致的.styl文件\n~~~\n\n具体语法和应用可以参考: [Stylus中文参考文档](http://www.zhangxinxu.com/jq/stylus/)\n\n### CSS3 column多列布局介绍\nCSS3提供了个新属性columns用于多列布局。在这之前，有些大家习以为常的排版，要用CSS动态实现其实是比较困难的。如竖版报纸\n\nColumns属性最大的问题还是浏览器兼容性问题\n摘选自：[CSS3 column多列布局介绍](http://cdn2.jianshu.io/p/87d1862f88c6)\n\n### 栅格与响应式设计\n栅格样式库一般是这样做的：将页面划分为若干等宽的列（column），然后推荐你通过等宽列来创建响应式的页面区块。\n\n虽然看起来都是这样的思路，但不同的栅格样式库，在做法上却是各有各的点子。下面，本文将介绍几个比较有代表性的栅格样式库，讲述它们的简要原理和用法\n#### Bootstrap中的栅格:\n[Bootstrap](http://getbootstrap.com/)把它的栅格放在CSS这个分类下，并称它为Gird system。默认分为12列。\n\n要理解Bootstrap中的栅格，最好从掌握正确的使用方法开始。这其中有2个要点。\n- 第1个要点是容器（container），行（row）和列（column）之间的层级关系。一个正确的写法示例如下：\n~~~ JavaScript\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6\"></div>\n        <div class=\"col-md-6\"></div>\n    </div>\n</div>\n~~~\n- 第2个要点，是不同的断点类型的意义及其搭配。\n\n  Bootstrap栅格的column对应的类名形如.col-xx-y。y是数字，表示该元素的宽度占据12列中的多少列。而xx只有特定的几个值可供选择，分别是xs、sm、md、lg，它们就是断点类型。\n\n  在Bootstrap栅格的设计中，断点的意义是，当视口（viewport）宽度小于断点时，column将竖直堆叠（display: block的默认表现），而当视口宽度大于或等于断点时，column将水平排列（float的效果）。按照xs、sm、md、lg的顺序，断点像素值依次增大，其中xs表示极小，即认为视口宽度永远不小于xs断点，column将始终水平浮动。\n\n#### Foundation中的栅格\nFoundation栅格叫做Grid，它和Bootstrap栅格的设计十分近似，只是在类名和结构上有所差异。Foundation栅格同样默认12列。\n\n- 行与列\n类比之前Bootstrap栅格的例子，Foundation栅格的一个正确的写法示例如下：\n~~~ JavaScript\n<div class=\"row\">\n    <div class=\"medium-6 columns\"></div>\n    <div class=\"medium-6 columns\"></div>\n</div>\n~~~\nFoundation栅格的行用.row表示，而列由至少两个类名组成，一是.columns或.column（2种写法完全相同，单纯为了支持语法偏好）表明这是列元素，二是.medium-6这种用于表示断点类型和对应宽度。在默认情况下，Foundation栅格的断点类型从小到大依次是small、medium、large，其中small类似Bootstrap栅格的xs，也是指任意屏幕尺寸下都水平排列。\n\nFoundation栅格没有container，只需要row和column，因此显得比Bootstrap栅格更简单一些。其中row定义了最大宽度（可以认为承担了container的部分功能），column定义了0.9375rem的水平内边距。如果要嵌套，仍然是column内续接row，再继续接column。\n\n组合使用多个断点类型，其方法也和Bootstrap栅格相同。需要注意的是，Foundation栅格的断点值是用的em而不是px，对应的，它们转换后的像素值也有别于Bootstrap栅格。\n\n#### Block Grid\n\n作为栅格系统的补充，Foundation还提供了另外一个叫做Block Grid的栅格。不过，它并不是一个超出传统栅格的新东西，而只是一个针对特定栅格应用场景的方法糖。\n\n> 摘选自：[有关css栅格系统的故事](http://acgtofe.com/posts/2015/07/a-story-of-grid)\n","source":"_posts/2016-12-04-hexo-learning0.md","raw":"---\nlayout: post\ntitle:  Hexo 模板学习——EJS介绍\ncategory: accumulation\ntags:\n  - Hexo\n  - EJS\nkeywords: EJS介绍\nbanner: http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Bulb%20Fields.jpg\ntoc: true\n---\n\n### 什么是EJS？\n\nEJS是JavaScript模板库，用来从JSON数据中生成HTML字符串\n\n### EJS的语法和功能：\n#### 1、缓存功能，能够缓存已经解析好的html模版\n\n#### 2、&lt;% code %&gt;用于执行其中javascript代码。\n~~~ javascript\n<% alert('hello world') %>\n~~~\n#### 3、&lt;%= code =%&gt;会对code进行html转义；\n\n<!--more-->\n\n~~~ javascript\n<h1><%=title %></h1>                    注：会把title里面存的值给显示出来在h1中。\n<p><%= 'hello world' %></p>             注：会把hello world显示在h1中。\n<h1><%= '<b>hello world</b>' %></h1>    注：会把hello world变粗，然后显示在h1中。\n~~~ javascript\n#### 4、<%- code %>将不会进行转义；，这一行代码不会执行，像是被注释了一样，然后显示原来的html。也不会影响整个页面的执行。\n\n~~~ javascript\n<h1><%-title %>asd</h1>          最后显示asd，及显示原网页\n<p><%# 'hello world' %>asd</p>   最后显示asd，及显示原网页\n~~~\n#### 5、支持自定义标签，比如'&lt;%'可以使用'{{'，'%&gt;'用'}}'代替；\n\n    ejs 里，默认的闭合标记是 <%  .. %>，我们也可以定义自己的标签。例如：\n\n~~~ javascript\napp.set(\"view options\",{                                                                                  \n   \"open\":\"{{\",                                                                                  \n   \"close\":\"}}\"\n});\n~~~\n#### 6、提供一些辅助函数，用于模版中使用\n\n- 1)、first，返回数组的第一个元素；\n- 2)、last，返回数组的最后一个元素；\n- 3)、capitalize，返回首字母大写的字符串；\n- 4)、downcase，返回字符串的小写；\n- 5)、upcase，返回字符串的大写；\n- 6)、sort，排序（Object.create(obj).sort()？）；\n- 7)、sort_by:'prop'，按照指定的prop属性进行升序排序；\n- 8)、size，返回长度，即length属性，不一定非是数组才行；\n- 9)、plus:n，加上n，将转化为Number进行运算；\n- 10)、minus:n，减去n，将转化为Number进行运算；\n- 11)、times:n，乘以n，将转化为Number进行运算；\n- 12)、divided_by:n，除以n，将转化为Number进行运算；\n- 13)、join:'val'，将数组用'val'最为分隔符，进行合并成一个字符串；\n- 14)、truncate:n，截取前n个字符，超过长度时，将返回一个副本\n- 15)、truncate_words:n，取得字符串中的前n个word，word以空格进行分割；\n- 16)、replace:pattern,substitution，字符串替换，substitution不提供将删除匹配的子串；\n- 17)、prepend:val，如果操作数为数组，则进行合并；为字符串则添加val在前面；\n- 18)、append:val，如果操作数为数组，则进行合并；为字符串则添加val在后面；\n- 19)、map:'prop'，返回对象数组中属性为prop的值组成的数组；\n- 20)、reverse，翻转数组或字符串；\n- 21)、get:'prop'，取得属性为'prop'的值；\n- 22)、json，转化为json格式字符串\n\n**利用&lt;%- include filename %&gt;加载其他页面模版；**\n\n#### ejs我的总结：\n\nejs 写法：\n\n- 1.普通传入并使用变量：\n\n~~~ JavaScript\n<%= title %>\n~~~\n\n- 2.普通for执行js代码（for中间的代码一定可以执行到）：\n\n~~~ JavaScript\n<% for(var i=0; i<headerNavbar.length; i++) {%>\n    <li><a href=\"/reg\"><%= headerNavbar[i].name %></a></li>\n<% } %>\n~~~\n\n- 3.特殊if语句的js代码（if中间的额代码不一定可以执行到）：\n\n~~~ JavaScript\n <% if(active=='index'){%>\nclass=\"active\"\n <% }%>\n~~~\n\n### stylus介绍\n部分内容转载自：[stylus入门使用方法](https://segmentfault.com/a/1190000002712872)\n\nstylus项目地址：http://stylus-lang.com/\n\nStylus 是一个CSS的预处理框架，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似，应该是有很多借鉴，所以近似脚本的方式去写CSS代码。\n\nStylus功能上更为强壮，和js联系更加紧密（EXPRESSIVE, DYNAMIC, ROBUST CSS）\n\n#### Stylus安装\n\n使用node包管理器，全局安装\n~~~ JavaScript\n$ npm install stylus -g\n~~~\n\n#### 生成CSS\n建立一个stylusExample/，再在里面建立 src 目录专门存放 stylus 文件，在里面建立 example.styl 文件。然后在 stylusExample 目录下面执行下面命令\n~~~ JavaScript\n$ stylus --compress src/\n~~~\n\n输出compiled src/example.css ，这个时候表示你生成成功了，带上--compress参数表示你生成压缩的CSS文件。\n~~~ JavaScript\n$ stylus --css css/example.css css/out.styl CSS转换成styl\n$ stylus help box-shadow CSS属性的帮助\n$ stylus --css test.css 输出基本名一致的.styl文件\n~~~\n\n具体语法和应用可以参考: [Stylus中文参考文档](http://www.zhangxinxu.com/jq/stylus/)\n\n### CSS3 column多列布局介绍\nCSS3提供了个新属性columns用于多列布局。在这之前，有些大家习以为常的排版，要用CSS动态实现其实是比较困难的。如竖版报纸\n\nColumns属性最大的问题还是浏览器兼容性问题\n摘选自：[CSS3 column多列布局介绍](http://cdn2.jianshu.io/p/87d1862f88c6)\n\n### 栅格与响应式设计\n栅格样式库一般是这样做的：将页面划分为若干等宽的列（column），然后推荐你通过等宽列来创建响应式的页面区块。\n\n虽然看起来都是这样的思路，但不同的栅格样式库，在做法上却是各有各的点子。下面，本文将介绍几个比较有代表性的栅格样式库，讲述它们的简要原理和用法\n#### Bootstrap中的栅格:\n[Bootstrap](http://getbootstrap.com/)把它的栅格放在CSS这个分类下，并称它为Gird system。默认分为12列。\n\n要理解Bootstrap中的栅格，最好从掌握正确的使用方法开始。这其中有2个要点。\n- 第1个要点是容器（container），行（row）和列（column）之间的层级关系。一个正确的写法示例如下：\n~~~ JavaScript\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6\"></div>\n        <div class=\"col-md-6\"></div>\n    </div>\n</div>\n~~~\n- 第2个要点，是不同的断点类型的意义及其搭配。\n\n  Bootstrap栅格的column对应的类名形如.col-xx-y。y是数字，表示该元素的宽度占据12列中的多少列。而xx只有特定的几个值可供选择，分别是xs、sm、md、lg，它们就是断点类型。\n\n  在Bootstrap栅格的设计中，断点的意义是，当视口（viewport）宽度小于断点时，column将竖直堆叠（display: block的默认表现），而当视口宽度大于或等于断点时，column将水平排列（float的效果）。按照xs、sm、md、lg的顺序，断点像素值依次增大，其中xs表示极小，即认为视口宽度永远不小于xs断点，column将始终水平浮动。\n\n#### Foundation中的栅格\nFoundation栅格叫做Grid，它和Bootstrap栅格的设计十分近似，只是在类名和结构上有所差异。Foundation栅格同样默认12列。\n\n- 行与列\n类比之前Bootstrap栅格的例子，Foundation栅格的一个正确的写法示例如下：\n~~~ JavaScript\n<div class=\"row\">\n    <div class=\"medium-6 columns\"></div>\n    <div class=\"medium-6 columns\"></div>\n</div>\n~~~\nFoundation栅格的行用.row表示，而列由至少两个类名组成，一是.columns或.column（2种写法完全相同，单纯为了支持语法偏好）表明这是列元素，二是.medium-6这种用于表示断点类型和对应宽度。在默认情况下，Foundation栅格的断点类型从小到大依次是small、medium、large，其中small类似Bootstrap栅格的xs，也是指任意屏幕尺寸下都水平排列。\n\nFoundation栅格没有container，只需要row和column，因此显得比Bootstrap栅格更简单一些。其中row定义了最大宽度（可以认为承担了container的部分功能），column定义了0.9375rem的水平内边距。如果要嵌套，仍然是column内续接row，再继续接column。\n\n组合使用多个断点类型，其方法也和Bootstrap栅格相同。需要注意的是，Foundation栅格的断点值是用的em而不是px，对应的，它们转换后的像素值也有别于Bootstrap栅格。\n\n#### Block Grid\n\n作为栅格系统的补充，Foundation还提供了另外一个叫做Block Grid的栅格。不过，它并不是一个超出传统栅格的新东西，而只是一个针对特定栅格应用场景的方法糖。\n\n> 摘选自：[有关css栅格系统的故事](http://acgtofe.com/posts/2015/07/a-story-of-grid)\n","slug":"hexo-learning0","published":1,"date":"2016-12-03T16:00:00.000Z","updated":"2017-11-23T07:11:33.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebzq002cd6ykpfj7p8na","content":"<h3 id=\"什么是EJS？\"><a href=\"#什么是EJS？\" class=\"headerlink\" title=\"什么是EJS？\"></a>什么是EJS？</h3><p>EJS是JavaScript模板库，用来从JSON数据中生成HTML字符串</p>\n<h3 id=\"EJS的语法和功能：\"><a href=\"#EJS的语法和功能：\" class=\"headerlink\" title=\"EJS的语法和功能：\"></a>EJS的语法和功能：</h3><h4 id=\"1、缓存功能，能够缓存已经解析好的html模版\"><a href=\"#1、缓存功能，能够缓存已经解析好的html模版\" class=\"headerlink\" title=\"1、缓存功能，能够缓存已经解析好的html模版\"></a>1、缓存功能，能够缓存已经解析好的html模版</h4><h4 id=\"2、-lt-code-gt-用于执行其中javascript代码。\"><a href=\"#2、-lt-code-gt-用于执行其中javascript代码。\" class=\"headerlink\" title=\"2、&lt;% code %&gt;用于执行其中javascript代码。\"></a>2、&lt;% code %&gt;用于执行其中javascript代码。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% alert(<span class=\"string\">'hello world'</span>) %&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"3、-lt-code-gt-会对code进行html转义；\"><a href=\"#3、-lt-code-gt-会对code进行html转义；\" class=\"headerlink\" title=\"3、&lt;%= code =%&gt;会对code进行html转义；\"></a>3、&lt;%= code =%&gt;会对code进行html转义；</h4><a id=\"more\"></a>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&lt;%=title %&gt;&lt;/h1&gt;                    注：会把title里面存的值给显示出来在h1中。</div><div class=\"line\">&lt;p&gt;&lt;%= 'hello world' %&gt;&lt;/p&gt;             注：会把hello world显示在h1中。</div><div class=\"line\">&lt;h1&gt;&lt;%= '&lt;b&gt;hello world&lt;/b&gt;' %&gt;&lt;/h1&gt;    注：会把hello world变粗，然后显示在h1中。</div><div class=\"line\">~~~ javascript</div><div class=\"line\">#### 4、&lt;%- code %&gt;将不会进行转义；，这一行代码不会执行，像是被注释了一样，然后显示原来的html。也不会影响整个页面的执行。</div><div class=\"line\"></div><div class=\"line\">~~~ javascript</div><div class=\"line\">&lt;h1&gt;&lt;%-title %&gt;asd&lt;/h1&gt;          最后显示asd，及显示原网页</div><div class=\"line\">&lt;p&gt;&lt;%# 'hello world' %&gt;asd&lt;/p&gt;   最后显示asd，及显示原网页</div></pre></td></tr></table></figure>\n<h4 id=\"5、支持自定义标签，比如’-lt-’可以使用’‘代替；\"><a href=\"#5、支持自定义标签，比如’-lt-’可以使用’‘代替；\" class=\"headerlink\" title=\"5、支持自定义标签，比如’&lt;%’可以使用’‘代替；\"></a>5、支持自定义标签，比如’&lt;%’可以使用’NaN‘代替；</h4><pre><code>ejs 里，默认的闭合标记是 &lt;%  .. %&gt;，我们也可以定义自己的标签。例如：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">\"view options\"</span>,&#123;                                                                                  </div><div class=\"line\">   <span class=\"string\">\"open\"</span>:<span class=\"string\">\"&#123;&#123;\"</span>,                                                                                  </div><div class=\"line\">   <span class=\"string\">\"close\"</span>:<span class=\"string\">\"&#125;&#125;\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"6、提供一些辅助函数，用于模版中使用\"><a href=\"#6、提供一些辅助函数，用于模版中使用\" class=\"headerlink\" title=\"6、提供一些辅助函数，用于模版中使用\"></a>6、提供一些辅助函数，用于模版中使用</h4><ul>\n<li>1)、first，返回数组的第一个元素；</li>\n<li>2)、last，返回数组的最后一个元素；</li>\n<li>3)、capitalize，返回首字母大写的字符串；</li>\n<li>4)、downcase，返回字符串的小写；</li>\n<li>5)、upcase，返回字符串的大写；</li>\n<li>6)、sort，排序（Object.create(obj).sort()？）；</li>\n<li>7)、sort_by:’prop’，按照指定的prop属性进行升序排序；</li>\n<li>8)、size，返回长度，即length属性，不一定非是数组才行；</li>\n<li>9)、plus:n，加上n，将转化为Number进行运算；</li>\n<li>10)、minus:n，减去n，将转化为Number进行运算；</li>\n<li>11)、times:n，乘以n，将转化为Number进行运算；</li>\n<li>12)、divided_by:n，除以n，将转化为Number进行运算；</li>\n<li>13)、join:’val’，将数组用’val’最为分隔符，进行合并成一个字符串；</li>\n<li>14)、truncate:n，截取前n个字符，超过长度时，将返回一个副本</li>\n<li>15)、truncate_words:n，取得字符串中的前n个word，word以空格进行分割；</li>\n<li>16)、replace:pattern,substitution，字符串替换，substitution不提供将删除匹配的子串；</li>\n<li>17)、prepend:val，如果操作数为数组，则进行合并；为字符串则添加val在前面；</li>\n<li>18)、append:val，如果操作数为数组，则进行合并；为字符串则添加val在后面；</li>\n<li>19)、map:’prop’，返回对象数组中属性为prop的值组成的数组；</li>\n<li>20)、reverse，翻转数组或字符串；</li>\n<li>21)、get:’prop’，取得属性为’prop’的值；</li>\n<li>22)、json，转化为json格式字符串</li>\n</ul>\n<p><strong>利用&lt;%- include filename %&gt;加载其他页面模版；</strong></p>\n<h4 id=\"ejs我的总结：\"><a href=\"#ejs我的总结：\" class=\"headerlink\" title=\"ejs我的总结：\"></a>ejs我的总结：</h4><p>ejs 写法：</p>\n<ul>\n<li>1.普通传入并使用变量：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;%= title %&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.普通for执行js代码（for中间的代码一定可以执行到）：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;headerNavbar.length; i++) &#123;%&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=\"/reg\"&gt;&lt;%= headerNavbar[i].name %&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>3.特殊if语句的js代码（if中间的额代码不一定可以执行到）：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"> &lt;% <span class=\"keyword\">if</span>(active==<span class=\"string\">'index'</span>)&#123;%&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span></div><div class=\"line\"> &lt;% &#125;%&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"stylus介绍\"><a href=\"#stylus介绍\" class=\"headerlink\" title=\"stylus介绍\"></a>stylus介绍</h3><p>部分内容转载自：<a href=\"https://segmentfault.com/a/1190000002712872\" target=\"_blank\" rel=\"external\">stylus入门使用方法</a></p>\n<p>stylus项目地址：<a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"external\">http://stylus-lang.com/</a></p>\n<p>Stylus 是一个CSS的预处理框架，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似，应该是有很多借鉴，所以近似脚本的方式去写CSS代码。</p>\n<p>Stylus功能上更为强壮，和js联系更加紧密（EXPRESSIVE, DYNAMIC, ROBUST CSS）</p>\n<h4 id=\"Stylus安装\"><a href=\"#Stylus安装\" class=\"headerlink\" title=\"Stylus安装\"></a>Stylus安装</h4><p>使用node包管理器，全局安装<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install stylus -g</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成CSS\"><a href=\"#生成CSS\" class=\"headerlink\" title=\"生成CSS\"></a>生成CSS</h4><p>建立一个stylusExample/，再在里面建立 src 目录专门存放 stylus 文件，在里面建立 example.styl 文件。然后在 stylusExample 目录下面执行下面命令<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ stylus --compress src/</div></pre></td></tr></table></figure></p>\n<p>输出compiled src/example.css ，这个时候表示你生成成功了，带上–compress参数表示你生成压缩的CSS文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ stylus --css css/example.css css/out.styl CSS转换成styl</div><div class=\"line\">$ stylus help box-shadow CSS属性的帮助</div><div class=\"line\">$ stylus --css test.css 输出基本名一致的.styl文件</div></pre></td></tr></table></figure></p>\n<p>具体语法和应用可以参考: <a href=\"http://www.zhangxinxu.com/jq/stylus/\" target=\"_blank\" rel=\"external\">Stylus中文参考文档</a></p>\n<h3 id=\"CSS3-column多列布局介绍\"><a href=\"#CSS3-column多列布局介绍\" class=\"headerlink\" title=\"CSS3 column多列布局介绍\"></a>CSS3 column多列布局介绍</h3><p>CSS3提供了个新属性columns用于多列布局。在这之前，有些大家习以为常的排版，要用CSS动态实现其实是比较困难的。如竖版报纸</p>\n<p>Columns属性最大的问题还是浏览器兼容性问题<br>摘选自：<a href=\"http://cdn2.jianshu.io/p/87d1862f88c6\" target=\"_blank\" rel=\"external\">CSS3 column多列布局介绍</a></p>\n<h3 id=\"栅格与响应式设计\"><a href=\"#栅格与响应式设计\" class=\"headerlink\" title=\"栅格与响应式设计\"></a>栅格与响应式设计</h3><p>栅格样式库一般是这样做的：将页面划分为若干等宽的列（column），然后推荐你通过等宽列来创建响应式的页面区块。</p>\n<p>虽然看起来都是这样的思路，但不同的栅格样式库，在做法上却是各有各的点子。下面，本文将介绍几个比较有代表性的栅格样式库，讲述它们的简要原理和用法</p>\n<h4 id=\"Bootstrap中的栅格\"><a href=\"#Bootstrap中的栅格\" class=\"headerlink\" title=\"Bootstrap中的栅格:\"></a>Bootstrap中的栅格:</h4><p><a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a>把它的栅格放在CSS这个分类下，并称它为Gird system。默认分为12列。</p>\n<p>要理解Bootstrap中的栅格，最好从掌握正确的使用方法开始。这其中有2个要点。</p>\n<ul>\n<li><p>第1个要点是容器（container），行（row）和列（column）之间的层级关系。一个正确的写法示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">    &lt;div class=\"row\"&gt;</div><div class=\"line\">        &lt;div class=\"col-md-6\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"col-md-6\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第2个要点，是不同的断点类型的意义及其搭配。</p>\n<p>Bootstrap栅格的column对应的类名形如.col-xx-y。y是数字，表示该元素的宽度占据12列中的多少列。而xx只有特定的几个值可供选择，分别是xs、sm、md、lg，它们就是断点类型。</p>\n<p>在Bootstrap栅格的设计中，断点的意义是，当视口（viewport）宽度小于断点时，column将竖直堆叠（display: block的默认表现），而当视口宽度大于或等于断点时，column将水平排列（float的效果）。按照xs、sm、md、lg的顺序，断点像素值依次增大，其中xs表示极小，即认为视口宽度永远不小于xs断点，column将始终水平浮动。</p>\n</li>\n</ul>\n<h4 id=\"Foundation中的栅格\"><a href=\"#Foundation中的栅格\" class=\"headerlink\" title=\"Foundation中的栅格\"></a>Foundation中的栅格</h4><p>Foundation栅格叫做Grid，它和Bootstrap栅格的设计十分近似，只是在类名和结构上有所差异。Foundation栅格同样默认12列。</p>\n<ul>\n<li>行与列<br>类比之前Bootstrap栅格的例子，Foundation栅格的一个正确的写法示例如下：<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;div class=\"medium-6 columns\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"medium-6 columns\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Foundation栅格的行用.row表示，而列由至少两个类名组成，一是.columns或.column（2种写法完全相同，单纯为了支持语法偏好）表明这是列元素，二是.medium-6这种用于表示断点类型和对应宽度。在默认情况下，Foundation栅格的断点类型从小到大依次是small、medium、large，其中small类似Bootstrap栅格的xs，也是指任意屏幕尺寸下都水平排列。</p>\n<p>Foundation栅格没有container，只需要row和column，因此显得比Bootstrap栅格更简单一些。其中row定义了最大宽度（可以认为承担了container的部分功能），column定义了0.9375rem的水平内边距。如果要嵌套，仍然是column内续接row，再继续接column。</p>\n<p>组合使用多个断点类型，其方法也和Bootstrap栅格相同。需要注意的是，Foundation栅格的断点值是用的em而不是px，对应的，它们转换后的像素值也有别于Bootstrap栅格。</p>\n<h4 id=\"Block-Grid\"><a href=\"#Block-Grid\" class=\"headerlink\" title=\"Block Grid\"></a>Block Grid</h4><p>作为栅格系统的补充，Foundation还提供了另外一个叫做Block Grid的栅格。不过，它并不是一个超出传统栅格的新东西，而只是一个针对特定栅格应用场景的方法糖。</p>\n<blockquote>\n<p>摘选自：<a href=\"http://acgtofe.com/posts/2015/07/a-story-of-grid\" target=\"_blank\" rel=\"external\">有关css栅格系统的故事</a></p>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/04/hexo-learning0/\">http://agehua.github.io/2016/12/04/hexo-learning0/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.795,"time":107699.99999999999,"words":359},"excerpt":"<h3 id=\"什么是EJS？\"><a href=\"#什么是EJS？\" class=\"headerlink\" title=\"什么是EJS？\"></a>什么是EJS？</h3><p>EJS是JavaScript模板库，用来从JSON数据中生成HTML字符串</p>\n<h3 id=\"EJS的语法和功能：\"><a href=\"#EJS的语法和功能：\" class=\"headerlink\" title=\"EJS的语法和功能：\"></a>EJS的语法和功能：</h3><h4 id=\"1、缓存功能，能够缓存已经解析好的html模版\"><a href=\"#1、缓存功能，能够缓存已经解析好的html模版\" class=\"headerlink\" title=\"1、缓存功能，能够缓存已经解析好的html模版\"></a>1、缓存功能，能够缓存已经解析好的html模版</h4><h4 id=\"2、-lt-code-gt-用于执行其中javascript代码。\"><a href=\"#2、-lt-code-gt-用于执行其中javascript代码。\" class=\"headerlink\" title=\"2、&lt;% code %&gt;用于执行其中javascript代码。\"></a>2、&lt;% code %&gt;用于执行其中javascript代码。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% alert(<span class=\"string\">'hello world'</span>) %&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"3、-lt-code-gt-会对code进行html转义；\"><a href=\"#3、-lt-code-gt-会对code进行html转义；\" class=\"headerlink\" title=\"3、&lt;%= code =%&gt;会对code进行html转义；\"></a>3、&lt;%= code =%&gt;会对code进行html转义；</h4>","more":"<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&lt;%=title %&gt;&lt;/h1&gt;                    注：会把title里面存的值给显示出来在h1中。</div><div class=\"line\">&lt;p&gt;&lt;%= 'hello world' %&gt;&lt;/p&gt;             注：会把hello world显示在h1中。</div><div class=\"line\">&lt;h1&gt;&lt;%= '&lt;b&gt;hello world&lt;/b&gt;' %&gt;&lt;/h1&gt;    注：会把hello world变粗，然后显示在h1中。</div><div class=\"line\">~~~ javascript</div><div class=\"line\">#### 4、&lt;%- code %&gt;将不会进行转义；，这一行代码不会执行，像是被注释了一样，然后显示原来的html。也不会影响整个页面的执行。</div><div class=\"line\"></div><div class=\"line\">~~~ javascript</div><div class=\"line\">&lt;h1&gt;&lt;%-title %&gt;asd&lt;/h1&gt;          最后显示asd，及显示原网页</div><div class=\"line\">&lt;p&gt;&lt;%# 'hello world' %&gt;asd&lt;/p&gt;   最后显示asd，及显示原网页</div></pre></td></tr></table></figure>\n<h4 id=\"5、支持自定义标签，比如’-lt-’可以使用’‘代替；\"><a href=\"#5、支持自定义标签，比如’-lt-’可以使用’‘代替；\" class=\"headerlink\" title=\"5、支持自定义标签，比如’&lt;%’可以使用’‘代替；\"></a>5、支持自定义标签，比如’&lt;%’可以使用’NaN‘代替；</h4><pre><code>ejs 里，默认的闭合标记是 &lt;%  .. %&gt;，我们也可以定义自己的标签。例如：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">app.set(<span class=\"string\">\"view options\"</span>,&#123;                                                                                  </div><div class=\"line\">   <span class=\"string\">\"open\"</span>:<span class=\"string\">\"&#123;&#123;\"</span>,                                                                                  </div><div class=\"line\">   <span class=\"string\">\"close\"</span>:<span class=\"string\">\"&#125;&#125;\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"6、提供一些辅助函数，用于模版中使用\"><a href=\"#6、提供一些辅助函数，用于模版中使用\" class=\"headerlink\" title=\"6、提供一些辅助函数，用于模版中使用\"></a>6、提供一些辅助函数，用于模版中使用</h4><ul>\n<li>1)、first，返回数组的第一个元素；</li>\n<li>2)、last，返回数组的最后一个元素；</li>\n<li>3)、capitalize，返回首字母大写的字符串；</li>\n<li>4)、downcase，返回字符串的小写；</li>\n<li>5)、upcase，返回字符串的大写；</li>\n<li>6)、sort，排序（Object.create(obj).sort()？）；</li>\n<li>7)、sort_by:’prop’，按照指定的prop属性进行升序排序；</li>\n<li>8)、size，返回长度，即length属性，不一定非是数组才行；</li>\n<li>9)、plus:n，加上n，将转化为Number进行运算；</li>\n<li>10)、minus:n，减去n，将转化为Number进行运算；</li>\n<li>11)、times:n，乘以n，将转化为Number进行运算；</li>\n<li>12)、divided_by:n，除以n，将转化为Number进行运算；</li>\n<li>13)、join:’val’，将数组用’val’最为分隔符，进行合并成一个字符串；</li>\n<li>14)、truncate:n，截取前n个字符，超过长度时，将返回一个副本</li>\n<li>15)、truncate_words:n，取得字符串中的前n个word，word以空格进行分割；</li>\n<li>16)、replace:pattern,substitution，字符串替换，substitution不提供将删除匹配的子串；</li>\n<li>17)、prepend:val，如果操作数为数组，则进行合并；为字符串则添加val在前面；</li>\n<li>18)、append:val，如果操作数为数组，则进行合并；为字符串则添加val在后面；</li>\n<li>19)、map:’prop’，返回对象数组中属性为prop的值组成的数组；</li>\n<li>20)、reverse，翻转数组或字符串；</li>\n<li>21)、get:’prop’，取得属性为’prop’的值；</li>\n<li>22)、json，转化为json格式字符串</li>\n</ul>\n<p><strong>利用&lt;%- include filename %&gt;加载其他页面模版；</strong></p>\n<h4 id=\"ejs我的总结：\"><a href=\"#ejs我的总结：\" class=\"headerlink\" title=\"ejs我的总结：\"></a>ejs我的总结：</h4><p>ejs 写法：</p>\n<ul>\n<li>1.普通传入并使用变量：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;%= title %&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.普通for执行js代码（for中间的代码一定可以执行到）：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;headerNavbar.length; i++) &#123;%&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=\"/reg\"&gt;&lt;%= headerNavbar[i].name %&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>3.特殊if语句的js代码（if中间的额代码不一定可以执行到）：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"> &lt;% <span class=\"keyword\">if</span>(active==<span class=\"string\">'index'</span>)&#123;%&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span></div><div class=\"line\"> &lt;% &#125;%&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"stylus介绍\"><a href=\"#stylus介绍\" class=\"headerlink\" title=\"stylus介绍\"></a>stylus介绍</h3><p>部分内容转载自：<a href=\"https://segmentfault.com/a/1190000002712872\">stylus入门使用方法</a></p>\n<p>stylus项目地址：<a href=\"http://stylus-lang.com/\">http://stylus-lang.com/</a></p>\n<p>Stylus 是一个CSS的预处理框架，2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，所以 Stylus 是一种新型语言，可以创建健壮的、动态的、富有表现力的CSS。比较年轻，其本质上做的事情与 SASS/LESS 等类似，应该是有很多借鉴，所以近似脚本的方式去写CSS代码。</p>\n<p>Stylus功能上更为强壮，和js联系更加紧密（EXPRESSIVE, DYNAMIC, ROBUST CSS）</p>\n<h4 id=\"Stylus安装\"><a href=\"#Stylus安装\" class=\"headerlink\" title=\"Stylus安装\"></a>Stylus安装</h4><p>使用node包管理器，全局安装<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install stylus -g</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成CSS\"><a href=\"#生成CSS\" class=\"headerlink\" title=\"生成CSS\"></a>生成CSS</h4><p>建立一个stylusExample/，再在里面建立 src 目录专门存放 stylus 文件，在里面建立 example.styl 文件。然后在 stylusExample 目录下面执行下面命令<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ stylus --compress src/</div></pre></td></tr></table></figure></p>\n<p>输出compiled src/example.css ，这个时候表示你生成成功了，带上–compress参数表示你生成压缩的CSS文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ stylus --css css/example.css css/out.styl CSS转换成styl</div><div class=\"line\">$ stylus help box-shadow CSS属性的帮助</div><div class=\"line\">$ stylus --css test.css 输出基本名一致的.styl文件</div></pre></td></tr></table></figure></p>\n<p>具体语法和应用可以参考: <a href=\"http://www.zhangxinxu.com/jq/stylus/\">Stylus中文参考文档</a></p>\n<h3 id=\"CSS3-column多列布局介绍\"><a href=\"#CSS3-column多列布局介绍\" class=\"headerlink\" title=\"CSS3 column多列布局介绍\"></a>CSS3 column多列布局介绍</h3><p>CSS3提供了个新属性columns用于多列布局。在这之前，有些大家习以为常的排版，要用CSS动态实现其实是比较困难的。如竖版报纸</p>\n<p>Columns属性最大的问题还是浏览器兼容性问题<br>摘选自：<a href=\"http://cdn2.jianshu.io/p/87d1862f88c6\">CSS3 column多列布局介绍</a></p>\n<h3 id=\"栅格与响应式设计\"><a href=\"#栅格与响应式设计\" class=\"headerlink\" title=\"栅格与响应式设计\"></a>栅格与响应式设计</h3><p>栅格样式库一般是这样做的：将页面划分为若干等宽的列（column），然后推荐你通过等宽列来创建响应式的页面区块。</p>\n<p>虽然看起来都是这样的思路，但不同的栅格样式库，在做法上却是各有各的点子。下面，本文将介绍几个比较有代表性的栅格样式库，讲述它们的简要原理和用法</p>\n<h4 id=\"Bootstrap中的栅格\"><a href=\"#Bootstrap中的栅格\" class=\"headerlink\" title=\"Bootstrap中的栅格:\"></a>Bootstrap中的栅格:</h4><p><a href=\"http://getbootstrap.com/\">Bootstrap</a>把它的栅格放在CSS这个分类下，并称它为Gird system。默认分为12列。</p>\n<p>要理解Bootstrap中的栅格，最好从掌握正确的使用方法开始。这其中有2个要点。</p>\n<ul>\n<li><p>第1个要点是容器（container），行（row）和列（column）之间的层级关系。一个正确的写法示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">    &lt;div class=\"row\"&gt;</div><div class=\"line\">        &lt;div class=\"col-md-6\"&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"col-md-6\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第2个要点，是不同的断点类型的意义及其搭配。</p>\n<p>Bootstrap栅格的column对应的类名形如.col-xx-y。y是数字，表示该元素的宽度占据12列中的多少列。而xx只有特定的几个值可供选择，分别是xs、sm、md、lg，它们就是断点类型。</p>\n<p>在Bootstrap栅格的设计中，断点的意义是，当视口（viewport）宽度小于断点时，column将竖直堆叠（display: block的默认表现），而当视口宽度大于或等于断点时，column将水平排列（float的效果）。按照xs、sm、md、lg的顺序，断点像素值依次增大，其中xs表示极小，即认为视口宽度永远不小于xs断点，column将始终水平浮动。</p>\n</li>\n</ul>\n<h4 id=\"Foundation中的栅格\"><a href=\"#Foundation中的栅格\" class=\"headerlink\" title=\"Foundation中的栅格\"></a>Foundation中的栅格</h4><p>Foundation栅格叫做Grid，它和Bootstrap栅格的设计十分近似，只是在类名和结构上有所差异。Foundation栅格同样默认12列。</p>\n<ul>\n<li>行与列<br>类比之前Bootstrap栅格的例子，Foundation栅格的一个正确的写法示例如下：<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;div class=\"medium-6 columns\"&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"medium-6 columns\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Foundation栅格的行用.row表示，而列由至少两个类名组成，一是.columns或.column（2种写法完全相同，单纯为了支持语法偏好）表明这是列元素，二是.medium-6这种用于表示断点类型和对应宽度。在默认情况下，Foundation栅格的断点类型从小到大依次是small、medium、large，其中small类似Bootstrap栅格的xs，也是指任意屏幕尺寸下都水平排列。</p>\n<p>Foundation栅格没有container，只需要row和column，因此显得比Bootstrap栅格更简单一些。其中row定义了最大宽度（可以认为承担了container的部分功能），column定义了0.9375rem的水平内边距。如果要嵌套，仍然是column内续接row，再继续接column。</p>\n<p>组合使用多个断点类型，其方法也和Bootstrap栅格相同。需要注意的是，Foundation栅格的断点值是用的em而不是px，对应的，它们转换后的像素值也有别于Bootstrap栅格。</p>\n<h4 id=\"Block-Grid\"><a href=\"#Block-Grid\" class=\"headerlink\" title=\"Block Grid\"></a>Block Grid</h4><p>作为栅格系统的补充，Foundation还提供了另外一个叫做Block Grid的栅格。不过，它并不是一个超出传统栅格的新东西，而只是一个针对特定栅格应用场景的方法糖。</p>\n<blockquote>\n<p>摘选自：<a href=\"http://acgtofe.com/posts/2015/07/a-story-of-grid\">有关css栅格系统的故事</a></p>\n</blockquote>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/04/hexo-learning0/\">http://agehua.github.io/2016/12/04/hexo-learning0/</a></p>"},{"layout":"post","title":"ThreadLocal一个使用——SimpleDateFormat","keywords":"ThreadLocal","banner":"http://obxk8w81b.bkt.clouddn.com/A%20Wind-Beaten%20Tree.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/A%20Wind-Beaten%20Tree.jpg","toc":true,"_content":"\n### 背景\n\n之前写过一篇文章：[《ThreadLocal、HandlerThread、Lopper区别》](https://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Lopper/)，其中简单提及了ThreadLocal的解释。本篇文章主要结合具体应用场景——SimpleDateFormat，和大家来一起学习ThreadLocal的原理，并对ThreadLocal进行一个详细的介绍。\n\n下面是本文的参考资料：\n\njava学习记录–ThreadLocal使用案例——SimpleDateFormat：\nhttp://blog.csdn.net/u012706811/article/details/53231598\n\nSimpleDateFormat的线程安全问题与解决方案：\nhttp://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\n\n\n### 前言\nThread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals。\n\n这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。\n\n我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（ThreadLocal用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。\n\nThreadLocal为变量在每个线程中都创建了一个副本，所以每个线程可以访问自己内部的副本变量，不同线程之间不会互相干扰。\n\n本篇文章结合具体应用场景，来分析ThreadLocal为什么可以实现不同线程之间不会互相干扰。\n\n<!--more-->\n\n### 应用场景\n那么，在什么场景下比较适合使用ThreadLocal呢？\n\nstackoverflow上有人给出了还不错的回答：\n\n> [When and how should I use a ThreadLocal variable?](http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable)\nOne possible (and common) use is when you have some object that is not thread-safe, but you want to avoid synchronizing access to that object (I'm looking at you, SimpleDateFormat). Instead, give each thread its own instance of the object.\n\n#### SimpleDateFormat为什么线程不安全\nSimpleDateFormat类内部持有一个Calendar对象引用，\n\n如果你的工具类里，SimpleDateFormat是个static的，那么多个thread之间就会共享这个SimpleDateFormat，同时也会共享这个Calendar引用。\n\n查看下源码中的SimpleDateFormat.parse()方法，你会发现有如下的调用:\n\n~~~ Java\nprotected Calendar calendar;\n\nDate parse() {\n\n  calendar.clear(); // 清理calendar\n\n  ... // 执行一些操作, 设置 calendar 的日期什么的\n\n  calendar.getTime(); // 获取calendar的时间\n}\n~~~\n\n> 这里calendar.clear()方法是线程不安全的，不同thread调用parse()方法，会导致结果不可预期\n\n问题重现可以看：[这篇博客](http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html)\n\n\n#### 解决方案\n\n最简单的解决方案我们可以把static去掉，这样每个新的线程都会有一个自己的SimpleDateFormat实例，从而避免线程安全的问题\n\n但是，使用这种方法，在高并发的情况下会大量的new SimpleDateFormat以及销毁SimpleDateFormat，这样是非常耗费资源的\n\n下面是一个从网上找的使用ThreadLocal解决SimpleDateFormat线程不安全问题的例子：\n\n~~~ Java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DateUtil {\n\n    /** 锁对象 */\n    private static final Object lockObj = new Object();\n\n    /** 存放不同的日期模板格式的SimpleDateFormat的Map */\n    private static Map<String, ThreadLocal<SimpleDateFormat>> sdfMap = new HashMap<String, ThreadLocal<SimpleDateFormat>>();\n\n    /**\n     * 返回一个ThreadLocal的SimpleDateFormat,每个线程只会new一次SimpleDateFormat\n     *\n     * @param pattern\n     * @return\n     */\n    private static SimpleDateFormat getSdf(final String pattern) {\n        ThreadLocal<SimpleDateFormat> tl = sdfMap.get(pattern);\n\n        // 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf\n        if (tl == null) {\n            synchronized (lockObj) {\n                tl = sdfMap.get(pattern);\n                if (tl == null) {\n                    // 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map\n                    System.out.println(\"put new sdf of pattern \" + pattern + \" to map\");\n\n                    // 这里是关键,使用ThreadLocal<SimpleDateFormat>替代原来直接new SimpleDateFormat\n                    tl = new ThreadLocal<SimpleDateFormat>() {\n\n                        @Override\n                        protected SimpleDateFormat initialValue() {\n                            System.out.println(\"thread: \" + Thread.currentThread() + \" init pattern: \" + pattern);\n                            return new SimpleDateFormat(pattern);\n                        }\n                    };\n                    sdfMap.put(pattern, tl);\n                }\n            }\n        }\n\n        return tl.get();\n    }\n\n    /**\n     * 是用ThreadLocal<SimpleDateFormat>来获取SimpleDateFormat,这样每个线程只会有一个SimpleDateFormat\n     *\n     * @param date\n     * @param pattern\n     * @return\n     */\n    public static String format(Date date, String pattern) {\n        return getSdf(pattern).format(date);\n    }\n\n    public static Date parse(String dateStr, String pattern) throws ParseException {\n        return getSdf(pattern).parse(dateStr);\n    }\n\n}\n~~~\n\n### 实现原理\n那为什么ThreadLocal为变量在每个线程都保存了一个副本呢？\n\n        下面部分内容来自博文，http://www.jianshu.com/p/33c5579ef44f (深入浅出ThreadLocal)\n\n先看一下Thread和ThreadLocal两个类的具体结构，如下：\n\n![ThreadLocal](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/ThreadLocal.png)\n\n从线程Thread的角度来看，每个线程内部都会持有一个对ThreadLocalMap实例的引用（也就是threadLocals变量），ThreadLocalMap是TThreadLocal的静态内部类。而Entry则是ThreadLocalMap的静态内部类。ThreadLocalMap实例相当于线程的局部变量空间，由Entry[] table存储着线程的私有数据。\n\n#### Entry\nEntry继承自WeakReference类，是存储线程私有变量的数据结构。ThreadLocal实例作为引用，意味着如果ThreadLocal实例为null，就可以从table中删除对应的Entry。\n\n~~~ Java\nclass Entry extends WeakReference<ThreadLocal<?>> {\n      Object value;\n      Entry(ThreadLocal<?> k, Object v) {\n           super(k);\n           value = v;\n      }\n}\n~~~\n#### ThreadLocalMap\n内部使用table数组存储Entry，默认大小INITIAL_CAPACITY(16)，先介绍几个参数：\n\n- **size**：table中元素的数量。\n- **threshold**：table大小的2/3，当size >= threshold时，遍历table并删除key为null的元素，如果删除后size >= threshold*3/4时，需要对table进行扩容。\n\n#### ThreadLocal.set()实现\n\n~~~ Java\n/**\n * ThreadLocal.set()\n */\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n\nThreadLocalMap getMap(Thread t) {\n    return t.threadLocals;\n}\n~~~\n从上面代码中看出来：\n\n- 1.从当前线程Thread中获取ThreadLocalMap实例。\n- 2.ThreadLocal实例和value封装成Entry。\n\n\n#### ThreadLocal.get() 实现\n~~~ Java\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n\nprivate T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n}\n\nThreadLocalMap getMap(Thread t) {\n    return t.threadLocals;\n}\n~~~\n\n从上面代码中可以看出，\n> ThreadLocal.get()方法，如果是不同线程ThreadLocalMap为null，最终会调用**initialValue()方法**，这个方法也是我们给出的解决方案中重载的方法。\n最后得到的结果是，不同线程ThreadLocal只有一个，而SimpleDateFormat则每个线程都有一个。\n\n\n但当同一线程有了一个SimpleDateFormat了，会是什么情况呢？看下面代码：\n\n~~~ Java\n//同一线程中再次执行ThreadLocal.get()\npublic T get() {\n    Thread t = Thread.currentThread();//得到当前子线程\n    ThreadLocalMap map = getMap(t);\n    //同一个线程，map不为空\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n\nThreadLocalMap getMap(Thread t) {\n    //同一线程Thread，变量threadLocals经过初始化了，则不为空\n    return t.threadLocals;\n}\n~~~\n\nThreadLocalMap.getEntry()是如何实现的呢？先看下Entry是如何存入table数组的\n\n#### Entry存入table数组如何实现的：\n\n~~~ Java\n/**\n * static class ThreadLocalMap.set()方法\n */\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n~~~\n- 1.通过ThreadLocal的nextHashCode方法生成hash值。\n\nthreadLocalHashCode，由nextHashCode()方法得到\n~~~ Java\n/**\n * 对应上面代码的key.threadLocalHashCode\n * 在ThreadLocal 类中\n */\nprivate final int threadLocalHashCode = nextHashCode();\n~~~\n\n- 2.通过 key.threadLocalHashCode & (len -1) 定位到table的位置i，假设table中i位置的元素为f。\n- 3.如果f != null，假设f中的引用为k：\n  - 如果k和当前ThreadLocal实例一致，则修改value值，返回。\n  - 如果k为null，说明这个f已经是stale(陈旧的)的元素。调用replaceStaleEntry方法删除table中所有陈旧的元素（即entry的引用为null）并插入新元素，返回。\n  - 否则通过nextIndex方法找到下一个元素f，继续进行步骤3。\n- 4.如果f == null，则把Entry加入到table的i位置中。\n- 5.通过cleanSomeSlots删除陈旧的元素，如果table中没有元素删除，需判断当前情况下是否要进行扩容。\n\n~~~ Java\n/**\n * ThreadLocal 类中\n */\nprivate static AtomicInteger nextHashCode = new AtomicInteger();\nprivate static int nextHashCode() {    \n return nextHashCode.getAndAdd(HASH_INCREMENT);\n}\n~~~\n  从nextHashCode方法可以看出，ThreadLocal每实例化一次，其hash值就原子增加HASH_INCREMENT。\n\n#### Entry从table数组中取出\n\n在回看getEntry()方法，就简单多了：\n~~~ Java\n/**\n * ThreadLocalMap的getEntry()方法\n */\nprivate Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e);\n}\n~~~\n- 1.通过key.threadLocalHashCode & (len -1)定位到table的位置i，假设table中i位置的元素为g。\n- 2.如果g不为null，且和当前ThreadLocal实例一致，则返回这个Entry。\n\n**在看一遍ThreadLocal.get()的代码：**\n~~~ Java\n//同一线程中再次执行ThreadLocal.get()\npublic T get() {\n    Thread t = Thread.currentThread();//得到当前子线程\n    ThreadLocalMap map = getMap(t);\n    //同一个线程，map不为空\n    if (map != null) {\n        //当前ThreadLocal实例一致，则Entry不为null\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n~~~\n\n> 所以，同一个线程，ThreadLocalMap不为空，Entry不为null，则返回table中保存的result。不会执行到setInitialValue()。所以，而SimpleDateFormat则会每一个线程只有一个。\n\n由此，就可以得出结论了，确实可以使用ThreadLocal解决SimpleDateFormat的线程安全问题。\n\n\n    p.s. 感兴趣的可以结合ThreadLocal源码继续研究下面的内容：\n\n\n\n\n\n#### 获取当前的线程的threadLocals。\n\n- 如果threadLocals不为null，则通过ThreadLocalMap.getEntry方法找到对应的entry，如果其引用和当前key一致，则直接返回，否则在table剩下的元素中继续匹配。\n- 如果threadLocals为null，则通过setInitialValue方法初始化，并返回。\n~~~ Java\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n Entry[] tab = table;\n int len = tab.length;\n while (e != null) {\n     ThreadLocal<?> k = e.get();\n     if (k == key)\n         return e;\n     if (k == null)\n         expungeStaleEntry(i);\n     else\n         i = nextIndex(i, len);\n     e = tab[i];\n }\n return null;\n}\n~~~\n\n#### table扩容\n如果table中的元素数量达到阈值threshold的3/4，会进行扩容操作，过程很简单：\n\n~~~ Java\n/**\n * 在ThreadLocalMap类中\n */\nprivate void resize() {\n    Entry[] oldTab = table;\n    int oldLen = oldTab.length;\n    int newLen = oldLen * 2;\n    Entry[] newTab = new Entry[newLen];\n    int count = 0;\n\n    for (int j = 0; j < oldLen; ++j) {\n        Entry e = oldTab[j];\n        if (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == null) {\n                e.value = null; // Help the GC\n            } else {\n                int h = k.threadLocalHashCode & (newLen - 1);\n                while (newTab[h] != null)\n                    h = nextIndex(h, newLen);\n                newTab[h] = e;\n                count++;\n            }\n        }\n    }\n\n    setThreshold(newLen);\n    size = count;\n    table = newTab;\n}\n~~~\n- 新建新的数组newTab，大小为原来的2倍。\n- 复制table的元素到newTab，忽略陈旧的元素，假设table中的元素e需要复制到newTab的i位置，如果i位置存在元素，则找下一个空位置进行插入。\n\n      文章到这里就结束了，没有更多了:）\n       文章内容部分来自互联网，部分为自己整理，最后感谢耐心看到这里的人，\n","source":"_posts/2016-12-11-ThreadLocal-usage.md","raw":"---\nlayout: post\ntitle:  ThreadLocal一个使用——SimpleDateFormat\ncategory: accumulation\ntags:\n  - Java\n  - ThreadLocal\nkeywords: ThreadLocal\nbanner: http://obxk8w81b.bkt.clouddn.com/A%20Wind-Beaten%20Tree.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/A%20Wind-Beaten%20Tree.jpg\ntoc: true\n---\n\n### 背景\n\n之前写过一篇文章：[《ThreadLocal、HandlerThread、Lopper区别》](https://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Lopper/)，其中简单提及了ThreadLocal的解释。本篇文章主要结合具体应用场景——SimpleDateFormat，和大家来一起学习ThreadLocal的原理，并对ThreadLocal进行一个详细的介绍。\n\n下面是本文的参考资料：\n\njava学习记录–ThreadLocal使用案例——SimpleDateFormat：\nhttp://blog.csdn.net/u012706811/article/details/53231598\n\nSimpleDateFormat的线程安全问题与解决方案：\nhttp://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\n\n\n### 前言\nThread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals。\n\n这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。\n\n我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（ThreadLocal用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。\n\nThreadLocal为变量在每个线程中都创建了一个副本，所以每个线程可以访问自己内部的副本变量，不同线程之间不会互相干扰。\n\n本篇文章结合具体应用场景，来分析ThreadLocal为什么可以实现不同线程之间不会互相干扰。\n\n<!--more-->\n\n### 应用场景\n那么，在什么场景下比较适合使用ThreadLocal呢？\n\nstackoverflow上有人给出了还不错的回答：\n\n> [When and how should I use a ThreadLocal variable?](http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable)\nOne possible (and common) use is when you have some object that is not thread-safe, but you want to avoid synchronizing access to that object (I'm looking at you, SimpleDateFormat). Instead, give each thread its own instance of the object.\n\n#### SimpleDateFormat为什么线程不安全\nSimpleDateFormat类内部持有一个Calendar对象引用，\n\n如果你的工具类里，SimpleDateFormat是个static的，那么多个thread之间就会共享这个SimpleDateFormat，同时也会共享这个Calendar引用。\n\n查看下源码中的SimpleDateFormat.parse()方法，你会发现有如下的调用:\n\n~~~ Java\nprotected Calendar calendar;\n\nDate parse() {\n\n  calendar.clear(); // 清理calendar\n\n  ... // 执行一些操作, 设置 calendar 的日期什么的\n\n  calendar.getTime(); // 获取calendar的时间\n}\n~~~\n\n> 这里calendar.clear()方法是线程不安全的，不同thread调用parse()方法，会导致结果不可预期\n\n问题重现可以看：[这篇博客](http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html)\n\n\n#### 解决方案\n\n最简单的解决方案我们可以把static去掉，这样每个新的线程都会有一个自己的SimpleDateFormat实例，从而避免线程安全的问题\n\n但是，使用这种方法，在高并发的情况下会大量的new SimpleDateFormat以及销毁SimpleDateFormat，这样是非常耗费资源的\n\n下面是一个从网上找的使用ThreadLocal解决SimpleDateFormat线程不安全问题的例子：\n\n~~~ Java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DateUtil {\n\n    /** 锁对象 */\n    private static final Object lockObj = new Object();\n\n    /** 存放不同的日期模板格式的SimpleDateFormat的Map */\n    private static Map<String, ThreadLocal<SimpleDateFormat>> sdfMap = new HashMap<String, ThreadLocal<SimpleDateFormat>>();\n\n    /**\n     * 返回一个ThreadLocal的SimpleDateFormat,每个线程只会new一次SimpleDateFormat\n     *\n     * @param pattern\n     * @return\n     */\n    private static SimpleDateFormat getSdf(final String pattern) {\n        ThreadLocal<SimpleDateFormat> tl = sdfMap.get(pattern);\n\n        // 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf\n        if (tl == null) {\n            synchronized (lockObj) {\n                tl = sdfMap.get(pattern);\n                if (tl == null) {\n                    // 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map\n                    System.out.println(\"put new sdf of pattern \" + pattern + \" to map\");\n\n                    // 这里是关键,使用ThreadLocal<SimpleDateFormat>替代原来直接new SimpleDateFormat\n                    tl = new ThreadLocal<SimpleDateFormat>() {\n\n                        @Override\n                        protected SimpleDateFormat initialValue() {\n                            System.out.println(\"thread: \" + Thread.currentThread() + \" init pattern: \" + pattern);\n                            return new SimpleDateFormat(pattern);\n                        }\n                    };\n                    sdfMap.put(pattern, tl);\n                }\n            }\n        }\n\n        return tl.get();\n    }\n\n    /**\n     * 是用ThreadLocal<SimpleDateFormat>来获取SimpleDateFormat,这样每个线程只会有一个SimpleDateFormat\n     *\n     * @param date\n     * @param pattern\n     * @return\n     */\n    public static String format(Date date, String pattern) {\n        return getSdf(pattern).format(date);\n    }\n\n    public static Date parse(String dateStr, String pattern) throws ParseException {\n        return getSdf(pattern).parse(dateStr);\n    }\n\n}\n~~~\n\n### 实现原理\n那为什么ThreadLocal为变量在每个线程都保存了一个副本呢？\n\n        下面部分内容来自博文，http://www.jianshu.com/p/33c5579ef44f (深入浅出ThreadLocal)\n\n先看一下Thread和ThreadLocal两个类的具体结构，如下：\n\n![ThreadLocal](http://oui2w5whj.bkt.clouddn.com/blogimages/2016/ThreadLocal.png)\n\n从线程Thread的角度来看，每个线程内部都会持有一个对ThreadLocalMap实例的引用（也就是threadLocals变量），ThreadLocalMap是TThreadLocal的静态内部类。而Entry则是ThreadLocalMap的静态内部类。ThreadLocalMap实例相当于线程的局部变量空间，由Entry[] table存储着线程的私有数据。\n\n#### Entry\nEntry继承自WeakReference类，是存储线程私有变量的数据结构。ThreadLocal实例作为引用，意味着如果ThreadLocal实例为null，就可以从table中删除对应的Entry。\n\n~~~ Java\nclass Entry extends WeakReference<ThreadLocal<?>> {\n      Object value;\n      Entry(ThreadLocal<?> k, Object v) {\n           super(k);\n           value = v;\n      }\n}\n~~~\n#### ThreadLocalMap\n内部使用table数组存储Entry，默认大小INITIAL_CAPACITY(16)，先介绍几个参数：\n\n- **size**：table中元素的数量。\n- **threshold**：table大小的2/3，当size >= threshold时，遍历table并删除key为null的元素，如果删除后size >= threshold*3/4时，需要对table进行扩容。\n\n#### ThreadLocal.set()实现\n\n~~~ Java\n/**\n * ThreadLocal.set()\n */\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n\nThreadLocalMap getMap(Thread t) {\n    return t.threadLocals;\n}\n~~~\n从上面代码中看出来：\n\n- 1.从当前线程Thread中获取ThreadLocalMap实例。\n- 2.ThreadLocal实例和value封装成Entry。\n\n\n#### ThreadLocal.get() 实现\n~~~ Java\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n\nprivate T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n}\n\nThreadLocalMap getMap(Thread t) {\n    return t.threadLocals;\n}\n~~~\n\n从上面代码中可以看出，\n> ThreadLocal.get()方法，如果是不同线程ThreadLocalMap为null，最终会调用**initialValue()方法**，这个方法也是我们给出的解决方案中重载的方法。\n最后得到的结果是，不同线程ThreadLocal只有一个，而SimpleDateFormat则每个线程都有一个。\n\n\n但当同一线程有了一个SimpleDateFormat了，会是什么情况呢？看下面代码：\n\n~~~ Java\n//同一线程中再次执行ThreadLocal.get()\npublic T get() {\n    Thread t = Thread.currentThread();//得到当前子线程\n    ThreadLocalMap map = getMap(t);\n    //同一个线程，map不为空\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n\nThreadLocalMap getMap(Thread t) {\n    //同一线程Thread，变量threadLocals经过初始化了，则不为空\n    return t.threadLocals;\n}\n~~~\n\nThreadLocalMap.getEntry()是如何实现的呢？先看下Entry是如何存入table数组的\n\n#### Entry存入table数组如何实现的：\n\n~~~ Java\n/**\n * static class ThreadLocalMap.set()方法\n */\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n~~~\n- 1.通过ThreadLocal的nextHashCode方法生成hash值。\n\nthreadLocalHashCode，由nextHashCode()方法得到\n~~~ Java\n/**\n * 对应上面代码的key.threadLocalHashCode\n * 在ThreadLocal 类中\n */\nprivate final int threadLocalHashCode = nextHashCode();\n~~~\n\n- 2.通过 key.threadLocalHashCode & (len -1) 定位到table的位置i，假设table中i位置的元素为f。\n- 3.如果f != null，假设f中的引用为k：\n  - 如果k和当前ThreadLocal实例一致，则修改value值，返回。\n  - 如果k为null，说明这个f已经是stale(陈旧的)的元素。调用replaceStaleEntry方法删除table中所有陈旧的元素（即entry的引用为null）并插入新元素，返回。\n  - 否则通过nextIndex方法找到下一个元素f，继续进行步骤3。\n- 4.如果f == null，则把Entry加入到table的i位置中。\n- 5.通过cleanSomeSlots删除陈旧的元素，如果table中没有元素删除，需判断当前情况下是否要进行扩容。\n\n~~~ Java\n/**\n * ThreadLocal 类中\n */\nprivate static AtomicInteger nextHashCode = new AtomicInteger();\nprivate static int nextHashCode() {    \n return nextHashCode.getAndAdd(HASH_INCREMENT);\n}\n~~~\n  从nextHashCode方法可以看出，ThreadLocal每实例化一次，其hash值就原子增加HASH_INCREMENT。\n\n#### Entry从table数组中取出\n\n在回看getEntry()方法，就简单多了：\n~~~ Java\n/**\n * ThreadLocalMap的getEntry()方法\n */\nprivate Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e);\n}\n~~~\n- 1.通过key.threadLocalHashCode & (len -1)定位到table的位置i，假设table中i位置的元素为g。\n- 2.如果g不为null，且和当前ThreadLocal实例一致，则返回这个Entry。\n\n**在看一遍ThreadLocal.get()的代码：**\n~~~ Java\n//同一线程中再次执行ThreadLocal.get()\npublic T get() {\n    Thread t = Thread.currentThread();//得到当前子线程\n    ThreadLocalMap map = getMap(t);\n    //同一个线程，map不为空\n    if (map != null) {\n        //当前ThreadLocal实例一致，则Entry不为null\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n~~~\n\n> 所以，同一个线程，ThreadLocalMap不为空，Entry不为null，则返回table中保存的result。不会执行到setInitialValue()。所以，而SimpleDateFormat则会每一个线程只有一个。\n\n由此，就可以得出结论了，确实可以使用ThreadLocal解决SimpleDateFormat的线程安全问题。\n\n\n    p.s. 感兴趣的可以结合ThreadLocal源码继续研究下面的内容：\n\n\n\n\n\n#### 获取当前的线程的threadLocals。\n\n- 如果threadLocals不为null，则通过ThreadLocalMap.getEntry方法找到对应的entry，如果其引用和当前key一致，则直接返回，否则在table剩下的元素中继续匹配。\n- 如果threadLocals为null，则通过setInitialValue方法初始化，并返回。\n~~~ Java\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n Entry[] tab = table;\n int len = tab.length;\n while (e != null) {\n     ThreadLocal<?> k = e.get();\n     if (k == key)\n         return e;\n     if (k == null)\n         expungeStaleEntry(i);\n     else\n         i = nextIndex(i, len);\n     e = tab[i];\n }\n return null;\n}\n~~~\n\n#### table扩容\n如果table中的元素数量达到阈值threshold的3/4，会进行扩容操作，过程很简单：\n\n~~~ Java\n/**\n * 在ThreadLocalMap类中\n */\nprivate void resize() {\n    Entry[] oldTab = table;\n    int oldLen = oldTab.length;\n    int newLen = oldLen * 2;\n    Entry[] newTab = new Entry[newLen];\n    int count = 0;\n\n    for (int j = 0; j < oldLen; ++j) {\n        Entry e = oldTab[j];\n        if (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == null) {\n                e.value = null; // Help the GC\n            } else {\n                int h = k.threadLocalHashCode & (newLen - 1);\n                while (newTab[h] != null)\n                    h = nextIndex(h, newLen);\n                newTab[h] = e;\n                count++;\n            }\n        }\n    }\n\n    setThreshold(newLen);\n    size = count;\n    table = newTab;\n}\n~~~\n- 新建新的数组newTab，大小为原来的2倍。\n- 复制table的元素到newTab，忽略陈旧的元素，假设table中的元素e需要复制到newTab的i位置，如果i位置存在元素，则找下一个空位置进行插入。\n\n      文章到这里就结束了，没有更多了:）\n       文章内容部分来自互联网，部分为自己整理，最后感谢耐心看到这里的人，\n","slug":"ThreadLocal-usage","published":1,"date":"2016-12-10T16:00:00.000Z","updated":"2017-11-23T07:12:02.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebzt002fd6yknh6ho6jc","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>之前写过一篇文章：<a href=\"https://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Lopper/\">《ThreadLocal、HandlerThread、Lopper区别》</a>，其中简单提及了ThreadLocal的解释。本篇文章主要结合具体应用场景——SimpleDateFormat，和大家来一起学习ThreadLocal的原理，并对ThreadLocal进行一个详细的介绍。</p>\n<p>下面是本文的参考资料：</p>\n<p>java学习记录–ThreadLocal使用案例——SimpleDateFormat：<br><a href=\"http://blog.csdn.net/u012706811/article/details/53231598\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u012706811/article/details/53231598</a></p>\n<p>SimpleDateFormat的线程安全问题与解决方案：<br><a href=\"http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Thread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals。</p>\n<p>这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。</p>\n<p>我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（ThreadLocal用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。</p>\n<p>ThreadLocal为变量在每个线程中都创建了一个副本，所以每个线程可以访问自己内部的副本变量，不同线程之间不会互相干扰。</p>\n<p>本篇文章结合具体应用场景，来分析ThreadLocal为什么可以实现不同线程之间不会互相干扰。</p>\n<a id=\"more\"></a>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>那么，在什么场景下比较适合使用ThreadLocal呢？</p>\n<p>stackoverflow上有人给出了还不错的回答：</p>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable\" target=\"_blank\" rel=\"external\">When and how should I use a ThreadLocal variable?</a><br>One possible (and common) use is when you have some object that is not thread-safe, but you want to avoid synchronizing access to that object (I’m looking at you, SimpleDateFormat). Instead, give each thread its own instance of the object.</p>\n</blockquote>\n<h4 id=\"SimpleDateFormat为什么线程不安全\"><a href=\"#SimpleDateFormat为什么线程不安全\" class=\"headerlink\" title=\"SimpleDateFormat为什么线程不安全\"></a>SimpleDateFormat为什么线程不安全</h4><p>SimpleDateFormat类内部持有一个Calendar对象引用，</p>\n<p>如果你的工具类里，SimpleDateFormat是个static的，那么多个thread之间就会共享这个SimpleDateFormat，同时也会共享这个Calendar引用。</p>\n<p>查看下源码中的SimpleDateFormat.parse()方法，你会发现有如下的调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> Calendar calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Date <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  calendar.clear(); <span class=\"comment\">// 清理calendar</span></div><div class=\"line\"></div><div class=\"line\">  ... <span class=\"comment\">// 执行一些操作, 设置 calendar 的日期什么的</span></div><div class=\"line\"></div><div class=\"line\">  calendar.getTime(); <span class=\"comment\">// 获取calendar的时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里calendar.clear()方法是线程不安全的，不同thread调用parse()方法，会导致结果不可预期</p>\n</blockquote>\n<p>问题重现可以看：<a href=\"http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\" target=\"_blank\" rel=\"external\">这篇博客</a></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>最简单的解决方案我们可以把static去掉，这样每个新的线程都会有一个自己的SimpleDateFormat实例，从而避免线程安全的问题</p>\n<p>但是，使用这种方法，在高并发的情况下会大量的new SimpleDateFormat以及销毁SimpleDateFormat，这样是非常耗费资源的</p>\n<p>下面是一个从网上找的使用ThreadLocal解决SimpleDateFormat线程不安全问题的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 锁对象 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object lockObj = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 存放不同的日期模板格式的SimpleDateFormat的Map */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt; sdfMap = <span class=\"keyword\">new</span> HashMap&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 返回一个ThreadLocal的SimpleDateFormat,每个线程只会new一次SimpleDateFormat</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pattern</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SimpleDateFormat <span class=\"title\">getSdf</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> </span>&#123;</div><div class=\"line\">        ThreadLocal&lt;SimpleDateFormat&gt; tl = sdfMap.get(pattern);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (lockObj) &#123;</div><div class=\"line\">                tl = sdfMap.get(pattern);</div><div class=\"line\">                <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map</span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"put new sdf of pattern \"</span> + pattern + <span class=\"string\">\" to map\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 这里是关键,使用ThreadLocal&lt;SimpleDateFormat&gt;替代原来直接new SimpleDateFormat</span></div><div class=\"line\">                    tl = <span class=\"keyword\">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> SimpleDateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"thread: \"</span> + Thread.currentThread() + <span class=\"string\">\" init pattern: \"</span> + pattern);</div><div class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(pattern);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;;</div><div class=\"line\">                    sdfMap.put(pattern, tl);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tl.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是用ThreadLocal&lt;SimpleDateFormat&gt;来获取SimpleDateFormat,这样每个线程只会有一个SimpleDateFormat</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> date</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pattern</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">format</span><span class=\"params\">(Date date, String pattern)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getSdf(pattern).format(date);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parse</span><span class=\"params\">(String dateStr, String pattern)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getSdf(pattern).parse(dateStr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>那为什么ThreadLocal为变量在每个线程都保存了一个副本呢？</p>\n<pre><code>下面部分内容来自博文，http://www.jianshu.com/p/33c5579ef44f (深入浅出ThreadLocal)\n</code></pre><p>先看一下Thread和ThreadLocal两个类的具体结构，如下：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/ThreadLocal.png\" alt=\"ThreadLocal\"></p>\n<p>从线程Thread的角度来看，每个线程内部都会持有一个对ThreadLocalMap实例的引用（也就是threadLocals变量），ThreadLocalMap是TThreadLocal的静态内部类。而Entry则是ThreadLocalMap的静态内部类。ThreadLocalMap实例相当于线程的局部变量空间，由Entry[] table存储着线程的私有数据。</p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>Entry继承自WeakReference类，是存储线程私有变量的数据结构。ThreadLocal实例作为引用，意味着如果ThreadLocal实例为null，就可以从table中删除对应的Entry。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class=\"line\">      Object value;</div><div class=\"line\">      Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(k);</div><div class=\"line\">           value = v;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ThreadLocalMap\"><a href=\"#ThreadLocalMap\" class=\"headerlink\" title=\"ThreadLocalMap\"></a>ThreadLocalMap</h4><p>内部使用table数组存储Entry，默认大小INITIAL_CAPACITY(16)，先介绍几个参数：</p>\n<ul>\n<li><strong>size</strong>：table中元素的数量。</li>\n<li><strong>threshold</strong>：table大小的2/3，当size &gt;= threshold时，遍历table并删除key为null的元素，如果删除后size &gt;= threshold*3/4时，需要对table进行扩容。</li>\n</ul>\n<h4 id=\"ThreadLocal-set-实现\"><a href=\"#ThreadLocal-set-实现\" class=\"headerlink\" title=\"ThreadLocal.set()实现\"></a>ThreadLocal.set()实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * ThreadLocal.set()</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码中看出来：</p>\n<ul>\n<li>1.从当前线程Thread中获取ThreadLocalMap实例。</li>\n<li>2.ThreadLocal实例和value封装成Entry。</li>\n</ul>\n<h4 id=\"ThreadLocal-get-实现\"><a href=\"#ThreadLocal-get-实现\" class=\"headerlink\" title=\"ThreadLocal.get() 实现\"></a>ThreadLocal.get() 实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">setInitialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        T value = initialValue();</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">            map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            createMap(t, value);</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码中可以看出，</p>\n<blockquote>\n<p>ThreadLocal.get()方法，如果是不同线程ThreadLocalMap为null，最终会调用<strong>initialValue()方法</strong>，这个方法也是我们给出的解决方案中重载的方法。<br>最后得到的结果是，不同线程ThreadLocal只有一个，而SimpleDateFormat则每个线程都有一个。</p>\n</blockquote>\n<p>但当同一线程有了一个SimpleDateFormat了，会是什么情况呢？看下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同一线程中再次执行ThreadLocal.get()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();<span class=\"comment\">//得到当前子线程</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"comment\">//同一个线程，map不为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//同一线程Thread，变量threadLocals经过初始化了，则不为空</span></div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ThreadLocalMap.getEntry()是如何实现的呢？先看下Entry是如何存入table数组的</p>\n<h4 id=\"Entry存入table数组如何实现的：\"><a href=\"#Entry存入table数组如何实现的：\" class=\"headerlink\" title=\"Entry存入table数组如何实现的：\"></a>Entry存入table数组如何实现的：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * static class ThreadLocalMap.set()方法</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class=\"line\">    Entry[] tab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (Entry e = tab[i]; e != <span class=\"keyword\">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            replaceStaleEntry(key, value, i);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">    <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">        rehash();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>1.通过ThreadLocal的nextHashCode方法生成hash值。</li>\n</ul>\n<p>threadLocalHashCode，由nextHashCode()方法得到<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 对应上面代码的key.threadLocalHashCode</div><div class=\"line\"> * 在ThreadLocal 类中</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadLocalHashCode = nextHashCode();</div></pre></td></tr></table></figure></p>\n<ul>\n<li>2.通过 key.threadLocalHashCode &amp; (len -1) 定位到table的位置i，假设table中i位置的元素为f。</li>\n<li>3.如果f != null，假设f中的引用为k：<ul>\n<li>如果k和当前ThreadLocal实例一致，则修改value值，返回。</li>\n<li>如果k为null，说明这个f已经是stale(陈旧的)的元素。调用replaceStaleEntry方法删除table中所有陈旧的元素（即entry的引用为null）并插入新元素，返回。</li>\n<li>否则通过nextIndex方法找到下一个元素f，继续进行步骤3。</li>\n</ul>\n</li>\n<li>4.如果f == null，则把Entry加入到table的i位置中。</li>\n<li>5.通过cleanSomeSlots删除陈旧的元素，如果table中没有元素删除，需判断当前情况下是否要进行扩容。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * ThreadLocal 类中</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger nextHashCode = <span class=\"keyword\">new</span> AtomicInteger();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nextHashCode</span><span class=\"params\">()</span> </span>&#123;    </div><div class=\"line\"> <span class=\"keyword\">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  从nextHashCode方法可以看出，ThreadLocal每实例化一次，其hash值就原子增加HASH_INCREMENT。</p>\n<h4 id=\"Entry从table数组中取出\"><a href=\"#Entry从table数组中取出\" class=\"headerlink\" title=\"Entry从table数组中取出\"></a>Entry从table数组中取出</h4><p>在回看getEntry()方法，就简单多了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * ThreadLocalMap的getEntry()方法</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class=\"number\">1</span>);</div><div class=\"line\">    Entry e = table[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span> &amp;&amp; e.get() == key)</div><div class=\"line\">        <span class=\"keyword\">return</span> e;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> getEntryAfterMiss(key, i, e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>1.通过key.threadLocalHashCode &amp; (len -1)定位到table的位置i，假设table中i位置的元素为g。</li>\n<li>2.如果g不为null，且和当前ThreadLocal实例一致，则返回这个Entry。</li>\n</ul>\n<p><strong>在看一遍ThreadLocal.get()的代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同一线程中再次执行ThreadLocal.get()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();<span class=\"comment\">//得到当前子线程</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"comment\">//同一个线程，map不为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//当前ThreadLocal实例一致，则Entry不为null</span></div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>所以，同一个线程，ThreadLocalMap不为空，Entry不为null，则返回table中保存的result。不会执行到setInitialValue()。所以，而SimpleDateFormat则会每一个线程只有一个。</p>\n</blockquote>\n<p>由此，就可以得出结论了，确实可以使用ThreadLocal解决SimpleDateFormat的线程安全问题。</p>\n<pre><code>p.s. 感兴趣的可以结合ThreadLocal源码继续研究下面的内容：\n</code></pre><h4 id=\"获取当前的线程的threadLocals。\"><a href=\"#获取当前的线程的threadLocals。\" class=\"headerlink\" title=\"获取当前的线程的threadLocals。\"></a>获取当前的线程的threadLocals。</h4><ul>\n<li>如果threadLocals不为null，则通过ThreadLocalMap.getEntry方法找到对应的entry，如果其引用和当前key一致，则直接返回，否则在table剩下的元素中继续匹配。</li>\n<li>如果threadLocals为null，则通过setInitialValue方法初始化，并返回。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntryAfterMiss</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, <span class=\"keyword\">int</span> i, Entry e)</span> </span>&#123;</div><div class=\"line\"> Entry[] tab = table;</div><div class=\"line\"> <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\"> <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">     <span class=\"keyword\">if</span> (k == key)</div><div class=\"line\">         <span class=\"keyword\">return</span> e;</div><div class=\"line\">     <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>)</div><div class=\"line\">         expungeStaleEntry(i);</div><div class=\"line\">     <span class=\"keyword\">else</span></div><div class=\"line\">         i = nextIndex(i, len);</div><div class=\"line\">     e = tab[i];</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"table扩容\"><a href=\"#table扩容\" class=\"headerlink\" title=\"table扩容\"></a>table扩容</h4><p>如果table中的元素数量达到阈值threshold的3/4，会进行扩容操作，过程很简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在ThreadLocalMap类中</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Entry[] oldTab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldLen = oldTab.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> newLen = oldLen * <span class=\"number\">2</span>;</div><div class=\"line\">    Entry[] newTab = <span class=\"keyword\">new</span> Entry[newLen];</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldLen; ++j) &#123;</div><div class=\"line\">        Entry e = oldTab[j];</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                e.value = <span class=\"keyword\">null</span>; <span class=\"comment\">// Help the GC</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">while</span> (newTab[h] != <span class=\"keyword\">null</span>)</div><div class=\"line\">                    h = nextIndex(h, newLen);</div><div class=\"line\">                newTab[h] = e;</div><div class=\"line\">                count++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setThreshold(newLen);</div><div class=\"line\">    size = count;</div><div class=\"line\">    table = newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>新建新的数组newTab，大小为原来的2倍。</li>\n<li><p>复制table的元素到newTab，忽略陈旧的元素，假设table中的元素e需要复制到newTab的i位置，如果i位置存在元素，则找下一个空位置进行插入。</p>\n<pre><code>文章到这里就结束了，没有更多了:）\n 文章内容部分来自互联网，部分为自己整理，最后感谢耐心看到这里的人，\n</code></pre></li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/11/ThreadLocal-usage/\">http://agehua.github.io/2016/12/11/ThreadLocal-usage/</a></p>\n","readingTime":{"text":"8 min read","minutes":7.035,"time":422100,"words":1407},"excerpt":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>之前写过一篇文章：<a href=\"https://agehua.github.io/2016/09/05/ThreadLocal-HandlerThread-Lopper/\">《ThreadLocal、HandlerThread、Lopper区别》</a>，其中简单提及了ThreadLocal的解释。本篇文章主要结合具体应用场景——SimpleDateFormat，和大家来一起学习ThreadLocal的原理，并对ThreadLocal进行一个详细的介绍。</p>\n<p>下面是本文的参考资料：</p>\n<p>java学习记录–ThreadLocal使用案例——SimpleDateFormat：<br><a href=\"http://blog.csdn.net/u012706811/article/details/53231598\">http://blog.csdn.net/u012706811/article/details/53231598</a></p>\n<p>SimpleDateFormat的线程安全问题与解决方案：<br><a href=\"http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\">http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Thread这个类有一个变量：ThreadLocal.ThreadLocalMap threadLocals。</p>\n<p>这是一个map的数据结构，里面的元素的key就是ThreadLocal，value就是我们自定义的一些目标类。</p>\n<p>我们可以在自己的多线程类中定义好几个ThreadLocal，然后每一个ThreadLocal put一个特定的目标类，然后以后可以用ThreadLocal get到目标类（ThreadLocal用自己作为Thread里map的key），因为每个Thread有自己独自的map，所以这样可以实现每个线程有自己的LocalThread，并且一个Thread里可以有多个LocalThread。</p>\n<p>ThreadLocal为变量在每个线程中都创建了一个副本，所以每个线程可以访问自己内部的副本变量，不同线程之间不会互相干扰。</p>\n<p>本篇文章结合具体应用场景，来分析ThreadLocal为什么可以实现不同线程之间不会互相干扰。</p>","more":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>那么，在什么场景下比较适合使用ThreadLocal呢？</p>\n<p>stackoverflow上有人给出了还不错的回答：</p>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable\">When and how should I use a ThreadLocal variable?</a><br>One possible (and common) use is when you have some object that is not thread-safe, but you want to avoid synchronizing access to that object (I’m looking at you, SimpleDateFormat). Instead, give each thread its own instance of the object.</p>\n</blockquote>\n<h4 id=\"SimpleDateFormat为什么线程不安全\"><a href=\"#SimpleDateFormat为什么线程不安全\" class=\"headerlink\" title=\"SimpleDateFormat为什么线程不安全\"></a>SimpleDateFormat为什么线程不安全</h4><p>SimpleDateFormat类内部持有一个Calendar对象引用，</p>\n<p>如果你的工具类里，SimpleDateFormat是个static的，那么多个thread之间就会共享这个SimpleDateFormat，同时也会共享这个Calendar引用。</p>\n<p>查看下源码中的SimpleDateFormat.parse()方法，你会发现有如下的调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> Calendar calendar;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Date <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  calendar.clear(); <span class=\"comment\">// 清理calendar</span></div><div class=\"line\"></div><div class=\"line\">  ... <span class=\"comment\">// 执行一些操作, 设置 calendar 的日期什么的</span></div><div class=\"line\"></div><div class=\"line\">  calendar.getTime(); <span class=\"comment\">// 获取calendar的时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里calendar.clear()方法是线程不安全的，不同thread调用parse()方法，会导致结果不可预期</p>\n</blockquote>\n<p>问题重现可以看：<a href=\"http://www.cnblogs.com/zemliu/archive/2013/08/29/3290585.html\">这篇博客</a></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>最简单的解决方案我们可以把static去掉，这样每个新的线程都会有一个自己的SimpleDateFormat实例，从而避免线程安全的问题</p>\n<p>但是，使用这种方法，在高并发的情况下会大量的new SimpleDateFormat以及销毁SimpleDateFormat，这样是非常耗费资源的</p>\n<p>下面是一个从网上找的使用ThreadLocal解决SimpleDateFormat线程不安全问题的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 锁对象 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object lockObj = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** 存放不同的日期模板格式的SimpleDateFormat的Map */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt; sdfMap = <span class=\"keyword\">new</span> HashMap&lt;String, ThreadLocal&lt;SimpleDateFormat&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 返回一个ThreadLocal的SimpleDateFormat,每个线程只会new一次SimpleDateFormat</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pattern</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SimpleDateFormat <span class=\"title\">getSdf</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> </span>&#123;</div><div class=\"line\">        ThreadLocal&lt;SimpleDateFormat&gt; tl = sdfMap.get(pattern);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (lockObj) &#123;</div><div class=\"line\">                tl = sdfMap.get(pattern);</div><div class=\"line\">                <span class=\"keyword\">if</span> (tl == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map</span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"put new sdf of pattern \"</span> + pattern + <span class=\"string\">\" to map\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 这里是关键,使用ThreadLocal&lt;SimpleDateFormat&gt;替代原来直接new SimpleDateFormat</span></div><div class=\"line\">                    tl = <span class=\"keyword\">new</span> ThreadLocal&lt;SimpleDateFormat&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> SimpleDateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"thread: \"</span> + Thread.currentThread() + <span class=\"string\">\" init pattern: \"</span> + pattern);</div><div class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(pattern);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;;</div><div class=\"line\">                    sdfMap.put(pattern, tl);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> tl.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 是用ThreadLocal&lt;SimpleDateFormat&gt;来获取SimpleDateFormat,这样每个线程只会有一个SimpleDateFormat</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> date</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pattern</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">format</span><span class=\"params\">(Date date, String pattern)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getSdf(pattern).format(date);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parse</span><span class=\"params\">(String dateStr, String pattern)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getSdf(pattern).parse(dateStr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>那为什么ThreadLocal为变量在每个线程都保存了一个副本呢？</p>\n<pre><code>下面部分内容来自博文，http://www.jianshu.com/p/33c5579ef44f (深入浅出ThreadLocal)\n</code></pre><p>先看一下Thread和ThreadLocal两个类的具体结构，如下：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2016/ThreadLocal.png\" alt=\"ThreadLocal\"></p>\n<p>从线程Thread的角度来看，每个线程内部都会持有一个对ThreadLocalMap实例的引用（也就是threadLocals变量），ThreadLocalMap是TThreadLocal的静态内部类。而Entry则是ThreadLocalMap的静态内部类。ThreadLocalMap实例相当于线程的局部变量空间，由Entry[] table存储着线程的私有数据。</p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>Entry继承自WeakReference类，是存储线程私有变量的数据结构。ThreadLocal实例作为引用，意味着如果ThreadLocal实例为null，就可以从table中删除对应的Entry。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class=\"line\">      Object value;</div><div class=\"line\">      Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(k);</div><div class=\"line\">           value = v;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"ThreadLocalMap\"><a href=\"#ThreadLocalMap\" class=\"headerlink\" title=\"ThreadLocalMap\"></a>ThreadLocalMap</h4><p>内部使用table数组存储Entry，默认大小INITIAL_CAPACITY(16)，先介绍几个参数：</p>\n<ul>\n<li><strong>size</strong>：table中元素的数量。</li>\n<li><strong>threshold</strong>：table大小的2/3，当size &gt;= threshold时，遍历table并删除key为null的元素，如果删除后size &gt;= threshold*3/4时，需要对table进行扩容。</li>\n</ul>\n<h4 id=\"ThreadLocal-set-实现\"><a href=\"#ThreadLocal-set-实现\" class=\"headerlink\" title=\"ThreadLocal.set()实现\"></a>ThreadLocal.set()实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * ThreadLocal.set()</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码中看出来：</p>\n<ul>\n<li>1.从当前线程Thread中获取ThreadLocalMap实例。</li>\n<li>2.ThreadLocal实例和value封装成Entry。</li>\n</ul>\n<h4 id=\"ThreadLocal-get-实现\"><a href=\"#ThreadLocal-get-实现\" class=\"headerlink\" title=\"ThreadLocal.get() 实现\"></a>ThreadLocal.get() 实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">setInitialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        T value = initialValue();</div><div class=\"line\">        Thread t = Thread.currentThread();</div><div class=\"line\">        ThreadLocalMap map = getMap(t);</div><div class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">            map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            createMap(t, value);</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码中可以看出，</p>\n<blockquote>\n<p>ThreadLocal.get()方法，如果是不同线程ThreadLocalMap为null，最终会调用<strong>initialValue()方法</strong>，这个方法也是我们给出的解决方案中重载的方法。<br>最后得到的结果是，不同线程ThreadLocal只有一个，而SimpleDateFormat则每个线程都有一个。</p>\n</blockquote>\n<p>但当同一线程有了一个SimpleDateFormat了，会是什么情况呢？看下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同一线程中再次执行ThreadLocal.get()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();<span class=\"comment\">//得到当前子线程</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"comment\">//同一个线程，map不为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//同一线程Thread，变量threadLocals经过初始化了，则不为空</span></div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ThreadLocalMap.getEntry()是如何实现的呢？先看下Entry是如何存入table数组的</p>\n<h4 id=\"Entry存入table数组如何实现的：\"><a href=\"#Entry存入table数组如何实现的：\" class=\"headerlink\" title=\"Entry存入table数组如何实现的：\"></a>Entry存入table数组如何实现的：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * static class ThreadLocalMap.set()方法</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</div><div class=\"line\">    Entry[] tab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (Entry e = tab[i]; e != <span class=\"keyword\">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</div><div class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == key) &#123;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            replaceStaleEntry(key, value, i);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry(key, value);</div><div class=\"line\">    <span class=\"keyword\">int</span> sz = ++size;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</div><div class=\"line\">        rehash();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>1.通过ThreadLocal的nextHashCode方法生成hash值。</li>\n</ul>\n<p>threadLocalHashCode，由nextHashCode()方法得到<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 对应上面代码的key.threadLocalHashCode</div><div class=\"line\"> * 在ThreadLocal 类中</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadLocalHashCode = nextHashCode();</div></pre></td></tr></table></figure></p>\n<ul>\n<li>2.通过 key.threadLocalHashCode &amp; (len -1) 定位到table的位置i，假设table中i位置的元素为f。</li>\n<li>3.如果f != null，假设f中的引用为k：<ul>\n<li>如果k和当前ThreadLocal实例一致，则修改value值，返回。</li>\n<li>如果k为null，说明这个f已经是stale(陈旧的)的元素。调用replaceStaleEntry方法删除table中所有陈旧的元素（即entry的引用为null）并插入新元素，返回。</li>\n<li>否则通过nextIndex方法找到下一个元素f，继续进行步骤3。</li>\n</ul>\n</li>\n<li>4.如果f == null，则把Entry加入到table的i位置中。</li>\n<li>5.通过cleanSomeSlots删除陈旧的元素，如果table中没有元素删除，需判断当前情况下是否要进行扩容。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * ThreadLocal 类中</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger nextHashCode = <span class=\"keyword\">new</span> AtomicInteger();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">nextHashCode</span><span class=\"params\">()</span> </span>&#123;    </div><div class=\"line\"> <span class=\"keyword\">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  从nextHashCode方法可以看出，ThreadLocal每实例化一次，其hash值就原子增加HASH_INCREMENT。</p>\n<h4 id=\"Entry从table数组中取出\"><a href=\"#Entry从table数组中取出\" class=\"headerlink\" title=\"Entry从table数组中取出\"></a>Entry从table数组中取出</h4><p>在回看getEntry()方法，就简单多了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * ThreadLocalMap的getEntry()方法</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class=\"number\">1</span>);</div><div class=\"line\">    Entry e = table[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span> &amp;&amp; e.get() == key)</div><div class=\"line\">        <span class=\"keyword\">return</span> e;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> getEntryAfterMiss(key, i, e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>1.通过key.threadLocalHashCode &amp; (len -1)定位到table的位置i，假设table中i位置的元素为g。</li>\n<li>2.如果g不为null，且和当前ThreadLocal实例一致，则返回这个Entry。</li>\n</ul>\n<p><strong>在看一遍ThreadLocal.get()的代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同一线程中再次执行ThreadLocal.get()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();<span class=\"comment\">//得到当前子线程</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"comment\">//同一个线程，map不为空</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//当前ThreadLocal实例一致，则Entry不为null</span></div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>所以，同一个线程，ThreadLocalMap不为空，Entry不为null，则返回table中保存的result。不会执行到setInitialValue()。所以，而SimpleDateFormat则会每一个线程只有一个。</p>\n</blockquote>\n<p>由此，就可以得出结论了，确实可以使用ThreadLocal解决SimpleDateFormat的线程安全问题。</p>\n<pre><code>p.s. 感兴趣的可以结合ThreadLocal源码继续研究下面的内容：\n</code></pre><h4 id=\"获取当前的线程的threadLocals。\"><a href=\"#获取当前的线程的threadLocals。\" class=\"headerlink\" title=\"获取当前的线程的threadLocals。\"></a>获取当前的线程的threadLocals。</h4><ul>\n<li>如果threadLocals不为null，则通过ThreadLocalMap.getEntry方法找到对应的entry，如果其引用和当前key一致，则直接返回，否则在table剩下的元素中继续匹配。</li>\n<li>如果threadLocals为null，则通过setInitialValue方法初始化，并返回。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntryAfterMiss</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, <span class=\"keyword\">int</span> i, Entry e)</span> </span>&#123;</div><div class=\"line\"> Entry[] tab = table;</div><div class=\"line\"> <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\"> <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">     <span class=\"keyword\">if</span> (k == key)</div><div class=\"line\">         <span class=\"keyword\">return</span> e;</div><div class=\"line\">     <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>)</div><div class=\"line\">         expungeStaleEntry(i);</div><div class=\"line\">     <span class=\"keyword\">else</span></div><div class=\"line\">         i = nextIndex(i, len);</div><div class=\"line\">     e = tab[i];</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"table扩容\"><a href=\"#table扩容\" class=\"headerlink\" title=\"table扩容\"></a>table扩容</h4><p>如果table中的元素数量达到阈值threshold的3/4，会进行扩容操作，过程很简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 在ThreadLocalMap类中</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Entry[] oldTab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldLen = oldTab.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> newLen = oldLen * <span class=\"number\">2</span>;</div><div class=\"line\">    Entry[] newTab = <span class=\"keyword\">new</span> Entry[newLen];</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldLen; ++j) &#123;</div><div class=\"line\">        Entry e = oldTab[j];</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                e.value = <span class=\"keyword\">null</span>; <span class=\"comment\">// Help the GC</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">while</span> (newTab[h] != <span class=\"keyword\">null</span>)</div><div class=\"line\">                    h = nextIndex(h, newLen);</div><div class=\"line\">                newTab[h] = e;</div><div class=\"line\">                count++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setThreshold(newLen);</div><div class=\"line\">    size = count;</div><div class=\"line\">    table = newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>新建新的数组newTab，大小为原来的2倍。</li>\n<li><p>复制table的元素到newTab，忽略陈旧的元素，假设table中的元素e需要复制到newTab的i位置，如果i位置存在元素，则找下一个空位置进行插入。</p>\n<pre><code>文章到这里就结束了，没有更多了:）\n 文章内容部分来自互联网，部分为自己整理，最后感谢耐心看到这里的人，\n</code></pre></li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/11/ThreadLocal-usage/\">http://agehua.github.io/2016/12/11/ThreadLocal-usage/</a></p>"},{"layout":"post","title":"IM 国外公司，服务费，方案","keywords":"instant messaging, IM Company","banner":"http://obxk8w81b.bkt.clouddn.com/Autumn%20Landscape%20with%20Four%20Trees.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Autumn%20Landscape%20with%20Four%20Trees.jpg","toc":true,"_content":"\n### 一、海外提供IM服务的公司\n\n#### 1.1 Sinch\n官网： https://www.sinch.com/products/instant-messaging/  \n收费介绍\n![Snich_pricing](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_snich.png)\n\n<!--more-->\n\n#### 1.2 quickblox\n\n官网：https://quickblox.com/\n收费介绍\n![quickblox](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_quickblox.png)\n\n#### 1.3 Layer\nhttps://layer.com/use-cases\n\n具体价格需要注册，\n![Layer](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer.png)\n然后注册的邮箱里会收到一封邮件：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer_email.png)\n\n#### 1.4sendbird\nhttps://sendbird.com\n\n收费介绍\n![sendbird](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_sendbird.png)\n\n#### 1.5 applozic\nhttps://www.applozic.com/\n收费介绍\n![applozic](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_applozic.png)\n\n### 二、各家IM服务公司比较\n![im_comparation](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_comparation.png)\n\n图片来源：[Which Chat SDK is better for user experience? Applozic, Sendbird, Layer or Quickblox!](https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/)\n\n\n#### 2.1 QuickBlox vs Applozic\n\n这部分内容转载自[stackoverflow](http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin)\n\nI have recently just tested two of the solutions you have cited.\n\n**QuickBlox:**\n- protocol xmpp\n- open source\n- documentated less clearly than applozic\n- easy set up\n\n**Applozic:**\n- protocol mqtt\n- open source easy set up, if a bit laborious\n- well documented, and very easy API to use.\n- Very customizable.\n\n**Both programs:**\n- have video call/audio call/groups\n- have code bases that are constantly being updated, and from their Github pages new version have been released in the past few months\n\n> I preferred Applozic as the user interface was nicer and easier to use, and the features and pricing clearer. I also preferred the API and the setup code was easier.\n\n\n#### 2.2 Quickblox vs SendBird vs Layer\n\n本部分内容转载自[Do I need to have my own backend?](https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend)\n\nMy research on Quickblox vs SendBird vs Layer.com is:\n\n- 1.Backend-as-a-Service (BaaS) or Chat-as-a-Service (CaaS):\n  - Quickblox: Both, BaaS and CaaS\n  - SendBird (aka JIVER): CaaS (BaaS for Enterprise-only)\n  - Layer.com: CaaS only\n- 2.WebSocket-based:\n  - Quickblox: No (XMPP)\n  - SendBird: Yes\n  - Layer.com: Yes\n- 3.Voice and Video:\n  - Quickblox: Yes\n  - SendBird: No\n  - Layer.com: No\n- 4.Chat UI Kit:\n  - Quickblox: QMChatViewController\n  - SendBird: Open-source Sample UIs for iOS, Android, JavaScript (Web & React Native), Xamarin, Unity (You can use their Sample UI or 3rd party UI Kit like JSQMessagesViewController)\n  - Layer.com: Atlas\n- 5.Number of Members in a Group:\n  - Quickblox: Thousands (you may need to host Quickblox BaaS at a dedicated AWS infrastructure for better performance)\n  - SendBird: Thousands (no need for an extra infrastructure)\n  - Layer.com: limited to 25 per group\n- 6.The ability to host the BaaS/CaaS at your own IaaS:\n  - Quickblox: Yes (setup cost starts from $599)\n  - SendBird: Yes (limited to Enterprise plans only)\n  - Layer.com: No\n- 7.Custom Objects Backend (the need for extra infrastructure):\n  - Quickblox: Included in Quickblox BaaS\n  - SendBird: Partial support (Key/value custom object stores for channels to be released in March)\n  - Layer.com: No\n- 8.BaaS/CaaS Admin Panel/Dashboard:\n  - Quickblox: Basic with Custom Dashboard when subscribed to the enterprise plan, starts from $599/month (Classic UI)\n  - SendBird: Advanced (Modern UI)\n  - Layer.com: Basic (Modern UI)\n- 9.Attachment max file size:\n  - Quickblox: Unknown\n  - SendBird: 25MB per file (custom limit for Enterprise plans)\n  - Layer.com: 2GB (be aware that their pricing is based on the data transfer)\n- 10.Availability SLA:\n  - Quickblox: Based on AWS EC2 SLA (99.95%)\n  - SendBird: 99.9%\n  - Layer.com: 99.9%\n- 11.Pricing (per month):\n  - Quickblox: Mainly based on the number of messengers per second (/s) and monthly active users: Free-$49-$214-$599-$1,199-$2,399 (Plans) \n  - SendBird: Mainly based on the number of monthly active users (MAU): Free-$59-$179-$599-Custom (https://sendbird.com/pricing) \n  - Layer.com: Mainly based on the monthly data transfer and monthly users: Free-$599 per month-Custom (https://layer.com/plans)\n- 12.Number of freelancers at UpWork.com who have this Baas/CaaS as one of their skill set:\n  - Quickblox: 547 (keyword: \"Quickblox\")\n  - SendBird: 0 (keyword: \"SendBird\" or \"JIVER\") « new to the market\n  - Layer: 13 (keyword: \"Layer.com\" not Layer)\n\n#### 2.3 更多比较：\n\nhttps://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\n\nhttp://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\n\nhttps://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\n\nhttps://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer\n\nhttps://stackshare.io/stackups/sendbird-vs-sinch-vs-layer\n\nhttps://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web\n","source":"_posts/2017-01-13-abroad-IM-service-company.md","raw":"---\nlayout: post\ntitle:  IM 国外公司，服务费，方案\ncategory: Investigation\ntags:\n  - IM Company\nkeywords: instant messaging, IM Company\nbanner: http://obxk8w81b.bkt.clouddn.com/Autumn%20Landscape%20with%20Four%20Trees.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Autumn%20Landscape%20with%20Four%20Trees.jpg\ntoc: true\n---\n\n### 一、海外提供IM服务的公司\n\n#### 1.1 Sinch\n官网： https://www.sinch.com/products/instant-messaging/  \n收费介绍\n![Snich_pricing](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_snich.png)\n\n<!--more-->\n\n#### 1.2 quickblox\n\n官网：https://quickblox.com/\n收费介绍\n![quickblox](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_quickblox.png)\n\n#### 1.3 Layer\nhttps://layer.com/use-cases\n\n具体价格需要注册，\n![Layer](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer.png)\n然后注册的邮箱里会收到一封邮件：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer_email.png)\n\n#### 1.4sendbird\nhttps://sendbird.com\n\n收费介绍\n![sendbird](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_sendbird.png)\n\n#### 1.5 applozic\nhttps://www.applozic.com/\n收费介绍\n![applozic](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_applozic.png)\n\n### 二、各家IM服务公司比较\n![im_comparation](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_comparation.png)\n\n图片来源：[Which Chat SDK is better for user experience? Applozic, Sendbird, Layer or Quickblox!](https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/)\n\n\n#### 2.1 QuickBlox vs Applozic\n\n这部分内容转载自[stackoverflow](http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin)\n\nI have recently just tested two of the solutions you have cited.\n\n**QuickBlox:**\n- protocol xmpp\n- open source\n- documentated less clearly than applozic\n- easy set up\n\n**Applozic:**\n- protocol mqtt\n- open source easy set up, if a bit laborious\n- well documented, and very easy API to use.\n- Very customizable.\n\n**Both programs:**\n- have video call/audio call/groups\n- have code bases that are constantly being updated, and from their Github pages new version have been released in the past few months\n\n> I preferred Applozic as the user interface was nicer and easier to use, and the features and pricing clearer. I also preferred the API and the setup code was easier.\n\n\n#### 2.2 Quickblox vs SendBird vs Layer\n\n本部分内容转载自[Do I need to have my own backend?](https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend)\n\nMy research on Quickblox vs SendBird vs Layer.com is:\n\n- 1.Backend-as-a-Service (BaaS) or Chat-as-a-Service (CaaS):\n  - Quickblox: Both, BaaS and CaaS\n  - SendBird (aka JIVER): CaaS (BaaS for Enterprise-only)\n  - Layer.com: CaaS only\n- 2.WebSocket-based:\n  - Quickblox: No (XMPP)\n  - SendBird: Yes\n  - Layer.com: Yes\n- 3.Voice and Video:\n  - Quickblox: Yes\n  - SendBird: No\n  - Layer.com: No\n- 4.Chat UI Kit:\n  - Quickblox: QMChatViewController\n  - SendBird: Open-source Sample UIs for iOS, Android, JavaScript (Web & React Native), Xamarin, Unity (You can use their Sample UI or 3rd party UI Kit like JSQMessagesViewController)\n  - Layer.com: Atlas\n- 5.Number of Members in a Group:\n  - Quickblox: Thousands (you may need to host Quickblox BaaS at a dedicated AWS infrastructure for better performance)\n  - SendBird: Thousands (no need for an extra infrastructure)\n  - Layer.com: limited to 25 per group\n- 6.The ability to host the BaaS/CaaS at your own IaaS:\n  - Quickblox: Yes (setup cost starts from $599)\n  - SendBird: Yes (limited to Enterprise plans only)\n  - Layer.com: No\n- 7.Custom Objects Backend (the need for extra infrastructure):\n  - Quickblox: Included in Quickblox BaaS\n  - SendBird: Partial support (Key/value custom object stores for channels to be released in March)\n  - Layer.com: No\n- 8.BaaS/CaaS Admin Panel/Dashboard:\n  - Quickblox: Basic with Custom Dashboard when subscribed to the enterprise plan, starts from $599/month (Classic UI)\n  - SendBird: Advanced (Modern UI)\n  - Layer.com: Basic (Modern UI)\n- 9.Attachment max file size:\n  - Quickblox: Unknown\n  - SendBird: 25MB per file (custom limit for Enterprise plans)\n  - Layer.com: 2GB (be aware that their pricing is based on the data transfer)\n- 10.Availability SLA:\n  - Quickblox: Based on AWS EC2 SLA (99.95%)\n  - SendBird: 99.9%\n  - Layer.com: 99.9%\n- 11.Pricing (per month):\n  - Quickblox: Mainly based on the number of messengers per second (/s) and monthly active users: Free-$49-$214-$599-$1,199-$2,399 (Plans) \n  - SendBird: Mainly based on the number of monthly active users (MAU): Free-$59-$179-$599-Custom (https://sendbird.com/pricing) \n  - Layer.com: Mainly based on the monthly data transfer and monthly users: Free-$599 per month-Custom (https://layer.com/plans)\n- 12.Number of freelancers at UpWork.com who have this Baas/CaaS as one of their skill set:\n  - Quickblox: 547 (keyword: \"Quickblox\")\n  - SendBird: 0 (keyword: \"SendBird\" or \"JIVER\") « new to the market\n  - Layer: 13 (keyword: \"Layer.com\" not Layer)\n\n#### 2.3 更多比较：\n\nhttps://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\n\nhttp://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\n\nhttps://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\n\nhttps://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer\n\nhttps://stackshare.io/stackups/sendbird-vs-sinch-vs-layer\n\nhttps://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web\n","slug":"abroad-IM-service-company","published":1,"date":"2017-01-12T16:00:00.000Z","updated":"2017-11-23T07:12:47.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ebzv002jd6yk8xvoyg3x","content":"<h3 id=\"一、海外提供IM服务的公司\"><a href=\"#一、海外提供IM服务的公司\" class=\"headerlink\" title=\"一、海外提供IM服务的公司\"></a>一、海外提供IM服务的公司</h3><h4 id=\"1-1-Sinch\"><a href=\"#1-1-Sinch\" class=\"headerlink\" title=\"1.1 Sinch\"></a>1.1 Sinch</h4><p>官网： <a href=\"https://www.sinch.com/products/instant-messaging/\" target=\"_blank\" rel=\"external\">https://www.sinch.com/products/instant-messaging/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_snich.png\" alt=\"Snich_pricing\"></p>\n<a id=\"more\"></a>\n<h4 id=\"1-2-quickblox\"><a href=\"#1-2-quickblox\" class=\"headerlink\" title=\"1.2 quickblox\"></a>1.2 quickblox</h4><p>官网：<a href=\"https://quickblox.com/\" target=\"_blank\" rel=\"external\">https://quickblox.com/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_quickblox.png\" alt=\"quickblox\"></p>\n<h4 id=\"1-3-Layer\"><a href=\"#1-3-Layer\" class=\"headerlink\" title=\"1.3 Layer\"></a>1.3 Layer</h4><p><a href=\"https://layer.com/use-cases\" target=\"_blank\" rel=\"external\">https://layer.com/use-cases</a></p>\n<p>具体价格需要注册，<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer.png\" alt=\"Layer\"><br>然后注册的邮箱里会收到一封邮件：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer_email.png\" alt=\"\"></p>\n<h4 id=\"1-4sendbird\"><a href=\"#1-4sendbird\" class=\"headerlink\" title=\"1.4sendbird\"></a>1.4sendbird</h4><p><a href=\"https://sendbird.com\" target=\"_blank\" rel=\"external\">https://sendbird.com</a></p>\n<p>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_sendbird.png\" alt=\"sendbird\"></p>\n<h4 id=\"1-5-applozic\"><a href=\"#1-5-applozic\" class=\"headerlink\" title=\"1.5 applozic\"></a>1.5 applozic</h4><p><a href=\"https://www.applozic.com/\" target=\"_blank\" rel=\"external\">https://www.applozic.com/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_applozic.png\" alt=\"applozic\"></p>\n<h3 id=\"二、各家IM服务公司比较\"><a href=\"#二、各家IM服务公司比较\" class=\"headerlink\" title=\"二、各家IM服务公司比较\"></a>二、各家IM服务公司比较</h3><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_comparation.png\" alt=\"im_comparation\"></p>\n<p>图片来源：<a href=\"https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\" target=\"_blank\" rel=\"external\">Which Chat SDK is better for user experience? Applozic, Sendbird, Layer or Quickblox!</a></p>\n<h4 id=\"2-1-QuickBlox-vs-Applozic\"><a href=\"#2-1-QuickBlox-vs-Applozic\" class=\"headerlink\" title=\"2.1 QuickBlox vs Applozic\"></a>2.1 QuickBlox vs Applozic</h4><p>这部分内容转载自<a href=\"http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\" target=\"_blank\" rel=\"external\">stackoverflow</a></p>\n<p>I have recently just tested two of the solutions you have cited.</p>\n<p><strong>QuickBlox:</strong></p>\n<ul>\n<li>protocol xmpp</li>\n<li>open source</li>\n<li>documentated less clearly than applozic</li>\n<li>easy set up</li>\n</ul>\n<p><strong>Applozic:</strong></p>\n<ul>\n<li>protocol mqtt</li>\n<li>open source easy set up, if a bit laborious</li>\n<li>well documented, and very easy API to use.</li>\n<li>Very customizable.</li>\n</ul>\n<p><strong>Both programs:</strong></p>\n<ul>\n<li>have video call/audio call/groups</li>\n<li>have code bases that are constantly being updated, and from their Github pages new version have been released in the past few months</li>\n</ul>\n<blockquote>\n<p>I preferred Applozic as the user interface was nicer and easier to use, and the features and pricing clearer. I also preferred the API and the setup code was easier.</p>\n</blockquote>\n<h4 id=\"2-2-Quickblox-vs-SendBird-vs-Layer\"><a href=\"#2-2-Quickblox-vs-SendBird-vs-Layer\" class=\"headerlink\" title=\"2.2 Quickblox vs SendBird vs Layer\"></a>2.2 Quickblox vs SendBird vs Layer</h4><p>本部分内容转载自<a href=\"https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\" target=\"_blank\" rel=\"external\">Do I need to have my own backend?</a></p>\n<p>My research on Quickblox vs SendBird vs Layer.com is:</p>\n<ul>\n<li>1.Backend-as-a-Service (BaaS) or Chat-as-a-Service (CaaS):<ul>\n<li>Quickblox: Both, BaaS and CaaS</li>\n<li>SendBird (aka JIVER): CaaS (BaaS for Enterprise-only)</li>\n<li>Layer.com: CaaS only</li>\n</ul>\n</li>\n<li>2.WebSocket-based:<ul>\n<li>Quickblox: No (XMPP)</li>\n<li>SendBird: Yes</li>\n<li>Layer.com: Yes</li>\n</ul>\n</li>\n<li>3.Voice and Video:<ul>\n<li>Quickblox: Yes</li>\n<li>SendBird: No</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>4.Chat UI Kit:<ul>\n<li>Quickblox: QMChatViewController</li>\n<li>SendBird: Open-source Sample UIs for iOS, Android, JavaScript (Web &amp; React Native), Xamarin, Unity (You can use their Sample UI or 3rd party UI Kit like JSQMessagesViewController)</li>\n<li>Layer.com: Atlas</li>\n</ul>\n</li>\n<li>5.Number of Members in a Group:<ul>\n<li>Quickblox: Thousands (you may need to host Quickblox BaaS at a dedicated AWS infrastructure for better performance)</li>\n<li>SendBird: Thousands (no need for an extra infrastructure)</li>\n<li>Layer.com: limited to 25 per group</li>\n</ul>\n</li>\n<li>6.The ability to host the BaaS/CaaS at your own IaaS:<ul>\n<li>Quickblox: Yes (setup cost starts from $599)</li>\n<li>SendBird: Yes (limited to Enterprise plans only)</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>7.Custom Objects Backend (the need for extra infrastructure):<ul>\n<li>Quickblox: Included in Quickblox BaaS</li>\n<li>SendBird: Partial support (Key/value custom object stores for channels to be released in March)</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>8.BaaS/CaaS Admin Panel/Dashboard:<ul>\n<li>Quickblox: Basic with Custom Dashboard when subscribed to the enterprise plan, starts from $599/month (Classic UI)</li>\n<li>SendBird: Advanced (Modern UI)</li>\n<li>Layer.com: Basic (Modern UI)</li>\n</ul>\n</li>\n<li>9.Attachment max file size:<ul>\n<li>Quickblox: Unknown</li>\n<li>SendBird: 25MB per file (custom limit for Enterprise plans)</li>\n<li>Layer.com: 2GB (be aware that their pricing is based on the data transfer)</li>\n</ul>\n</li>\n<li>10.Availability SLA:<ul>\n<li>Quickblox: Based on AWS EC2 SLA (99.95%)</li>\n<li>SendBird: 99.9%</li>\n<li>Layer.com: 99.9%</li>\n</ul>\n</li>\n<li>11.Pricing (per month):<ul>\n<li>Quickblox: Mainly based on the number of messengers per second (/s) and monthly active users: Free-$49-$214-$599-$1,199-$2,399 (Plans) </li>\n<li>SendBird: Mainly based on the number of monthly active users (MAU): Free-$59-$179-$599-Custom (<a href=\"https://sendbird.com/pricing\" target=\"_blank\" rel=\"external\">https://sendbird.com/pricing</a>) </li>\n<li>Layer.com: Mainly based on the monthly data transfer and monthly users: Free-$599 per month-Custom (<a href=\"https://layer.com/plans\" target=\"_blank\" rel=\"external\">https://layer.com/plans</a>)</li>\n</ul>\n</li>\n<li>12.Number of freelancers at UpWork.com who have this Baas/CaaS as one of their skill set:<ul>\n<li>Quickblox: 547 (keyword: “Quickblox”)</li>\n<li>SendBird: 0 (keyword: “SendBird” or “JIVER”) « new to the market</li>\n<li>Layer: 13 (keyword: “Layer.com” not Layer)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-更多比较：\"><a href=\"#2-3-更多比较：\" class=\"headerlink\" title=\"2.3 更多比较：\"></a>2.3 更多比较：</h4><p><a href=\"https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\" target=\"_blank\" rel=\"external\">https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend</a></p>\n<p><a href=\"http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin</a></p>\n<p><a href=\"https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\" target=\"_blank\" rel=\"external\">https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/</a></p>\n<p><a href=\"https://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer\" target=\"_blank\" rel=\"external\">https://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer</a></p>\n<p><a href=\"https://stackshare.io/stackups/sendbird-vs-sinch-vs-layer\" target=\"_blank\" rel=\"external\">https://stackshare.io/stackups/sendbird-vs-sinch-vs-layer</a></p>\n<p><a href=\"https://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/01/13/abroad-IM-service-company/\">http://agehua.github.io/2017/01/13/abroad-IM-service-company/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.86,"time":171600,"words":572},"excerpt":"<h3 id=\"一、海外提供IM服务的公司\"><a href=\"#一、海外提供IM服务的公司\" class=\"headerlink\" title=\"一、海外提供IM服务的公司\"></a>一、海外提供IM服务的公司</h3><h4 id=\"1-1-Sinch\"><a href=\"#1-1-Sinch\" class=\"headerlink\" title=\"1.1 Sinch\"></a>1.1 Sinch</h4><p>官网： <a href=\"https://www.sinch.com/products/instant-messaging/\">https://www.sinch.com/products/instant-messaging/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_snich.png\" alt=\"Snich_pricing\"></p>","more":"<h4 id=\"1-2-quickblox\"><a href=\"#1-2-quickblox\" class=\"headerlink\" title=\"1.2 quickblox\"></a>1.2 quickblox</h4><p>官网：<a href=\"https://quickblox.com/\">https://quickblox.com/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_quickblox.png\" alt=\"quickblox\"></p>\n<h4 id=\"1-3-Layer\"><a href=\"#1-3-Layer\" class=\"headerlink\" title=\"1.3 Layer\"></a>1.3 Layer</h4><p><a href=\"https://layer.com/use-cases\">https://layer.com/use-cases</a></p>\n<p>具体价格需要注册，<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer.png\" alt=\"Layer\"><br>然后注册的邮箱里会收到一封邮件：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_layer_email.png\" alt=\"\"></p>\n<h4 id=\"1-4sendbird\"><a href=\"#1-4sendbird\" class=\"headerlink\" title=\"1.4sendbird\"></a>1.4sendbird</h4><p><a href=\"https://sendbird.com\">https://sendbird.com</a></p>\n<p>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_sendbird.png\" alt=\"sendbird\"></p>\n<h4 id=\"1-5-applozic\"><a href=\"#1-5-applozic\" class=\"headerlink\" title=\"1.5 applozic\"></a>1.5 applozic</h4><p><a href=\"https://www.applozic.com/\">https://www.applozic.com/</a><br>收费介绍<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_applozic.png\" alt=\"applozic\"></p>\n<h3 id=\"二、各家IM服务公司比较\"><a href=\"#二、各家IM服务公司比较\" class=\"headerlink\" title=\"二、各家IM服务公司比较\"></a>二、各家IM服务公司比较</h3><p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/im_company_abroad/im_comparation.png\" alt=\"im_comparation\"></p>\n<p>图片来源：<a href=\"https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\">Which Chat SDK is better for user experience? Applozic, Sendbird, Layer or Quickblox!</a></p>\n<h4 id=\"2-1-QuickBlox-vs-Applozic\"><a href=\"#2-1-QuickBlox-vs-Applozic\" class=\"headerlink\" title=\"2.1 QuickBlox vs Applozic\"></a>2.1 QuickBlox vs Applozic</h4><p>这部分内容转载自<a href=\"http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\">stackoverflow</a></p>\n<p>I have recently just tested two of the solutions you have cited.</p>\n<p><strong>QuickBlox:</strong></p>\n<ul>\n<li>protocol xmpp</li>\n<li>open source</li>\n<li>documentated less clearly than applozic</li>\n<li>easy set up</li>\n</ul>\n<p><strong>Applozic:</strong></p>\n<ul>\n<li>protocol mqtt</li>\n<li>open source easy set up, if a bit laborious</li>\n<li>well documented, and very easy API to use.</li>\n<li>Very customizable.</li>\n</ul>\n<p><strong>Both programs:</strong></p>\n<ul>\n<li>have video call/audio call/groups</li>\n<li>have code bases that are constantly being updated, and from their Github pages new version have been released in the past few months</li>\n</ul>\n<blockquote>\n<p>I preferred Applozic as the user interface was nicer and easier to use, and the features and pricing clearer. I also preferred the API and the setup code was easier.</p>\n</blockquote>\n<h4 id=\"2-2-Quickblox-vs-SendBird-vs-Layer\"><a href=\"#2-2-Quickblox-vs-SendBird-vs-Layer\" class=\"headerlink\" title=\"2.2 Quickblox vs SendBird vs Layer\"></a>2.2 Quickblox vs SendBird vs Layer</h4><p>本部分内容转载自<a href=\"https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\">Do I need to have my own backend?</a></p>\n<p>My research on Quickblox vs SendBird vs Layer.com is:</p>\n<ul>\n<li>1.Backend-as-a-Service (BaaS) or Chat-as-a-Service (CaaS):<ul>\n<li>Quickblox: Both, BaaS and CaaS</li>\n<li>SendBird (aka JIVER): CaaS (BaaS for Enterprise-only)</li>\n<li>Layer.com: CaaS only</li>\n</ul>\n</li>\n<li>2.WebSocket-based:<ul>\n<li>Quickblox: No (XMPP)</li>\n<li>SendBird: Yes</li>\n<li>Layer.com: Yes</li>\n</ul>\n</li>\n<li>3.Voice and Video:<ul>\n<li>Quickblox: Yes</li>\n<li>SendBird: No</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>4.Chat UI Kit:<ul>\n<li>Quickblox: QMChatViewController</li>\n<li>SendBird: Open-source Sample UIs for iOS, Android, JavaScript (Web &amp; React Native), Xamarin, Unity (You can use their Sample UI or 3rd party UI Kit like JSQMessagesViewController)</li>\n<li>Layer.com: Atlas</li>\n</ul>\n</li>\n<li>5.Number of Members in a Group:<ul>\n<li>Quickblox: Thousands (you may need to host Quickblox BaaS at a dedicated AWS infrastructure for better performance)</li>\n<li>SendBird: Thousands (no need for an extra infrastructure)</li>\n<li>Layer.com: limited to 25 per group</li>\n</ul>\n</li>\n<li>6.The ability to host the BaaS/CaaS at your own IaaS:<ul>\n<li>Quickblox: Yes (setup cost starts from $599)</li>\n<li>SendBird: Yes (limited to Enterprise plans only)</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>7.Custom Objects Backend (the need for extra infrastructure):<ul>\n<li>Quickblox: Included in Quickblox BaaS</li>\n<li>SendBird: Partial support (Key/value custom object stores for channels to be released in March)</li>\n<li>Layer.com: No</li>\n</ul>\n</li>\n<li>8.BaaS/CaaS Admin Panel/Dashboard:<ul>\n<li>Quickblox: Basic with Custom Dashboard when subscribed to the enterprise plan, starts from $599/month (Classic UI)</li>\n<li>SendBird: Advanced (Modern UI)</li>\n<li>Layer.com: Basic (Modern UI)</li>\n</ul>\n</li>\n<li>9.Attachment max file size:<ul>\n<li>Quickblox: Unknown</li>\n<li>SendBird: 25MB per file (custom limit for Enterprise plans)</li>\n<li>Layer.com: 2GB (be aware that their pricing is based on the data transfer)</li>\n</ul>\n</li>\n<li>10.Availability SLA:<ul>\n<li>Quickblox: Based on AWS EC2 SLA (99.95%)</li>\n<li>SendBird: 99.9%</li>\n<li>Layer.com: 99.9%</li>\n</ul>\n</li>\n<li>11.Pricing (per month):<ul>\n<li>Quickblox: Mainly based on the number of messengers per second (/s) and monthly active users: Free-$49-$214-$599-$1,199-$2,399 (Plans) </li>\n<li>SendBird: Mainly based on the number of monthly active users (MAU): Free-$59-$179-$599-Custom (<a href=\"https://sendbird.com/pricing\">https://sendbird.com/pricing</a>) </li>\n<li>Layer.com: Mainly based on the monthly data transfer and monthly users: Free-$599 per month-Custom (<a href=\"https://layer.com/plans\">https://layer.com/plans</a>)</li>\n</ul>\n</li>\n<li>12.Number of freelancers at UpWork.com who have this Baas/CaaS as one of their skill set:<ul>\n<li>Quickblox: 547 (keyword: “Quickblox”)</li>\n<li>SendBird: 0 (keyword: “SendBird” or “JIVER”) « new to the market</li>\n<li>Layer: 13 (keyword: “Layer.com” not Layer)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-更多比较：\"><a href=\"#2-3-更多比较：\" class=\"headerlink\" title=\"2.3 更多比较：\"></a>2.3 更多比较：</h4><p><a href=\"https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend\">https://www.quora.com/Quickblox-vs-SendBird-vs-Layer-com-Do-I-need-to-have-my-own-backend</a></p>\n<p><a href=\"http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin\">http://stackoverflow.com/questions/37678528/comparing-layer-applozic-quickblox-sendbird-for-quick-whatsapp-like-messagin</a></p>\n<p><a href=\"https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/\">https://www.applozic.com/blog/applozic-vs-sendbird-vs-layer-vs-quickblox-alternatives/</a></p>\n<p><a href=\"https://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer\">https://siftery.com/product-comparison/sendbird-vs-quickblox-vs-layer</a></p>\n<p><a href=\"https://stackshare.io/stackups/sendbird-vs-sinch-vs-layer\">https://stackshare.io/stackups/sendbird-vs-sinch-vs-layer</a></p>\n<p><a href=\"https://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web\">https://www.quora.com/What-SDKs-APIs-are-viable-for-implementing-instant-messaging-between-clients-Android-iOS-and-web</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/01/13/abroad-IM-service-company/\">http://agehua.github.io/2017/01/13/abroad-IM-service-company/</a></p>"},{"layout":"post","title":"Android 增量更新整理","keywords":"Android Patch Update","banner":"http://obxk8w81b.bkt.clouddn.com/A%20Girl%20in%20the%20Street,%20Two%20Coaches%20in%20the%20Background.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/A%20Girl%20in%20the%20Street,%20Two%20Coaches%20in%20the%20Background.jpg","toc":true,"_content":"\n### 背景\n在前几年，整体移动网络环境相比现在差很多，加之流量费用又相对较高，因此每当我们发布新版本的时候，一些用户升级并不是很积极，这就造成了新版本的升级率并不高。而google为了解决了这个问题，提出了Smart App Update，即增量更新（也叫做差分升级）。\n\n增量更新与热修复完全不是一个东西。增量更新需要重新安装apk，而热修复不需要。热修复也能完成部分增量更新的功能。\n\n\n### 增量更新的流程\n增量更新的具体流程是：用户手机上安装着某个应用，下载了增量包，手机上的apk和增量包合并形成新的包，然后再次安装（注意这个过程是要重新安装的，当然部分应用市场有root权限你可能感知不到）。\n\n<!--more-->\n\n### 增量更新的原理\n增量更新的原理也很简单，就是将手机上已安装的旧版本apk与服务器端新版本apk进行二进制对比，并得到差分包（patch），用户在升级更新应用时，只需要下载差分包，然后在本地使用差分包与旧版的apk合成新版apk，然后进行安装。差分包文件的大小，那就远比APK小得多了，这样也便于用户进行应用升级。\n\n那么增量更新的流程可以细化为几个关键点：\n\n- 1.用户手机上提取当前安装应用的apk\n- 2.如何利用old.apk和new.apk生成增量文件（差分包）\n- 3.增加文件与1.中的old.apk合并，然后安装\n\n旧版的APK可以在**/data/app/%packagename%/**下找到。\n\n也可以参考下面的代码：\n\n~~~ JavaScript\npublic class ApkExtract {\n    public static String extract(Context context) {\n        context = context.getApplicationContext();\n        ApplicationInfo applicationInfo = context.getApplicationInfo();\n        String apkPath = applicationInfo.sourceDir;\n        Log.d(\"hongyang\", apkPath);\n        return apkPath;\n    }\n}\n~~~\n\n这部分可以参考[张鸿洋的博客](http://blog.csdn.net/lmj623565791/article/details/52761658)\n\n#### 关于生成差分包\n制作差分包的工具为[bsdiff](http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz)，\n\n网址：\n\nhttp://www.daemonology.net/bsdiff/\n\n下载地址：\n\nhttp://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\n\n这是一个非常牛的二进制查分工具，bsdiff源代码在Android的源码目录下 ”\\\\external\\\\bsdiff“”这边也可以找到。另外还需要依赖[bzlib](http://www.bzip.org/downloads.html)来进行打包。在安全性方面，补丁和新旧版APK最好都要进行MD5验证，以免被篡改。\n\n关于这个工具可以使用别人编译好的so库，[这里](https://github.com/hongyangAndroid/BsDiff_And_Patch/tree/master/so-dist)；熟悉NDK开发的也可以自己编译，[请看这里](http://blog.csdn.net/lmj623565791/article/details/52761658)。这里就不在考虑这个工具问题了。\n\n- 生成增量文件\n~~~ JavaScript\n./bsdiff old.apk new.apk old-to-new.patch\n~~~\n这样就生成了一个增量文件old-to-new.patch\n\n#### 关于合并差分包\n生成差分包肯定是在服务端，合并差分包才是Android客户端需要做的：\n\n- 增量文件和old.apk合并成新的apk\n~~~ JavaScript\n./bspatch old.apk new2.apk old-to-new.patch\n~~~\n这样就生成一个new2.apk\n\n生成后，要查看下两个文件的md5值。如果两个文件md5值一致，那么几乎可以肯定两个文件时一模一样的。\n\n\n### 增量更新存在的不足\n- 1、增量升级是以两个应用版本之间的差异来生成补丁的，但是我们无法保证用户每次的及时升级到最新，也就是在更新前，新版和旧版只差一个版本，所以必须对你所发布的每一个版本都和最新的版本作差分，以便使所有版本的用户都可以差分升级，这样相对就比较繁琐了。解决方法也有，可以通过Shell脚本来实现批量生成。\n\n- 2.增量升级能成功的前提是，从手机端能够获得旧版APK，并且与服务端的APK签名是一样的，所以像那些破解的APP就无法实现更新。前面也提到了，为了安全性，防止补丁合成错误，最好在补丁合成前对旧版本的apk进行sha1或者MD5校验，保证基础包的一致性，这样才能顺利的实现增量升级。\n\n想要封装一套增量更新的工具，请看这篇文章：[打造Android万能的软件更新库，修改只要一点点](http://blog.csdn.net/huang_cai_yuan/article/details/52927630)\n","source":"_posts/2016-12-20-Android-patch-update.md","raw":"---\nlayout: post\ntitle:  Android 增量更新整理\ncategory: accumulation\ntags:\n  - ANDROID\n  - Patch Update\nkeywords: Android Patch Update\nbanner: http://obxk8w81b.bkt.clouddn.com/A%20Girl%20in%20the%20Street,%20Two%20Coaches%20in%20the%20Background.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/A%20Girl%20in%20the%20Street,%20Two%20Coaches%20in%20the%20Background.jpg\ntoc: true\n---\n\n### 背景\n在前几年，整体移动网络环境相比现在差很多，加之流量费用又相对较高，因此每当我们发布新版本的时候，一些用户升级并不是很积极，这就造成了新版本的升级率并不高。而google为了解决了这个问题，提出了Smart App Update，即增量更新（也叫做差分升级）。\n\n增量更新与热修复完全不是一个东西。增量更新需要重新安装apk，而热修复不需要。热修复也能完成部分增量更新的功能。\n\n\n### 增量更新的流程\n增量更新的具体流程是：用户手机上安装着某个应用，下载了增量包，手机上的apk和增量包合并形成新的包，然后再次安装（注意这个过程是要重新安装的，当然部分应用市场有root权限你可能感知不到）。\n\n<!--more-->\n\n### 增量更新的原理\n增量更新的原理也很简单，就是将手机上已安装的旧版本apk与服务器端新版本apk进行二进制对比，并得到差分包（patch），用户在升级更新应用时，只需要下载差分包，然后在本地使用差分包与旧版的apk合成新版apk，然后进行安装。差分包文件的大小，那就远比APK小得多了，这样也便于用户进行应用升级。\n\n那么增量更新的流程可以细化为几个关键点：\n\n- 1.用户手机上提取当前安装应用的apk\n- 2.如何利用old.apk和new.apk生成增量文件（差分包）\n- 3.增加文件与1.中的old.apk合并，然后安装\n\n旧版的APK可以在**/data/app/%packagename%/**下找到。\n\n也可以参考下面的代码：\n\n~~~ JavaScript\npublic class ApkExtract {\n    public static String extract(Context context) {\n        context = context.getApplicationContext();\n        ApplicationInfo applicationInfo = context.getApplicationInfo();\n        String apkPath = applicationInfo.sourceDir;\n        Log.d(\"hongyang\", apkPath);\n        return apkPath;\n    }\n}\n~~~\n\n这部分可以参考[张鸿洋的博客](http://blog.csdn.net/lmj623565791/article/details/52761658)\n\n#### 关于生成差分包\n制作差分包的工具为[bsdiff](http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz)，\n\n网址：\n\nhttp://www.daemonology.net/bsdiff/\n\n下载地址：\n\nhttp://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\n\n这是一个非常牛的二进制查分工具，bsdiff源代码在Android的源码目录下 ”\\\\external\\\\bsdiff“”这边也可以找到。另外还需要依赖[bzlib](http://www.bzip.org/downloads.html)来进行打包。在安全性方面，补丁和新旧版APK最好都要进行MD5验证，以免被篡改。\n\n关于这个工具可以使用别人编译好的so库，[这里](https://github.com/hongyangAndroid/BsDiff_And_Patch/tree/master/so-dist)；熟悉NDK开发的也可以自己编译，[请看这里](http://blog.csdn.net/lmj623565791/article/details/52761658)。这里就不在考虑这个工具问题了。\n\n- 生成增量文件\n~~~ JavaScript\n./bsdiff old.apk new.apk old-to-new.patch\n~~~\n这样就生成了一个增量文件old-to-new.patch\n\n#### 关于合并差分包\n生成差分包肯定是在服务端，合并差分包才是Android客户端需要做的：\n\n- 增量文件和old.apk合并成新的apk\n~~~ JavaScript\n./bspatch old.apk new2.apk old-to-new.patch\n~~~\n这样就生成一个new2.apk\n\n生成后，要查看下两个文件的md5值。如果两个文件md5值一致，那么几乎可以肯定两个文件时一模一样的。\n\n\n### 增量更新存在的不足\n- 1、增量升级是以两个应用版本之间的差异来生成补丁的，但是我们无法保证用户每次的及时升级到最新，也就是在更新前，新版和旧版只差一个版本，所以必须对你所发布的每一个版本都和最新的版本作差分，以便使所有版本的用户都可以差分升级，这样相对就比较繁琐了。解决方法也有，可以通过Shell脚本来实现批量生成。\n\n- 2.增量升级能成功的前提是，从手机端能够获得旧版APK，并且与服务端的APK签名是一样的，所以像那些破解的APP就无法实现更新。前面也提到了，为了安全性，防止补丁合成错误，最好在补丁合成前对旧版本的apk进行sha1或者MD5校验，保证基础包的一致性，这样才能顺利的实现增量升级。\n\n想要封装一套增量更新的工具，请看这篇文章：[打造Android万能的软件更新库，修改只要一点点](http://blog.csdn.net/huang_cai_yuan/article/details/52927630)\n","slug":"Android-patch-update","published":1,"date":"2016-12-19T16:00:00.000Z","updated":"2017-11-23T07:25:12.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec00002md6ykaseqnr5g","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在前几年，整体移动网络环境相比现在差很多，加之流量费用又相对较高，因此每当我们发布新版本的时候，一些用户升级并不是很积极，这就造成了新版本的升级率并不高。而google为了解决了这个问题，提出了Smart App Update，即增量更新（也叫做差分升级）。</p>\n<p>增量更新与热修复完全不是一个东西。增量更新需要重新安装apk，而热修复不需要。热修复也能完成部分增量更新的功能。</p>\n<h3 id=\"增量更新的流程\"><a href=\"#增量更新的流程\" class=\"headerlink\" title=\"增量更新的流程\"></a>增量更新的流程</h3><p>增量更新的具体流程是：用户手机上安装着某个应用，下载了增量包，手机上的apk和增量包合并形成新的包，然后再次安装（注意这个过程是要重新安装的，当然部分应用市场有root权限你可能感知不到）。</p>\n<a id=\"more\"></a>\n<h3 id=\"增量更新的原理\"><a href=\"#增量更新的原理\" class=\"headerlink\" title=\"增量更新的原理\"></a>增量更新的原理</h3><p>增量更新的原理也很简单，就是将手机上已安装的旧版本apk与服务器端新版本apk进行二进制对比，并得到差分包（patch），用户在升级更新应用时，只需要下载差分包，然后在本地使用差分包与旧版的apk合成新版apk，然后进行安装。差分包文件的大小，那就远比APK小得多了，这样也便于用户进行应用升级。</p>\n<p>那么增量更新的流程可以细化为几个关键点：</p>\n<ul>\n<li>1.用户手机上提取当前安装应用的apk</li>\n<li>2.如何利用old.apk和new.apk生成增量文件（差分包）</li>\n<li>3.增加文件与1.中的old.apk合并，然后安装</li>\n</ul>\n<p>旧版的APK可以在<strong>/data/app/%packagename%/</strong>下找到。</p>\n<p>也可以参考下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkExtract</span> </span>&#123;</div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> extract(Context context) &#123;</div><div class=\"line\">        context = context.getApplicationContext();</div><div class=\"line\">        ApplicationInfo applicationInfo = context.getApplicationInfo();</div><div class=\"line\">        <span class=\"built_in\">String</span> apkPath = applicationInfo.sourceDir;</div><div class=\"line\">        Log.d(<span class=\"string\">\"hongyang\"</span>, apkPath);</div><div class=\"line\">        <span class=\"keyword\">return</span> apkPath;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分可以参考<a href=\"http://blog.csdn.net/lmj623565791/article/details/52761658\" target=\"_blank\" rel=\"external\">张鸿洋的博客</a></p>\n<h4 id=\"关于生成差分包\"><a href=\"#关于生成差分包\" class=\"headerlink\" title=\"关于生成差分包\"></a>关于生成差分包</h4><p>制作差分包的工具为<a href=\"http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\" target=\"_blank\" rel=\"external\">bsdiff</a>，</p>\n<p>网址：</p>\n<p><a href=\"http://www.daemonology.net/bsdiff/\" target=\"_blank\" rel=\"external\">http://www.daemonology.net/bsdiff/</a></p>\n<p>下载地址：</p>\n<p><a href=\"http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\" target=\"_blank\" rel=\"external\">http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz</a></p>\n<p>这是一个非常牛的二进制查分工具，bsdiff源代码在Android的源码目录下 ”\\external\\bsdiff“”这边也可以找到。另外还需要依赖<a href=\"http://www.bzip.org/downloads.html\" target=\"_blank\" rel=\"external\">bzlib</a>来进行打包。在安全性方面，补丁和新旧版APK最好都要进行MD5验证，以免被篡改。</p>\n<p>关于这个工具可以使用别人编译好的so库，<a href=\"https://github.com/hongyangAndroid/BsDiff_And_Patch/tree/master/so-dist\" target=\"_blank\" rel=\"external\">这里</a>；熟悉NDK开发的也可以自己编译，<a href=\"http://blog.csdn.net/lmj623565791/article/details/52761658\" target=\"_blank\" rel=\"external\">请看这里</a>。这里就不在考虑这个工具问题了。</p>\n<ul>\n<li>生成增量文件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">./bsdiff old.apk <span class=\"keyword\">new</span>.apk old-to-<span class=\"keyword\">new</span>.patch</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就生成了一个增量文件old-to-new.patch</p>\n<h4 id=\"关于合并差分包\"><a href=\"#关于合并差分包\" class=\"headerlink\" title=\"关于合并差分包\"></a>关于合并差分包</h4><p>生成差分包肯定是在服务端，合并差分包才是Android客户端需要做的：</p>\n<ul>\n<li>增量文件和old.apk合并成新的apk<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">./bspatch old.apk new2.apk old-to-<span class=\"keyword\">new</span>.patch</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就生成一个new2.apk</p>\n<p>生成后，要查看下两个文件的md5值。如果两个文件md5值一致，那么几乎可以肯定两个文件时一模一样的。</p>\n<h3 id=\"增量更新存在的不足\"><a href=\"#增量更新存在的不足\" class=\"headerlink\" title=\"增量更新存在的不足\"></a>增量更新存在的不足</h3><ul>\n<li><p>1、增量升级是以两个应用版本之间的差异来生成补丁的，但是我们无法保证用户每次的及时升级到最新，也就是在更新前，新版和旧版只差一个版本，所以必须对你所发布的每一个版本都和最新的版本作差分，以便使所有版本的用户都可以差分升级，这样相对就比较繁琐了。解决方法也有，可以通过Shell脚本来实现批量生成。</p>\n</li>\n<li><p>2.增量升级能成功的前提是，从手机端能够获得旧版APK，并且与服务端的APK签名是一样的，所以像那些破解的APP就无法实现更新。前面也提到了，为了安全性，防止补丁合成错误，最好在补丁合成前对旧版本的apk进行sha1或者MD5校验，保证基础包的一致性，这样才能顺利的实现增量升级。</p>\n</li>\n</ul>\n<p>想要封装一套增量更新的工具，请看这篇文章：<a href=\"http://blog.csdn.net/huang_cai_yuan/article/details/52927630\" target=\"_blank\" rel=\"external\">打造Android万能的软件更新库，修改只要一点点</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/20/Android-patch-update/\">http://agehua.github.io/2016/12/20/Android-patch-update/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.66,"time":39600,"words":132},"excerpt":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>在前几年，整体移动网络环境相比现在差很多，加之流量费用又相对较高，因此每当我们发布新版本的时候，一些用户升级并不是很积极，这就造成了新版本的升级率并不高。而google为了解决了这个问题，提出了Smart App Update，即增量更新（也叫做差分升级）。</p>\n<p>增量更新与热修复完全不是一个东西。增量更新需要重新安装apk，而热修复不需要。热修复也能完成部分增量更新的功能。</p>\n<h3 id=\"增量更新的流程\"><a href=\"#增量更新的流程\" class=\"headerlink\" title=\"增量更新的流程\"></a>增量更新的流程</h3><p>增量更新的具体流程是：用户手机上安装着某个应用，下载了增量包，手机上的apk和增量包合并形成新的包，然后再次安装（注意这个过程是要重新安装的，当然部分应用市场有root权限你可能感知不到）。</p>","more":"<h3 id=\"增量更新的原理\"><a href=\"#增量更新的原理\" class=\"headerlink\" title=\"增量更新的原理\"></a>增量更新的原理</h3><p>增量更新的原理也很简单，就是将手机上已安装的旧版本apk与服务器端新版本apk进行二进制对比，并得到差分包（patch），用户在升级更新应用时，只需要下载差分包，然后在本地使用差分包与旧版的apk合成新版apk，然后进行安装。差分包文件的大小，那就远比APK小得多了，这样也便于用户进行应用升级。</p>\n<p>那么增量更新的流程可以细化为几个关键点：</p>\n<ul>\n<li>1.用户手机上提取当前安装应用的apk</li>\n<li>2.如何利用old.apk和new.apk生成增量文件（差分包）</li>\n<li>3.增加文件与1.中的old.apk合并，然后安装</li>\n</ul>\n<p>旧版的APK可以在<strong>/data/app/%packagename%/</strong>下找到。</p>\n<p>也可以参考下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApkExtract</span> </span>&#123;</div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> extract(Context context) &#123;</div><div class=\"line\">        context = context.getApplicationContext();</div><div class=\"line\">        ApplicationInfo applicationInfo = context.getApplicationInfo();</div><div class=\"line\">        <span class=\"built_in\">String</span> apkPath = applicationInfo.sourceDir;</div><div class=\"line\">        Log.d(<span class=\"string\">\"hongyang\"</span>, apkPath);</div><div class=\"line\">        <span class=\"keyword\">return</span> apkPath;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分可以参考<a href=\"http://blog.csdn.net/lmj623565791/article/details/52761658\">张鸿洋的博客</a></p>\n<h4 id=\"关于生成差分包\"><a href=\"#关于生成差分包\" class=\"headerlink\" title=\"关于生成差分包\"></a>关于生成差分包</h4><p>制作差分包的工具为<a href=\"http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\">bsdiff</a>，</p>\n<p>网址：</p>\n<p><a href=\"http://www.daemonology.net/bsdiff/\">http://www.daemonology.net/bsdiff/</a></p>\n<p>下载地址：</p>\n<p><a href=\"http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz\">http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz</a></p>\n<p>这是一个非常牛的二进制查分工具，bsdiff源代码在Android的源码目录下 ”\\external\\bsdiff“”这边也可以找到。另外还需要依赖<a href=\"http://www.bzip.org/downloads.html\">bzlib</a>来进行打包。在安全性方面，补丁和新旧版APK最好都要进行MD5验证，以免被篡改。</p>\n<p>关于这个工具可以使用别人编译好的so库，<a href=\"https://github.com/hongyangAndroid/BsDiff_And_Patch/tree/master/so-dist\">这里</a>；熟悉NDK开发的也可以自己编译，<a href=\"http://blog.csdn.net/lmj623565791/article/details/52761658\">请看这里</a>。这里就不在考虑这个工具问题了。</p>\n<ul>\n<li>生成增量文件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">./bsdiff old.apk <span class=\"keyword\">new</span>.apk old-to-<span class=\"keyword\">new</span>.patch</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就生成了一个增量文件old-to-new.patch</p>\n<h4 id=\"关于合并差分包\"><a href=\"#关于合并差分包\" class=\"headerlink\" title=\"关于合并差分包\"></a>关于合并差分包</h4><p>生成差分包肯定是在服务端，合并差分包才是Android客户端需要做的：</p>\n<ul>\n<li>增量文件和old.apk合并成新的apk<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">./bspatch old.apk new2.apk old-to-<span class=\"keyword\">new</span>.patch</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就生成一个new2.apk</p>\n<p>生成后，要查看下两个文件的md5值。如果两个文件md5值一致，那么几乎可以肯定两个文件时一模一样的。</p>\n<h3 id=\"增量更新存在的不足\"><a href=\"#增量更新存在的不足\" class=\"headerlink\" title=\"增量更新存在的不足\"></a>增量更新存在的不足</h3><ul>\n<li><p>1、增量升级是以两个应用版本之间的差异来生成补丁的，但是我们无法保证用户每次的及时升级到最新，也就是在更新前，新版和旧版只差一个版本，所以必须对你所发布的每一个版本都和最新的版本作差分，以便使所有版本的用户都可以差分升级，这样相对就比较繁琐了。解决方法也有，可以通过Shell脚本来实现批量生成。</p>\n</li>\n<li><p>2.增量升级能成功的前提是，从手机端能够获得旧版APK，并且与服务端的APK签名是一样的，所以像那些破解的APP就无法实现更新。前面也提到了，为了安全性，防止补丁合成错误，最好在补丁合成前对旧版本的apk进行sha1或者MD5校验，保证基础包的一致性，这样才能顺利的实现增量升级。</p>\n</li>\n</ul>\n<p>想要封装一套增量更新的工具，请看这篇文章：<a href=\"http://blog.csdn.net/huang_cai_yuan/article/details/52927630\">打造Android万能的软件更新库，修改只要一点点</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/20/Android-patch-update/\">http://agehua.github.io/2016/12/20/Android-patch-update/</a></p>"},{"layout":"post","title":"MAC下用iTerm2连接远程主机","keywords":"iterm, linux scp","banner":"http://obxk8w81b.bkt.clouddn.com/Arles%20View%20from%20the%20Wheat%20Fields.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Arles%20View%20from%20the%20Wheat%20Fields.jpg","toc":true,"_content":"\n### MAC下用iTerm2连接远程主机\niTerm2是MAC的一个终端工具。\n简单介绍一个小功能，使用iTerm2连接远程主机：\n\n- 1.先打开一个iTerm2窗口，选择菜单profiles中的Open Profiles，然后选择Edit Profiles中创建一个新的Profile，随便命名成容易记的。\n- 2.选择command，输入ssh -A -p xxx root@输入远程计算机的IP地址（xxx表示端口）。\n- 3.然后选择这个新的profile，New一个window就可以连接远程服务器了。\n\n### SCP命令使用说明\n<!--more-->\nscp用来在网络上不同的主机之间复制文件，它使用ssh安全协议传输数据，具有和ssh一样的验证机制，从而安全的远程拷贝文件。\n\n下面是一个简单例子：\n\n首先创建一个本地文件\n~~~ C++\necho hello, world > a-file.txt\n~~~\n\ncopy本地文件到服务器的命令如下：\n~~~ C++\nscp <local file> <remote user>@<remote machine>:<remote path>\n~~~\n\n如果想Copy远程文件到本地，则是：\n~~~ C++\nscp <remote user>@<remote machine>:<remote path> <local file>\n~~~\n\n如果想复制目录也是可以的：\n~~~ C++\nscp -r local_folder remote_username@remote_ip:remote_folder\n~~~\n\n比如下面命令：\n~~~ C++\nscp -r /home/space/jdk-8u121-linux-x64.tar.gz root@107.182.178.94:/home/root/others/\n~~~\n\n参数说明：\n\n[root@tank test]# scp --help\nusage: scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:]file1 [...] [[user@]host2:]file2  \n\n-1                        强制scp命令使用协议ssh1\n-2                        强制scp命令使用协议ssh2\n-4                        强制scp命令只使用IPv4寻址\n-6                        强制scp命令只使用IPv6寻址\n-B                        使用批处理模式（传输过程中不询问传输口令或短语）\n-C                        允许压缩。（将-C标志传递给ssh，从而打开压缩功能）\n-p                         保留原文件的修改时间，访问时间和访问权限。\n-q                         不显示传输进度条。\n-r                          递归复制整个目录。\n-v                          详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。\n-c cipher              以cipher将数据传输进行加密，这个选项将直接传递给ssh。\n-F ssh_config      指定一个替代的ssh配置文件，此参数直接传递给ssh。\n-i identity_file      从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。\n-l limit                    限定用户所能使用的带宽，以Kbit/s为单位。\n-o ssh_option      如果习惯于使用ssh_config(5)中的参数传递方式，\n-P port                  注意是大写的P, port是指定数据传输用到的端口号\n-S program         指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n转载自：http://blog.51yip.com/linux/1027.html\n\n\n#### iTerm从mac传文件到linux\n\n~~~\nsudo scp -P 28547 ~/Downloads/nexus-3.2.1-01-unix.tar.gz root@107.182.178.94:/usr/local\n~~~\n-P 指定linux服务器的端口号，必须是大写\n","source":"_posts/2017-02-12-iterm2-to-linux.md","raw":"---\nlayout: post\ntitle:  MAC下用iTerm2连接远程主机\ncategory: accumulation\ntags:\n  - linux\n  - iterm\n  - scp\nkeywords: iterm, linux scp\nbanner: http://obxk8w81b.bkt.clouddn.com/Arles%20View%20from%20the%20Wheat%20Fields.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Arles%20View%20from%20the%20Wheat%20Fields.jpg\ntoc: true\n---\n\n### MAC下用iTerm2连接远程主机\niTerm2是MAC的一个终端工具。\n简单介绍一个小功能，使用iTerm2连接远程主机：\n\n- 1.先打开一个iTerm2窗口，选择菜单profiles中的Open Profiles，然后选择Edit Profiles中创建一个新的Profile，随便命名成容易记的。\n- 2.选择command，输入ssh -A -p xxx root@输入远程计算机的IP地址（xxx表示端口）。\n- 3.然后选择这个新的profile，New一个window就可以连接远程服务器了。\n\n### SCP命令使用说明\n<!--more-->\nscp用来在网络上不同的主机之间复制文件，它使用ssh安全协议传输数据，具有和ssh一样的验证机制，从而安全的远程拷贝文件。\n\n下面是一个简单例子：\n\n首先创建一个本地文件\n~~~ C++\necho hello, world > a-file.txt\n~~~\n\ncopy本地文件到服务器的命令如下：\n~~~ C++\nscp <local file> <remote user>@<remote machine>:<remote path>\n~~~\n\n如果想Copy远程文件到本地，则是：\n~~~ C++\nscp <remote user>@<remote machine>:<remote path> <local file>\n~~~\n\n如果想复制目录也是可以的：\n~~~ C++\nscp -r local_folder remote_username@remote_ip:remote_folder\n~~~\n\n比如下面命令：\n~~~ C++\nscp -r /home/space/jdk-8u121-linux-x64.tar.gz root@107.182.178.94:/home/root/others/\n~~~\n\n参数说明：\n\n[root@tank test]# scp --help\nusage: scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:]file1 [...] [[user@]host2:]file2  \n\n-1                        强制scp命令使用协议ssh1\n-2                        强制scp命令使用协议ssh2\n-4                        强制scp命令只使用IPv4寻址\n-6                        强制scp命令只使用IPv6寻址\n-B                        使用批处理模式（传输过程中不询问传输口令或短语）\n-C                        允许压缩。（将-C标志传递给ssh，从而打开压缩功能）\n-p                         保留原文件的修改时间，访问时间和访问权限。\n-q                         不显示传输进度条。\n-r                          递归复制整个目录。\n-v                          详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。\n-c cipher              以cipher将数据传输进行加密，这个选项将直接传递给ssh。\n-F ssh_config      指定一个替代的ssh配置文件，此参数直接传递给ssh。\n-i identity_file      从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。\n-l limit                    限定用户所能使用的带宽，以Kbit/s为单位。\n-o ssh_option      如果习惯于使用ssh_config(5)中的参数传递方式，\n-P port                  注意是大写的P, port是指定数据传输用到的端口号\n-S program         指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n转载自：http://blog.51yip.com/linux/1027.html\n\n\n#### iTerm从mac传文件到linux\n\n~~~\nsudo scp -P 28547 ~/Downloads/nexus-3.2.1-01-unix.tar.gz root@107.182.178.94:/usr/local\n~~~\n-P 指定linux服务器的端口号，必须是大写\n","slug":"iterm2-to-linux","published":1,"date":"2017-02-11T16:00:00.000Z","updated":"2017-11-23T07:13:09.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec03002pd6ykce904fx8","content":"<h3 id=\"MAC下用iTerm2连接远程主机\"><a href=\"#MAC下用iTerm2连接远程主机\" class=\"headerlink\" title=\"MAC下用iTerm2连接远程主机\"></a>MAC下用iTerm2连接远程主机</h3><p>iTerm2是MAC的一个终端工具。<br>简单介绍一个小功能，使用iTerm2连接远程主机：</p>\n<ul>\n<li>1.先打开一个iTerm2窗口，选择菜单profiles中的Open Profiles，然后选择Edit Profiles中创建一个新的Profile，随便命名成容易记的。</li>\n<li>2.选择command，输入ssh -A -p xxx root@输入远程计算机的IP地址（xxx表示端口）。</li>\n<li>3.然后选择这个新的profile，New一个window就可以连接远程服务器了。</li>\n</ul>\n<h3 id=\"SCP命令使用说明\"><a href=\"#SCP命令使用说明\" class=\"headerlink\" title=\"SCP命令使用说明\"></a>SCP命令使用说明</h3><a id=\"more\"></a>\n<p>scp用来在网络上不同的主机之间复制文件，它使用ssh安全协议传输数据，具有和ssh一样的验证机制，从而安全的远程拷贝文件。</p>\n<p>下面是一个简单例子：</p>\n<p>首先创建一个本地文件<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">echo hello, world &gt; a-file.txt</div></pre></td></tr></table></figure></p>\n<p>copy本地文件到服务器的命令如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp &lt;local file&gt; &lt;remote user&gt;@&lt;remote machine&gt;:&lt;remote path&gt;</div></pre></td></tr></table></figure></p>\n<p>如果想Copy远程文件到本地，则是：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp &lt;remote user&gt;@&lt;remote machine&gt;:&lt;remote path&gt; &lt;local file&gt;</div></pre></td></tr></table></figure></p>\n<p>如果想复制目录也是可以的：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp -r local_folder remote_username@remote_ip:remote_folder</div></pre></td></tr></table></figure></p>\n<p>比如下面命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp -r /home/space/jdk<span class=\"number\">-8</span>u121-linux-x64.tar.gz root@<span class=\"number\">107.182</span><span class=\"number\">.178</span><span class=\"number\">.94</span>:/home/root/others/</div></pre></td></tr></table></figure></p>\n<p>参数说明：</p>\n<p>[root@tank test]# scp –help<br>usage: scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:]file1 […] [[user@]host2:]file2  </p>\n<p>-1                        强制scp命令使用协议ssh1<br>-2                        强制scp命令使用协议ssh2<br>-4                        强制scp命令只使用IPv4寻址<br>-6                        强制scp命令只使用IPv6寻址<br>-B                        使用批处理模式（传输过程中不询问传输口令或短语）<br>-C                        允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<br>-p                         保留原文件的修改时间，访问时间和访问权限。<br>-q                         不显示传输进度条。<br>-r                          递归复制整个目录。<br>-v                          详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<br>-c cipher              以cipher将数据传输进行加密，这个选项将直接传递给ssh。<br>-F ssh_config      指定一个替代的ssh配置文件，此参数直接传递给ssh。<br>-i identity_file      从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。<br>-l limit                    限定用户所能使用的带宽，以Kbit/s为单位。<br>-o ssh_option      如果习惯于使用ssh_config(5)中的参数传递方式，<br>-P port                  注意是大写的P, port是指定数据传输用到的端口号<br>-S program         指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<p>转载自：<a href=\"http://blog.51yip.com/linux/1027.html\" target=\"_blank\" rel=\"external\">http://blog.51yip.com/linux/1027.html</a></p>\n<h4 id=\"iTerm从mac传文件到linux\"><a href=\"#iTerm从mac传文件到linux\" class=\"headerlink\" title=\"iTerm从mac传文件到linux\"></a>iTerm从mac传文件到linux</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo scp -P 28547 ~/Downloads/nexus-3.2.1-01-unix.tar.gz root@107.182.178.94:/usr/local</div></pre></td></tr></table></figure>\n<p>-P 指定linux服务器的端口号，必须是大写</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/02/12/iterm2-to-linux/\">http://agehua.github.io/2017/02/12/iterm2-to-linux/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.88,"time":52800,"words":176},"excerpt":"<h3 id=\"MAC下用iTerm2连接远程主机\"><a href=\"#MAC下用iTerm2连接远程主机\" class=\"headerlink\" title=\"MAC下用iTerm2连接远程主机\"></a>MAC下用iTerm2连接远程主机</h3><p>iTerm2是MAC的一个终端工具。<br>简单介绍一个小功能，使用iTerm2连接远程主机：</p>\n<ul>\n<li>1.先打开一个iTerm2窗口，选择菜单profiles中的Open Profiles，然后选择Edit Profiles中创建一个新的Profile，随便命名成容易记的。</li>\n<li>2.选择command，输入ssh -A -p xxx root@输入远程计算机的IP地址（xxx表示端口）。</li>\n<li>3.然后选择这个新的profile，New一个window就可以连接远程服务器了。</li>\n</ul>\n<h3 id=\"SCP命令使用说明\"><a href=\"#SCP命令使用说明\" class=\"headerlink\" title=\"SCP命令使用说明\"></a>SCP命令使用说明</h3>","more":"<p>scp用来在网络上不同的主机之间复制文件，它使用ssh安全协议传输数据，具有和ssh一样的验证机制，从而安全的远程拷贝文件。</p>\n<p>下面是一个简单例子：</p>\n<p>首先创建一个本地文件<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">echo hello, world &gt; a-file.txt</div></pre></td></tr></table></figure></p>\n<p>copy本地文件到服务器的命令如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp &lt;local file&gt; &lt;remote user&gt;@&lt;remote machine&gt;:&lt;remote path&gt;</div></pre></td></tr></table></figure></p>\n<p>如果想Copy远程文件到本地，则是：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp &lt;remote user&gt;@&lt;remote machine&gt;:&lt;remote path&gt; &lt;local file&gt;</div></pre></td></tr></table></figure></p>\n<p>如果想复制目录也是可以的：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp -r local_folder remote_username@remote_ip:remote_folder</div></pre></td></tr></table></figure></p>\n<p>比如下面命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">scp -r /home/space/jdk<span class=\"number\">-8</span>u121-linux-x64.tar.gz root@<span class=\"number\">107.182</span><span class=\"number\">.178</span><span class=\"number\">.94</span>:/home/root/others/</div></pre></td></tr></table></figure></p>\n<p>参数说明：</p>\n<p>[root@tank test]# scp –help<br>usage: scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:]file1 […] [[user@]host2:]file2  </p>\n<p>-1                        强制scp命令使用协议ssh1<br>-2                        强制scp命令使用协议ssh2<br>-4                        强制scp命令只使用IPv4寻址<br>-6                        强制scp命令只使用IPv6寻址<br>-B                        使用批处理模式（传输过程中不询问传输口令或短语）<br>-C                        允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<br>-p                         保留原文件的修改时间，访问时间和访问权限。<br>-q                         不显示传输进度条。<br>-r                          递归复制整个目录。<br>-v                          详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<br>-c cipher              以cipher将数据传输进行加密，这个选项将直接传递给ssh。<br>-F ssh_config      指定一个替代的ssh配置文件，此参数直接传递给ssh。<br>-i identity_file      从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。<br>-l limit                    限定用户所能使用的带宽，以Kbit/s为单位。<br>-o ssh_option      如果习惯于使用ssh_config(5)中的参数传递方式，<br>-P port                  注意是大写的P, port是指定数据传输用到的端口号<br>-S program         指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<p>转载自：<a href=\"http://blog.51yip.com/linux/1027.html\">http://blog.51yip.com/linux/1027.html</a></p>\n<h4 id=\"iTerm从mac传文件到linux\"><a href=\"#iTerm从mac传文件到linux\" class=\"headerlink\" title=\"iTerm从mac传文件到linux\"></a>iTerm从mac传文件到linux</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo scp -P 28547 ~/Downloads/nexus-3.2.1-01-unix.tar.gz root@107.182.178.94:/usr/local</div></pre></td></tr></table></figure>\n<p>-P 指定linux服务器的端口号，必须是大写</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/02/12/iterm2-to-linux/\">http://agehua.github.io/2017/02/12/iterm2-to-linux/</a></p>"},{"layout":"post","title":"解决Android多进程导致Application重复创建问题","keywords":"multi-process","banner":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg","toc":true,"_content":"\n> 本编文章是在阅读：[Android架构思考(模块化、多进程)](http://blog.spinytech.com/2016/12/28/android_modularization/)过程中，结合自己的理解，对Android开启多进程，会导致Application重复创建问题进行一个总结。\n\n------\n\n### Android开启多进程\n一般情况下，一个应用程序就一个进程，这个进程的名称就是应用程序包名。Android的四大组件在AndroidManifest文件中注册的时候，有个属性是android:process，这里可以指定组件的所处的进程。\n\n一个进程情况下，Application的onCreate方法只会执行一次，但如果应用中采用多进程方式，onCreate方法会执行多次。\n\n### 解决Application的onCreate方法多次调用\n总结了两种实现方式：\n<!--more-->\n\n#### 一、根据不同的进程名字进行不同数据的初始化。\n这是现在网络上通用的方法，在自定义的Application的onCreate方法中控制不同进程的初始化\n\n代码如下：\n\n~~~ Java\n@Override\npublic void onCreate() {\n        super.onCreate();\n    String processName = getProcessName(this, android.os.Process.myPid());\n    if (processName != null) {\n    boolean defaultProcess = processName.equals(Constants.REAL_PACKAGE_NAME);\n    // 默认的主进程启动时初始化应用\n    if (defaultProcess) {\n\t    initAppForMainProcess();\n    }\n    // 其他进程启动时初始化对应内容\n    else if (processName.contains(\":webbrowser\")) {\n\n    } else if (processName.contains(\":bgmusic\")) {\n\n    }  \n}    \n~~~\n\n获取当前进程名的方法如下：\n\n~~~ Java\n/**\n * @return null may be returned if the specified process not found\n */\npublic static String getProcessName(Context cxt, int pid) {\n    ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);\n    List<RunningAppP.rocessInfo> runningApps = am.getRunningAppProcesses();\n    if (runningApps == null) {\n        return null;\n    }\n    for (RunningAppProcessInfo procInfo : runningApps) {\n        if (procInfo.pid == pid) {\n            return procInfo.processName;\n        }\n    }\n    return null;\n}\n~~~\n\n#### 二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\n\n这就是文章开头提到的博客中使用的方式[Android架构思考(模块化、多进程)](http://blog.spinytech.com/2016/12/28/android_modularization/)\n\n实现这种方式，一共有涉及到3个类，\n- 一个是MaApplication继承了Application，是程序的入口，这是一个抽象类，需要子类去实现一些方法\n- 一个是BaseApplicationLogic，这也是基类，由这个类来实现每个进程单独管理Application的生命周期，每个进程实现一个该类的子类\n- 还有一个类是PriorityLogicWrapper，它是一个封装类，继承了Comparable接口，实现了对BaseApplicationLogic按照指定顺序排序（也就是可以按照优先级顺序初始化BaseApplicationLogic）\n\n首先，我们先把所有ApplicationLogic注册到MaApplication中；\n然后，MaApplication会根据注册时的进程名信息进行筛选，选择相同进程名的ApplicationLogic，保存到本进程中；\n其次，对这些本进程的ApplicationLogic进行实例化；\n最后，调用ApplicationLogic的onCreate方法，实现ApplicationLogic与Application生命周期同步，同时还有onTerminate、onLowMemory、onTrimMemory、onConfigurationChanged等方法，与onCreate一致。\n\n流程图如下所示：\n![多进程Application启动流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/multi-Application-flow-chart.png)\n\n代码实现，先看基类BaseApplicationLogic，每个进程都要实现一个该类的子类：\n\n~~~ Java\npublic class BaseApplicationLogic {\n    protected MaApplication mApplication;\n    public BaseApplicationLogic() {\n    }\n\n    public void setApplication(@NonNull MaApplication application) {\n        mApplication = application;\n    }\n\n    public void onCreate() {\n    }\n\n    public void onTerminate() {\n    }\n\n    public void onLowMemory() {\n    }\n\n    public void onTrimMemory(int level) {\n    }\n\n    public void onConfigurationChanged(Configuration newConfig) {\n    }\n}\n~~~\n\n其次PriorityLogicWrapper，这是一个封装类，实现了BaseApplicationLogic的按优先级排列：\n~~~ Java\npublic class PriorityLogicWrapper implements Comparable<PriorityLogicWrapper> {\n\n    public int priority = 0;\n    public Class<? extends BaseApplicationLogic> logicClass = null;\n    public BaseApplicationLogic instance;\n\n    public PriorityLogicWrapper(int priority, Class<? extends BaseApplicationLogic> logicClass) {\n        this.priority = priority;\n        this.logicClass = logicClass;\n    }\n\n    @Override\n    public int compareTo(PriorityLogicWrapper o) {\n        return o.priority - this.priority;\n    }\n}\n~~~\n\n\n\n在MaApplication中直接对PriorityLogicWrapper进行操作，无需操作BaseApplicationLogic对象\n~~~ Java\npublic abstract class MaApplication extends Application {\n\n    //mLogicList只持有当前进程的PriorityLogicWrapper对象\n    private ArrayList<PriorityLogicWrapper> mLogicList;\n    //mLogicClassMap持有所有进程的PriorityLogicWrapper数组对象\n    private HashMap<String, ArrayList<PriorityLogicWrapper>> mLogicClassMap;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        init();\n        initializeLogic();\n        dispatchLogic();\n        instantiateLogic();\n\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    //找到当前进程的BaseApplicationLogic实例后，执行其onCreate()方法\n                    priorityLogicWrapper.instance.onCreate();\n                }\n            }\n        }\n    }\n\n    private void init() {\n        mLogicClassMap = new HashMap<>();\n    }\n\n    public abstract boolean needMultipleProcess();\n\n    //由MaApplication的实现类，去实现这个方法，调用registerApplicationLogic()\n    //注册所有进程的BaseApplicationLogic对象\n    protected abstract void initializeLogic();\n\n    /**\n     * 添加所有来自不同进程的，不同的BaseApplicationLogic对象到HashMap中\n     * @param processName 进程名\n     * @param priority 优先级\n     * @param logicClass 继承BaseApplicationLogic的对象\n     * @return\n     */\n    protected boolean registerApplicationLogic(String processName, int priority, @NonNull Class<? extends BaseApplicationLogic> logicClass) {\n        boolean result = false;\n        if (null != mLogicClassMap) {\n            ArrayList<PriorityLogicWrapper> tempList = mLogicClassMap.get(processName);\n            if (null == tempList) {\n                tempList = new ArrayList<>();\n                mLogicClassMap.put(processName, tempList);\n            }\n            if (tempList.size() > 0) {\n                for (PriorityLogicWrapper priorityLogicWrapper : tempList) {\n                    if (logicClass.getName().equals(priorityLogicWrapper.logicClass.getName())) {\n                        throw new RuntimeException(logicClass.getName() + \" has registered.\");\n                    }\n                }\n            }\n            PriorityLogicWrapper priorityLogicWrapper = new PriorityLogicWrapper(priority, logicClass);\n            tempList.add(priorityLogicWrapper);\n            //tempList更新，则mLogicClassMap中的value也跟着更新了，不用再调用mLogicClassMap.put方法\n        }\n        return result;\n    }\n\n    /**\n     * 得到一个属于本进程的ArrayList对象，里面保存着封装类PriorityLogicWrapper\n     */\n    private void dispatchLogic() {\n        if (null != mLogicClassMap) {\n            //根据进程名，得到该进程名对应的ArrayList<PriorityLogicWrapper>\n            mLogicList = mLogicClassMap.get(ProcessUtil.getProcessName(this, ProcessUtil.getMyProcessId()));\n        }\n    }\n\n    /**\n     * 取得mLogicList中的PriorityLogicWrapper对象，并按优先级顺序初始化BaseApplicationLogic对象\n     */\n    private void instantiateLogic() {\n        if (null != mLogicList && mLogicList.size() > 0) {\n            if (null != mLogicList && mLogicList.size() > 0) {\n                Collections.sort(mLogicList); //根据进程优先级，按顺序初始化\n                for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                    if (null != priorityLogicWrapper) {\n                        try {\n                            /**\n                             * 调用Class.newInstance()，会创建这个Class的实例，但是不会执行Android中这个类相关的生命周期\n                             * **/\n                            priorityLogicWrapper.instance = priorityLogicWrapper.logicClass.newInstance();\n                        } catch (InstantiationException e) {\n                            e.printStackTrace();\n                        } catch (IllegalAccessException e) {\n                            e.printStackTrace();\n                        }\n                        if (null != priorityLogicWrapper.instance) {\n                            priorityLogicWrapper.instance.setApplication(this);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //Application生命周期的处理，下面方法都类似\n    @Override\n    public void onTerminate() {\n        super.onTerminate();\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onTerminate();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onLowMemory() {\n        super.onLowMemory();\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onLowMemory();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        super.onTrimMemory(level);\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onTrimMemory(level);\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onConfigurationChanged(newConfig);\n                }\n            }\n        }\n    }\n\n}\n~~~\n","source":"_posts/2017-02-21-Multi-Process-Dispatch.md","raw":"---\nlayout: post\ntitle:  解决Android多进程导致Application重复创建问题\ncategory: accumulation\ntags:\n  - ANDROID\n  - multi-process\nkeywords: multi-process\nbanner: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Avenue%20of%20Plane%20Trees%20near%20Arles%20Station.jpg\ntoc: true\n---\n\n> 本编文章是在阅读：[Android架构思考(模块化、多进程)](http://blog.spinytech.com/2016/12/28/android_modularization/)过程中，结合自己的理解，对Android开启多进程，会导致Application重复创建问题进行一个总结。\n\n------\n\n### Android开启多进程\n一般情况下，一个应用程序就一个进程，这个进程的名称就是应用程序包名。Android的四大组件在AndroidManifest文件中注册的时候，有个属性是android:process，这里可以指定组件的所处的进程。\n\n一个进程情况下，Application的onCreate方法只会执行一次，但如果应用中采用多进程方式，onCreate方法会执行多次。\n\n### 解决Application的onCreate方法多次调用\n总结了两种实现方式：\n<!--more-->\n\n#### 一、根据不同的进程名字进行不同数据的初始化。\n这是现在网络上通用的方法，在自定义的Application的onCreate方法中控制不同进程的初始化\n\n代码如下：\n\n~~~ Java\n@Override\npublic void onCreate() {\n        super.onCreate();\n    String processName = getProcessName(this, android.os.Process.myPid());\n    if (processName != null) {\n    boolean defaultProcess = processName.equals(Constants.REAL_PACKAGE_NAME);\n    // 默认的主进程启动时初始化应用\n    if (defaultProcess) {\n\t    initAppForMainProcess();\n    }\n    // 其他进程启动时初始化对应内容\n    else if (processName.contains(\":webbrowser\")) {\n\n    } else if (processName.contains(\":bgmusic\")) {\n\n    }  \n}    \n~~~\n\n获取当前进程名的方法如下：\n\n~~~ Java\n/**\n * @return null may be returned if the specified process not found\n */\npublic static String getProcessName(Context cxt, int pid) {\n    ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);\n    List<RunningAppP.rocessInfo> runningApps = am.getRunningAppProcesses();\n    if (runningApps == null) {\n        return null;\n    }\n    for (RunningAppProcessInfo procInfo : runningApps) {\n        if (procInfo.pid == pid) {\n            return procInfo.processName;\n        }\n    }\n    return null;\n}\n~~~\n\n#### 二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\n\n这就是文章开头提到的博客中使用的方式[Android架构思考(模块化、多进程)](http://blog.spinytech.com/2016/12/28/android_modularization/)\n\n实现这种方式，一共有涉及到3个类，\n- 一个是MaApplication继承了Application，是程序的入口，这是一个抽象类，需要子类去实现一些方法\n- 一个是BaseApplicationLogic，这也是基类，由这个类来实现每个进程单独管理Application的生命周期，每个进程实现一个该类的子类\n- 还有一个类是PriorityLogicWrapper，它是一个封装类，继承了Comparable接口，实现了对BaseApplicationLogic按照指定顺序排序（也就是可以按照优先级顺序初始化BaseApplicationLogic）\n\n首先，我们先把所有ApplicationLogic注册到MaApplication中；\n然后，MaApplication会根据注册时的进程名信息进行筛选，选择相同进程名的ApplicationLogic，保存到本进程中；\n其次，对这些本进程的ApplicationLogic进行实例化；\n最后，调用ApplicationLogic的onCreate方法，实现ApplicationLogic与Application生命周期同步，同时还有onTerminate、onLowMemory、onTrimMemory、onConfigurationChanged等方法，与onCreate一致。\n\n流程图如下所示：\n![多进程Application启动流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/multi-Application-flow-chart.png)\n\n代码实现，先看基类BaseApplicationLogic，每个进程都要实现一个该类的子类：\n\n~~~ Java\npublic class BaseApplicationLogic {\n    protected MaApplication mApplication;\n    public BaseApplicationLogic() {\n    }\n\n    public void setApplication(@NonNull MaApplication application) {\n        mApplication = application;\n    }\n\n    public void onCreate() {\n    }\n\n    public void onTerminate() {\n    }\n\n    public void onLowMemory() {\n    }\n\n    public void onTrimMemory(int level) {\n    }\n\n    public void onConfigurationChanged(Configuration newConfig) {\n    }\n}\n~~~\n\n其次PriorityLogicWrapper，这是一个封装类，实现了BaseApplicationLogic的按优先级排列：\n~~~ Java\npublic class PriorityLogicWrapper implements Comparable<PriorityLogicWrapper> {\n\n    public int priority = 0;\n    public Class<? extends BaseApplicationLogic> logicClass = null;\n    public BaseApplicationLogic instance;\n\n    public PriorityLogicWrapper(int priority, Class<? extends BaseApplicationLogic> logicClass) {\n        this.priority = priority;\n        this.logicClass = logicClass;\n    }\n\n    @Override\n    public int compareTo(PriorityLogicWrapper o) {\n        return o.priority - this.priority;\n    }\n}\n~~~\n\n\n\n在MaApplication中直接对PriorityLogicWrapper进行操作，无需操作BaseApplicationLogic对象\n~~~ Java\npublic abstract class MaApplication extends Application {\n\n    //mLogicList只持有当前进程的PriorityLogicWrapper对象\n    private ArrayList<PriorityLogicWrapper> mLogicList;\n    //mLogicClassMap持有所有进程的PriorityLogicWrapper数组对象\n    private HashMap<String, ArrayList<PriorityLogicWrapper>> mLogicClassMap;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        init();\n        initializeLogic();\n        dispatchLogic();\n        instantiateLogic();\n\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    //找到当前进程的BaseApplicationLogic实例后，执行其onCreate()方法\n                    priorityLogicWrapper.instance.onCreate();\n                }\n            }\n        }\n    }\n\n    private void init() {\n        mLogicClassMap = new HashMap<>();\n    }\n\n    public abstract boolean needMultipleProcess();\n\n    //由MaApplication的实现类，去实现这个方法，调用registerApplicationLogic()\n    //注册所有进程的BaseApplicationLogic对象\n    protected abstract void initializeLogic();\n\n    /**\n     * 添加所有来自不同进程的，不同的BaseApplicationLogic对象到HashMap中\n     * @param processName 进程名\n     * @param priority 优先级\n     * @param logicClass 继承BaseApplicationLogic的对象\n     * @return\n     */\n    protected boolean registerApplicationLogic(String processName, int priority, @NonNull Class<? extends BaseApplicationLogic> logicClass) {\n        boolean result = false;\n        if (null != mLogicClassMap) {\n            ArrayList<PriorityLogicWrapper> tempList = mLogicClassMap.get(processName);\n            if (null == tempList) {\n                tempList = new ArrayList<>();\n                mLogicClassMap.put(processName, tempList);\n            }\n            if (tempList.size() > 0) {\n                for (PriorityLogicWrapper priorityLogicWrapper : tempList) {\n                    if (logicClass.getName().equals(priorityLogicWrapper.logicClass.getName())) {\n                        throw new RuntimeException(logicClass.getName() + \" has registered.\");\n                    }\n                }\n            }\n            PriorityLogicWrapper priorityLogicWrapper = new PriorityLogicWrapper(priority, logicClass);\n            tempList.add(priorityLogicWrapper);\n            //tempList更新，则mLogicClassMap中的value也跟着更新了，不用再调用mLogicClassMap.put方法\n        }\n        return result;\n    }\n\n    /**\n     * 得到一个属于本进程的ArrayList对象，里面保存着封装类PriorityLogicWrapper\n     */\n    private void dispatchLogic() {\n        if (null != mLogicClassMap) {\n            //根据进程名，得到该进程名对应的ArrayList<PriorityLogicWrapper>\n            mLogicList = mLogicClassMap.get(ProcessUtil.getProcessName(this, ProcessUtil.getMyProcessId()));\n        }\n    }\n\n    /**\n     * 取得mLogicList中的PriorityLogicWrapper对象，并按优先级顺序初始化BaseApplicationLogic对象\n     */\n    private void instantiateLogic() {\n        if (null != mLogicList && mLogicList.size() > 0) {\n            if (null != mLogicList && mLogicList.size() > 0) {\n                Collections.sort(mLogicList); //根据进程优先级，按顺序初始化\n                for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                    if (null != priorityLogicWrapper) {\n                        try {\n                            /**\n                             * 调用Class.newInstance()，会创建这个Class的实例，但是不会执行Android中这个类相关的生命周期\n                             * **/\n                            priorityLogicWrapper.instance = priorityLogicWrapper.logicClass.newInstance();\n                        } catch (InstantiationException e) {\n                            e.printStackTrace();\n                        } catch (IllegalAccessException e) {\n                            e.printStackTrace();\n                        }\n                        if (null != priorityLogicWrapper.instance) {\n                            priorityLogicWrapper.instance.setApplication(this);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //Application生命周期的处理，下面方法都类似\n    @Override\n    public void onTerminate() {\n        super.onTerminate();\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onTerminate();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onLowMemory() {\n        super.onLowMemory();\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onLowMemory();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        super.onTrimMemory(level);\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onTrimMemory(level);\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        if (null != mLogicList && mLogicList.size() > 0) {\n            for (PriorityLogicWrapper priorityLogicWrapper : mLogicList) {\n                if (null != priorityLogicWrapper && null != priorityLogicWrapper.instance) {\n                    priorityLogicWrapper.instance.onConfigurationChanged(newConfig);\n                }\n            }\n        }\n    }\n\n}\n~~~\n","slug":"Multi-Process-Dispatch","published":1,"date":"2017-02-20T16:00:00.000Z","updated":"2017-11-23T07:25:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec08002sd6ykjtbf1egv","content":"<blockquote>\n<p>本编文章是在阅读：<a href=\"http://blog.spinytech.com/2016/12/28/android_modularization/\" target=\"_blank\" rel=\"external\">Android架构思考(模块化、多进程)</a>过程中，结合自己的理解，对Android开启多进程，会导致Application重复创建问题进行一个总结。</p>\n</blockquote>\n<hr>\n<h3 id=\"Android开启多进程\"><a href=\"#Android开启多进程\" class=\"headerlink\" title=\"Android开启多进程\"></a>Android开启多进程</h3><p>一般情况下，一个应用程序就一个进程，这个进程的名称就是应用程序包名。Android的四大组件在AndroidManifest文件中注册的时候，有个属性是android:process，这里可以指定组件的所处的进程。</p>\n<p>一个进程情况下，Application的onCreate方法只会执行一次，但如果应用中采用多进程方式，onCreate方法会执行多次。</p>\n<h3 id=\"解决Application的onCreate方法多次调用\"><a href=\"#解决Application的onCreate方法多次调用\" class=\"headerlink\" title=\"解决Application的onCreate方法多次调用\"></a>解决Application的onCreate方法多次调用</h3><p>总结了两种实现方式：<br><a id=\"more\"></a></p>\n<h4 id=\"一、根据不同的进程名字进行不同数据的初始化。\"><a href=\"#一、根据不同的进程名字进行不同数据的初始化。\" class=\"headerlink\" title=\"一、根据不同的进程名字进行不同数据的初始化。\"></a>一、根据不同的进程名字进行不同数据的初始化。</h4><p>这是现在网络上通用的方法，在自定义的Application的onCreate方法中控制不同进程的初始化</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    String processName = getProcessName(<span class=\"keyword\">this</span>, android.os.Process.myPid());</div><div class=\"line\">    <span class=\"keyword\">if</span> (processName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> defaultProcess = processName.equals(Constants.REAL_PACKAGE_NAME);</div><div class=\"line\">    <span class=\"comment\">// 默认的主进程启动时初始化应用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (defaultProcess) &#123;</div><div class=\"line\">\t    initAppForMainProcess();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 其他进程启动时初始化对应内容</span></div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (processName.contains(<span class=\"string\">\":webbrowser\"</span>)) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (processName.contains(<span class=\"string\">\":bgmusic\"</span>)) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取当前进程名的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@return</span> null may be returned if the specified process not found</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getProcessName</span><span class=\"params\">(Context cxt, <span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">    ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);</div><div class=\"line\">    List&lt;RunningAppP.rocessInfo&gt; runningApps = am.getRunningAppProcesses();</div><div class=\"line\">    <span class=\"keyword\">if</span> (runningApps == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (RunningAppProcessInfo procInfo : runningApps) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (procInfo.pid == pid) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> procInfo.processName;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\"><a href=\"#二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\" class=\"headerlink\" title=\"二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\"></a>二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例</h4><p>这就是文章开头提到的博客中使用的方式<a href=\"http://blog.spinytech.com/2016/12/28/android_modularization/\" target=\"_blank\" rel=\"external\">Android架构思考(模块化、多进程)</a></p>\n<p>实现这种方式，一共有涉及到3个类，</p>\n<ul>\n<li>一个是MaApplication继承了Application，是程序的入口，这是一个抽象类，需要子类去实现一些方法</li>\n<li>一个是BaseApplicationLogic，这也是基类，由这个类来实现每个进程单独管理Application的生命周期，每个进程实现一个该类的子类</li>\n<li>还有一个类是PriorityLogicWrapper，它是一个封装类，继承了Comparable接口，实现了对BaseApplicationLogic按照指定顺序排序（也就是可以按照优先级顺序初始化BaseApplicationLogic）</li>\n</ul>\n<p>首先，我们先把所有ApplicationLogic注册到MaApplication中；<br>然后，MaApplication会根据注册时的进程名信息进行筛选，选择相同进程名的ApplicationLogic，保存到本进程中；<br>其次，对这些本进程的ApplicationLogic进行实例化；<br>最后，调用ApplicationLogic的onCreate方法，实现ApplicationLogic与Application生命周期同步，同时还有onTerminate、onLowMemory、onTrimMemory、onConfigurationChanged等方法，与onCreate一致。</p>\n<p>流程图如下所示：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/multi-Application-flow-chart.png\" alt=\"多进程Application启动流程\"></p>\n<p>代码实现，先看基类BaseApplicationLogic，每个进程都要实现一个该类的子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseApplicationLogic</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> MaApplication mApplication;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseApplicationLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplication</span><span class=\"params\">(@NonNull MaApplication application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其次PriorityLogicWrapper，这是一个封装类，实现了BaseApplicationLogic的按优先级排列：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityLogicWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">PriorityLogicWrapper</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> priority = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends BaseApplicationLogic&gt; logicClass = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> BaseApplicationLogic instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PriorityLogicWrapper</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, Class&lt;? extends BaseApplicationLogic&gt; logicClass)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.priority = priority;</div><div class=\"line\">        <span class=\"keyword\">this</span>.logicClass = logicClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(PriorityLogicWrapper o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> o.priority - <span class=\"keyword\">this</span>.priority;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在MaApplication中直接对PriorityLogicWrapper进行操作，无需操作BaseApplicationLogic对象<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//mLogicList只持有当前进程的PriorityLogicWrapper对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;PriorityLogicWrapper&gt; mLogicList;</div><div class=\"line\">    <span class=\"comment\">//mLogicClassMap持有所有进程的PriorityLogicWrapper数组对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, ArrayList&lt;PriorityLogicWrapper&gt;&gt; mLogicClassMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        init();</div><div class=\"line\">        initializeLogic();</div><div class=\"line\">        dispatchLogic();</div><div class=\"line\">        instantiateLogic();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    <span class=\"comment\">//找到当前进程的BaseApplicationLogic实例后，执行其onCreate()方法</span></div><div class=\"line\">                    priorityLogicWrapper.instance.onCreate();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mLogicClassMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needMultipleProcess</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//由MaApplication的实现类，去实现这个方法，调用registerApplicationLogic()</span></div><div class=\"line\">    <span class=\"comment\">//注册所有进程的BaseApplicationLogic对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeLogic</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 添加所有来自不同进程的，不同的BaseApplicationLogic对象到HashMap中</div><div class=\"line\">     * <span class=\"doctag\">@param</span> processName 进程名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> priority 优先级</div><div class=\"line\">     * <span class=\"doctag\">@param</span> logicClass 继承BaseApplicationLogic的对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">registerApplicationLogic</span><span class=\"params\">(String processName, <span class=\"keyword\">int</span> priority, @NonNull Class&lt;? extends BaseApplicationLogic&gt; logicClass)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicClassMap) &#123;</div><div class=\"line\">            ArrayList&lt;PriorityLogicWrapper&gt; tempList = mLogicClassMap.get(processName);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == tempList) &#123;</div><div class=\"line\">                tempList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">                mLogicClassMap.put(processName, tempList);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tempList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : tempList) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (logicClass.getName().equals(priorityLogicWrapper.logicClass.getName())) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(logicClass.getName() + <span class=\"string\">\" has registered.\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            PriorityLogicWrapper priorityLogicWrapper = <span class=\"keyword\">new</span> PriorityLogicWrapper(priority, logicClass);</div><div class=\"line\">            tempList.add(priorityLogicWrapper);</div><div class=\"line\">            <span class=\"comment\">//tempList更新，则mLogicClassMap中的value也跟着更新了，不用再调用mLogicClassMap.put方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 得到一个属于本进程的ArrayList对象，里面保存着封装类PriorityLogicWrapper</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicClassMap) &#123;</div><div class=\"line\">            <span class=\"comment\">//根据进程名，得到该进程名对应的ArrayList&lt;PriorityLogicWrapper&gt;</span></div><div class=\"line\">            mLogicList = mLogicClassMap.get(ProcessUtil.getProcessName(<span class=\"keyword\">this</span>, ProcessUtil.getMyProcessId()));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 取得mLogicList中的PriorityLogicWrapper对象，并按优先级顺序初始化BaseApplicationLogic对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">instantiateLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Collections.sort(mLogicList); <span class=\"comment\">//根据进程优先级，按顺序初始化</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper) &#123;</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            <span class=\"comment\">/**</span></div><div class=\"line\">                             * 调用Class.newInstance()，会创建这个Class的实例，但是不会执行Android中这个类相关的生命周期</div><div class=\"line\">                             * **/</div><div class=\"line\">                            priorityLogicWrapper.instance = priorityLogicWrapper.logicClass.newInstance();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                            priorityLogicWrapper.instance.setApplication(<span class=\"keyword\">this</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Application生命周期的处理，下面方法都类似</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onTerminate();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onTerminate();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onLowMemory();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onLowMemory();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onTrimMemory(level);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onTrimMemory(level);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onConfigurationChanged(newConfig);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/02/21/Multi-Process-Dispatch/\">http://agehua.github.io/2017/02/21/Multi-Process-Dispatch/</a></p>\n","readingTime":{"text":"6 min read","minutes":5.77,"time":346200,"words":1154},"excerpt":"<blockquote>\n<p>本编文章是在阅读：<a href=\"http://blog.spinytech.com/2016/12/28/android_modularization/\">Android架构思考(模块化、多进程)</a>过程中，结合自己的理解，对Android开启多进程，会导致Application重复创建问题进行一个总结。</p>\n</blockquote>\n<hr>\n<h3 id=\"Android开启多进程\"><a href=\"#Android开启多进程\" class=\"headerlink\" title=\"Android开启多进程\"></a>Android开启多进程</h3><p>一般情况下，一个应用程序就一个进程，这个进程的名称就是应用程序包名。Android的四大组件在AndroidManifest文件中注册的时候，有个属性是android:process，这里可以指定组件的所处的进程。</p>\n<p>一个进程情况下，Application的onCreate方法只会执行一次，但如果应用中采用多进程方式，onCreate方法会执行多次。</p>\n<h3 id=\"解决Application的onCreate方法多次调用\"><a href=\"#解决Application的onCreate方法多次调用\" class=\"headerlink\" title=\"解决Application的onCreate方法多次调用\"></a>解决Application的onCreate方法多次调用</h3><p>总结了两种实现方式：<br>","more":"</p>\n<h4 id=\"一、根据不同的进程名字进行不同数据的初始化。\"><a href=\"#一、根据不同的进程名字进行不同数据的初始化。\" class=\"headerlink\" title=\"一、根据不同的进程名字进行不同数据的初始化。\"></a>一、根据不同的进程名字进行不同数据的初始化。</h4><p>这是现在网络上通用的方法，在自定义的Application的onCreate方法中控制不同进程的初始化</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    String processName = getProcessName(<span class=\"keyword\">this</span>, android.os.Process.myPid());</div><div class=\"line\">    <span class=\"keyword\">if</span> (processName != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> defaultProcess = processName.equals(Constants.REAL_PACKAGE_NAME);</div><div class=\"line\">    <span class=\"comment\">// 默认的主进程启动时初始化应用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (defaultProcess) &#123;</div><div class=\"line\">\t    initAppForMainProcess();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 其他进程启动时初始化对应内容</span></div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (processName.contains(<span class=\"string\">\":webbrowser\"</span>)) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (processName.contains(<span class=\"string\">\":bgmusic\"</span>)) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取当前进程名的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@return</span> null may be returned if the specified process not found</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getProcessName</span><span class=\"params\">(Context cxt, <span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">    ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);</div><div class=\"line\">    List&lt;RunningAppP.rocessInfo&gt; runningApps = am.getRunningAppProcesses();</div><div class=\"line\">    <span class=\"keyword\">if</span> (runningApps == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (RunningAppProcessInfo procInfo : runningApps) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (procInfo.pid == pid) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> procInfo.processName;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\"><a href=\"#二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\" class=\"headerlink\" title=\"二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例\"></a>二、剥离出一个类，具有同Application相同的生命周期方法，每个进程拥有一个该类实例</h4><p>这就是文章开头提到的博客中使用的方式<a href=\"http://blog.spinytech.com/2016/12/28/android_modularization/\">Android架构思考(模块化、多进程)</a></p>\n<p>实现这种方式，一共有涉及到3个类，</p>\n<ul>\n<li>一个是MaApplication继承了Application，是程序的入口，这是一个抽象类，需要子类去实现一些方法</li>\n<li>一个是BaseApplicationLogic，这也是基类，由这个类来实现每个进程单独管理Application的生命周期，每个进程实现一个该类的子类</li>\n<li>还有一个类是PriorityLogicWrapper，它是一个封装类，继承了Comparable接口，实现了对BaseApplicationLogic按照指定顺序排序（也就是可以按照优先级顺序初始化BaseApplicationLogic）</li>\n</ul>\n<p>首先，我们先把所有ApplicationLogic注册到MaApplication中；<br>然后，MaApplication会根据注册时的进程名信息进行筛选，选择相同进程名的ApplicationLogic，保存到本进程中；<br>其次，对这些本进程的ApplicationLogic进行实例化；<br>最后，调用ApplicationLogic的onCreate方法，实现ApplicationLogic与Application生命周期同步，同时还有onTerminate、onLowMemory、onTrimMemory、onConfigurationChanged等方法，与onCreate一致。</p>\n<p>流程图如下所示：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/multi-Application-flow-chart.png\" alt=\"多进程Application启动流程\"></p>\n<p>代码实现，先看基类BaseApplicationLogic，每个进程都要实现一个该类的子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseApplicationLogic</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> MaApplication mApplication;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseApplicationLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplication</span><span class=\"params\">(@NonNull MaApplication application)</span> </span>&#123;</div><div class=\"line\">        mApplication = application;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其次PriorityLogicWrapper，这是一个封装类，实现了BaseApplicationLogic的按优先级排列：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityLogicWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">PriorityLogicWrapper</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> priority = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends BaseApplicationLogic&gt; logicClass = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> BaseApplicationLogic instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PriorityLogicWrapper</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, Class&lt;? extends BaseApplicationLogic&gt; logicClass)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.priority = priority;</div><div class=\"line\">        <span class=\"keyword\">this</span>.logicClass = logicClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(PriorityLogicWrapper o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> o.priority - <span class=\"keyword\">this</span>.priority;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在MaApplication中直接对PriorityLogicWrapper进行操作，无需操作BaseApplicationLogic对象<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//mLogicList只持有当前进程的PriorityLogicWrapper对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;PriorityLogicWrapper&gt; mLogicList;</div><div class=\"line\">    <span class=\"comment\">//mLogicClassMap持有所有进程的PriorityLogicWrapper数组对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, ArrayList&lt;PriorityLogicWrapper&gt;&gt; mLogicClassMap;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        init();</div><div class=\"line\">        initializeLogic();</div><div class=\"line\">        dispatchLogic();</div><div class=\"line\">        instantiateLogic();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    <span class=\"comment\">//找到当前进程的BaseApplicationLogic实例后，执行其onCreate()方法</span></div><div class=\"line\">                    priorityLogicWrapper.instance.onCreate();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mLogicClassMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">needMultipleProcess</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//由MaApplication的实现类，去实现这个方法，调用registerApplicationLogic()</span></div><div class=\"line\">    <span class=\"comment\">//注册所有进程的BaseApplicationLogic对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeLogic</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 添加所有来自不同进程的，不同的BaseApplicationLogic对象到HashMap中</div><div class=\"line\">     * <span class=\"doctag\">@param</span> processName 进程名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> priority 优先级</div><div class=\"line\">     * <span class=\"doctag\">@param</span> logicClass 继承BaseApplicationLogic的对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">registerApplicationLogic</span><span class=\"params\">(String processName, <span class=\"keyword\">int</span> priority, @NonNull Class&lt;? extends BaseApplicationLogic&gt; logicClass)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicClassMap) &#123;</div><div class=\"line\">            ArrayList&lt;PriorityLogicWrapper&gt; tempList = mLogicClassMap.get(processName);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == tempList) &#123;</div><div class=\"line\">                tempList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">                mLogicClassMap.put(processName, tempList);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tempList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : tempList) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (logicClass.getName().equals(priorityLogicWrapper.logicClass.getName())) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(logicClass.getName() + <span class=\"string\">\" has registered.\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            PriorityLogicWrapper priorityLogicWrapper = <span class=\"keyword\">new</span> PriorityLogicWrapper(priority, logicClass);</div><div class=\"line\">            tempList.add(priorityLogicWrapper);</div><div class=\"line\">            <span class=\"comment\">//tempList更新，则mLogicClassMap中的value也跟着更新了，不用再调用mLogicClassMap.put方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 得到一个属于本进程的ArrayList对象，里面保存着封装类PriorityLogicWrapper</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicClassMap) &#123;</div><div class=\"line\">            <span class=\"comment\">//根据进程名，得到该进程名对应的ArrayList&lt;PriorityLogicWrapper&gt;</span></div><div class=\"line\">            mLogicList = mLogicClassMap.get(ProcessUtil.getProcessName(<span class=\"keyword\">this</span>, ProcessUtil.getMyProcessId()));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 取得mLogicList中的PriorityLogicWrapper对象，并按优先级顺序初始化BaseApplicationLogic对象</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">instantiateLogic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Collections.sort(mLogicList); <span class=\"comment\">//根据进程优先级，按顺序初始化</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper) &#123;</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            <span class=\"comment\">/**</div><div class=\"line\">                             * 调用Class.newInstance()，会创建这个Class的实例，但是不会执行Android中这个类相关的生命周期</div><div class=\"line\">                             * **/</span></div><div class=\"line\">                            priorityLogicWrapper.instance = priorityLogicWrapper.logicClass.newInstance();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                            priorityLogicWrapper.instance.setApplication(<span class=\"keyword\">this</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Application生命周期的处理，下面方法都类似</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onTerminate();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onTerminate();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onLowMemory();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onLowMemory();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onTrimMemory(level);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onTrimMemory(level);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConfigurationChanged</span><span class=\"params\">(Configuration newConfig)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onConfigurationChanged(newConfig);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mLogicList &amp;&amp; mLogicList.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (PriorityLogicWrapper priorityLogicWrapper : mLogicList) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != priorityLogicWrapper &amp;&amp; <span class=\"keyword\">null</span> != priorityLogicWrapper.instance) &#123;</div><div class=\"line\">                    priorityLogicWrapper.instance.onConfigurationChanged(newConfig);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/02/21/Multi-Process-Dispatch/\">http://agehua.github.io/2017/02/21/Multi-Process-Dispatch/</a></p>"},{"layout":"post","title":"linux(centos) 搭建SVN服务器","keywords":"linux, svn服务器","banner":"http://obxk8w81b.bkt.clouddn.com/Bank%20of%20the%20Oise%20at%20Auvers.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Bank%20of%20the%20Oise%20at%20Auvers.jpg","toc":true,"_content":"\n### linux(centos) 搭建SVN服务器\n\n安装步骤如下：\n\n#### 第一步：安装SVN\n~~~ Java\nyum install subversion\n~~~\n#### 第二步：创建SVN版本库目录\n~~~ Java\nmkdir -p /var/svn/svnrepos\n~~~\n#### 第三步：创建版本库\n<!--more-->\n~~~ Java\nsvnadmin create /var/svn/svnrepos\n~~~\n#### 第四步：进入conf目录（该SVN版本库配置文件）\n\nauthz文件是权限控制文件\npasswd是帐号密码文件\nsvnserve.confSVN服务配置文件\n\n#### 第五步：修改svnserve.conf文件\n\nvi svnserve.conf打开下面的几个注释：\n\n~~~ Java\nanon-access = read #匿名用户可读\nauth-access = write #授权用户可写\npassword-db = passwd #使用哪个文件作为账号文件\nauthz-db = authz #使用哪个文件作为权限文件\nrealm = /var/svn/svnrepos # 认证空间名，版本库所在目录\n~~~\n\n> svnserve.conf、passwd、authz文件中各配置项前不要有空格\n\n#### 第六步：设置帐号密码\n~~~ Java\nvi passwd\n~~~\n在[users]块中添加用户和密码，格式：帐号=密码，如binjoo = 123456。\n\n~~~ Java\n[users]\nbinjoo = 123456\n~~~\n#### 第七步：设置权限\n\n~~~ Java\nvi authz\n~~~\n在末尾添加如下代码：\n\n~~~ Java\n[groups]\n[/]\nbinjoo=rw\n~~~\n意思是版本库的根目录binjoo对其有读写权限。\n\n#### 第八步：启动svn版本库\n~~~ Java\nsvnserve -d -r /var/svn/svnrepos\n~~~\n链接方式svn://127.0.0.1\n\n### 遇到问题\n在客户端试图 svn merge 总是报svn: E220001: 遇到不可读的路径；拒绝访问。这个错误\n\n提示 : SVN 遇到不可读的路径；拒绝访问。 英文是: Unreadable path encountered; access denied;\n\n既然看不到日志又无法merge等操作. GOOGLE了一下，下面的方法解决了问题。\n\n后面才发现是配置问题.\n\n在项目的conf/svnserve.conf 中, 设置 anon-access = none 即可. 然后重启Subversion服务.\n\n如果本地SVN客户端查看过日志会有缓存, 需要在 设置->日志缓存->缓存的版本库 中删除有问题的版本缓存 再重新查看日志就好了.\n\n### linux svn启动和关闭\n- 1，启动SVN\n~~~ Java\nsudo svnserve -d -r /var/svn/svnrepos\n~~~\n其中 -d 表示守护进程， -r 表示在后台执行\n/var/svn/svnrepos  为svn的安装目录\n\n\n- 2，关闭SVN\n这里采取linux杀死进程的方式处理的\n~~~ Java\nps -ef|grep svnserve\nroot      4967     1  0 Aug23 ?        00:00:00 svnserve -d -r repository/  \n~~~\n这里  kill -9 4967杀死进程， 此4967为进程号\n","source":"_posts/2017-03-20-SVN-server-linux.md","raw":"---\nlayout: post\ntitle:  linux(centos) 搭建SVN服务器\ncategory: accumulation\ntags:\n  - svn server\n  - linux\nkeywords: linux, svn服务器\nbanner: http://obxk8w81b.bkt.clouddn.com/Bank%20of%20the%20Oise%20at%20Auvers.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Bank%20of%20the%20Oise%20at%20Auvers.jpg\ntoc: true\n---\n\n### linux(centos) 搭建SVN服务器\n\n安装步骤如下：\n\n#### 第一步：安装SVN\n~~~ Java\nyum install subversion\n~~~\n#### 第二步：创建SVN版本库目录\n~~~ Java\nmkdir -p /var/svn/svnrepos\n~~~\n#### 第三步：创建版本库\n<!--more-->\n~~~ Java\nsvnadmin create /var/svn/svnrepos\n~~~\n#### 第四步：进入conf目录（该SVN版本库配置文件）\n\nauthz文件是权限控制文件\npasswd是帐号密码文件\nsvnserve.confSVN服务配置文件\n\n#### 第五步：修改svnserve.conf文件\n\nvi svnserve.conf打开下面的几个注释：\n\n~~~ Java\nanon-access = read #匿名用户可读\nauth-access = write #授权用户可写\npassword-db = passwd #使用哪个文件作为账号文件\nauthz-db = authz #使用哪个文件作为权限文件\nrealm = /var/svn/svnrepos # 认证空间名，版本库所在目录\n~~~\n\n> svnserve.conf、passwd、authz文件中各配置项前不要有空格\n\n#### 第六步：设置帐号密码\n~~~ Java\nvi passwd\n~~~\n在[users]块中添加用户和密码，格式：帐号=密码，如binjoo = 123456。\n\n~~~ Java\n[users]\nbinjoo = 123456\n~~~\n#### 第七步：设置权限\n\n~~~ Java\nvi authz\n~~~\n在末尾添加如下代码：\n\n~~~ Java\n[groups]\n[/]\nbinjoo=rw\n~~~\n意思是版本库的根目录binjoo对其有读写权限。\n\n#### 第八步：启动svn版本库\n~~~ Java\nsvnserve -d -r /var/svn/svnrepos\n~~~\n链接方式svn://127.0.0.1\n\n### 遇到问题\n在客户端试图 svn merge 总是报svn: E220001: 遇到不可读的路径；拒绝访问。这个错误\n\n提示 : SVN 遇到不可读的路径；拒绝访问。 英文是: Unreadable path encountered; access denied;\n\n既然看不到日志又无法merge等操作. GOOGLE了一下，下面的方法解决了问题。\n\n后面才发现是配置问题.\n\n在项目的conf/svnserve.conf 中, 设置 anon-access = none 即可. 然后重启Subversion服务.\n\n如果本地SVN客户端查看过日志会有缓存, 需要在 设置->日志缓存->缓存的版本库 中删除有问题的版本缓存 再重新查看日志就好了.\n\n### linux svn启动和关闭\n- 1，启动SVN\n~~~ Java\nsudo svnserve -d -r /var/svn/svnrepos\n~~~\n其中 -d 表示守护进程， -r 表示在后台执行\n/var/svn/svnrepos  为svn的安装目录\n\n\n- 2，关闭SVN\n这里采取linux杀死进程的方式处理的\n~~~ Java\nps -ef|grep svnserve\nroot      4967     1  0 Aug23 ?        00:00:00 svnserve -d -r repository/  \n~~~\n这里  kill -9 4967杀死进程， 此4967为进程号\n","slug":"SVN-server-linux","published":1,"date":"2017-03-19T16:00:00.000Z","updated":"2017-11-23T07:14:05.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0e002ud6ykymgkb06s","content":"<h3 id=\"linux-centos-搭建SVN服务器\"><a href=\"#linux-centos-搭建SVN服务器\" class=\"headerlink\" title=\"linux(centos) 搭建SVN服务器\"></a>linux(centos) 搭建SVN服务器</h3><p>安装步骤如下：</p>\n<h4 id=\"第一步：安装SVN\"><a href=\"#第一步：安装SVN\" class=\"headerlink\" title=\"第一步：安装SVN\"></a>第一步：安装SVN</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">yum install subversion</div></pre></td></tr></table></figure>\n<h4 id=\"第二步：创建SVN版本库目录\"><a href=\"#第二步：创建SVN版本库目录\" class=\"headerlink\" title=\"第二步：创建SVN版本库目录\"></a>第二步：创建SVN版本库目录</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir -p /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<h4 id=\"第三步：创建版本库\"><a href=\"#第三步：创建版本库\" class=\"headerlink\" title=\"第三步：创建版本库\"></a>第三步：创建版本库</h4><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">svnadmin create /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<h4 id=\"第四步：进入conf目录（该SVN版本库配置文件）\"><a href=\"#第四步：进入conf目录（该SVN版本库配置文件）\" class=\"headerlink\" title=\"第四步：进入conf目录（该SVN版本库配置文件）\"></a>第四步：进入conf目录（该SVN版本库配置文件）</h4><p>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.confSVN服务配置文件</p>\n<h4 id=\"第五步：修改svnserve-conf文件\"><a href=\"#第五步：修改svnserve-conf文件\" class=\"headerlink\" title=\"第五步：修改svnserve.conf文件\"></a>第五步：修改svnserve.conf文件</h4><p>vi svnserve.conf打开下面的几个注释：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">anon-access = read #匿名用户可读</div><div class=\"line\">auth-access = write #授权用户可写</div><div class=\"line\">password-db = passwd #使用哪个文件作为账号文件</div><div class=\"line\">authz-db = authz #使用哪个文件作为权限文件</div><div class=\"line\">realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</div></pre></td></tr></table></figure>\n<blockquote>\n<p>svnserve.conf、passwd、authz文件中各配置项前不要有空格</p>\n</blockquote>\n<h4 id=\"第六步：设置帐号密码\"><a href=\"#第六步：设置帐号密码\" class=\"headerlink\" title=\"第六步：设置帐号密码\"></a>第六步：设置帐号密码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi passwd</div></pre></td></tr></table></figure>\n<p>在[users]块中添加用户和密码，格式：帐号=密码，如binjoo = 123456。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">[users]</div><div class=\"line\">binjoo = <span class=\"number\">123456</span></div></pre></td></tr></table></figure>\n<h4 id=\"第七步：设置权限\"><a href=\"#第七步：设置权限\" class=\"headerlink\" title=\"第七步：设置权限\"></a>第七步：设置权限</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi authz</div></pre></td></tr></table></figure>\n<p>在末尾添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">[groups]</div><div class=\"line\">[/]</div><div class=\"line\">binjoo=rw</div></pre></td></tr></table></figure>\n<p>意思是版本库的根目录binjoo对其有读写权限。</p>\n<h4 id=\"第八步：启动svn版本库\"><a href=\"#第八步：启动svn版本库\" class=\"headerlink\" title=\"第八步：启动svn版本库\"></a>第八步：启动svn版本库</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">svnserve -d -r /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<p>链接方式svn://127.0.0.1</p>\n<h3 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h3><p>在客户端试图 svn merge 总是报svn: E220001: 遇到不可读的路径；拒绝访问。这个错误</p>\n<p>提示 : SVN 遇到不可读的路径；拒绝访问。 英文是: Unreadable path encountered; access denied;</p>\n<p>既然看不到日志又无法merge等操作. GOOGLE了一下，下面的方法解决了问题。</p>\n<p>后面才发现是配置问题.</p>\n<p>在项目的conf/svnserve.conf 中, 设置 anon-access = none 即可. 然后重启Subversion服务.</p>\n<p>如果本地SVN客户端查看过日志会有缓存, 需要在 设置-&gt;日志缓存-&gt;缓存的版本库 中删除有问题的版本缓存 再重新查看日志就好了.</p>\n<h3 id=\"linux-svn启动和关闭\"><a href=\"#linux-svn启动和关闭\" class=\"headerlink\" title=\"linux svn启动和关闭\"></a>linux svn启动和关闭</h3><ul>\n<li>1，启动SVN<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo svnserve -d -r /var/svn/svnrepos</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中 -d 表示守护进程， -r 表示在后台执行<br>/var/svn/svnrepos  为svn的安装目录</p>\n<ul>\n<li>2，关闭SVN<br>这里采取linux杀死进程的方式处理的<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">ps -ef|grep svnserve</div><div class=\"line\">root      <span class=\"number\">4967</span>     <span class=\"number\">1</span>  <span class=\"number\">0</span> Aug23 ?        <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> svnserve -d -r repository/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里  kill -9 4967杀死进程， 此4967为进程号</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/20/SVN-server-linux/\">http://agehua.github.io/2017/03/20/SVN-server-linux/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.095,"time":65700,"words":219},"excerpt":"<h3 id=\"linux-centos-搭建SVN服务器\"><a href=\"#linux-centos-搭建SVN服务器\" class=\"headerlink\" title=\"linux(centos) 搭建SVN服务器\"></a>linux(centos) 搭建SVN服务器</h3><p>安装步骤如下：</p>\n<h4 id=\"第一步：安装SVN\"><a href=\"#第一步：安装SVN\" class=\"headerlink\" title=\"第一步：安装SVN\"></a>第一步：安装SVN</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">yum install subversion</div></pre></td></tr></table></figure>\n<h4 id=\"第二步：创建SVN版本库目录\"><a href=\"#第二步：创建SVN版本库目录\" class=\"headerlink\" title=\"第二步：创建SVN版本库目录\"></a>第二步：创建SVN版本库目录</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">mkdir -p /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<h4 id=\"第三步：创建版本库\"><a href=\"#第三步：创建版本库\" class=\"headerlink\" title=\"第三步：创建版本库\"></a>第三步：创建版本库</h4>","more":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">svnadmin create /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<h4 id=\"第四步：进入conf目录（该SVN版本库配置文件）\"><a href=\"#第四步：进入conf目录（该SVN版本库配置文件）\" class=\"headerlink\" title=\"第四步：进入conf目录（该SVN版本库配置文件）\"></a>第四步：进入conf目录（该SVN版本库配置文件）</h4><p>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.confSVN服务配置文件</p>\n<h4 id=\"第五步：修改svnserve-conf文件\"><a href=\"#第五步：修改svnserve-conf文件\" class=\"headerlink\" title=\"第五步：修改svnserve.conf文件\"></a>第五步：修改svnserve.conf文件</h4><p>vi svnserve.conf打开下面的几个注释：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">anon-access = read #匿名用户可读</div><div class=\"line\">auth-access = write #授权用户可写</div><div class=\"line\">password-db = passwd #使用哪个文件作为账号文件</div><div class=\"line\">authz-db = authz #使用哪个文件作为权限文件</div><div class=\"line\">realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</div></pre></td></tr></table></figure>\n<blockquote>\n<p>svnserve.conf、passwd、authz文件中各配置项前不要有空格</p>\n</blockquote>\n<h4 id=\"第六步：设置帐号密码\"><a href=\"#第六步：设置帐号密码\" class=\"headerlink\" title=\"第六步：设置帐号密码\"></a>第六步：设置帐号密码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi passwd</div></pre></td></tr></table></figure>\n<p>在[users]块中添加用户和密码，格式：帐号=密码，如binjoo = 123456。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">[users]</div><div class=\"line\">binjoo = <span class=\"number\">123456</span></div></pre></td></tr></table></figure>\n<h4 id=\"第七步：设置权限\"><a href=\"#第七步：设置权限\" class=\"headerlink\" title=\"第七步：设置权限\"></a>第七步：设置权限</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi authz</div></pre></td></tr></table></figure>\n<p>在末尾添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">[groups]</div><div class=\"line\">[/]</div><div class=\"line\">binjoo=rw</div></pre></td></tr></table></figure>\n<p>意思是版本库的根目录binjoo对其有读写权限。</p>\n<h4 id=\"第八步：启动svn版本库\"><a href=\"#第八步：启动svn版本库\" class=\"headerlink\" title=\"第八步：启动svn版本库\"></a>第八步：启动svn版本库</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">svnserve -d -r /var/svn/svnrepos</div></pre></td></tr></table></figure>\n<p>链接方式svn://127.0.0.1</p>\n<h3 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h3><p>在客户端试图 svn merge 总是报svn: E220001: 遇到不可读的路径；拒绝访问。这个错误</p>\n<p>提示 : SVN 遇到不可读的路径；拒绝访问。 英文是: Unreadable path encountered; access denied;</p>\n<p>既然看不到日志又无法merge等操作. GOOGLE了一下，下面的方法解决了问题。</p>\n<p>后面才发现是配置问题.</p>\n<p>在项目的conf/svnserve.conf 中, 设置 anon-access = none 即可. 然后重启Subversion服务.</p>\n<p>如果本地SVN客户端查看过日志会有缓存, 需要在 设置-&gt;日志缓存-&gt;缓存的版本库 中删除有问题的版本缓存 再重新查看日志就好了.</p>\n<h3 id=\"linux-svn启动和关闭\"><a href=\"#linux-svn启动和关闭\" class=\"headerlink\" title=\"linux svn启动和关闭\"></a>linux svn启动和关闭</h3><ul>\n<li>1，启动SVN<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo svnserve -d -r /var/svn/svnrepos</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中 -d 表示守护进程， -r 表示在后台执行<br>/var/svn/svnrepos  为svn的安装目录</p>\n<ul>\n<li>2，关闭SVN<br>这里采取linux杀死进程的方式处理的<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">ps -ef|grep svnserve</div><div class=\"line\">root      <span class=\"number\">4967</span>     <span class=\"number\">1</span>  <span class=\"number\">0</span> Aug23 ?        <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> svnserve -d -r repository/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里  kill -9 4967杀死进程， 此4967为进程号</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/20/SVN-server-linux/\">http://agehua.github.io/2017/03/20/SVN-server-linux/</a></p>"},{"layout":"post","title":"“HTTPS”安全在哪里？","keywords":"http, https","banner":"http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg","toc":true,"_content":"\n> 文章转载自：[“HTTPS”安全在哪里？ (出处: Bugly)](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=1074)\n\n------\n\n### 背景\n\n最近基于兴趣学学习了下 HTTPS 相关的知识，在此记录下学习心得。\n\n在上网获取信息的过程中，我们接触最多的信息加密传输方式也莫过于HTTPS了。每当访问一个站点，浏览器的地址栏中出现绿色图标时，意味着该站点支持HTTPS信息传输方式。我们知道HTTPS是我们常见的HTTP协议与某个加密协议的混合体，也就是 HTTP+S。这个 S 可以是 TLS（安全传输层协议）、也可以是 SSL（安全套接层），不过我更认可另一个抽象概括的说法，HTTP+Security。不过要谈论 HTTPS 为何安全，还得从 HTTP 为何不安全说起。\n\n<!--more-->\n假设你现在正坐在教室里上课，现在你非常想和走道旁的迷人的 TA 说一些话，一般这个时候你会用“传纸条”的方式来交流。而这个方式和 TCP/IP 协议基本的工作模式十分相像：\n\n- 通过小动作引起对方注意；\n- 对方以多种可能的方式（注视、肢体语言等）回应于你；\n- 你确认对方感知到你后，将纸条传给对方；\n- 对方阅读纸条；\n- 对方给予你阅读后的反应；\n\n\n怎么样，这个流程是不是很熟悉？\n\n如果你要传递纸条的 TA 距离你很远怎么办？HTTP 协议就是指你在纸条上写明你要传给的 TA 是谁，或者 TA 的座位在哪，接着只需要途径的同学拿到纸条后根据纸条上的指示依次将纸条传过去就 OK 了。\n\n\n这个时候问题来了：途径的同学完全可以观看并知道你在纸条上写了什么。\n\n这就是 HTTP 传输所面临的问题之一：**中间人攻击**，指消息传递的过程中，处在传递路径上的攻击者可以嗅探或者窃听传输数据的内容。\n\n### 加密\nHTTPS 针对这个问题，采用了“加密”的方式来解决。最著名原始的加密方法就是对称加密算法了，就是双方约定一个暗号，用什么字母替换什么字母之类的。现在一般采用一种叫 AES（高级加密算法）的对称算法。\n\n对称加密算法既指加密和解密需要使用的密钥 key 是一样的。\n\nAES 在数学上保证了，只要你使用的 key 足够长，破解几乎是不可能的（除非光子计算机造出来了）\n我们先假设在没有密钥 key 的情况下，密文是无法被破解的，然后再回到这个教室。你将用 AES 加密后的内容噌噌噌地写在了纸条上，正要传出去的时候你突然想到，TA 没有 key 怎么解密内容呀，或者说，应该怎么把 key 给TA？\n\n如果把 key 也写在纸条上，那么中间人照样可以破解窃听纸条内容。也许在现实环境中你有其他办法可以把 key 通过某种安全的渠道送到 TA 的手里，但是互联网上的实现难度就比较大了，毕竟不管怎样，数据都要经过那些路由。\n\n于是聪明的人类发明了另一种加密算法——**非对称加密算法**。这种加密算法会生成两个密钥（key1 和 key2）。凡是 key1 加密的数据，key1 自身不能解密，需要 key2 才能解密；凡事 key2 加密的数据，key2 自身不能解密，只有 key1 才能解密。\n\n目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\n------\n> 两个大素数的乘积很容易算，但是用这个乘积去算出是哪两个素数相乘就很复杂了。好在以目前的技术，分解大数的素因确实比较困难，尤其是当这个大数足够大的时候（通常使用2的10次方个二进制位那么大），就算是超级计算机，解密也需要非常长的时间。\n现在就把这种非对称加密的方法应用在我们教室传纸条的场景里。\n\n你在写纸条内容之前先用 RSA 技术生成了一对密钥 k1 和 k2。\n- 你把 k1 用明文传了出去，路经也许有人会截取，但是没有用，k1 加密的数据需要 k2 才可以破解，而 k2 在你自己手中。\n- k1 传到了目的人，目的人会去准备一个接下来准备用于对称加密（AES）的传输密钥 key，然后用收到的 k1 把 key 加密，传给你。\n- 你用手上的 k2 解出 key 后，全教室只有你和你的目的人拥有这个对称加密的 key，你们俩就可以尽情聊天不怕窃听啦~\n\n\n这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？\n------\n> 因为非对称加密和解密的平均消耗时间比较长，为了节省时间提高效率，我们通常只是用它来交换密钥，而非直接传输数据。\n然而使用非对称加密真的可以防范中间人攻击吗？\n虽然看上去很安全，但是实际上却挡不住可恶的中间人攻击。\n\n\n假设你是 A，你的目的地是 B，现在要途径一个恶意同学M。\n\n中间人的恶意之处在于它会伪装成你的目标。\n------\n当你要和 B 完成第一次密钥交换的时候，M 把纸条扣了下来，假装自己是B并伪造了一个 key，然后用你发来的 k1 加密了 key 发还给你。\n你以为你和 B 完成了密钥交换，实际上你是和 M 完成了密钥交换。\n同事M 和 B 完成一次密钥交换，让 B 以为和 A 你完成了密钥交换。\n现在整体的加密流程变成了A（加密链接1）->M(明文)->B(加密链接2)的情况了，这时候 M 依然可以知道A和B传输的全部消息。\n\n这个时候就是体现 HTTPS 和传纸条的区别了。\n------\n在教室里，你是和一位与你身份几乎对等的的对象来通信；而在访问网站时，对方往往是一个比较大（或者知名）的服务者，他们有充沛的资源，或许他们可以向你证明他们的合法性。\n此时我们需要引入一个非常权威的第三方，一个专门用来认证网站合法性的组织，可以叫做 **CA（Certificate Authority）**。各个网站服务商可以向CA申请证书，使得他们在建立安全连接时可以带上CA的签名。而CA得安全性是由操作系统或者浏览器来认证的。\n\n你的Windows、Mac、Linux、Chrome、Safari等会在安装的时候带上一个他们认为安全的 CA 证书列表，只有和你建立安全连接的网站带有这些CA的签名，操作系统和浏览器才会认为这个链接是安全的，否则就有可能遭到中间人攻击。\n一旦某个CA颁发的证书被用于的非法途径，那么这个CA之前颁发过的所有证书都将被视为不安全的，这让所有CA在颁发证书时都十分小心，所以CA证书在通常情况下是值得信任的。\n\n\n### 总结\n使 HTTP 后面增加一个S（Security）的技术，正是 **对称加密 + 非对称加密 + CA认证** 这三种技术的混合体。当然这个主要是 HTTPS 的基本原理，真正实际中的 HTTPS 的协议是比以上的描述更为复杂一些的，并且其中任何一步稍有闪失，整个流程都将不再安全。\n这也是为什么 HTTPS 协议从 SSL 1.0升级到 SSL 3.0，再被 TLS 1.0 现在被 TLS 1.3取代，其背后都是一个个细节上的优化，以防有任何闪失。\nTLS 协议相比 SSL 协议增加了传输层的安全保证。\n","source":"_posts/2017-03-09-Https-Questions.md","raw":"---\nlayout: post\ntitle:  “HTTPS”安全在哪里？\ncategory: accumulation\ntags:\n  - HTTPS\nkeywords: http, https\nbanner: http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Auvers%20Town%20Hall%20on%2014%20July%201890.jpg\ntoc: true\n---\n\n> 文章转载自：[“HTTPS”安全在哪里？ (出处: Bugly)](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=1074)\n\n------\n\n### 背景\n\n最近基于兴趣学学习了下 HTTPS 相关的知识，在此记录下学习心得。\n\n在上网获取信息的过程中，我们接触最多的信息加密传输方式也莫过于HTTPS了。每当访问一个站点，浏览器的地址栏中出现绿色图标时，意味着该站点支持HTTPS信息传输方式。我们知道HTTPS是我们常见的HTTP协议与某个加密协议的混合体，也就是 HTTP+S。这个 S 可以是 TLS（安全传输层协议）、也可以是 SSL（安全套接层），不过我更认可另一个抽象概括的说法，HTTP+Security。不过要谈论 HTTPS 为何安全，还得从 HTTP 为何不安全说起。\n\n<!--more-->\n假设你现在正坐在教室里上课，现在你非常想和走道旁的迷人的 TA 说一些话，一般这个时候你会用“传纸条”的方式来交流。而这个方式和 TCP/IP 协议基本的工作模式十分相像：\n\n- 通过小动作引起对方注意；\n- 对方以多种可能的方式（注视、肢体语言等）回应于你；\n- 你确认对方感知到你后，将纸条传给对方；\n- 对方阅读纸条；\n- 对方给予你阅读后的反应；\n\n\n怎么样，这个流程是不是很熟悉？\n\n如果你要传递纸条的 TA 距离你很远怎么办？HTTP 协议就是指你在纸条上写明你要传给的 TA 是谁，或者 TA 的座位在哪，接着只需要途径的同学拿到纸条后根据纸条上的指示依次将纸条传过去就 OK 了。\n\n\n这个时候问题来了：途径的同学完全可以观看并知道你在纸条上写了什么。\n\n这就是 HTTP 传输所面临的问题之一：**中间人攻击**，指消息传递的过程中，处在传递路径上的攻击者可以嗅探或者窃听传输数据的内容。\n\n### 加密\nHTTPS 针对这个问题，采用了“加密”的方式来解决。最著名原始的加密方法就是对称加密算法了，就是双方约定一个暗号，用什么字母替换什么字母之类的。现在一般采用一种叫 AES（高级加密算法）的对称算法。\n\n对称加密算法既指加密和解密需要使用的密钥 key 是一样的。\n\nAES 在数学上保证了，只要你使用的 key 足够长，破解几乎是不可能的（除非光子计算机造出来了）\n我们先假设在没有密钥 key 的情况下，密文是无法被破解的，然后再回到这个教室。你将用 AES 加密后的内容噌噌噌地写在了纸条上，正要传出去的时候你突然想到，TA 没有 key 怎么解密内容呀，或者说，应该怎么把 key 给TA？\n\n如果把 key 也写在纸条上，那么中间人照样可以破解窃听纸条内容。也许在现实环境中你有其他办法可以把 key 通过某种安全的渠道送到 TA 的手里，但是互联网上的实现难度就比较大了，毕竟不管怎样，数据都要经过那些路由。\n\n于是聪明的人类发明了另一种加密算法——**非对称加密算法**。这种加密算法会生成两个密钥（key1 和 key2）。凡是 key1 加密的数据，key1 自身不能解密，需要 key2 才能解密；凡事 key2 加密的数据，key2 自身不能解密，只有 key1 才能解密。\n\n目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\n------\n> 两个大素数的乘积很容易算，但是用这个乘积去算出是哪两个素数相乘就很复杂了。好在以目前的技术，分解大数的素因确实比较困难，尤其是当这个大数足够大的时候（通常使用2的10次方个二进制位那么大），就算是超级计算机，解密也需要非常长的时间。\n现在就把这种非对称加密的方法应用在我们教室传纸条的场景里。\n\n你在写纸条内容之前先用 RSA 技术生成了一对密钥 k1 和 k2。\n- 你把 k1 用明文传了出去，路经也许有人会截取，但是没有用，k1 加密的数据需要 k2 才可以破解，而 k2 在你自己手中。\n- k1 传到了目的人，目的人会去准备一个接下来准备用于对称加密（AES）的传输密钥 key，然后用收到的 k1 把 key 加密，传给你。\n- 你用手上的 k2 解出 key 后，全教室只有你和你的目的人拥有这个对称加密的 key，你们俩就可以尽情聊天不怕窃听啦~\n\n\n这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？\n------\n> 因为非对称加密和解密的平均消耗时间比较长，为了节省时间提高效率，我们通常只是用它来交换密钥，而非直接传输数据。\n然而使用非对称加密真的可以防范中间人攻击吗？\n虽然看上去很安全，但是实际上却挡不住可恶的中间人攻击。\n\n\n假设你是 A，你的目的地是 B，现在要途径一个恶意同学M。\n\n中间人的恶意之处在于它会伪装成你的目标。\n------\n当你要和 B 完成第一次密钥交换的时候，M 把纸条扣了下来，假装自己是B并伪造了一个 key，然后用你发来的 k1 加密了 key 发还给你。\n你以为你和 B 完成了密钥交换，实际上你是和 M 完成了密钥交换。\n同事M 和 B 完成一次密钥交换，让 B 以为和 A 你完成了密钥交换。\n现在整体的加密流程变成了A（加密链接1）->M(明文)->B(加密链接2)的情况了，这时候 M 依然可以知道A和B传输的全部消息。\n\n这个时候就是体现 HTTPS 和传纸条的区别了。\n------\n在教室里，你是和一位与你身份几乎对等的的对象来通信；而在访问网站时，对方往往是一个比较大（或者知名）的服务者，他们有充沛的资源，或许他们可以向你证明他们的合法性。\n此时我们需要引入一个非常权威的第三方，一个专门用来认证网站合法性的组织，可以叫做 **CA（Certificate Authority）**。各个网站服务商可以向CA申请证书，使得他们在建立安全连接时可以带上CA的签名。而CA得安全性是由操作系统或者浏览器来认证的。\n\n你的Windows、Mac、Linux、Chrome、Safari等会在安装的时候带上一个他们认为安全的 CA 证书列表，只有和你建立安全连接的网站带有这些CA的签名，操作系统和浏览器才会认为这个链接是安全的，否则就有可能遭到中间人攻击。\n一旦某个CA颁发的证书被用于的非法途径，那么这个CA之前颁发过的所有证书都将被视为不安全的，这让所有CA在颁发证书时都十分小心，所以CA证书在通常情况下是值得信任的。\n\n\n### 总结\n使 HTTP 后面增加一个S（Security）的技术，正是 **对称加密 + 非对称加密 + CA认证** 这三种技术的混合体。当然这个主要是 HTTPS 的基本原理，真正实际中的 HTTPS 的协议是比以上的描述更为复杂一些的，并且其中任何一步稍有闪失，整个流程都将不再安全。\n这也是为什么 HTTPS 协议从 SSL 1.0升级到 SSL 3.0，再被 TLS 1.0 现在被 TLS 1.3取代，其背后都是一个个细节上的优化，以防有任何闪失。\nTLS 协议相比 SSL 协议增加了传输层的安全保证。\n","slug":"Https-Questions","published":1,"date":"2017-03-08T16:00:00.000Z","updated":"2017-11-23T07:13:29.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0i002xd6yke6k9n32i","content":"<blockquote>\n<p>文章转载自：<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1074\" target=\"_blank\" rel=\"external\">“HTTPS”安全在哪里？ (出处: Bugly)</a></p>\n</blockquote>\n<hr>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近基于兴趣学学习了下 HTTPS 相关的知识，在此记录下学习心得。</p>\n<p>在上网获取信息的过程中，我们接触最多的信息加密传输方式也莫过于HTTPS了。每当访问一个站点，浏览器的地址栏中出现绿色图标时，意味着该站点支持HTTPS信息传输方式。我们知道HTTPS是我们常见的HTTP协议与某个加密协议的混合体，也就是 HTTP+S。这个 S 可以是 TLS（安全传输层协议）、也可以是 SSL（安全套接层），不过我更认可另一个抽象概括的说法，HTTP+Security。不过要谈论 HTTPS 为何安全，还得从 HTTP 为何不安全说起。</p>\n<a id=\"more\"></a>\n<p>假设你现在正坐在教室里上课，现在你非常想和走道旁的迷人的 TA 说一些话，一般这个时候你会用“传纸条”的方式来交流。而这个方式和 TCP/IP 协议基本的工作模式十分相像：</p>\n<ul>\n<li>通过小动作引起对方注意；</li>\n<li>对方以多种可能的方式（注视、肢体语言等）回应于你；</li>\n<li>你确认对方感知到你后，将纸条传给对方；</li>\n<li>对方阅读纸条；</li>\n<li>对方给予你阅读后的反应；</li>\n</ul>\n<p>怎么样，这个流程是不是很熟悉？</p>\n<p>如果你要传递纸条的 TA 距离你很远怎么办？HTTP 协议就是指你在纸条上写明你要传给的 TA 是谁，或者 TA 的座位在哪，接着只需要途径的同学拿到纸条后根据纸条上的指示依次将纸条传过去就 OK 了。</p>\n<p>这个时候问题来了：途径的同学完全可以观看并知道你在纸条上写了什么。</p>\n<p>这就是 HTTP 传输所面临的问题之一：<strong>中间人攻击</strong>，指消息传递的过程中，处在传递路径上的攻击者可以嗅探或者窃听传输数据的内容。</p>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><p>HTTPS 针对这个问题，采用了“加密”的方式来解决。最著名原始的加密方法就是对称加密算法了，就是双方约定一个暗号，用什么字母替换什么字母之类的。现在一般采用一种叫 AES（高级加密算法）的对称算法。</p>\n<p>对称加密算法既指加密和解密需要使用的密钥 key 是一样的。</p>\n<p>AES 在数学上保证了，只要你使用的 key 足够长，破解几乎是不可能的（除非光子计算机造出来了）<br>我们先假设在没有密钥 key 的情况下，密文是无法被破解的，然后再回到这个教室。你将用 AES 加密后的内容噌噌噌地写在了纸条上，正要传出去的时候你突然想到，TA 没有 key 怎么解密内容呀，或者说，应该怎么把 key 给TA？</p>\n<p>如果把 key 也写在纸条上，那么中间人照样可以破解窃听纸条内容。也许在现实环境中你有其他办法可以把 key 通过某种安全的渠道送到 TA 的手里，但是互联网上的实现难度就比较大了，毕竟不管怎样，数据都要经过那些路由。</p>\n<p>于是聪明的人类发明了另一种加密算法——<strong>非对称加密算法</strong>。这种加密算法会生成两个密钥（key1 和 key2）。凡是 key1 加密的数据，key1 自身不能解密，需要 key2 才能解密；凡事 key2 加密的数据，key2 自身不能解密，只有 key1 才能解密。</p>\n<h2 id=\"目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\"><a href=\"#目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\" class=\"headerlink\" title=\"目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\"></a>目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：</h2><blockquote>\n<p>两个大素数的乘积很容易算，但是用这个乘积去算出是哪两个素数相乘就很复杂了。好在以目前的技术，分解大数的素因确实比较困难，尤其是当这个大数足够大的时候（通常使用2的10次方个二进制位那么大），就算是超级计算机，解密也需要非常长的时间。<br>现在就把这种非对称加密的方法应用在我们教室传纸条的场景里。</p>\n</blockquote>\n<p>你在写纸条内容之前先用 RSA 技术生成了一对密钥 k1 和 k2。</p>\n<ul>\n<li>你把 k1 用明文传了出去，路经也许有人会截取，但是没有用，k1 加密的数据需要 k2 才可以破解，而 k2 在你自己手中。</li>\n<li>k1 传到了目的人，目的人会去准备一个接下来准备用于对称加密（AES）的传输密钥 key，然后用收到的 k1 把 key 加密，传给你。</li>\n<li>你用手上的 k2 解出 key 后，全教室只有你和你的目的人拥有这个对称加密的 key，你们俩就可以尽情聊天不怕窃听啦~</li>\n</ul>\n<h2 id=\"这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密-AES-的-key-呢？\"><a href=\"#这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密-AES-的-key-呢？\" class=\"headerlink\" title=\"这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？\"></a>这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？</h2><blockquote>\n<p>因为非对称加密和解密的平均消耗时间比较长，为了节省时间提高效率，我们通常只是用它来交换密钥，而非直接传输数据。<br>然而使用非对称加密真的可以防范中间人攻击吗？<br>虽然看上去很安全，但是实际上却挡不住可恶的中间人攻击。</p>\n</blockquote>\n<p>假设你是 A，你的目的地是 B，现在要途径一个恶意同学M。</p>\n<h2 id=\"中间人的恶意之处在于它会伪装成你的目标。\"><a href=\"#中间人的恶意之处在于它会伪装成你的目标。\" class=\"headerlink\" title=\"中间人的恶意之处在于它会伪装成你的目标。\"></a>中间人的恶意之处在于它会伪装成你的目标。</h2><p>当你要和 B 完成第一次密钥交换的时候，M 把纸条扣了下来，假装自己是B并伪造了一个 key，然后用你发来的 k1 加密了 key 发还给你。<br>你以为你和 B 完成了密钥交换，实际上你是和 M 完成了密钥交换。<br>同事M 和 B 完成一次密钥交换，让 B 以为和 A 你完成了密钥交换。<br>现在整体的加密流程变成了A（加密链接1）-&gt;M(明文)-&gt;B(加密链接2)的情况了，这时候 M 依然可以知道A和B传输的全部消息。</p>\n<h2 id=\"这个时候就是体现-HTTPS-和传纸条的区别了。\"><a href=\"#这个时候就是体现-HTTPS-和传纸条的区别了。\" class=\"headerlink\" title=\"这个时候就是体现 HTTPS 和传纸条的区别了。\"></a>这个时候就是体现 HTTPS 和传纸条的区别了。</h2><p>在教室里，你是和一位与你身份几乎对等的的对象来通信；而在访问网站时，对方往往是一个比较大（或者知名）的服务者，他们有充沛的资源，或许他们可以向你证明他们的合法性。<br>此时我们需要引入一个非常权威的第三方，一个专门用来认证网站合法性的组织，可以叫做 <strong>CA（Certificate Authority）</strong>。各个网站服务商可以向CA申请证书，使得他们在建立安全连接时可以带上CA的签名。而CA得安全性是由操作系统或者浏览器来认证的。</p>\n<p>你的Windows、Mac、Linux、Chrome、Safari等会在安装的时候带上一个他们认为安全的 CA 证书列表，只有和你建立安全连接的网站带有这些CA的签名，操作系统和浏览器才会认为这个链接是安全的，否则就有可能遭到中间人攻击。<br>一旦某个CA颁发的证书被用于的非法途径，那么这个CA之前颁发过的所有证书都将被视为不安全的，这让所有CA在颁发证书时都十分小心，所以CA证书在通常情况下是值得信任的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使 HTTP 后面增加一个S（Security）的技术，正是 <strong>对称加密 + 非对称加密 + CA认证</strong> 这三种技术的混合体。当然这个主要是 HTTPS 的基本原理，真正实际中的 HTTPS 的协议是比以上的描述更为复杂一些的，并且其中任何一步稍有闪失，整个流程都将不再安全。<br>这也是为什么 HTTPS 协议从 SSL 1.0升级到 SSL 3.0，再被 TLS 1.0 现在被 TLS 1.3取代，其背后都是一个个细节上的优化，以防有任何闪失。<br>TLS 协议相比 SSL 协议增加了传输层的安全保证。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/09/Https-Questions/\">http://agehua.github.io/2017/03/09/Https-Questions/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.14,"time":68399.99999999999,"words":228},"excerpt":"<blockquote>\n<p>文章转载自：<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1074\">“HTTPS”安全在哪里？ (出处: Bugly)</a></p>\n</blockquote>\n<hr>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近基于兴趣学学习了下 HTTPS 相关的知识，在此记录下学习心得。</p>\n<p>在上网获取信息的过程中，我们接触最多的信息加密传输方式也莫过于HTTPS了。每当访问一个站点，浏览器的地址栏中出现绿色图标时，意味着该站点支持HTTPS信息传输方式。我们知道HTTPS是我们常见的HTTP协议与某个加密协议的混合体，也就是 HTTP+S。这个 S 可以是 TLS（安全传输层协议）、也可以是 SSL（安全套接层），不过我更认可另一个抽象概括的说法，HTTP+Security。不过要谈论 HTTPS 为何安全，还得从 HTTP 为何不安全说起。</p>","more":"<p>假设你现在正坐在教室里上课，现在你非常想和走道旁的迷人的 TA 说一些话，一般这个时候你会用“传纸条”的方式来交流。而这个方式和 TCP/IP 协议基本的工作模式十分相像：</p>\n<ul>\n<li>通过小动作引起对方注意；</li>\n<li>对方以多种可能的方式（注视、肢体语言等）回应于你；</li>\n<li>你确认对方感知到你后，将纸条传给对方；</li>\n<li>对方阅读纸条；</li>\n<li>对方给予你阅读后的反应；</li>\n</ul>\n<p>怎么样，这个流程是不是很熟悉？</p>\n<p>如果你要传递纸条的 TA 距离你很远怎么办？HTTP 协议就是指你在纸条上写明你要传给的 TA 是谁，或者 TA 的座位在哪，接着只需要途径的同学拿到纸条后根据纸条上的指示依次将纸条传过去就 OK 了。</p>\n<p>这个时候问题来了：途径的同学完全可以观看并知道你在纸条上写了什么。</p>\n<p>这就是 HTTP 传输所面临的问题之一：<strong>中间人攻击</strong>，指消息传递的过程中，处在传递路径上的攻击者可以嗅探或者窃听传输数据的内容。</p>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><p>HTTPS 针对这个问题，采用了“加密”的方式来解决。最著名原始的加密方法就是对称加密算法了，就是双方约定一个暗号，用什么字母替换什么字母之类的。现在一般采用一种叫 AES（高级加密算法）的对称算法。</p>\n<p>对称加密算法既指加密和解密需要使用的密钥 key 是一样的。</p>\n<p>AES 在数学上保证了，只要你使用的 key 足够长，破解几乎是不可能的（除非光子计算机造出来了）<br>我们先假设在没有密钥 key 的情况下，密文是无法被破解的，然后再回到这个教室。你将用 AES 加密后的内容噌噌噌地写在了纸条上，正要传出去的时候你突然想到，TA 没有 key 怎么解密内容呀，或者说，应该怎么把 key 给TA？</p>\n<p>如果把 key 也写在纸条上，那么中间人照样可以破解窃听纸条内容。也许在现实环境中你有其他办法可以把 key 通过某种安全的渠道送到 TA 的手里，但是互联网上的实现难度就比较大了，毕竟不管怎样，数据都要经过那些路由。</p>\n<p>于是聪明的人类发明了另一种加密算法——<strong>非对称加密算法</strong>。这种加密算法会生成两个密钥（key1 和 key2）。凡是 key1 加密的数据，key1 自身不能解密，需要 key2 才能解密；凡事 key2 加密的数据，key2 自身不能解密，只有 key1 才能解密。</p>\n<h2 id=\"目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\"><a href=\"#目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\" class=\"headerlink\" title=\"目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：\"></a>目前这种算法有很多中，最常用的是RSA。其基于的数学原理是：</h2><blockquote>\n<p>两个大素数的乘积很容易算，但是用这个乘积去算出是哪两个素数相乘就很复杂了。好在以目前的技术，分解大数的素因确实比较困难，尤其是当这个大数足够大的时候（通常使用2的10次方个二进制位那么大），就算是超级计算机，解密也需要非常长的时间。<br>现在就把这种非对称加密的方法应用在我们教室传纸条的场景里。</p>\n</blockquote>\n<p>你在写纸条内容之前先用 RSA 技术生成了一对密钥 k1 和 k2。</p>\n<ul>\n<li>你把 k1 用明文传了出去，路经也许有人会截取，但是没有用，k1 加密的数据需要 k2 才可以破解，而 k2 在你自己手中。</li>\n<li>k1 传到了目的人，目的人会去准备一个接下来准备用于对称加密（AES）的传输密钥 key，然后用收到的 k1 把 key 加密，传给你。</li>\n<li>你用手上的 k2 解出 key 后，全教室只有你和你的目的人拥有这个对称加密的 key，你们俩就可以尽情聊天不怕窃听啦~</li>\n</ul>\n<h2 id=\"这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密-AES-的-key-呢？\"><a href=\"#这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密-AES-的-key-呢？\" class=\"headerlink\" title=\"这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？\"></a>这里也许你会有问题，为什么不直接用非对称加密来加密信息，而是加密 AES 的 key 呢？</h2><blockquote>\n<p>因为非对称加密和解密的平均消耗时间比较长，为了节省时间提高效率，我们通常只是用它来交换密钥，而非直接传输数据。<br>然而使用非对称加密真的可以防范中间人攻击吗？<br>虽然看上去很安全，但是实际上却挡不住可恶的中间人攻击。</p>\n</blockquote>\n<p>假设你是 A，你的目的地是 B，现在要途径一个恶意同学M。</p>\n<h2 id=\"中间人的恶意之处在于它会伪装成你的目标。\"><a href=\"#中间人的恶意之处在于它会伪装成你的目标。\" class=\"headerlink\" title=\"中间人的恶意之处在于它会伪装成你的目标。\"></a>中间人的恶意之处在于它会伪装成你的目标。</h2><p>当你要和 B 完成第一次密钥交换的时候，M 把纸条扣了下来，假装自己是B并伪造了一个 key，然后用你发来的 k1 加密了 key 发还给你。<br>你以为你和 B 完成了密钥交换，实际上你是和 M 完成了密钥交换。<br>同事M 和 B 完成一次密钥交换，让 B 以为和 A 你完成了密钥交换。<br>现在整体的加密流程变成了A（加密链接1）-&gt;M(明文)-&gt;B(加密链接2)的情况了，这时候 M 依然可以知道A和B传输的全部消息。</p>\n<h2 id=\"这个时候就是体现-HTTPS-和传纸条的区别了。\"><a href=\"#这个时候就是体现-HTTPS-和传纸条的区别了。\" class=\"headerlink\" title=\"这个时候就是体现 HTTPS 和传纸条的区别了。\"></a>这个时候就是体现 HTTPS 和传纸条的区别了。</h2><p>在教室里，你是和一位与你身份几乎对等的的对象来通信；而在访问网站时，对方往往是一个比较大（或者知名）的服务者，他们有充沛的资源，或许他们可以向你证明他们的合法性。<br>此时我们需要引入一个非常权威的第三方，一个专门用来认证网站合法性的组织，可以叫做 <strong>CA（Certificate Authority）</strong>。各个网站服务商可以向CA申请证书，使得他们在建立安全连接时可以带上CA的签名。而CA得安全性是由操作系统或者浏览器来认证的。</p>\n<p>你的Windows、Mac、Linux、Chrome、Safari等会在安装的时候带上一个他们认为安全的 CA 证书列表，只有和你建立安全连接的网站带有这些CA的签名，操作系统和浏览器才会认为这个链接是安全的，否则就有可能遭到中间人攻击。<br>一旦某个CA颁发的证书被用于的非法途径，那么这个CA之前颁发过的所有证书都将被视为不安全的，这让所有CA在颁发证书时都十分小心，所以CA证书在通常情况下是值得信任的。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使 HTTP 后面增加一个S（Security）的技术，正是 <strong>对称加密 + 非对称加密 + CA认证</strong> 这三种技术的混合体。当然这个主要是 HTTPS 的基本原理，真正实际中的 HTTPS 的协议是比以上的描述更为复杂一些的，并且其中任何一步稍有闪失，整个流程都将不再安全。<br>这也是为什么 HTTPS 协议从 SSL 1.0升级到 SSL 3.0，再被 TLS 1.0 现在被 TLS 1.3取代，其背后都是一个个细节上的优化，以防有任何闪失。<br>TLS 协议相比 SSL 协议增加了传输层的安全保证。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/09/Https-Questions/\">http://agehua.github.io/2017/03/09/Https-Questions/</a></p>"},{"layout":"post","title":"Injection(CDI)和assertion(断言)","keywords":"Injection, assert","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg","toc":true,"_content":"\n### @Inject注解和CDI（上下文依赖注入）\n怎么让代码显得高大上呢，当然是多使用注解，那[Android Support Annotation](https://developer.android.com/reference/android/support/annotation/package-summary.html)使用完了，有没有更高端的呢？\n\n这篇文章就简单介绍下Java中存在的注解。\n\nCDI（Contexts and Dependency Injection 上下文依赖注入）\n[Java 依赖注入标准（JSR-330）](http://blog.csdn.net/DL88250/article/details/4838803)规范，在javax.inject包中提供了一个接口Provider，和几个注解类型@Scope、@Inject、@Named、@Qualifier\n\n#### @Inject\n@Inject是javax.inject中提供的一个注解，可以不使用new关键字直接创建对象，怎么样，是不是很高端 :)\n\n##### 在字段注解：\n用@Inject注解，字段不能是final的。可以拥有一个合法的名称\n\n<!--more-->\n\ndoc文档原文：\n\n~~~ Java\nInjectable fields:\n\n  - are annotated with @Inject.\n  - are not final.\n  - may have any otherwise valid name.\n\n@Inject FieldModifiers(opt) Type VariableDeclarators;\n~~~\n\n     (opt)这里表示可选\n\n##### 在方法上注解：\n用@Inject注解，不能是抽象方法，不能声明自身参数类型。可以有返回结果。拥有一个合法的名称。可以有0个或多个参数\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html)：\n\n~~~ Java\nInjectable methods:\n- are annotated with @Inject.\n- are not abstract.\n- do not declare type parameters of their own.\n- may return a result\n- may have any otherwise valid name.\n- accept zero or more dependencies as arguments.\n\n\n@Inject MethodModifiers(opt) ResultType Identifier(FormalParameterList(opt)) Throws(opt) MethodBody\n~~~\n\n     (opt)这里表示可选\n\n代码示例：\n\n~~~ Java\n@Inject\nWeatherDao weatherDao;\n~~~\n\n~~~ Java\n@Inject\nWeatherDao(Context context) {\n    this.context = context;\n}\n~~~\n@Inject支持构造函数、方法和字段注解，也可能使用于静态实例成员。\n可注解成员可以是任意修饰符（private,package-private,protected,public）。\n注入顺序：构造函数、字段，然后是方法。父类的字段和方法注入优先于子类的字段和方法，同一类中的字段和方法是没有顺序的。\n\n**@Inject注解的构造函数可以是无参或多个参数的构造函数。@Inject每个类中最多注解一个构造函数。**\n\n除了@Inject注解，还有@Named、@Qualifier和@Provider，下面简单介绍一下。\n\n#### @Named\n@Named，一般和@Inject一起使用，如果没有值生成的Bean名称默认和类名相同。\n\n如果指定名称，那么就生成一个指定名称的Bean。\n~~~ Java\npublic class Car {\n     @Inject @Named(\"driver\") Seat driverSeat;\n     @Inject @Named(\"passenger\") Seat passengerSeat;\n     ...\n}\n~~~\n\n#### @Qualifier\n自定义一个新的修饰语（注解），一个qualifier注解应该满足如下条件：\n- 定义的注解类有@Qualifier，@Retention(RUNTIME)和@Documented。\n- 可以有属性\n- 可以是公共API的一部分\n- 可以用@Target注解限定使用范围\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Qualifier.html)是：\n~~~ Java\nIdentifies qualifier annotations. Anyone can define a new qualifier. A qualifier annotation:\n\n- is annotated with @Qualifier, @Retention(RUNTIME), and typically @Documented.\n- can have attributes.\n- may be part of the public API, much like the dependency type, but unlike implementation types which needn't be part of the public API.\n- may have restricted usage if annotated with @Target. While this specification covers applying qualifiers to fields and parameters only, some injector configurations might use qualifier annotations in other places (on methods or classes for example).\n~~~\n\n下面是[java doc文档@Named注解](http://docs.oracle.com/javaee/6/api/javax/inject/Named.html)的生成代码\n~~~ Java\n@Qualifier\n@Documented\n@Retention(value=RUNTIME)\npublic @interface Named\n~~~\n\n~~~ Java\n@Documented  \n@Retention(RetentionPolicy.RUNTIME)  \n@Qualifier  \n@Target(value = {ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE})  \npublic @interface Genre {  \n    User user() default User.STUDENT;  \n    public enum User {STUDENT, TEACHER}  \n}\n~~~\n\n~~~ Java\n@Named  \n@Genre(user = User.STUDENT)  \npublic class StudentDAO implements IUserDAO{  \n    @Override  \n    public int count() {  \n        System.out.println(\"----StudentDAO----\");  \n        return 0;  \n    }  \n}  \n~~~\n\n#### @Provider\n@Provider注解，可以实现任意类型的对象的注入。相对于直接注入T对象，@Provider提供了一个T.get()方法来获取注入的对象\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Provider.html):\n~~~ Java\nProvides instances of T. Typically implemented by an injector. For any type T that can be injected, you can also inject Provider<T>. Compared to injecting T directly, injecting Provider<T> enables:\n\n- retrieving multiple instances.\n- lazy or optional retrieval of an instance.\n- breaking circular dependencies.\n- abstracting scope so you can look up an instance in a smaller scope from an instance in a containing scope.\n~~~\n\nFor example:\n~~~ Java\nclass Car {\n@Inject Car(Provider<Seat> seatProvider) {\n   Seat driver = seatProvider.get();\n   Seat passenger = seatProvider.get();\n   ...\n }\n}\n~~~\n\nget方法解释\n~~~ Java\nT\tget()\n    Provides a fully-constructed and injected instance of T.\n~~~\n\n#### @Singleton\n使用该注解标记该类只创建一次，不能被继承。一般在类上用该注解。\n\n\n\n[doc原文](http://docs.oracle.com/javaee/6/api/javax/inject/Singleton.html):\n~~~ Java\n@Scope\n@Documented\n@Retention(value=RUNTIME)\npublic @interface Singleton\nIdentifies a type that the injector only instantiates once. Not inherited.\n~~~\n\n\n#### @Scope\n注解 @Scope 用于标识作用域注解。一个作用域注解是被标识在包含一个可注入构造器的类上的，用于控制该类型的实例如何被注入器重用。缺省情况下，如果没有标识作用域注解，注入器将为每一次注入都创建（通过注入类型的构造器）新实例，并不重用已有实例。如果多个线程都能够访问一个作用域内的实例，该实例实现应该是线程安全的。作用域实现由注入器完成。\n\n在下面的例子中，作用域注解 @Singleton 确保我们始终只有一个 Log 实例：\n\n~~~ Java\n@Singleton\nclass Log {\n   void log(String message) { ... }\n}\n~~~\n\n当多于一个作用域注解或不被注入器支持的作用域注解被使用在同一个类上时，注入器将生成一个错误。\n\n一个作用域注解：\n\n- 被标注了 @Scope、@Retention(RUNTIME) 标注的，通常也被 @Documented 标注。\n- 不应该含有属性。\n- 不应该被 @Inherited 标注，因此作用域与继承实现（正交）无关。\n- 如果标注了 @Target 可能会有一些用法限制。\n\n使用 @Scope 来标识一个作用域注解有助于注入器探测程序员使用了作用域注解但却忘了去配置作用域的情况。一个保守的注入器应该生成一个错误而不是去适用该作用域。\n\n[doc原文请点击](http://docs.oracle.com/javaee/6/api/javax/inject/Scope.html)\n\n### assertion(断言)\n在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。\n\n\n在语法上，为了支持assertion，Java增加了一个关键字assert。它包括两种表达式，分别如下：\n\n~~~ Java\n1.assert expression1;\n\n2.assert expression1: expression2;\n~~~\n\nexpression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。\n\n- 在运行时，如果关闭了assertion功能，这些语句将不起任何作用。\n- 如果打开了assertion功能，那么expression1的值将被计算。\n- 如果它的值为false，该语句强抛出一个AssertionError对象。\n- 如果expression1值为true，expression2将不被计算。\n\n如何关闭和开启assertion功能，[请看这篇文章](http://blog.csdn.net/ithomer/article/details/9185125)\n","source":"_posts/2017-03-14-JAVA-CDI-Assertion.md","raw":"---\nlayout: post\ntitle:  Injection(CDI)和assertion(断言)\ncategory: accumulation\ntags:\n  - Injection\n  - assertion\nkeywords: Injection, assert\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Acacia%20Branches.jpg\ntoc: true\n---\n\n### @Inject注解和CDI（上下文依赖注入）\n怎么让代码显得高大上呢，当然是多使用注解，那[Android Support Annotation](https://developer.android.com/reference/android/support/annotation/package-summary.html)使用完了，有没有更高端的呢？\n\n这篇文章就简单介绍下Java中存在的注解。\n\nCDI（Contexts and Dependency Injection 上下文依赖注入）\n[Java 依赖注入标准（JSR-330）](http://blog.csdn.net/DL88250/article/details/4838803)规范，在javax.inject包中提供了一个接口Provider，和几个注解类型@Scope、@Inject、@Named、@Qualifier\n\n#### @Inject\n@Inject是javax.inject中提供的一个注解，可以不使用new关键字直接创建对象，怎么样，是不是很高端 :)\n\n##### 在字段注解：\n用@Inject注解，字段不能是final的。可以拥有一个合法的名称\n\n<!--more-->\n\ndoc文档原文：\n\n~~~ Java\nInjectable fields:\n\n  - are annotated with @Inject.\n  - are not final.\n  - may have any otherwise valid name.\n\n@Inject FieldModifiers(opt) Type VariableDeclarators;\n~~~\n\n     (opt)这里表示可选\n\n##### 在方法上注解：\n用@Inject注解，不能是抽象方法，不能声明自身参数类型。可以有返回结果。拥有一个合法的名称。可以有0个或多个参数\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html)：\n\n~~~ Java\nInjectable methods:\n- are annotated with @Inject.\n- are not abstract.\n- do not declare type parameters of their own.\n- may return a result\n- may have any otherwise valid name.\n- accept zero or more dependencies as arguments.\n\n\n@Inject MethodModifiers(opt) ResultType Identifier(FormalParameterList(opt)) Throws(opt) MethodBody\n~~~\n\n     (opt)这里表示可选\n\n代码示例：\n\n~~~ Java\n@Inject\nWeatherDao weatherDao;\n~~~\n\n~~~ Java\n@Inject\nWeatherDao(Context context) {\n    this.context = context;\n}\n~~~\n@Inject支持构造函数、方法和字段注解，也可能使用于静态实例成员。\n可注解成员可以是任意修饰符（private,package-private,protected,public）。\n注入顺序：构造函数、字段，然后是方法。父类的字段和方法注入优先于子类的字段和方法，同一类中的字段和方法是没有顺序的。\n\n**@Inject注解的构造函数可以是无参或多个参数的构造函数。@Inject每个类中最多注解一个构造函数。**\n\n除了@Inject注解，还有@Named、@Qualifier和@Provider，下面简单介绍一下。\n\n#### @Named\n@Named，一般和@Inject一起使用，如果没有值生成的Bean名称默认和类名相同。\n\n如果指定名称，那么就生成一个指定名称的Bean。\n~~~ Java\npublic class Car {\n     @Inject @Named(\"driver\") Seat driverSeat;\n     @Inject @Named(\"passenger\") Seat passengerSeat;\n     ...\n}\n~~~\n\n#### @Qualifier\n自定义一个新的修饰语（注解），一个qualifier注解应该满足如下条件：\n- 定义的注解类有@Qualifier，@Retention(RUNTIME)和@Documented。\n- 可以有属性\n- 可以是公共API的一部分\n- 可以用@Target注解限定使用范围\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Qualifier.html)是：\n~~~ Java\nIdentifies qualifier annotations. Anyone can define a new qualifier. A qualifier annotation:\n\n- is annotated with @Qualifier, @Retention(RUNTIME), and typically @Documented.\n- can have attributes.\n- may be part of the public API, much like the dependency type, but unlike implementation types which needn't be part of the public API.\n- may have restricted usage if annotated with @Target. While this specification covers applying qualifiers to fields and parameters only, some injector configurations might use qualifier annotations in other places (on methods or classes for example).\n~~~\n\n下面是[java doc文档@Named注解](http://docs.oracle.com/javaee/6/api/javax/inject/Named.html)的生成代码\n~~~ Java\n@Qualifier\n@Documented\n@Retention(value=RUNTIME)\npublic @interface Named\n~~~\n\n~~~ Java\n@Documented  \n@Retention(RetentionPolicy.RUNTIME)  \n@Qualifier  \n@Target(value = {ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE})  \npublic @interface Genre {  \n    User user() default User.STUDENT;  \n    public enum User {STUDENT, TEACHER}  \n}\n~~~\n\n~~~ Java\n@Named  \n@Genre(user = User.STUDENT)  \npublic class StudentDAO implements IUserDAO{  \n    @Override  \n    public int count() {  \n        System.out.println(\"----StudentDAO----\");  \n        return 0;  \n    }  \n}  \n~~~\n\n#### @Provider\n@Provider注解，可以实现任意类型的对象的注入。相对于直接注入T对象，@Provider提供了一个T.get()方法来获取注入的对象\n\n[doc文档原文](http://docs.oracle.com/javaee/6/api/javax/inject/Provider.html):\n~~~ Java\nProvides instances of T. Typically implemented by an injector. For any type T that can be injected, you can also inject Provider<T>. Compared to injecting T directly, injecting Provider<T> enables:\n\n- retrieving multiple instances.\n- lazy or optional retrieval of an instance.\n- breaking circular dependencies.\n- abstracting scope so you can look up an instance in a smaller scope from an instance in a containing scope.\n~~~\n\nFor example:\n~~~ Java\nclass Car {\n@Inject Car(Provider<Seat> seatProvider) {\n   Seat driver = seatProvider.get();\n   Seat passenger = seatProvider.get();\n   ...\n }\n}\n~~~\n\nget方法解释\n~~~ Java\nT\tget()\n    Provides a fully-constructed and injected instance of T.\n~~~\n\n#### @Singleton\n使用该注解标记该类只创建一次，不能被继承。一般在类上用该注解。\n\n\n\n[doc原文](http://docs.oracle.com/javaee/6/api/javax/inject/Singleton.html):\n~~~ Java\n@Scope\n@Documented\n@Retention(value=RUNTIME)\npublic @interface Singleton\nIdentifies a type that the injector only instantiates once. Not inherited.\n~~~\n\n\n#### @Scope\n注解 @Scope 用于标识作用域注解。一个作用域注解是被标识在包含一个可注入构造器的类上的，用于控制该类型的实例如何被注入器重用。缺省情况下，如果没有标识作用域注解，注入器将为每一次注入都创建（通过注入类型的构造器）新实例，并不重用已有实例。如果多个线程都能够访问一个作用域内的实例，该实例实现应该是线程安全的。作用域实现由注入器完成。\n\n在下面的例子中，作用域注解 @Singleton 确保我们始终只有一个 Log 实例：\n\n~~~ Java\n@Singleton\nclass Log {\n   void log(String message) { ... }\n}\n~~~\n\n当多于一个作用域注解或不被注入器支持的作用域注解被使用在同一个类上时，注入器将生成一个错误。\n\n一个作用域注解：\n\n- 被标注了 @Scope、@Retention(RUNTIME) 标注的，通常也被 @Documented 标注。\n- 不应该含有属性。\n- 不应该被 @Inherited 标注，因此作用域与继承实现（正交）无关。\n- 如果标注了 @Target 可能会有一些用法限制。\n\n使用 @Scope 来标识一个作用域注解有助于注入器探测程序员使用了作用域注解但却忘了去配置作用域的情况。一个保守的注入器应该生成一个错误而不是去适用该作用域。\n\n[doc原文请点击](http://docs.oracle.com/javaee/6/api/javax/inject/Scope.html)\n\n### assertion(断言)\n在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。\n\n\n在语法上，为了支持assertion，Java增加了一个关键字assert。它包括两种表达式，分别如下：\n\n~~~ Java\n1.assert expression1;\n\n2.assert expression1: expression2;\n~~~\n\nexpression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。\n\n- 在运行时，如果关闭了assertion功能，这些语句将不起任何作用。\n- 如果打开了assertion功能，那么expression1的值将被计算。\n- 如果它的值为false，该语句强抛出一个AssertionError对象。\n- 如果expression1值为true，expression2将不被计算。\n\n如何关闭和开启assertion功能，[请看这篇文章](http://blog.csdn.net/ithomer/article/details/9185125)\n","slug":"JAVA-CDI-Assertion","published":1,"date":"2017-03-13T16:00:00.000Z","updated":"2017-11-23T07:13:55.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0m0030d6yk4pl8drox","content":"<h3 id=\"Inject注解和CDI（上下文依赖注入）\"><a href=\"#Inject注解和CDI（上下文依赖注入）\" class=\"headerlink\" title=\"@Inject注解和CDI（上下文依赖注入）\"></a>@Inject注解和CDI（上下文依赖注入）</h3><p>怎么让代码显得高大上呢，当然是多使用注解，那<a href=\"https://developer.android.com/reference/android/support/annotation/package-summary.html\" target=\"_blank\" rel=\"external\">Android Support Annotation</a>使用完了，有没有更高端的呢？</p>\n<p>这篇文章就简单介绍下Java中存在的注解。</p>\n<p>CDI（Contexts and Dependency Injection 上下文依赖注入）<br><a href=\"http://blog.csdn.net/DL88250/article/details/4838803\" target=\"_blank\" rel=\"external\">Java 依赖注入标准（JSR-330）</a>规范，在javax.inject包中提供了一个接口Provider，和几个注解类型@Scope、@Inject、@Named、@Qualifier</p>\n<h4 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h4><p>@Inject是javax.inject中提供的一个注解，可以不使用new关键字直接创建对象，怎么样，是不是很高端 :)</p>\n<h5 id=\"在字段注解：\"><a href=\"#在字段注解：\" class=\"headerlink\" title=\"在字段注解：\"></a>在字段注解：</h5><p>用@Inject注解，字段不能是final的。可以拥有一个合法的名称</p>\n<a id=\"more\"></a>\n<p>doc文档原文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Injectable fields:</div><div class=\"line\"></div><div class=\"line\">  - are annotated with <span class=\"meta\">@Inject</span>.</div><div class=\"line\">  - are not <span class=\"keyword\">final</span>.</div><div class=\"line\">  - may have any otherwise valid name.</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span> FieldModifiers(opt) Type VariableDeclarators;</div></pre></td></tr></table></figure>\n<pre><code>(opt)这里表示可选\n</code></pre><h5 id=\"在方法上注解：\"><a href=\"#在方法上注解：\" class=\"headerlink\" title=\"在方法上注解：\"></a>在方法上注解：</h5><p>用@Inject注解，不能是抽象方法，不能声明自身参数类型。可以有返回结果。拥有一个合法的名称。可以有0个或多个参数</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html\" target=\"_blank\" rel=\"external\">doc文档原文</a>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Injectable methods:</div><div class=\"line\">- are annotated with <span class=\"meta\">@Inject</span>.</div><div class=\"line\">- are not <span class=\"keyword\">abstract</span>.</div><div class=\"line\">- <span class=\"keyword\">do</span> not declare type parameters of their own.</div><div class=\"line\">- may <span class=\"keyword\">return</span> a result</div><div class=\"line\">- may have any otherwise valid name.</div><div class=\"line\">- accept zero or more dependencies as arguments.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span> MethodModifiers(opt) <span class=\"function\">ResultType <span class=\"title\">Identifier</span><span class=\"params\">(FormalParameterList(opt)</span>) <span class=\"title\">Throws</span><span class=\"params\">(opt)</span> MethodBody</span></div></pre></td></tr></table></figure>\n<pre><code>(opt)这里表示可选\n</code></pre><p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\">WeatherDao weatherDao;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\">WeatherDao(Context context) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@Inject支持构造函数、方法和字段注解，也可能使用于静态实例成员。<br>可注解成员可以是任意修饰符（private,package-private,protected,public）。<br>注入顺序：构造函数、字段，然后是方法。父类的字段和方法注入优先于子类的字段和方法，同一类中的字段和方法是没有顺序的。</p>\n<p><strong>@Inject注解的构造函数可以是无参或多个参数的构造函数。@Inject每个类中最多注解一个构造函数。</strong></p>\n<p>除了@Inject注解，还有@Named、@Qualifier和@Provider，下面简单介绍一下。</p>\n<h4 id=\"Named\"><a href=\"#Named\" class=\"headerlink\" title=\"@Named\"></a>@Named</h4><p>@Named，一般和@Inject一起使用，如果没有值生成的Bean名称默认和类名相同。</p>\n<p>如果指定名称，那么就生成一个指定名称的Bean。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">     <span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"driver\"</span>) Seat driverSeat;</div><div class=\"line\">     <span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"passenger\"</span>) Seat passengerSeat;</div><div class=\"line\">     ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h4><p>自定义一个新的修饰语（注解），一个qualifier注解应该满足如下条件：</p>\n<ul>\n<li>定义的注解类有@Qualifier，@Retention(RUNTIME)和@Documented。</li>\n<li>可以有属性</li>\n<li>可以是公共API的一部分</li>\n<li>可以用@Target注解限定使用范围</li>\n</ul>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Qualifier.html\" target=\"_blank\" rel=\"external\">doc文档原文</a>是：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">Identifies qualifier annotations. Anyone can define a new qualifier. A qualifier annotation:</div><div class=\"line\"></div><div class=\"line\">- is annotated with @Qualifier, @Retention(RUNTIME), and typically @Documented.</div><div class=\"line\">- can have attributes.</div><div class=\"line\">- may be part of the public API, much like the dependency type, but unlike implementation types which needn't be part of the public API.</div><div class=\"line\">- may have restricted usage if annotated with @Target. While this specification covers applying qualifiers to fields and parameters only, some injector configurations might use qualifier annotations in other places (on methods or classes for example).</div></pre></td></tr></table></figure></p>\n<p>下面是<a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Named.html\" target=\"_blank\" rel=\"external\">java doc文档@Named注解</a>的生成代码<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(value=RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Named</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span>  </div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)  </div><div class=\"line\"><span class=\"meta\">@Qualifier</span>  </div><div class=\"line\"><span class=\"meta\">@Target</span>(value = &#123;ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE&#125;)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Genre &#123;  </div><div class=\"line\">    <span class=\"function\">User <span class=\"title\">user</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> User.STUDENT</span>;  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> User &#123;STUDENT, TEACHER&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Named</span>  </div><div class=\"line\"><span class=\"meta\">@Genre</span>(user = User.STUDENT)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDAO</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserDAO</span></span>&#123;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        System.out.println(<span class=\"string\">\"----StudentDAO----\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"@Provider\"></a>@Provider</h4><p>@Provider注解，可以实现任意类型的对象的注入。相对于直接注入T对象，@Provider提供了一个T.get()方法来获取注入的对象</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Provider.html\" target=\"_blank\" rel=\"external\">doc文档原文</a>:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Provides instances of T. Typically implemented by an injector. For any type T that can be injected, you can also inject Provider&lt;T&gt;. Compared to injecting T directly, injecting Provider&lt;T&gt; enables:</div><div class=\"line\"></div><div class=\"line\">- retrieving multiple instances.</div><div class=\"line\">- lazy or optional retrieval of an instance.</div><div class=\"line\">- breaking circular dependencies.</div><div class=\"line\">- abstracting scope so you can look up an instance in a smaller scope from an instance in a containing scope.</div></pre></td></tr></table></figure></p>\n<p>For example:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">@Inject</span> Car(Provider&lt;Seat&gt; seatProvider) &#123;</div><div class=\"line\">   Seat driver = seatProvider.get();</div><div class=\"line\">   Seat passenger = seatProvider.get();</div><div class=\"line\">   ...</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>get方法解释<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">T\t<span class=\"title\">get</span><span class=\"params\">()</span></span></div><div class=\"line\">    Provides a fully-constructed and injected instance of T.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"@Singleton\"></a>@Singleton</h4><p>使用该注解标记该类只创建一次，不能被继承。一般在类上用该注解。</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Singleton.html\" target=\"_blank\" rel=\"external\">doc原文</a>:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(value=RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Singleton</div><div class=\"line\">Identifies a type that the injector only instantiates once. Not inherited.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"@Scope\"></a>@Scope</h4><p>注解 @Scope 用于标识作用域注解。一个作用域注解是被标识在包含一个可注入构造器的类上的，用于控制该类型的实例如何被注入器重用。缺省情况下，如果没有标识作用域注解，注入器将为每一次注入都创建（通过注入类型的构造器）新实例，并不重用已有实例。如果多个线程都能够访问一个作用域内的实例，该实例实现应该是线程安全的。作用域实现由注入器完成。</p>\n<p>在下面的例子中，作用域注解 @Singleton 确保我们始终只有一个 Log 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(String message)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当多于一个作用域注解或不被注入器支持的作用域注解被使用在同一个类上时，注入器将生成一个错误。</p>\n<p>一个作用域注解：</p>\n<ul>\n<li>被标注了 @Scope、@Retention(RUNTIME) 标注的，通常也被 @Documented 标注。</li>\n<li>不应该含有属性。</li>\n<li>不应该被 @Inherited 标注，因此作用域与继承实现（正交）无关。</li>\n<li>如果标注了 @Target 可能会有一些用法限制。</li>\n</ul>\n<p>使用 @Scope 来标识一个作用域注解有助于注入器探测程序员使用了作用域注解但却忘了去配置作用域的情况。一个保守的注入器应该生成一个错误而不是去适用该作用域。</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Scope.html\" target=\"_blank\" rel=\"external\">doc原文请点击</a></p>\n<h3 id=\"assertion-断言\"><a href=\"#assertion-断言\" class=\"headerlink\" title=\"assertion(断言)\"></a>assertion(断言)</h3><p>在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。</p>\n<p>在语法上，为了支持assertion，Java增加了一个关键字assert。它包括两种表达式，分别如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">assert</span> expression1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>.<span class=\"keyword\">assert</span> expression1: expression2;</div></pre></td></tr></table></figure>\n<p>expression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。</p>\n<ul>\n<li>在运行时，如果关闭了assertion功能，这些语句将不起任何作用。</li>\n<li>如果打开了assertion功能，那么expression1的值将被计算。</li>\n<li>如果它的值为false，该语句强抛出一个AssertionError对象。</li>\n<li>如果expression1值为true，expression2将不被计算。</li>\n</ul>\n<p>如何关闭和开启assertion功能，<a href=\"http://blog.csdn.net/ithomer/article/details/9185125\" target=\"_blank\" rel=\"external\">请看这篇文章</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/14/JAVA-CDI-Assertion/\">http://agehua.github.io/2017/03/14/JAVA-CDI-Assertion/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.325,"time":199500,"words":665},"excerpt":"<h3 id=\"Inject注解和CDI（上下文依赖注入）\"><a href=\"#Inject注解和CDI（上下文依赖注入）\" class=\"headerlink\" title=\"@Inject注解和CDI（上下文依赖注入）\"></a>@Inject注解和CDI（上下文依赖注入）</h3><p>怎么让代码显得高大上呢，当然是多使用注解，那<a href=\"https://developer.android.com/reference/android/support/annotation/package-summary.html\">Android Support Annotation</a>使用完了，有没有更高端的呢？</p>\n<p>这篇文章就简单介绍下Java中存在的注解。</p>\n<p>CDI（Contexts and Dependency Injection 上下文依赖注入）<br><a href=\"http://blog.csdn.net/DL88250/article/details/4838803\">Java 依赖注入标准（JSR-330）</a>规范，在javax.inject包中提供了一个接口Provider，和几个注解类型@Scope、@Inject、@Named、@Qualifier</p>\n<h4 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h4><p>@Inject是javax.inject中提供的一个注解，可以不使用new关键字直接创建对象，怎么样，是不是很高端 :)</p>\n<h5 id=\"在字段注解：\"><a href=\"#在字段注解：\" class=\"headerlink\" title=\"在字段注解：\"></a>在字段注解：</h5><p>用@Inject注解，字段不能是final的。可以拥有一个合法的名称</p>","more":"<p>doc文档原文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Injectable fields:</div><div class=\"line\"></div><div class=\"line\">  - are annotated with <span class=\"meta\">@Inject</span>.</div><div class=\"line\">  - are not <span class=\"keyword\">final</span>.</div><div class=\"line\">  - may have any otherwise valid name.</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span> FieldModifiers(opt) Type VariableDeclarators;</div></pre></td></tr></table></figure>\n<pre><code>(opt)这里表示可选\n</code></pre><h5 id=\"在方法上注解：\"><a href=\"#在方法上注解：\" class=\"headerlink\" title=\"在方法上注解：\"></a>在方法上注解：</h5><p>用@Inject注解，不能是抽象方法，不能声明自身参数类型。可以有返回结果。拥有一个合法的名称。可以有0个或多个参数</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html\">doc文档原文</a>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Injectable methods:</div><div class=\"line\">- are annotated with <span class=\"meta\">@Inject</span>.</div><div class=\"line\">- are not <span class=\"keyword\">abstract</span>.</div><div class=\"line\">- <span class=\"keyword\">do</span> not declare type parameters of their own.</div><div class=\"line\">- may <span class=\"keyword\">return</span> a result</div><div class=\"line\">- may have any otherwise valid name.</div><div class=\"line\">- accept zero or more dependencies as arguments.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span> MethodModifiers(opt) <span class=\"function\">ResultType <span class=\"title\">Identifier</span><span class=\"params\">(FormalParameterList(opt)</span>) <span class=\"title\">Throws</span><span class=\"params\">(opt)</span> MethodBody</span></div></pre></td></tr></table></figure>\n<pre><code>(opt)这里表示可选\n</code></pre><p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\">WeatherDao weatherDao;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\">WeatherDao(Context context) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@Inject支持构造函数、方法和字段注解，也可能使用于静态实例成员。<br>可注解成员可以是任意修饰符（private,package-private,protected,public）。<br>注入顺序：构造函数、字段，然后是方法。父类的字段和方法注入优先于子类的字段和方法，同一类中的字段和方法是没有顺序的。</p>\n<p><strong>@Inject注解的构造函数可以是无参或多个参数的构造函数。@Inject每个类中最多注解一个构造函数。</strong></p>\n<p>除了@Inject注解，还有@Named、@Qualifier和@Provider，下面简单介绍一下。</p>\n<h4 id=\"Named\"><a href=\"#Named\" class=\"headerlink\" title=\"@Named\"></a>@Named</h4><p>@Named，一般和@Inject一起使用，如果没有值生成的Bean名称默认和类名相同。</p>\n<p>如果指定名称，那么就生成一个指定名称的Bean。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">     <span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"driver\"</span>) Seat driverSeat;</div><div class=\"line\">     <span class=\"meta\">@Inject</span> <span class=\"meta\">@Named</span>(<span class=\"string\">\"passenger\"</span>) Seat passengerSeat;</div><div class=\"line\">     ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h4><p>自定义一个新的修饰语（注解），一个qualifier注解应该满足如下条件：</p>\n<ul>\n<li>定义的注解类有@Qualifier，@Retention(RUNTIME)和@Documented。</li>\n<li>可以有属性</li>\n<li>可以是公共API的一部分</li>\n<li>可以用@Target注解限定使用范围</li>\n</ul>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Qualifier.html\">doc文档原文</a>是：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">Identifies qualifier annotations. Anyone can define a new qualifier. A qualifier annotation:</div><div class=\"line\"></div><div class=\"line\">- is annotated with @Qualifier, @Retention(RUNTIME), and typically @Documented.</div><div class=\"line\">- can have attributes.</div><div class=\"line\">- may be part of the public API, much like the dependency type, but unlike implementation types which needn't be part of the public API.</div><div class=\"line\">- may have restricted usage if annotated with @Target. While this specification covers applying qualifiers to fields and parameters only, some injector configurations might use qualifier annotations in other places (on methods or classes for example).</div></pre></td></tr></table></figure></p>\n<p>下面是<a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Named.html\">java doc文档@Named注解</a>的生成代码<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(value=RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Named</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span>  </div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)  </div><div class=\"line\"><span class=\"meta\">@Qualifier</span>  </div><div class=\"line\"><span class=\"meta\">@Target</span>(value = &#123;ElementType.FIELD, ElementType.PARAMETER, ElementType.TYPE&#125;)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Genre &#123;  </div><div class=\"line\">    <span class=\"function\">User <span class=\"title\">user</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> User.STUDENT</span>;  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> User &#123;STUDENT, TEACHER&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Named</span>  </div><div class=\"line\"><span class=\"meta\">@Genre</span>(user = User.STUDENT)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDAO</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserDAO</span></span>&#123;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        System.out.println(<span class=\"string\">\"----StudentDAO----\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"@Provider\"></a>@Provider</h4><p>@Provider注解，可以实现任意类型的对象的注入。相对于直接注入T对象，@Provider提供了一个T.get()方法来获取注入的对象</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Provider.html\">doc文档原文</a>:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Provides instances of T. Typically implemented by an injector. For any type T that can be injected, you can also inject Provider&lt;T&gt;. Compared to injecting T directly, injecting Provider&lt;T&gt; enables:</div><div class=\"line\"></div><div class=\"line\">- retrieving multiple instances.</div><div class=\"line\">- lazy or optional retrieval of an instance.</div><div class=\"line\">- breaking circular dependencies.</div><div class=\"line\">- abstracting scope so you can look up an instance in a smaller scope from an instance in a containing scope.</div></pre></td></tr></table></figure></p>\n<p>For example:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\"><span class=\"meta\">@Inject</span> Car(Provider&lt;Seat&gt; seatProvider) &#123;</div><div class=\"line\">   Seat driver = seatProvider.get();</div><div class=\"line\">   Seat passenger = seatProvider.get();</div><div class=\"line\">   ...</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>get方法解释<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">T\t<span class=\"title\">get</span><span class=\"params\">()</span></div><div class=\"line\">    Provides a fully-constructed and injected instance of T.</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"@Singleton\"></a>@Singleton</h4><p>使用该注解标记该类只创建一次，不能被继承。一般在类上用该注解。</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Singleton.html\">doc原文</a>:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(value=RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Singleton</div><div class=\"line\">Identifies a type that the injector only instantiates once. Not inherited.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"@Scope\"></a>@Scope</h4><p>注解 @Scope 用于标识作用域注解。一个作用域注解是被标识在包含一个可注入构造器的类上的，用于控制该类型的实例如何被注入器重用。缺省情况下，如果没有标识作用域注解，注入器将为每一次注入都创建（通过注入类型的构造器）新实例，并不重用已有实例。如果多个线程都能够访问一个作用域内的实例，该实例实现应该是线程安全的。作用域实现由注入器完成。</p>\n<p>在下面的例子中，作用域注解 @Singleton 确保我们始终只有一个 Log 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Log</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(String message)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当多于一个作用域注解或不被注入器支持的作用域注解被使用在同一个类上时，注入器将生成一个错误。</p>\n<p>一个作用域注解：</p>\n<ul>\n<li>被标注了 @Scope、@Retention(RUNTIME) 标注的，通常也被 @Documented 标注。</li>\n<li>不应该含有属性。</li>\n<li>不应该被 @Inherited 标注，因此作用域与继承实现（正交）无关。</li>\n<li>如果标注了 @Target 可能会有一些用法限制。</li>\n</ul>\n<p>使用 @Scope 来标识一个作用域注解有助于注入器探测程序员使用了作用域注解但却忘了去配置作用域的情况。一个保守的注入器应该生成一个错误而不是去适用该作用域。</p>\n<p><a href=\"http://docs.oracle.com/javaee/6/api/javax/inject/Scope.html\">doc原文请点击</a></p>\n<h3 id=\"assertion-断言\"><a href=\"#assertion-断言\" class=\"headerlink\" title=\"assertion(断言)\"></a>assertion(断言)</h3><p>在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。</p>\n<p>在语法上，为了支持assertion，Java增加了一个关键字assert。它包括两种表达式，分别如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">assert</span> expression1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>.<span class=\"keyword\">assert</span> expression1: expression2;</div></pre></td></tr></table></figure>\n<p>expression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。</p>\n<ul>\n<li>在运行时，如果关闭了assertion功能，这些语句将不起任何作用。</li>\n<li>如果打开了assertion功能，那么expression1的值将被计算。</li>\n<li>如果它的值为false，该语句强抛出一个AssertionError对象。</li>\n<li>如果expression1值为true，expression2将不被计算。</li>\n</ul>\n<p>如何关闭和开启assertion功能，<a href=\"http://blog.csdn.net/ithomer/article/details/9185125\">请看这篇文章</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/03/14/JAVA-CDI-Assertion/\">http://agehua.github.io/2017/03/14/JAVA-CDI-Assertion/</a></p>"},{"layout":"post","title":"注解在Android中的应用","keywords":"Annotation, apt, annotationProcessor","banner":"http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Potatoes.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Potatoes.jpg","toc":true,"_content":"\n## 注解在Android中的应用\n\n注解是Java语言的特性之一，它是在源代码中插入标签，这些标签在后面的编译或者运行过程中起到某种作用，每个注解都必须通过注解接口 @Interface 进行声明，接口的方法对应着注解的元素。\n\n在上一篇文章[Injection(CDI)和assertion(断言)](https://agehua.github.io/2017/03/14/Android-CDI/)中介绍了Java中的CDI（上下文依赖注入）规范，这个规范就是使用注解的方式。这篇文章主要介绍注解在Android中的应用。\n\n先看看Android上著名的View注入框架Butterknife的Bind注解的源码：\n\n~~~ Java\n@Retention (RetentionPolicy.Class)\n@Target (ElementType.FIELD)\npublic @interface Bind {\n   /** View ID to which the field will be found. **/\n   int[] value();\n}\n~~~\n@interface 声明会创建一个实际的Java接口，与其他任何接口一样，注解也会编译成.class文件。@Retention 和@Target 下面会介绍到。\n\n### Java注解的分类\n\n<!--more-->\nJava API中默认定义的注解叫做标准注解。它们定义在java.lang、java.lang.annotation和javax.annotation包中。按照使用场景不同，可以分为如下三类：\n\n#### 编译相关注解\n编译相关的注解是给编译器使用的，有以下几种：\n- @Override：编译器检查被注解的方法是否真的重载了一个来自父类的方法，如果没有，编译器会给出错误提示。\n- @Deprecated：可以用来修饰任何不再鼓励使用或已被弃用的属性、方法等。\n- @SuppressWarnings：可用于除了包之外的其他声明项中，用来抑制某种类型的警告。\n- @SafeVarargs：用于方法和构造函数，用来断言不定长参数可以安全使用\n- @Generated：一般是给代码生成工具使用，用来表示这段代码不是开发者手动编写的，而是工具生成的。被@Generated修饰的代码一般不建议手动修改它。\n- @FunctionalInterface：用来修饰接口，表示对应得接口是带单个方法的函数式接口\n\n#### 资源相关注解\n一共有四个，一帮用在JavaEE领域，Android开发中应该不会用到，就不在详细介绍\b了。\n分别是：\n- @PostConstruct\n- @PreDestroy\n- @Resource\n- @Resources\n\n#### 元注解\nButterknife的Bind注解用到的就是元注解。\n\n元注解，顾名思义，就是用来定义和实现注解的注解，总共有如下五种：\n- @Retention, 用来指明注解的访问范围，也就是在什么级别保留注解，有三种选择：\n  - 源码级注解：使用@Retention(RetentionPolicy.SOURCE)修饰的注解，该类型修饰的注解信息只会保留在 .java源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的 .class文件中。\n  - 编译时注解：使用@Retention(RetentionPolicy.CLASS)修饰的注解，该类型的注解信息会保留在 .java源码里和 .class文件里，在执行的时候会被Java虚拟机丢弃，不会加载到虚拟机中。\n  - 运行时注解：使用@Retention(RetentionPolicy.RUNTIME)修饰的注解，Java虚拟机在运行期间也保留注解信息，可以通过反射机制读取注解的信息\n  未指定类型时，默认是CLASS类型。\n- @Target, 这个注解的取值是一个ElementType类型的数组，用来指定注解所使用的对象范围，共有十种不同的类型，如下表所示，同时支持多种类型共存，可以进行灵活的组合。\n\n| 元素类型 |  适用于|\n| :-------- | :--------|\n| ANNOTATION_TYPE  | 注解类型声明 |  \n| CONSTRUCTOR    |  构造函数 |  \n| FIELD     |   实例变量 |\n| LOCAL_VARIABLE     |   局部变量 |\n| METHOD     |   方法 |\n| PACKAGE     |   包 |\n| PARAMETER     |   方法参数或者构造函数的参数 |\n| TYPE     |   类（包含enum）和接口（包含注解类型） |\n| TYPE_PARAMETER     |   类型参数 |\n| TYPE_USE     |   类型的用途 |\n\n  > 如果一个注解的定义没有使用@Target修饰，那么它可以用在除了TYPE_USE和TYPE_PARAMETER之外的其他类型声明中\n\n- @Inherited, 表示该注解可以被子类继承的。\n- @Documented, 表示被修饰的注解应该被包含在被注解项的文档中（例如用JavaDoc生成的文档）\n- @Repeatable, 表示这个注解可以在同一个项上面应用多次。不过这个注解是在Java 8中才引入的，前面四个元注解都是在Java 5中就已经引入。\n\n### 运行时注解\n前面说过，要定义运行时注解只需要在声明注解时指定 @Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用。相比编译时注解性能比较低，但灵活性好，实现起来比较简单。\n\n> Butterknife在较低版本依然是通过运行时反射实现View的注入，性能较低下，不过在8.0.0版本以后使用编译时注解来提升性能。\n\n#### 运行时注解的简单使用\n\n下面展示一个Demo。其功能是通过注解实现布局文件的设置。\n\n之前我们是这样设置布局文件的：\n\n~~~ Java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_home);\n}\n~~~\n如果使用注解，我们就可以这样设置布局了\n\n~~~ Java\n@ContentView(R.layout.activity_home)\npublic class HomeActivity extends BaseActivity {\n    ...\n}\n~~~\n我们先不讲这两种方式哪个好哪个坏，我们只谈技术不谈需求。\n\n那么这样的注解是怎么实现的呢？很简单，往下看。\n\n- 创建一个注解\n~~~ Java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\npublic @interface ContentView {\n    int value();\n}\n~~~\n\n前面已经讲过元注解，这不不再介绍。\n\n- 对于：public @interface ContentView\n\n这里的interface并不是说ContentView是一个接口。就像申明类用关键字class。申明枚举用enum。申明注解用的就是@interface。\n\n（值得注意的是：在ElementType的分类中，class、interface、Annotation、enum同属一类为ElementType.Type，并且从官方注解来看，interface是包含@interface的）\n\n~~~ Java\n/** Class, interface (including annotation type), or enum declaration */\nTYPE,\n~~~\n\n- 对于：int value();\n\n返回值表示这个注解里可以存放什么类型值。比如我们是这样使用的\n~~~ Java\n@ContentView(R.layout.activity_home)\n~~~\n\nR.layout.activity_home 实质是一个int型id，如果这样用就会报错：\n\n~~~ Java\n@ContentView(“string”)\n~~~\n关于注解的具体语法，可以看这篇文章[Android编译时注解框架-语法讲解](https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/)\n\n#### 注解解析\n\n注解申明好了，但具体是怎么识别这个注解并使用的呢？\n~~~ Java\n@ContentView(R.layout.activity_home)\npublic class HomeActivity extends BaseActivity {\n    ...\n}\n~~~\n注解的解析就在BaseActivity中。我们看一下BaseActivity代码\n~~~ Java\npublic class BaseActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    //注解解析\n    for (Class c = this.getClass(); c != Context.class; c = c.getSuperclass()) {\n        ContentView annotation = (ContentView) c.getAnnotation(ContentView.class);\n        if (annotation != null) {\n            try {\n                this.setContentView(annotation.value());\n            } catch (RuntimeException e) {\n                e.printStackTrace();\n            }\n            return;\n        }\n    }\n}\n~~~\n解释下上面的代码：\n\n- 第一步：遍历所有的子类\n- 第二步：找到修饰了注解ContentView的类\n- 第三步：获取ContentView的属性值。\n- 第四步：为Activity设置布局。\n\n>  总结：要定义运行时注解，只需要在声明注解时指定@Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但实现比较简单，会提高一定的开发效率。\n\n### 编译时注解\n\n编译时注解能够自动处理Java源文件并生成更多的源码、配置文件、脚本或其他可能想要生成的东西。这些操作是通过**注解处理器**完成的。Java通过在编译期间调用 javac -processor命令可以调起注解处理器，它能够实现编译时注解的功能，从而提高函数库的性能。\n\n#### 定义注解处理器\n自定义编译时注解后，需要编写Processor类实现注解处理器，处理自定义注解。Processor继承自AbstractProcessor类并实现process方法，同时需要指定注解处理器能够处理的注解类型以及支持的Java版本，语句如下：\n\n~~~ Java\npublic class JsonAnnotationProcessor extends AbstractProcessor {\n\n  @Override\n  public synchronized void init(ProcessingEnvironment env){\n     super.init(env);\n     //初始化方法，会被注解处理工具调用，并传入ProcessingEnvironment类型参数，\n     //这个参数包含了很多工具类，如Elements、Types、Filer等\n     elementUtils = env.getElementUtils();\n     typeUtils = env.getTypeUtils();\n     filer = env.getFiler();\n  }\n\n  @Override\n  public Set<String> getSupportedAnnotationTypes() {\n    //指定这个注解处理器能够处理的注解类型，返回一个支持的类型字符串合集\n    return super.getSupportedAnnotationTypes();\n  }\n\n  @Override\n  public SourceVersion getSupportedSourceVersion() {\n    //指定注解处理器使用的Java版本\n    return SourceVersion.latestSupported();\n  }\n\n  @Override\n  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n      //在这个方法中实现注解处理器的具体业务逻辑，根据输入参数roundEnv可以得到包含特定注解的被注解元素\n      //下面代码是Butterknife中这个方法的源码\n      Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);\n\n      for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {\n        TypeElement typeElement = entry.getKey();\n        BindingClass bindingClass = entry.getValue();\n\n        try {\n          JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);\n          Writer writer = jfo.openWriter();\n          writer.write(bindingClass.brewJava());\n          writer.flush();\n          writer.close();\n        } catch (IOException e) {\n          error(typeElement, \"Unable to write view binder for type %s: %s\", typeElement,\n              e.getMessage());\n        }\n      }\n\n      //返回值 表示这组 annotations 是否被这个 Processor 接受，\n      //如果接受（true）后续子的 pocessor 不会再对这个 Annotations 进行处理\n      return true;\n  }\n\n  //Butterknife源码：RoundEnvironment表示当前或是之前的运行环境，可以通过该对象查找找到相应的注解。\n  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {\n    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();\n    Set<String> erasedTargetNames = new LinkedHashSet<String>();\n\n    // Process each @Bind element.\n    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {\n      //所有被使用的@Bind注解\n      try {\n        parseBind(element, targetClassMap, erasedTargetNames);\n      } catch (Exception e) {\n        logParsingError(element, Bind.class, e);\n      }\n    }\n\n    ......\n  }  \n}\n~~~\n\n> 一个注解处理器，只能产生新的源文件，它不能够修改一个已经存在的源文件。当没有属于该Process处理的注解被使用时，process不会执行。\n\n从Java7 开始，我们也可以使用注解来代替上面的getSupportedAnnotationTypes()和getSupportedSourceVersion()方法，代码如下：\n~~~ Java\n@SupportedAnnotationTypes({\n  //该注解处理器支持的所有注解全名\n})\n@SupportedSourceVersion(SourceVersion.RELEASE_7)\npublic class ContentViewProcessor extends AbstractProcessor {\n    ...\n}\n~~~\n\n#### Element类型\n所有通过注解取得元素都将以Element类型等待处理，也可以理解为Element的子类类型与自定义注解时用到的@Target是有对应关系的。\n\n> Element的官方注释：Represents a program element such as a package, class, or method.\nEach element represents a static, language-level construct (and not, for example, a runtime construct of the virtual machine).\n\n表示一个程序元素，比如包、类或者方法。\n\nElement的子类有：\n\n- ExecutableElement\n表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。对应@Target(ElementType.METHOD) @Target(ElementType.CONSTRUCTOR)\n\n- PackageElement\n表示一个包程序元素。提供对有关包极其成员的信息访问。对应@Target(ElementType.PACKAGE)\n\n- TypeElement\n表示一个类或接口程序元素。提供对有关类型极其成员的信息访问。\n对应@Target(ElementType.TYPE)\n\n> 注意：枚举类型是一种类，而注解类型是一种接口。\n\n- TypeParameterElement\n表示一般类、接口、方法或构造方法元素的类型参数。\n对应@Target(ElementType.PARAMETER)\n\n- VariableElement\n表示一个字段、enum常量、方法或构造方法参数、局部变量或异常参数。\n对应@Target(ElementType.LOCAL_VARIABLE)\n\n#### Processor输出日志\n虽然是编译时执行Processor,但也是可以输入日志信息用于调试的。Processor日志输出的位置在编译器下方的Messages窗口中。Processor支持最基础的System.out方法。\n\n同样Processor也有自己的Log输出工具: Messager。\n~~~ Java\n//同样是Butterknife源码\nprivate void error(Element element, String message, Object... args) {\n    if (args.length > 0) {\n      message = String.format(message, args);\n    }\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message, element);\n}\n~~~\n\n### 注册注解处理器\n为了让javac -processor能够对定义好的注解处理进行处理，我们需要将注解处理器打包到一个jar文件中，同时，需要在jar文件中增加一个名为**javax.annotation.processing.processor**的文件来指明jar文件中有哪些注解处理器，这个文件最终目录在jar文件根目录的META-INF/service目录中，jar文件解压后的目录结构如下图：\n\n![图片来自http://blog.csdn.net/lmj623565791/article/details/43452969](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/processor_jar.png)\n\njavax.annotation.processing.Processor文件的内容是注解处理器全路径名，如果存在多个注解处理器，以换行进行分隔，代码看图片\n\n源文件的目录是，我们需要在src/main/java同级目录中新建一个名为resources的目录，将META-INF/services/javax.annotation.processing.Processor文件放进去就行\n\n> 注意，注解处理器所在的Android Studio工程必须是Java Library类型，而不应该是Android Library类型。因为Android Library的JDK中不包含某些javax包里面的类。\n\n手动实现上面注册过程很繁琐，因此Google开源了一个名为AutoService的函数库，使用这个库后，只需在自定义Processor时使用@AutoService注解标记即可完成上面注册步骤。\n\n~~~ Java\n@AutoService(Processor.class)\n@SupportedAnnotationTypes({\n  //该注解处理器支持的所有注解全名\n})\n@SupportedSourceVersion(SourceVersion.RELEASE_7)\npublic class ContentViewProcessor extends AbstractProcessor {\n    ...\n}\n~~~\n\n### android-apt插件\n注解处理器所在的jar文件只能在编译期间起作用，到应用运行时不会用到，因此，在build.gradle中引入依赖时应该以provided方式，而不是compile方式引入。\n\n当然，我们可以使用android-apt插件的方式。\n\nAPT(Annotation Processing Tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。\n注解处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由注解处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。\n\nandroid-apt是在Android Studio中使用注解处理器的一个辅助插件，它的作用主要如下：\n\n- 只在编译期间引入注解处理器所在的函数库作为依赖，不会打包到最终生成的APK中。\n- 为注解处理器生成的源码设置好正确的路径，以便Android Studio能够正常找到，避免报错。\n\n#### Project项目中使用apt\n使用该插件，添加如下到你的构建脚本中：\n~~~ Java\n//配置在Project下的build.gradle中\nbuildscript {\n    repositories {\n      mavenCentral()\n    }\n    dependencies {\n        ...\n        //替换成最新android-apt版本\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n    }\n}\n\napply plugin: 'com.neenbedankt.android-apt'\n~~~\n\n接着以apt的方式引入注解处理器函数库作为依赖\n~~~ Java\ndependencies {\n   apt'com.bluelinelabs:logansquare-compiler:1.3.6'\n   compile 'com.bluelinelabs:logansquare:1.3.6'\n}\n~~~\n\n[LoganSquare](https://github.com/bluelinelabs/LoganSquare)是一个实现了编译时注解以提高性能的JSON解析函数库。上面的compiler库就是LoganSquare的注解处理器。\n\n#### 在Module中使用apt\n在Module中build.gradle的配置\n\n通常在使用的时候，使用apt声明注解用到的库文件。项目依赖可能分为多个部分。例如Dagger有两个组件Dagger-compiler和dagger。dagger-commpiler仅用于编译时，运行时必需使用dagger。\n~~~ Java\n//配置到Module下的build.gradle中\napply plugin: 'com.android.application'\napply plugin: 'com.neenbedankt.android-apt'\n\ndependencies {\n apt 'com.squareup.dagger:dagger-compiler:1.1.0'\n compile 'com.squareup.dagger:dagger:1.1.0'\n}\n~~~\n\n> provided vs apt使用注解处理器的不同？\n  provided 将会导入注解处理器的classes和它的依赖到IDE的类路径下。这意味着你可以附带的引入并使用这些classes。例如，当注解处理器使用Guava，你可能错误的import其相关代码到你的Android 代码中。当运行时将导致crash。\n  provided也可以用在重复引用的库上，避免依赖重复的资源。\n  而使用apt，注解处理器的classes将不会添加到你当前的类路径下，仅仅用于注解处理过程。并且会把所有注解处理器生成的source放在IDE的类路径下，方便Android Studio引用。\n\n\n越来越多第三方库使用apt技术，如DBflow、Dagger2、ButterKnife、ActivityRouter、AptPreferences。在编译时根据Annotation生成了相关的代码，非常高大上但是也非常简单的技术，可以给开发带来了很大的便利。\n\n\n### APT处理annotation的流程\n**注解处理器（AbstractProcess）+代码处理（javaPoet）+处理器注册（AutoService）+apt**\n\n具体流程：\n- 1.定义注解（如@inject）\n- 2.定义注解处理器\n- 3.在处理器里面完成处理方式，通常是生成Java代码。\n- 4.注册处理器\n- 5.利用APT完成如下图的工作内容。\n\n![图片来自http://blog.csdn.net/xx326664162/article/details/68490059](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/apt_processor.png)\n\n### annotationProcessor介绍\nannotationProcessor是APT工具中的一种，他是google开发的内置框架，不需要引入，可以直接在build.gradle文件中使用，\nButterKnife就是使用annotationProcessor处理注解，如下：\n\n~~~ Java\ndependencies {\n     annotationProcessor project(':xx')\n     annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'\n}\n~~~\n\n> apt vs annotationProcessor两者有何不同？\n  android-apt是由一位开发者自己开发的apt框架，源代码托管在[这里](https://bitbucket.org/hvisser/android-apt)，随着Android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此android-apt 作者在官网发表声明最新的Android Gradle插件现在已经支持annotationProcessor，并警告和或阻止android-apt ，并推荐大家使用 Android 官方插件annotationProcessor。\n  最近Android N的发布，android 迎来了Java 8，要想使用Java 8的话必须使用Jack编译，android-apt只支持javac编译而annotationProcessor既支持javac同时也支持jack编译。\n\n想用annotationProcessor替代android-apt。删除和替换相应部分即可，具体可以参考[这篇文章](http://www.cnblogs.com/whoislcj/p/6148410.html)\n\n\n文章参考：\n\n[Android 打造编译时注解解析框架 这只是一个开始](http://blog.csdn.net/lmj623565791/article/details/43452969)\n[Android APT（编译时代码生成）最佳实践](https://joyrun.github.io/2016/07/19/AptHelloWorld/)\n[Android编译时注解框架系列1-什么是编译时注解](https://lizhaoxuan.github.io/2016/07/17/apt-wathapt/)\n[你必须知道的APT、annotationProcessor、android-apt、Provided、自定义注解](http://blog.csdn.net/xx326664162/article/details/68490059)\n[《Android高级进阶》一书——注解在Android中的应用](https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01MPY3VNG/ref=sr_1_1?ie=UTF8&qid=1491812168&sr=8-1)\n","source":"_posts/2017-04-10-Annotation-Android-usage.md","raw":"---\nlayout: post\ntitle:  注解在Android中的应用\ncategory: accumulation\ntags:\n  - Annotation\n  - ANDROID\nkeywords: Annotation, apt, annotationProcessor\nbanner: http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Potatoes.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Basket%20of%20Potatoes.jpg\ntoc: true\n---\n\n## 注解在Android中的应用\n\n注解是Java语言的特性之一，它是在源代码中插入标签，这些标签在后面的编译或者运行过程中起到某种作用，每个注解都必须通过注解接口 @Interface 进行声明，接口的方法对应着注解的元素。\n\n在上一篇文章[Injection(CDI)和assertion(断言)](https://agehua.github.io/2017/03/14/Android-CDI/)中介绍了Java中的CDI（上下文依赖注入）规范，这个规范就是使用注解的方式。这篇文章主要介绍注解在Android中的应用。\n\n先看看Android上著名的View注入框架Butterknife的Bind注解的源码：\n\n~~~ Java\n@Retention (RetentionPolicy.Class)\n@Target (ElementType.FIELD)\npublic @interface Bind {\n   /** View ID to which the field will be found. **/\n   int[] value();\n}\n~~~\n@interface 声明会创建一个实际的Java接口，与其他任何接口一样，注解也会编译成.class文件。@Retention 和@Target 下面会介绍到。\n\n### Java注解的分类\n\n<!--more-->\nJava API中默认定义的注解叫做标准注解。它们定义在java.lang、java.lang.annotation和javax.annotation包中。按照使用场景不同，可以分为如下三类：\n\n#### 编译相关注解\n编译相关的注解是给编译器使用的，有以下几种：\n- @Override：编译器检查被注解的方法是否真的重载了一个来自父类的方法，如果没有，编译器会给出错误提示。\n- @Deprecated：可以用来修饰任何不再鼓励使用或已被弃用的属性、方法等。\n- @SuppressWarnings：可用于除了包之外的其他声明项中，用来抑制某种类型的警告。\n- @SafeVarargs：用于方法和构造函数，用来断言不定长参数可以安全使用\n- @Generated：一般是给代码生成工具使用，用来表示这段代码不是开发者手动编写的，而是工具生成的。被@Generated修饰的代码一般不建议手动修改它。\n- @FunctionalInterface：用来修饰接口，表示对应得接口是带单个方法的函数式接口\n\n#### 资源相关注解\n一共有四个，一帮用在JavaEE领域，Android开发中应该不会用到，就不在详细介绍\b了。\n分别是：\n- @PostConstruct\n- @PreDestroy\n- @Resource\n- @Resources\n\n#### 元注解\nButterknife的Bind注解用到的就是元注解。\n\n元注解，顾名思义，就是用来定义和实现注解的注解，总共有如下五种：\n- @Retention, 用来指明注解的访问范围，也就是在什么级别保留注解，有三种选择：\n  - 源码级注解：使用@Retention(RetentionPolicy.SOURCE)修饰的注解，该类型修饰的注解信息只会保留在 .java源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的 .class文件中。\n  - 编译时注解：使用@Retention(RetentionPolicy.CLASS)修饰的注解，该类型的注解信息会保留在 .java源码里和 .class文件里，在执行的时候会被Java虚拟机丢弃，不会加载到虚拟机中。\n  - 运行时注解：使用@Retention(RetentionPolicy.RUNTIME)修饰的注解，Java虚拟机在运行期间也保留注解信息，可以通过反射机制读取注解的信息\n  未指定类型时，默认是CLASS类型。\n- @Target, 这个注解的取值是一个ElementType类型的数组，用来指定注解所使用的对象范围，共有十种不同的类型，如下表所示，同时支持多种类型共存，可以进行灵活的组合。\n\n| 元素类型 |  适用于|\n| :-------- | :--------|\n| ANNOTATION_TYPE  | 注解类型声明 |  \n| CONSTRUCTOR    |  构造函数 |  \n| FIELD     |   实例变量 |\n| LOCAL_VARIABLE     |   局部变量 |\n| METHOD     |   方法 |\n| PACKAGE     |   包 |\n| PARAMETER     |   方法参数或者构造函数的参数 |\n| TYPE     |   类（包含enum）和接口（包含注解类型） |\n| TYPE_PARAMETER     |   类型参数 |\n| TYPE_USE     |   类型的用途 |\n\n  > 如果一个注解的定义没有使用@Target修饰，那么它可以用在除了TYPE_USE和TYPE_PARAMETER之外的其他类型声明中\n\n- @Inherited, 表示该注解可以被子类继承的。\n- @Documented, 表示被修饰的注解应该被包含在被注解项的文档中（例如用JavaDoc生成的文档）\n- @Repeatable, 表示这个注解可以在同一个项上面应用多次。不过这个注解是在Java 8中才引入的，前面四个元注解都是在Java 5中就已经引入。\n\n### 运行时注解\n前面说过，要定义运行时注解只需要在声明注解时指定 @Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用。相比编译时注解性能比较低，但灵活性好，实现起来比较简单。\n\n> Butterknife在较低版本依然是通过运行时反射实现View的注入，性能较低下，不过在8.0.0版本以后使用编译时注解来提升性能。\n\n#### 运行时注解的简单使用\n\n下面展示一个Demo。其功能是通过注解实现布局文件的设置。\n\n之前我们是这样设置布局文件的：\n\n~~~ Java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_home);\n}\n~~~\n如果使用注解，我们就可以这样设置布局了\n\n~~~ Java\n@ContentView(R.layout.activity_home)\npublic class HomeActivity extends BaseActivity {\n    ...\n}\n~~~\n我们先不讲这两种方式哪个好哪个坏，我们只谈技术不谈需求。\n\n那么这样的注解是怎么实现的呢？很简单，往下看。\n\n- 创建一个注解\n~~~ Java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\npublic @interface ContentView {\n    int value();\n}\n~~~\n\n前面已经讲过元注解，这不不再介绍。\n\n- 对于：public @interface ContentView\n\n这里的interface并不是说ContentView是一个接口。就像申明类用关键字class。申明枚举用enum。申明注解用的就是@interface。\n\n（值得注意的是：在ElementType的分类中，class、interface、Annotation、enum同属一类为ElementType.Type，并且从官方注解来看，interface是包含@interface的）\n\n~~~ Java\n/** Class, interface (including annotation type), or enum declaration */\nTYPE,\n~~~\n\n- 对于：int value();\n\n返回值表示这个注解里可以存放什么类型值。比如我们是这样使用的\n~~~ Java\n@ContentView(R.layout.activity_home)\n~~~\n\nR.layout.activity_home 实质是一个int型id，如果这样用就会报错：\n\n~~~ Java\n@ContentView(“string”)\n~~~\n关于注解的具体语法，可以看这篇文章[Android编译时注解框架-语法讲解](https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/)\n\n#### 注解解析\n\n注解申明好了，但具体是怎么识别这个注解并使用的呢？\n~~~ Java\n@ContentView(R.layout.activity_home)\npublic class HomeActivity extends BaseActivity {\n    ...\n}\n~~~\n注解的解析就在BaseActivity中。我们看一下BaseActivity代码\n~~~ Java\npublic class BaseActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    //注解解析\n    for (Class c = this.getClass(); c != Context.class; c = c.getSuperclass()) {\n        ContentView annotation = (ContentView) c.getAnnotation(ContentView.class);\n        if (annotation != null) {\n            try {\n                this.setContentView(annotation.value());\n            } catch (RuntimeException e) {\n                e.printStackTrace();\n            }\n            return;\n        }\n    }\n}\n~~~\n解释下上面的代码：\n\n- 第一步：遍历所有的子类\n- 第二步：找到修饰了注解ContentView的类\n- 第三步：获取ContentView的属性值。\n- 第四步：为Activity设置布局。\n\n>  总结：要定义运行时注解，只需要在声明注解时指定@Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但实现比较简单，会提高一定的开发效率。\n\n### 编译时注解\n\n编译时注解能够自动处理Java源文件并生成更多的源码、配置文件、脚本或其他可能想要生成的东西。这些操作是通过**注解处理器**完成的。Java通过在编译期间调用 javac -processor命令可以调起注解处理器，它能够实现编译时注解的功能，从而提高函数库的性能。\n\n#### 定义注解处理器\n自定义编译时注解后，需要编写Processor类实现注解处理器，处理自定义注解。Processor继承自AbstractProcessor类并实现process方法，同时需要指定注解处理器能够处理的注解类型以及支持的Java版本，语句如下：\n\n~~~ Java\npublic class JsonAnnotationProcessor extends AbstractProcessor {\n\n  @Override\n  public synchronized void init(ProcessingEnvironment env){\n     super.init(env);\n     //初始化方法，会被注解处理工具调用，并传入ProcessingEnvironment类型参数，\n     //这个参数包含了很多工具类，如Elements、Types、Filer等\n     elementUtils = env.getElementUtils();\n     typeUtils = env.getTypeUtils();\n     filer = env.getFiler();\n  }\n\n  @Override\n  public Set<String> getSupportedAnnotationTypes() {\n    //指定这个注解处理器能够处理的注解类型，返回一个支持的类型字符串合集\n    return super.getSupportedAnnotationTypes();\n  }\n\n  @Override\n  public SourceVersion getSupportedSourceVersion() {\n    //指定注解处理器使用的Java版本\n    return SourceVersion.latestSupported();\n  }\n\n  @Override\n  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n      //在这个方法中实现注解处理器的具体业务逻辑，根据输入参数roundEnv可以得到包含特定注解的被注解元素\n      //下面代码是Butterknife中这个方法的源码\n      Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);\n\n      for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {\n        TypeElement typeElement = entry.getKey();\n        BindingClass bindingClass = entry.getValue();\n\n        try {\n          JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);\n          Writer writer = jfo.openWriter();\n          writer.write(bindingClass.brewJava());\n          writer.flush();\n          writer.close();\n        } catch (IOException e) {\n          error(typeElement, \"Unable to write view binder for type %s: %s\", typeElement,\n              e.getMessage());\n        }\n      }\n\n      //返回值 表示这组 annotations 是否被这个 Processor 接受，\n      //如果接受（true）后续子的 pocessor 不会再对这个 Annotations 进行处理\n      return true;\n  }\n\n  //Butterknife源码：RoundEnvironment表示当前或是之前的运行环境，可以通过该对象查找找到相应的注解。\n  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {\n    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();\n    Set<String> erasedTargetNames = new LinkedHashSet<String>();\n\n    // Process each @Bind element.\n    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {\n      //所有被使用的@Bind注解\n      try {\n        parseBind(element, targetClassMap, erasedTargetNames);\n      } catch (Exception e) {\n        logParsingError(element, Bind.class, e);\n      }\n    }\n\n    ......\n  }  \n}\n~~~\n\n> 一个注解处理器，只能产生新的源文件，它不能够修改一个已经存在的源文件。当没有属于该Process处理的注解被使用时，process不会执行。\n\n从Java7 开始，我们也可以使用注解来代替上面的getSupportedAnnotationTypes()和getSupportedSourceVersion()方法，代码如下：\n~~~ Java\n@SupportedAnnotationTypes({\n  //该注解处理器支持的所有注解全名\n})\n@SupportedSourceVersion(SourceVersion.RELEASE_7)\npublic class ContentViewProcessor extends AbstractProcessor {\n    ...\n}\n~~~\n\n#### Element类型\n所有通过注解取得元素都将以Element类型等待处理，也可以理解为Element的子类类型与自定义注解时用到的@Target是有对应关系的。\n\n> Element的官方注释：Represents a program element such as a package, class, or method.\nEach element represents a static, language-level construct (and not, for example, a runtime construct of the virtual machine).\n\n表示一个程序元素，比如包、类或者方法。\n\nElement的子类有：\n\n- ExecutableElement\n表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。对应@Target(ElementType.METHOD) @Target(ElementType.CONSTRUCTOR)\n\n- PackageElement\n表示一个包程序元素。提供对有关包极其成员的信息访问。对应@Target(ElementType.PACKAGE)\n\n- TypeElement\n表示一个类或接口程序元素。提供对有关类型极其成员的信息访问。\n对应@Target(ElementType.TYPE)\n\n> 注意：枚举类型是一种类，而注解类型是一种接口。\n\n- TypeParameterElement\n表示一般类、接口、方法或构造方法元素的类型参数。\n对应@Target(ElementType.PARAMETER)\n\n- VariableElement\n表示一个字段、enum常量、方法或构造方法参数、局部变量或异常参数。\n对应@Target(ElementType.LOCAL_VARIABLE)\n\n#### Processor输出日志\n虽然是编译时执行Processor,但也是可以输入日志信息用于调试的。Processor日志输出的位置在编译器下方的Messages窗口中。Processor支持最基础的System.out方法。\n\n同样Processor也有自己的Log输出工具: Messager。\n~~~ Java\n//同样是Butterknife源码\nprivate void error(Element element, String message, Object... args) {\n    if (args.length > 0) {\n      message = String.format(message, args);\n    }\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message, element);\n}\n~~~\n\n### 注册注解处理器\n为了让javac -processor能够对定义好的注解处理进行处理，我们需要将注解处理器打包到一个jar文件中，同时，需要在jar文件中增加一个名为**javax.annotation.processing.processor**的文件来指明jar文件中有哪些注解处理器，这个文件最终目录在jar文件根目录的META-INF/service目录中，jar文件解压后的目录结构如下图：\n\n![图片来自http://blog.csdn.net/lmj623565791/article/details/43452969](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/processor_jar.png)\n\njavax.annotation.processing.Processor文件的内容是注解处理器全路径名，如果存在多个注解处理器，以换行进行分隔，代码看图片\n\n源文件的目录是，我们需要在src/main/java同级目录中新建一个名为resources的目录，将META-INF/services/javax.annotation.processing.Processor文件放进去就行\n\n> 注意，注解处理器所在的Android Studio工程必须是Java Library类型，而不应该是Android Library类型。因为Android Library的JDK中不包含某些javax包里面的类。\n\n手动实现上面注册过程很繁琐，因此Google开源了一个名为AutoService的函数库，使用这个库后，只需在自定义Processor时使用@AutoService注解标记即可完成上面注册步骤。\n\n~~~ Java\n@AutoService(Processor.class)\n@SupportedAnnotationTypes({\n  //该注解处理器支持的所有注解全名\n})\n@SupportedSourceVersion(SourceVersion.RELEASE_7)\npublic class ContentViewProcessor extends AbstractProcessor {\n    ...\n}\n~~~\n\n### android-apt插件\n注解处理器所在的jar文件只能在编译期间起作用，到应用运行时不会用到，因此，在build.gradle中引入依赖时应该以provided方式，而不是compile方式引入。\n\n当然，我们可以使用android-apt插件的方式。\n\nAPT(Annotation Processing Tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。\n注解处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由注解处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。\n\nandroid-apt是在Android Studio中使用注解处理器的一个辅助插件，它的作用主要如下：\n\n- 只在编译期间引入注解处理器所在的函数库作为依赖，不会打包到最终生成的APK中。\n- 为注解处理器生成的源码设置好正确的路径，以便Android Studio能够正常找到，避免报错。\n\n#### Project项目中使用apt\n使用该插件，添加如下到你的构建脚本中：\n~~~ Java\n//配置在Project下的build.gradle中\nbuildscript {\n    repositories {\n      mavenCentral()\n    }\n    dependencies {\n        ...\n        //替换成最新android-apt版本\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n    }\n}\n\napply plugin: 'com.neenbedankt.android-apt'\n~~~\n\n接着以apt的方式引入注解处理器函数库作为依赖\n~~~ Java\ndependencies {\n   apt'com.bluelinelabs:logansquare-compiler:1.3.6'\n   compile 'com.bluelinelabs:logansquare:1.3.6'\n}\n~~~\n\n[LoganSquare](https://github.com/bluelinelabs/LoganSquare)是一个实现了编译时注解以提高性能的JSON解析函数库。上面的compiler库就是LoganSquare的注解处理器。\n\n#### 在Module中使用apt\n在Module中build.gradle的配置\n\n通常在使用的时候，使用apt声明注解用到的库文件。项目依赖可能分为多个部分。例如Dagger有两个组件Dagger-compiler和dagger。dagger-commpiler仅用于编译时，运行时必需使用dagger。\n~~~ Java\n//配置到Module下的build.gradle中\napply plugin: 'com.android.application'\napply plugin: 'com.neenbedankt.android-apt'\n\ndependencies {\n apt 'com.squareup.dagger:dagger-compiler:1.1.0'\n compile 'com.squareup.dagger:dagger:1.1.0'\n}\n~~~\n\n> provided vs apt使用注解处理器的不同？\n  provided 将会导入注解处理器的classes和它的依赖到IDE的类路径下。这意味着你可以附带的引入并使用这些classes。例如，当注解处理器使用Guava，你可能错误的import其相关代码到你的Android 代码中。当运行时将导致crash。\n  provided也可以用在重复引用的库上，避免依赖重复的资源。\n  而使用apt，注解处理器的classes将不会添加到你当前的类路径下，仅仅用于注解处理过程。并且会把所有注解处理器生成的source放在IDE的类路径下，方便Android Studio引用。\n\n\n越来越多第三方库使用apt技术，如DBflow、Dagger2、ButterKnife、ActivityRouter、AptPreferences。在编译时根据Annotation生成了相关的代码，非常高大上但是也非常简单的技术，可以给开发带来了很大的便利。\n\n\n### APT处理annotation的流程\n**注解处理器（AbstractProcess）+代码处理（javaPoet）+处理器注册（AutoService）+apt**\n\n具体流程：\n- 1.定义注解（如@inject）\n- 2.定义注解处理器\n- 3.在处理器里面完成处理方式，通常是生成Java代码。\n- 4.注册处理器\n- 5.利用APT完成如下图的工作内容。\n\n![图片来自http://blog.csdn.net/xx326664162/article/details/68490059](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/apt_processor.png)\n\n### annotationProcessor介绍\nannotationProcessor是APT工具中的一种，他是google开发的内置框架，不需要引入，可以直接在build.gradle文件中使用，\nButterKnife就是使用annotationProcessor处理注解，如下：\n\n~~~ Java\ndependencies {\n     annotationProcessor project(':xx')\n     annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'\n}\n~~~\n\n> apt vs annotationProcessor两者有何不同？\n  android-apt是由一位开发者自己开发的apt框架，源代码托管在[这里](https://bitbucket.org/hvisser/android-apt)，随着Android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此android-apt 作者在官网发表声明最新的Android Gradle插件现在已经支持annotationProcessor，并警告和或阻止android-apt ，并推荐大家使用 Android 官方插件annotationProcessor。\n  最近Android N的发布，android 迎来了Java 8，要想使用Java 8的话必须使用Jack编译，android-apt只支持javac编译而annotationProcessor既支持javac同时也支持jack编译。\n\n想用annotationProcessor替代android-apt。删除和替换相应部分即可，具体可以参考[这篇文章](http://www.cnblogs.com/whoislcj/p/6148410.html)\n\n\n文章参考：\n\n[Android 打造编译时注解解析框架 这只是一个开始](http://blog.csdn.net/lmj623565791/article/details/43452969)\n[Android APT（编译时代码生成）最佳实践](https://joyrun.github.io/2016/07/19/AptHelloWorld/)\n[Android编译时注解框架系列1-什么是编译时注解](https://lizhaoxuan.github.io/2016/07/17/apt-wathapt/)\n[你必须知道的APT、annotationProcessor、android-apt、Provided、自定义注解](http://blog.csdn.net/xx326664162/article/details/68490059)\n[《Android高级进阶》一书——注解在Android中的应用](https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01MPY3VNG/ref=sr_1_1?ie=UTF8&qid=1491812168&sr=8-1)\n","slug":"Annotation-Android-usage","published":1,"date":"2017-04-09T16:00:00.000Z","updated":"2017-11-23T07:25:29.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0o0034d6yknst949br","content":"<h2 id=\"注解在Android中的应用\"><a href=\"#注解在Android中的应用\" class=\"headerlink\" title=\"注解在Android中的应用\"></a>注解在Android中的应用</h2><p>注解是Java语言的特性之一，它是在源代码中插入标签，这些标签在后面的编译或者运行过程中起到某种作用，每个注解都必须通过注解接口 @Interface 进行声明，接口的方法对应着注解的元素。</p>\n<p>在上一篇文章<a href=\"https://agehua.github.io/2017/03/14/Android-CDI/\">Injection(CDI)和assertion(断言)</a>中介绍了Java中的CDI（上下文依赖注入）规范，这个规范就是使用注解的方式。这篇文章主要介绍注解在Android中的应用。</p>\n<p>先看看Android上著名的View注入框架Butterknife的Bind注解的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span> (RetentionPolicy.Class)</div><div class=\"line\"><span class=\"meta\">@Target</span> (ElementType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Bind &#123;</div><div class=\"line\">   <span class=\"comment\">/** View ID to which the field will be found. **/</span></div><div class=\"line\">   <span class=\"keyword\">int</span>[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@interface 声明会创建一个实际的Java接口，与其他任何接口一样，注解也会编译成.class文件。@Retention 和@Target 下面会介绍到。</p>\n<h3 id=\"Java注解的分类\"><a href=\"#Java注解的分类\" class=\"headerlink\" title=\"Java注解的分类\"></a>Java注解的分类</h3><a id=\"more\"></a>\n<p>Java API中默认定义的注解叫做标准注解。它们定义在java.lang、java.lang.annotation和javax.annotation包中。按照使用场景不同，可以分为如下三类：</p>\n<h4 id=\"编译相关注解\"><a href=\"#编译相关注解\" class=\"headerlink\" title=\"编译相关注解\"></a>编译相关注解</h4><p>编译相关的注解是给编译器使用的，有以下几种：</p>\n<ul>\n<li>@Override：编译器检查被注解的方法是否真的重载了一个来自父类的方法，如果没有，编译器会给出错误提示。</li>\n<li>@Deprecated：可以用来修饰任何不再鼓励使用或已被弃用的属性、方法等。</li>\n<li>@SuppressWarnings：可用于除了包之外的其他声明项中，用来抑制某种类型的警告。</li>\n<li>@SafeVarargs：用于方法和构造函数，用来断言不定长参数可以安全使用</li>\n<li>@Generated：一般是给代码生成工具使用，用来表示这段代码不是开发者手动编写的，而是工具生成的。被@Generated修饰的代码一般不建议手动修改它。</li>\n<li>@FunctionalInterface：用来修饰接口，表示对应得接口是带单个方法的函数式接口</li>\n</ul>\n<h4 id=\"资源相关注解\"><a href=\"#资源相关注解\" class=\"headerlink\" title=\"资源相关注解\"></a>资源相关注解</h4><p>一共有四个，一帮用在JavaEE领域，Android开发中应该不会用到，就不在详细介绍\b了。<br>分别是：</p>\n<ul>\n<li>@PostConstruct</li>\n<li>@PreDestroy</li>\n<li>@Resource</li>\n<li>@Resources</li>\n</ul>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>Butterknife的Bind注解用到的就是元注解。</p>\n<p>元注解，顾名思义，就是用来定义和实现注解的注解，总共有如下五种：</p>\n<ul>\n<li>@Retention, 用来指明注解的访问范围，也就是在什么级别保留注解，有三种选择：<ul>\n<li>源码级注解：使用@Retention(RetentionPolicy.SOURCE)修饰的注解，该类型修饰的注解信息只会保留在 .java源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的 .class文件中。</li>\n<li>编译时注解：使用@Retention(RetentionPolicy.CLASS)修饰的注解，该类型的注解信息会保留在 .java源码里和 .class文件里，在执行的时候会被Java虚拟机丢弃，不会加载到虚拟机中。</li>\n<li>运行时注解：使用@Retention(RetentionPolicy.RUNTIME)修饰的注解，Java虚拟机在运行期间也保留注解信息，可以通过反射机制读取注解的信息<br>未指定类型时，默认是CLASS类型。</li>\n</ul>\n</li>\n<li>@Target, 这个注解的取值是一个ElementType类型的数组，用来指定注解所使用的对象范围，共有十种不同的类型，如下表所示，同时支持多种类型共存，可以进行灵活的组合。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">元素类型</th>\n<th style=\"text-align:left\">适用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ANNOTATION_TYPE</td>\n<td style=\"text-align:left\">注解类型声明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTRUCTOR</td>\n<td style=\"text-align:left\">构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FIELD</td>\n<td style=\"text-align:left\">实例变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOCAL_VARIABLE</td>\n<td style=\"text-align:left\">局部变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">METHOD</td>\n<td style=\"text-align:left\">方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PACKAGE</td>\n<td style=\"text-align:left\">包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PARAMETER</td>\n<td style=\"text-align:left\">方法参数或者构造函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE</td>\n<td style=\"text-align:left\">类（包含enum）和接口（包含注解类型）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE_PARAMETER</td>\n<td style=\"text-align:left\">类型参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE_USE</td>\n<td style=\"text-align:left\">类型的用途</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果一个注解的定义没有使用@Target修饰，那么它可以用在除了TYPE_USE和TYPE_PARAMETER之外的其他类型声明中</p>\n</blockquote>\n<ul>\n<li>@Inherited, 表示该注解可以被子类继承的。</li>\n<li>@Documented, 表示被修饰的注解应该被包含在被注解项的文档中（例如用JavaDoc生成的文档）</li>\n<li>@Repeatable, 表示这个注解可以在同一个项上面应用多次。不过这个注解是在Java 8中才引入的，前面四个元注解都是在Java 5中就已经引入。</li>\n</ul>\n<h3 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h3><p>前面说过，要定义运行时注解只需要在声明注解时指定 @Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用。相比编译时注解性能比较低，但灵活性好，实现起来比较简单。</p>\n<blockquote>\n<p>Butterknife在较低版本依然是通过运行时反射实现View的注入，性能较低下，不过在8.0.0版本以后使用编译时注解来提升性能。</p>\n</blockquote>\n<h4 id=\"运行时注解的简单使用\"><a href=\"#运行时注解的简单使用\" class=\"headerlink\" title=\"运行时注解的简单使用\"></a>运行时注解的简单使用</h4><p>下面展示一个Demo。其功能是通过注解实现布局文件的设置。</p>\n<p>之前我们是这样设置布局文件的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_home);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用注解，我们就可以这样设置布局了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们先不讲这两种方式哪个好哪个坏，我们只谈技术不谈需求。</p>\n<p>那么这样的注解是怎么实现的呢？很简单，往下看。</p>\n<ul>\n<li>创建一个注解<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ContentView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>前面已经讲过元注解，这不不再介绍。</p>\n<ul>\n<li>对于：public @interface ContentView</li>\n</ul>\n<p>这里的interface并不是说ContentView是一个接口。就像申明类用关键字class。申明枚举用enum。申明注解用的就是@interface。</p>\n<p>（值得注意的是：在ElementType的分类中，class、interface、Annotation、enum同属一类为ElementType.Type，并且从官方注解来看，interface是包含@interface的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></div><div class=\"line\">TYPE,</div></pre></td></tr></table></figure>\n<ul>\n<li>对于：int value();</li>\n</ul>\n<p>返回值表示这个注解里可以存放什么类型值。比如我们是这样使用的<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div></pre></td></tr></table></figure></p>\n<p>R.layout.activity_home 实质是一个int型id，如果这样用就会报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(“string”)</div></pre></td></tr></table></figure>\n<p>关于注解的具体语法，可以看这篇文章<a href=\"https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/\" target=\"_blank\" rel=\"external\">Android编译时注解框架-语法讲解</a></p>\n<h4 id=\"注解解析\"><a href=\"#注解解析\" class=\"headerlink\" title=\"注解解析\"></a>注解解析</h4><p>注解申明好了，但具体是怎么识别这个注解并使用的呢？<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注解的解析就在BaseActivity中。我们看一下BaseActivity代码<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    <span class=\"comment\">//注解解析</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Class c = <span class=\"keyword\">this</span>.getClass(); c != Context.class; c = c.getSuperclass()) &#123;</div><div class=\"line\">        ContentView annotation = (ContentView) c.getAnnotation(ContentView.class);</div><div class=\"line\">        <span class=\"keyword\">if</span> (annotation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setContentView(annotation.value());</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>解释下上面的代码：</p>\n<ul>\n<li>第一步：遍历所有的子类</li>\n<li>第二步：找到修饰了注解ContentView的类</li>\n<li>第三步：获取ContentView的属性值。</li>\n<li>第四步：为Activity设置布局。</li>\n</ul>\n<blockquote>\n<p> 总结：要定义运行时注解，只需要在声明注解时指定@Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但实现比较简单，会提高一定的开发效率。</p>\n</blockquote>\n<h3 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h3><p>编译时注解能够自动处理Java源文件并生成更多的源码、配置文件、脚本或其他可能想要生成的东西。这些操作是通过<strong>注解处理器</strong>完成的。Java通过在编译期间调用 javac -processor命令可以调起注解处理器，它能够实现编译时注解的功能，从而提高函数库的性能。</p>\n<h4 id=\"定义注解处理器\"><a href=\"#定义注解处理器\" class=\"headerlink\" title=\"定义注解处理器\"></a>定义注解处理器</h4><p>自定义编译时注解后，需要编写Processor类实现注解处理器，处理自定义注解。Processor继承自AbstractProcessor类并实现process方法，同时需要指定注解处理器能够处理的注解类型以及支持的Java版本，语句如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment env)</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">super</span>.init(env);</div><div class=\"line\">     <span class=\"comment\">//初始化方法，会被注解处理工具调用，并传入ProcessingEnvironment类型参数，</span></div><div class=\"line\">     <span class=\"comment\">//这个参数包含了很多工具类，如Elements、Types、Filer等</span></div><div class=\"line\">     elementUtils = env.getElementUtils();</div><div class=\"line\">     typeUtils = env.getTypeUtils();</div><div class=\"line\">     filer = env.getFiler();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定这个注解处理器能够处理的注解类型，返回一个支持的类型字符串合集</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getSupportedAnnotationTypes();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title\">getSupportedSourceVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定注解处理器使用的Java版本</span></div><div class=\"line\">    <span class=\"keyword\">return</span> SourceVersion.latestSupported();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//在这个方法中实现注解处理器的具体业务逻辑，根据输入参数roundEnv可以得到包含特定注解的被注解元素</span></div><div class=\"line\">      <span class=\"comment\">//下面代码是Butterknife中这个方法的源码</span></div><div class=\"line\">      Map&lt;TypeElement, BindingClass&gt; targetClassMap = findAndParseTargets(env);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;TypeElement, BindingClass&gt; entry : targetClassMap.entrySet()) &#123;</div><div class=\"line\">        TypeElement typeElement = entry.getKey();</div><div class=\"line\">        BindingClass bindingClass = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);</div><div class=\"line\">          Writer writer = jfo.openWriter();</div><div class=\"line\">          writer.write(bindingClass.brewJava());</div><div class=\"line\">          writer.flush();</div><div class=\"line\">          writer.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">          error(typeElement, <span class=\"string\">\"Unable to write view binder for type %s: %s\"</span>, typeElement,</div><div class=\"line\">              e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//返回值 表示这组 annotations 是否被这个 Processor 接受，</span></div><div class=\"line\">      <span class=\"comment\">//如果接受（true）后续子的 pocessor 不会再对这个 Annotations 进行处理</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Butterknife源码：RoundEnvironment表示当前或是之前的运行环境，可以通过该对象查找找到相应的注解。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;TypeElement, BindingClass&gt; <span class=\"title\">findAndParseTargets</span><span class=\"params\">(RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingClass&gt; targetClassMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;TypeElement, BindingClass&gt;();</div><div class=\"line\">    Set&lt;String&gt; erasedTargetNames = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each @Bind element.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Element element : env.getElementsAnnotatedWith(Bind.class)) &#123;</div><div class=\"line\">      <span class=\"comment\">//所有被使用的@Bind注解</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        parseBind(element, targetClassMap, erasedTargetNames);</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logParsingError(element, Bind.class, e);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一个注解处理器，只能产生新的源文件，它不能够修改一个已经存在的源文件。当没有属于该Process处理的注解被使用时，process不会执行。</p>\n</blockquote>\n<p>从Java7 开始，我们也可以使用注解来代替上面的getSupportedAnnotationTypes()和getSupportedSourceVersion()方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">//该注解处理器支持的所有注解全名</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Element类型\"><a href=\"#Element类型\" class=\"headerlink\" title=\"Element类型\"></a>Element类型</h4><p>所有通过注解取得元素都将以Element类型等待处理，也可以理解为Element的子类类型与自定义注解时用到的@Target是有对应关系的。</p>\n<blockquote>\n<p>Element的官方注释：Represents a program element such as a package, class, or method.<br>Each element represents a static, language-level construct (and not, for example, a runtime construct of the virtual machine).</p>\n</blockquote>\n<p>表示一个程序元素，比如包、类或者方法。</p>\n<p>Element的子类有：</p>\n<ul>\n<li><p>ExecutableElement<br>表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。对应@Target(ElementType.METHOD) @Target(ElementType.CONSTRUCTOR)</p>\n</li>\n<li><p>PackageElement<br>表示一个包程序元素。提供对有关包极其成员的信息访问。对应@Target(ElementType.PACKAGE)</p>\n</li>\n<li><p>TypeElement<br>表示一个类或接口程序元素。提供对有关类型极其成员的信息访问。<br>对应@Target(ElementType.TYPE)</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：枚举类型是一种类，而注解类型是一种接口。</p>\n</blockquote>\n<ul>\n<li><p>TypeParameterElement<br>表示一般类、接口、方法或构造方法元素的类型参数。<br>对应@Target(ElementType.PARAMETER)</p>\n</li>\n<li><p>VariableElement<br>表示一个字段、enum常量、方法或构造方法参数、局部变量或异常参数。<br>对应@Target(ElementType.LOCAL_VARIABLE)</p>\n</li>\n</ul>\n<h4 id=\"Processor输出日志\"><a href=\"#Processor输出日志\" class=\"headerlink\" title=\"Processor输出日志\"></a>Processor输出日志</h4><p>虽然是编译时执行Processor,但也是可以输入日志信息用于调试的。Processor日志输出的位置在编译器下方的Messages窗口中。Processor支持最基础的System.out方法。</p>\n<p>同样Processor也有自己的Log输出工具: Messager。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同样是Butterknife源码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(Element element, String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      message = String.format(message, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message, element);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注册注解处理器\"><a href=\"#注册注解处理器\" class=\"headerlink\" title=\"注册注解处理器\"></a>注册注解处理器</h3><p>为了让javac -processor能够对定义好的注解处理进行处理，我们需要将注解处理器打包到一个jar文件中，同时，需要在jar文件中增加一个名为<strong>javax.annotation.processing.processor</strong>的文件来指明jar文件中有哪些注解处理器，这个文件最终目录在jar文件根目录的META-INF/service目录中，jar文件解压后的目录结构如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/processor_jar.png\" alt=\"图片来自http://blog.csdn.net/lmj623565791/article/details/43452969\"></p>\n<p>javax.annotation.processing.Processor文件的内容是注解处理器全路径名，如果存在多个注解处理器，以换行进行分隔，代码看图片</p>\n<p>源文件的目录是，我们需要在src/main/java同级目录中新建一个名为resources的目录，将META-INF/services/javax.annotation.processing.Processor文件放进去就行</p>\n<blockquote>\n<p>注意，注解处理器所在的Android Studio工程必须是Java Library类型，而不应该是Android Library类型。因为Android Library的JDK中不包含某些javax包里面的类。</p>\n</blockquote>\n<p>手动实现上面注册过程很繁琐，因此Google开源了一个名为AutoService的函数库，使用这个库后，只需在自定义Processor时使用@AutoService注解标记即可完成上面注册步骤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">//该注解处理器支持的所有注解全名</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"android-apt插件\"><a href=\"#android-apt插件\" class=\"headerlink\" title=\"android-apt插件\"></a>android-apt插件</h3><p>注解处理器所在的jar文件只能在编译期间起作用，到应用运行时不会用到，因此，在build.gradle中引入依赖时应该以provided方式，而不是compile方式引入。</p>\n<p>当然，我们可以使用android-apt插件的方式。</p>\n<p>APT(Annotation Processing Tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。<br>注解处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由注解处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。</p>\n<p>android-apt是在Android Studio中使用注解处理器的一个辅助插件，它的作用主要如下：</p>\n<ul>\n<li>只在编译期间引入注解处理器所在的函数库作为依赖，不会打包到最终生成的APK中。</li>\n<li>为注解处理器生成的源码设置好正确的路径，以便Android Studio能够正常找到，避免报错。</li>\n</ul>\n<h4 id=\"Project项目中使用apt\"><a href=\"#Project项目中使用apt\" class=\"headerlink\" title=\"Project项目中使用apt\"></a>Project项目中使用apt</h4><p>使用该插件，添加如下到你的构建脚本中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置在Project下的build.gradle中</span></div><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">      mavenCentral()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">//替换成最新android-apt版本</span></div><div class=\"line\">        classpath <span class=\"string\">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">apply plugin: <span class=\"string\">'com.neenbedankt.android-apt'</span></div></pre></td></tr></table></figure></p>\n<p>接着以apt的方式引入注解处理器函数库作为依赖<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">   apt<span class=\"string\">'com.bluelinelabs:logansquare-compiler:1.3.6'</span></div><div class=\"line\">   compile <span class=\"string\">'com.bluelinelabs:logansquare:1.3.6'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/bluelinelabs/LoganSquare\" target=\"_blank\" rel=\"external\">LoganSquare</a>是一个实现了编译时注解以提高性能的JSON解析函数库。上面的compiler库就是LoganSquare的注解处理器。</p>\n<h4 id=\"在Module中使用apt\"><a href=\"#在Module中使用apt\" class=\"headerlink\" title=\"在Module中使用apt\"></a>在Module中使用apt</h4><p>在Module中build.gradle的配置</p>\n<p>通常在使用的时候，使用apt声明注解用到的库文件。项目依赖可能分为多个部分。例如Dagger有两个组件Dagger-compiler和dagger。dagger-commpiler仅用于编译时，运行时必需使用dagger。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置到Module下的build.gradle中</span></div><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\">apply plugin: <span class=\"string\">'com.neenbedankt.android-apt'</span></div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\"> apt <span class=\"string\">'com.squareup.dagger:dagger-compiler:1.1.0'</span></div><div class=\"line\"> compile <span class=\"string\">'com.squareup.dagger:dagger:1.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>provided vs apt使用注解处理器的不同？<br>  provided 将会导入注解处理器的classes和它的依赖到IDE的类路径下。这意味着你可以附带的引入并使用这些classes。例如，当注解处理器使用Guava，你可能错误的import其相关代码到你的Android 代码中。当运行时将导致crash。<br>  provided也可以用在重复引用的库上，避免依赖重复的资源。<br>  而使用apt，注解处理器的classes将不会添加到你当前的类路径下，仅仅用于注解处理过程。并且会把所有注解处理器生成的source放在IDE的类路径下，方便Android Studio引用。</p>\n</blockquote>\n<p>越来越多第三方库使用apt技术，如DBflow、Dagger2、ButterKnife、ActivityRouter、AptPreferences。在编译时根据Annotation生成了相关的代码，非常高大上但是也非常简单的技术，可以给开发带来了很大的便利。</p>\n<h3 id=\"APT处理annotation的流程\"><a href=\"#APT处理annotation的流程\" class=\"headerlink\" title=\"APT处理annotation的流程\"></a>APT处理annotation的流程</h3><p><strong>注解处理器（AbstractProcess）+代码处理（javaPoet）+处理器注册（AutoService）+apt</strong></p>\n<p>具体流程：</p>\n<ul>\n<li>1.定义注解（如@inject）</li>\n<li>2.定义注解处理器</li>\n<li>3.在处理器里面完成处理方式，通常是生成Java代码。</li>\n<li>4.注册处理器</li>\n<li>5.利用APT完成如下图的工作内容。</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/apt_processor.png\" alt=\"图片来自http://blog.csdn.net/xx326664162/article/details/68490059\"></p>\n<h3 id=\"annotationProcessor介绍\"><a href=\"#annotationProcessor介绍\" class=\"headerlink\" title=\"annotationProcessor介绍\"></a>annotationProcessor介绍</h3><p>annotationProcessor是APT工具中的一种，他是google开发的内置框架，不需要引入，可以直接在build.gradle文件中使用，<br>ButterKnife就是使用annotationProcessor处理注解，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">     <span class=\"function\">annotationProcessor <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':xx'</span>)</span></span></div><div class=\"line\">     annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>apt vs annotationProcessor两者有何不同？<br>  android-apt是由一位开发者自己开发的apt框架，源代码托管在<a href=\"https://bitbucket.org/hvisser/android-apt\" target=\"_blank\" rel=\"external\">这里</a>，随着Android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此android-apt 作者在官网发表声明最新的Android Gradle插件现在已经支持annotationProcessor，并警告和或阻止android-apt ，并推荐大家使用 Android 官方插件annotationProcessor。<br>  最近Android N的发布，android 迎来了Java 8，要想使用Java 8的话必须使用Jack编译，android-apt只支持javac编译而annotationProcessor既支持javac同时也支持jack编译。</p>\n</blockquote>\n<p>想用annotationProcessor替代android-apt。删除和替换相应部分即可，具体可以参考<a href=\"http://www.cnblogs.com/whoislcj/p/6148410.html\" target=\"_blank\" rel=\"external\">这篇文章</a></p>\n<p>文章参考：</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/43452969\" target=\"_blank\" rel=\"external\">Android 打造编译时注解解析框架 这只是一个开始</a><br><a href=\"https://joyrun.github.io/2016/07/19/AptHelloWorld/\" target=\"_blank\" rel=\"external\">Android APT（编译时代码生成）最佳实践</a><br><a href=\"https://lizhaoxuan.github.io/2016/07/17/apt-wathapt/\" target=\"_blank\" rel=\"external\">Android编译时注解框架系列1-什么是编译时注解</a><br><a href=\"http://blog.csdn.net/xx326664162/article/details/68490059\" target=\"_blank\" rel=\"external\">你必须知道的APT、annotationProcessor、android-apt、Provided、自定义注解</a><br><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01MPY3VNG/ref=sr_1_1?ie=UTF8&amp;qid=1491812168&amp;sr=8-1\" target=\"_blank\" rel=\"external\">《Android高级进阶》一书——注解在Android中的应用</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/04/10/Annotation-Android-usage/\">http://agehua.github.io/2017/04/10/Annotation-Android-usage/</a></p>\n","readingTime":{"text":"6 min read","minutes":5.51,"time":330599.99999999994,"words":1102},"excerpt":"<h2 id=\"注解在Android中的应用\"><a href=\"#注解在Android中的应用\" class=\"headerlink\" title=\"注解在Android中的应用\"></a>注解在Android中的应用</h2><p>注解是Java语言的特性之一，它是在源代码中插入标签，这些标签在后面的编译或者运行过程中起到某种作用，每个注解都必须通过注解接口 @Interface 进行声明，接口的方法对应着注解的元素。</p>\n<p>在上一篇文章<a href=\"https://agehua.github.io/2017/03/14/Android-CDI/\">Injection(CDI)和assertion(断言)</a>中介绍了Java中的CDI（上下文依赖注入）规范，这个规范就是使用注解的方式。这篇文章主要介绍注解在Android中的应用。</p>\n<p>先看看Android上著名的View注入框架Butterknife的Bind注解的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span> (RetentionPolicy.Class)</div><div class=\"line\"><span class=\"meta\">@Target</span> (ElementType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Bind &#123;</div><div class=\"line\">   <span class=\"comment\">/** View ID to which the field will be found. **/</span></div><div class=\"line\">   <span class=\"keyword\">int</span>[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@interface 声明会创建一个实际的Java接口，与其他任何接口一样，注解也会编译成.class文件。@Retention 和@Target 下面会介绍到。</p>\n<h3 id=\"Java注解的分类\"><a href=\"#Java注解的分类\" class=\"headerlink\" title=\"Java注解的分类\"></a>Java注解的分类</h3>","more":"<p>Java API中默认定义的注解叫做标准注解。它们定义在java.lang、java.lang.annotation和javax.annotation包中。按照使用场景不同，可以分为如下三类：</p>\n<h4 id=\"编译相关注解\"><a href=\"#编译相关注解\" class=\"headerlink\" title=\"编译相关注解\"></a>编译相关注解</h4><p>编译相关的注解是给编译器使用的，有以下几种：</p>\n<ul>\n<li>@Override：编译器检查被注解的方法是否真的重载了一个来自父类的方法，如果没有，编译器会给出错误提示。</li>\n<li>@Deprecated：可以用来修饰任何不再鼓励使用或已被弃用的属性、方法等。</li>\n<li>@SuppressWarnings：可用于除了包之外的其他声明项中，用来抑制某种类型的警告。</li>\n<li>@SafeVarargs：用于方法和构造函数，用来断言不定长参数可以安全使用</li>\n<li>@Generated：一般是给代码生成工具使用，用来表示这段代码不是开发者手动编写的，而是工具生成的。被@Generated修饰的代码一般不建议手动修改它。</li>\n<li>@FunctionalInterface：用来修饰接口，表示对应得接口是带单个方法的函数式接口</li>\n</ul>\n<h4 id=\"资源相关注解\"><a href=\"#资源相关注解\" class=\"headerlink\" title=\"资源相关注解\"></a>资源相关注解</h4><p>一共有四个，一帮用在JavaEE领域，Android开发中应该不会用到，就不在详细介绍\b了。<br>分别是：</p>\n<ul>\n<li>@PostConstruct</li>\n<li>@PreDestroy</li>\n<li>@Resource</li>\n<li>@Resources</li>\n</ul>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>Butterknife的Bind注解用到的就是元注解。</p>\n<p>元注解，顾名思义，就是用来定义和实现注解的注解，总共有如下五种：</p>\n<ul>\n<li>@Retention, 用来指明注解的访问范围，也就是在什么级别保留注解，有三种选择：<ul>\n<li>源码级注解：使用@Retention(RetentionPolicy.SOURCE)修饰的注解，该类型修饰的注解信息只会保留在 .java源码里，源码经过编译后，注解信息会被丢弃，不会保留在编译好的 .class文件中。</li>\n<li>编译时注解：使用@Retention(RetentionPolicy.CLASS)修饰的注解，该类型的注解信息会保留在 .java源码里和 .class文件里，在执行的时候会被Java虚拟机丢弃，不会加载到虚拟机中。</li>\n<li>运行时注解：使用@Retention(RetentionPolicy.RUNTIME)修饰的注解，Java虚拟机在运行期间也保留注解信息，可以通过反射机制读取注解的信息<br>未指定类型时，默认是CLASS类型。</li>\n</ul>\n</li>\n<li>@Target, 这个注解的取值是一个ElementType类型的数组，用来指定注解所使用的对象范围，共有十种不同的类型，如下表所示，同时支持多种类型共存，可以进行灵活的组合。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">元素类型</th>\n<th style=\"text-align:left\">适用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ANNOTATION_TYPE</td>\n<td style=\"text-align:left\">注解类型声明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTRUCTOR</td>\n<td style=\"text-align:left\">构造函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FIELD</td>\n<td style=\"text-align:left\">实例变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOCAL_VARIABLE</td>\n<td style=\"text-align:left\">局部变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">METHOD</td>\n<td style=\"text-align:left\">方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PACKAGE</td>\n<td style=\"text-align:left\">包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PARAMETER</td>\n<td style=\"text-align:left\">方法参数或者构造函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE</td>\n<td style=\"text-align:left\">类（包含enum）和接口（包含注解类型）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE_PARAMETER</td>\n<td style=\"text-align:left\">类型参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TYPE_USE</td>\n<td style=\"text-align:left\">类型的用途</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果一个注解的定义没有使用@Target修饰，那么它可以用在除了TYPE_USE和TYPE_PARAMETER之外的其他类型声明中</p>\n</blockquote>\n<ul>\n<li>@Inherited, 表示该注解可以被子类继承的。</li>\n<li>@Documented, 表示被修饰的注解应该被包含在被注解项的文档中（例如用JavaDoc生成的文档）</li>\n<li>@Repeatable, 表示这个注解可以在同一个项上面应用多次。不过这个注解是在Java 8中才引入的，前面四个元注解都是在Java 5中就已经引入。</li>\n</ul>\n<h3 id=\"运行时注解\"><a href=\"#运行时注解\" class=\"headerlink\" title=\"运行时注解\"></a>运行时注解</h3><p>前面说过，要定义运行时注解只需要在声明注解时指定 @Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用。相比编译时注解性能比较低，但灵活性好，实现起来比较简单。</p>\n<blockquote>\n<p>Butterknife在较低版本依然是通过运行时反射实现View的注入，性能较低下，不过在8.0.0版本以后使用编译时注解来提升性能。</p>\n</blockquote>\n<h4 id=\"运行时注解的简单使用\"><a href=\"#运行时注解的简单使用\" class=\"headerlink\" title=\"运行时注解的简单使用\"></a>运行时注解的简单使用</h4><p>下面展示一个Demo。其功能是通过注解实现布局文件的设置。</p>\n<p>之前我们是这样设置布局文件的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_home);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用注解，我们就可以这样设置布局了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们先不讲这两种方式哪个好哪个坏，我们只谈技术不谈需求。</p>\n<p>那么这样的注解是怎么实现的呢？很简单，往下看。</p>\n<ul>\n<li>创建一个注解<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ContentView &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>前面已经讲过元注解，这不不再介绍。</p>\n<ul>\n<li>对于：public @interface ContentView</li>\n</ul>\n<p>这里的interface并不是说ContentView是一个接口。就像申明类用关键字class。申明枚举用enum。申明注解用的就是@interface。</p>\n<p>（值得注意的是：在ElementType的分类中，class、interface、Annotation、enum同属一类为ElementType.Type，并且从官方注解来看，interface是包含@interface的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></div><div class=\"line\">TYPE,</div></pre></td></tr></table></figure>\n<ul>\n<li>对于：int value();</li>\n</ul>\n<p>返回值表示这个注解里可以存放什么类型值。比如我们是这样使用的<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div></pre></td></tr></table></figure></p>\n<p>R.layout.activity_home 实质是一个int型id，如果这样用就会报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(“string”)</div></pre></td></tr></table></figure>\n<p>关于注解的具体语法，可以看这篇文章<a href=\"https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/\">Android编译时注解框架-语法讲解</a></p>\n<h4 id=\"注解解析\"><a href=\"#注解解析\" class=\"headerlink\" title=\"注解解析\"></a>注解解析</h4><p>注解申明好了，但具体是怎么识别这个注解并使用的呢？<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activity_home)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注解的解析就在BaseActivity中。我们看一下BaseActivity代码<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    <span class=\"comment\">//注解解析</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Class c = <span class=\"keyword\">this</span>.getClass(); c != Context.class; c = c.getSuperclass()) &#123;</div><div class=\"line\">        ContentView annotation = (ContentView) c.getAnnotation(ContentView.class);</div><div class=\"line\">        <span class=\"keyword\">if</span> (annotation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.setContentView(annotation.value());</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>解释下上面的代码：</p>\n<ul>\n<li>第一步：遍历所有的子类</li>\n<li>第二步：找到修饰了注解ContentView的类</li>\n<li>第三步：获取ContentView的属性值。</li>\n<li>第四步：为Activity设置布局。</li>\n</ul>\n<blockquote>\n<p> 总结：要定义运行时注解，只需要在声明注解时指定@Retention(RetentionPolicy.RUNTIME)即可，运行时注解一般和反射机制配合使用，相比编译时注解性能比较低，但实现比较简单，会提高一定的开发效率。</p>\n</blockquote>\n<h3 id=\"编译时注解\"><a href=\"#编译时注解\" class=\"headerlink\" title=\"编译时注解\"></a>编译时注解</h3><p>编译时注解能够自动处理Java源文件并生成更多的源码、配置文件、脚本或其他可能想要生成的东西。这些操作是通过<strong>注解处理器</strong>完成的。Java通过在编译期间调用 javac -processor命令可以调起注解处理器，它能够实现编译时注解的功能，从而提高函数库的性能。</p>\n<h4 id=\"定义注解处理器\"><a href=\"#定义注解处理器\" class=\"headerlink\" title=\"定义注解处理器\"></a>定义注解处理器</h4><p>自定义编译时注解后，需要编写Processor类实现注解处理器，处理自定义注解。Processor继承自AbstractProcessor类并实现process方法，同时需要指定注解处理器能够处理的注解类型以及支持的Java版本，语句如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonAnnotationProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment env)</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">super</span>.init(env);</div><div class=\"line\">     <span class=\"comment\">//初始化方法，会被注解处理工具调用，并传入ProcessingEnvironment类型参数，</span></div><div class=\"line\">     <span class=\"comment\">//这个参数包含了很多工具类，如Elements、Types、Filer等</span></div><div class=\"line\">     elementUtils = env.getElementUtils();</div><div class=\"line\">     typeUtils = env.getTypeUtils();</div><div class=\"line\">     filer = env.getFiler();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定这个注解处理器能够处理的注解类型，返回一个支持的类型字符串合集</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getSupportedAnnotationTypes();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title\">getSupportedSourceVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定注解处理器使用的Java版本</span></div><div class=\"line\">    <span class=\"keyword\">return</span> SourceVersion.latestSupported();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//在这个方法中实现注解处理器的具体业务逻辑，根据输入参数roundEnv可以得到包含特定注解的被注解元素</span></div><div class=\"line\">      <span class=\"comment\">//下面代码是Butterknife中这个方法的源码</span></div><div class=\"line\">      Map&lt;TypeElement, BindingClass&gt; targetClassMap = findAndParseTargets(env);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;TypeElement, BindingClass&gt; entry : targetClassMap.entrySet()) &#123;</div><div class=\"line\">        TypeElement typeElement = entry.getKey();</div><div class=\"line\">        BindingClass bindingClass = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);</div><div class=\"line\">          Writer writer = jfo.openWriter();</div><div class=\"line\">          writer.write(bindingClass.brewJava());</div><div class=\"line\">          writer.flush();</div><div class=\"line\">          writer.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">          error(typeElement, <span class=\"string\">\"Unable to write view binder for type %s: %s\"</span>, typeElement,</div><div class=\"line\">              e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//返回值 表示这组 annotations 是否被这个 Processor 接受，</span></div><div class=\"line\">      <span class=\"comment\">//如果接受（true）后续子的 pocessor 不会再对这个 Annotations 进行处理</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Butterknife源码：RoundEnvironment表示当前或是之前的运行环境，可以通过该对象查找找到相应的注解。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;TypeElement, BindingClass&gt; <span class=\"title\">findAndParseTargets</span><span class=\"params\">(RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingClass&gt; targetClassMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;TypeElement, BindingClass&gt;();</div><div class=\"line\">    Set&lt;String&gt; erasedTargetNames = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each @Bind element.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Element element : env.getElementsAnnotatedWith(Bind.class)) &#123;</div><div class=\"line\">      <span class=\"comment\">//所有被使用的@Bind注解</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        parseBind(element, targetClassMap, erasedTargetNames);</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logParsingError(element, Bind.class, e);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一个注解处理器，只能产生新的源文件，它不能够修改一个已经存在的源文件。当没有属于该Process处理的注解被使用时，process不会执行。</p>\n</blockquote>\n<p>从Java7 开始，我们也可以使用注解来代替上面的getSupportedAnnotationTypes()和getSupportedSourceVersion()方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">//该注解处理器支持的所有注解全名</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Element类型\"><a href=\"#Element类型\" class=\"headerlink\" title=\"Element类型\"></a>Element类型</h4><p>所有通过注解取得元素都将以Element类型等待处理，也可以理解为Element的子类类型与自定义注解时用到的@Target是有对应关系的。</p>\n<blockquote>\n<p>Element的官方注释：Represents a program element such as a package, class, or method.<br>Each element represents a static, language-level construct (and not, for example, a runtime construct of the virtual machine).</p>\n</blockquote>\n<p>表示一个程序元素，比如包、类或者方法。</p>\n<p>Element的子类有：</p>\n<ul>\n<li><p>ExecutableElement<br>表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。对应@Target(ElementType.METHOD) @Target(ElementType.CONSTRUCTOR)</p>\n</li>\n<li><p>PackageElement<br>表示一个包程序元素。提供对有关包极其成员的信息访问。对应@Target(ElementType.PACKAGE)</p>\n</li>\n<li><p>TypeElement<br>表示一个类或接口程序元素。提供对有关类型极其成员的信息访问。<br>对应@Target(ElementType.TYPE)</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：枚举类型是一种类，而注解类型是一种接口。</p>\n</blockquote>\n<ul>\n<li><p>TypeParameterElement<br>表示一般类、接口、方法或构造方法元素的类型参数。<br>对应@Target(ElementType.PARAMETER)</p>\n</li>\n<li><p>VariableElement<br>表示一个字段、enum常量、方法或构造方法参数、局部变量或异常参数。<br>对应@Target(ElementType.LOCAL_VARIABLE)</p>\n</li>\n</ul>\n<h4 id=\"Processor输出日志\"><a href=\"#Processor输出日志\" class=\"headerlink\" title=\"Processor输出日志\"></a>Processor输出日志</h4><p>虽然是编译时执行Processor,但也是可以输入日志信息用于调试的。Processor日志输出的位置在编译器下方的Messages窗口中。Processor支持最基础的System.out方法。</p>\n<p>同样Processor也有自己的Log输出工具: Messager。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//同样是Butterknife源码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(Element element, String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      message = String.format(message, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message, element);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注册注解处理器\"><a href=\"#注册注解处理器\" class=\"headerlink\" title=\"注册注解处理器\"></a>注册注解处理器</h3><p>为了让javac -processor能够对定义好的注解处理进行处理，我们需要将注解处理器打包到一个jar文件中，同时，需要在jar文件中增加一个名为<strong>javax.annotation.processing.processor</strong>的文件来指明jar文件中有哪些注解处理器，这个文件最终目录在jar文件根目录的META-INF/service目录中，jar文件解压后的目录结构如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/processor_jar.png\" alt=\"图片来自http://blog.csdn.net/lmj623565791/article/details/43452969\"></p>\n<p>javax.annotation.processing.Processor文件的内容是注解处理器全路径名，如果存在多个注解处理器，以换行进行分隔，代码看图片</p>\n<p>源文件的目录是，我们需要在src/main/java同级目录中新建一个名为resources的目录，将META-INF/services/javax.annotation.processing.Processor文件放进去就行</p>\n<blockquote>\n<p>注意，注解处理器所在的Android Studio工程必须是Java Library类型，而不应该是Android Library类型。因为Android Library的JDK中不包含某些javax包里面的类。</p>\n</blockquote>\n<p>手动实现上面注册过程很繁琐，因此Google开源了一个名为AutoService的函数库，使用这个库后，只需在自定义Processor时使用@AutoService注解标记即可完成上面注册步骤。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"meta\">@SupportedAnnotationTypes</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">//该注解处理器支持的所有注解全名</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"meta\">@SupportedSourceVersion</span>(SourceVersion.RELEASE_7)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContentViewProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"android-apt插件\"><a href=\"#android-apt插件\" class=\"headerlink\" title=\"android-apt插件\"></a>android-apt插件</h3><p>注解处理器所在的jar文件只能在编译期间起作用，到应用运行时不会用到，因此，在build.gradle中引入依赖时应该以provided方式，而不是compile方式引入。</p>\n<p>当然，我们可以使用android-apt插件的方式。</p>\n<p>APT(Annotation Processing Tool)是一种处理注释的工具,它对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。<br>注解处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由注解处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。</p>\n<p>android-apt是在Android Studio中使用注解处理器的一个辅助插件，它的作用主要如下：</p>\n<ul>\n<li>只在编译期间引入注解处理器所在的函数库作为依赖，不会打包到最终生成的APK中。</li>\n<li>为注解处理器生成的源码设置好正确的路径，以便Android Studio能够正常找到，避免报错。</li>\n</ul>\n<h4 id=\"Project项目中使用apt\"><a href=\"#Project项目中使用apt\" class=\"headerlink\" title=\"Project项目中使用apt\"></a>Project项目中使用apt</h4><p>使用该插件，添加如下到你的构建脚本中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置在Project下的build.gradle中</span></div><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">      mavenCentral()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">//替换成最新android-apt版本</span></div><div class=\"line\">        classpath <span class=\"string\">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">apply plugin: <span class=\"string\">'com.neenbedankt.android-apt'</span></div></pre></td></tr></table></figure></p>\n<p>接着以apt的方式引入注解处理器函数库作为依赖<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">   apt<span class=\"string\">'com.bluelinelabs:logansquare-compiler:1.3.6'</span></div><div class=\"line\">   compile <span class=\"string\">'com.bluelinelabs:logansquare:1.3.6'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/bluelinelabs/LoganSquare\">LoganSquare</a>是一个实现了编译时注解以提高性能的JSON解析函数库。上面的compiler库就是LoganSquare的注解处理器。</p>\n<h4 id=\"在Module中使用apt\"><a href=\"#在Module中使用apt\" class=\"headerlink\" title=\"在Module中使用apt\"></a>在Module中使用apt</h4><p>在Module中build.gradle的配置</p>\n<p>通常在使用的时候，使用apt声明注解用到的库文件。项目依赖可能分为多个部分。例如Dagger有两个组件Dagger-compiler和dagger。dagger-commpiler仅用于编译时，运行时必需使用dagger。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置到Module下的build.gradle中</span></div><div class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></div><div class=\"line\">apply plugin: <span class=\"string\">'com.neenbedankt.android-apt'</span></div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\"> apt <span class=\"string\">'com.squareup.dagger:dagger-compiler:1.1.0'</span></div><div class=\"line\"> compile <span class=\"string\">'com.squareup.dagger:dagger:1.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>provided vs apt使用注解处理器的不同？<br>  provided 将会导入注解处理器的classes和它的依赖到IDE的类路径下。这意味着你可以附带的引入并使用这些classes。例如，当注解处理器使用Guava，你可能错误的import其相关代码到你的Android 代码中。当运行时将导致crash。<br>  provided也可以用在重复引用的库上，避免依赖重复的资源。<br>  而使用apt，注解处理器的classes将不会添加到你当前的类路径下，仅仅用于注解处理过程。并且会把所有注解处理器生成的source放在IDE的类路径下，方便Android Studio引用。</p>\n</blockquote>\n<p>越来越多第三方库使用apt技术，如DBflow、Dagger2、ButterKnife、ActivityRouter、AptPreferences。在编译时根据Annotation生成了相关的代码，非常高大上但是也非常简单的技术，可以给开发带来了很大的便利。</p>\n<h3 id=\"APT处理annotation的流程\"><a href=\"#APT处理annotation的流程\" class=\"headerlink\" title=\"APT处理annotation的流程\"></a>APT处理annotation的流程</h3><p><strong>注解处理器（AbstractProcess）+代码处理（javaPoet）+处理器注册（AutoService）+apt</strong></p>\n<p>具体流程：</p>\n<ul>\n<li>1.定义注解（如@inject）</li>\n<li>2.定义注解处理器</li>\n<li>3.在处理器里面完成处理方式，通常是生成Java代码。</li>\n<li>4.注册处理器</li>\n<li>5.利用APT完成如下图的工作内容。</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/apt_processor.png\" alt=\"图片来自http://blog.csdn.net/xx326664162/article/details/68490059\"></p>\n<h3 id=\"annotationProcessor介绍\"><a href=\"#annotationProcessor介绍\" class=\"headerlink\" title=\"annotationProcessor介绍\"></a>annotationProcessor介绍</h3><p>annotationProcessor是APT工具中的一种，他是google开发的内置框架，不需要引入，可以直接在build.gradle文件中使用，<br>ButterKnife就是使用annotationProcessor处理注解，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">     <span class=\"function\">annotationProcessor <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">':xx'</span>)</span></div><div class=\"line\">     annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>apt vs annotationProcessor两者有何不同？<br>  android-apt是由一位开发者自己开发的apt框架，源代码托管在<a href=\"https://bitbucket.org/hvisser/android-apt\">这里</a>，随着Android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此android-apt 作者在官网发表声明最新的Android Gradle插件现在已经支持annotationProcessor，并警告和或阻止android-apt ，并推荐大家使用 Android 官方插件annotationProcessor。<br>  最近Android N的发布，android 迎来了Java 8，要想使用Java 8的话必须使用Jack编译，android-apt只支持javac编译而annotationProcessor既支持javac同时也支持jack编译。</p>\n</blockquote>\n<p>想用annotationProcessor替代android-apt。删除和替换相应部分即可，具体可以参考<a href=\"http://www.cnblogs.com/whoislcj/p/6148410.html\">这篇文章</a></p>\n<p>文章参考：</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/43452969\">Android 打造编译时注解解析框架 这只是一个开始</a><br><a href=\"https://joyrun.github.io/2016/07/19/AptHelloWorld/\">Android APT（编译时代码生成）最佳实践</a><br><a href=\"https://lizhaoxuan.github.io/2016/07/17/apt-wathapt/\">Android编译时注解框架系列1-什么是编译时注解</a><br><a href=\"http://blog.csdn.net/xx326664162/article/details/68490059\">你必须知道的APT、annotationProcessor、android-apt、Provided、自定义注解</a><br><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01MPY3VNG/ref=sr_1_1?ie=UTF8&amp;qid=1491812168&amp;sr=8-1\">《Android高级进阶》一书——注解在Android中的应用</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/04/10/Annotation-Android-usage/\">http://agehua.github.io/2017/04/10/Annotation-Android-usage/</a></p>"},{"layout":"post","title":"Android架构师积累","keywords":"EIT, Object-oriented, Framework","banner":"http://obxk8w81b.bkt.clouddn.com/Beach%20at%20Scheveningen%20in%20Calm%20Weather.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Beach%20at%20Scheveningen%20in%20Calm%20Weather.jpg","toc":true,"_content":"\n## Android架构师积累 ——By 高焕堂\n“-Oriented”的涵意\n◎ ”-Oriented”意味着一种信仰 。\n◎ ”Object-oriented”相信任何软件都是\n由对象所构成的，而且Nothing else 。\n\n\n”-Driven”的涵意; 例如:Model-driven、Use Case-driven\n-- 其实”-driven”是”引导”，而不是大家常说的”驱动”。\n-- 就向北极星引导我们，指出方向而已。也像汽车司机(Driver)只是引导汽车方向，并没有去驱动汽车;而是引擎才是驱动汽车。\n\n“-Centered”的涵意; 例如:Architecture-centered、 Architecture-centeric\n--一切软件开发的活动都围绕着架构，就像盛诞节的糖果和礼物都挂在圣诞树上一样。\n\n\n### 卡榫函数\n• 所谓「卡榫(Hook)」，就是用来接合两个东西的接口。如果两个东西于不同时间出现，则一方会预留虚空，给予另一边于未来时刻能以实体来填补该空间，两者虚实相依，就密合起来了。设计优良的卡榫，可以让实体易于新陈代谢、抽换自如(Plug and Play, 俗称PnP)。\n<!--more-->\n\n• 变与不变的分离(Separate code that changes from the code that doesn’t)是设计卡榫(Hook)函数及应用框架之基本原则和手艺。\n• 分离出变(Variant)与不变(Invariant)部份之后，就可以将不变部份写在父类别(Super- class)里，而变的部份就写在子类别 (Subclass)里。\n\n在Java里，使用抽象(abstract)函数或可覆写(overridable)函数来实现卡榫函数。\n\n### IoC机制与Default函数\n\n#### 卡榫函数实现IoC机制\n• 控制反转(IoC: Inversion of Control)\n• IoC机制源自于OO语言(如C++等)的类别 继承体系，例如C++语言中，基类的函数可以主动调用子类的函数，这就是典型的IoC机制\n• 基类与子类之间，主控权是在基类手上， 透过Hook函数来调用子类\n• 通常基类是撰写在先，而子类则撰写在后， 这种前辈拥有主导权，进而「控制」后辈 之情形，就通称为「控制反转」。\n\n#### 默认(Default)行为\n• 基类的重要功能:提供默认(预设)行为\n• 基类可事先定义许多「默认」(Default)函数。这些默认函数可让子类来继承(或调用)之。\n\n~~~ Java\ninterface IShape {\n  void template_paint(Graphics gr);\n} // 一般接口\n~~~\n\n~~~ Java\n// Shape.java\nimport java.awt.*;\npublic abstract class Shape implements IShape {\n  public void template_paint(Graphics gr){ //默认行为\n    invariant_paint(gr); //画背景\n    hook_paint(gr); //画前景\n  }\n  private void invariant_paint(Graphics gr){\n    gr.setColor(Color.black); gr.fillRect(10,30, 200,100);\n  }\n\n  abstract protected void hook_paint(Graphics gr);\n}\n~~~\n\n~~~ Java\n// Bird.java\nimport java.awt.*;\npublic class Bird extends Shape {\n  private void hook_paint(Graphics gr){ //控制反转\n    gr.setColor(Color.cyan);\n    gr.drawArc(30,80,90,110,40,100);\n    gr.drawArc(88,93,90,100,40,80);\n    gr.setColor(Color.white);\n    gr.drawArc(30,55,90,150,35,75);\n    gr.drawArc(90,80,90,90,40,80);\n  }\n}  \n~~~\n\n在Android中，子类Activity继承父类Activity，需要重写onCreate()方法，onCreate()方法就是基类主动调用，这也是IOC机制\n\n## 认识EIT造形\n\n> 有了架构设计造形的<简单性>，人们就很容易理解软件的复杂关系，进而提升了掌握软件系统复杂多变的能力，唯有熟谙此道，才能创造架构和产品的<未来性>。\n\n高焕堂老师提出简单的EIT软件造形；则让人们能理解Android多层框架体系里的复杂关系\n\n---\n\nEIT造形是一种基本的结构(Structure)，一种概念(Concept)；我们称它为”EIT造形(Form)”。\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/EIT-form.png)\n\n\n- 强龙做&lt;E&I&gt;，将&lt;T&gt;外包给地头蛇。\n- 强龙掌控&lt;E&I&gt;，外包就不会失控。\n\n所以EIT造形支持当今主流的外包模式。\n\n**题目演练：**\n由<E>提供一个值N，由&lt;T&gt;通过不同的算法，如1+2+3+ ... + N或1+2^2+ ... + N^2进行计算，最后将计算结果传递给&lt;E&gt;。\n\n> 现在可以试试先想想接口&lt;I&gt;设计:\n1.&lt;T&gt;必须有个抽象函数，被&lt;T&gt;反向调用(IoC)到&lt;T&gt;。在调用该函数时，顺便把&lt;E&gt;里的N值传递下去给&lt;T&gt;。\n2.由&lt;T&gt;进行计算工作，然后将计算结果传回给&lt;E&gt;。\n3.不同的算法就对应不同的&lt;T&gt;类\n\n\n代码实现如下：\n~~~ Java\n//Counter.java，这就对应接口<I>\npublic abstract class Counter {\n  public int run(){\n      int N = getCount();\n      return onCal(N);\n  }\n  public int getCount() { return 6; }\n  protected abstract int onCal(int n);\n}\n~~~\n\n~~~ Java\n//myCounter.java，是<T>类的一种算法\npublic class myCounter extends Counter{\n\n  @Override\n  protected int onCal(int n) {\n    int sum = 0;\n    for(int i=1; i<=n; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n}\n~~~\n\n~~~ Java\n//在<E>类中，调用方式如下\ncounter = new myCounter();\nint sum = counter.run();\n~~~\n\n框架(或架构)设计的关键任务就是接口(Interface)设计，这项接口是框架&lt;E&gt;与插件&lt;T&gt;之间的接口，这就是所谓的：框架API。\n\n## IPC\n\nIPC(Inter-Process Communication)通信， 是跨越两个不同进程(Process)之通信\n\n### IPC通信的效率\n- 当我们启动某一支应用程序(App)时， Android系统里的Zygote服务孵化(Fork)一个新进程(Process)给它，然后将它(该App)加载到这个新诞生的进程里。\n- 基于Linux的安全限制，以及进程的基本特性(例如，不同进程的地址空间是独立的)，如果两个类(或其对象)在同一个进程里执行时，两者沟通方便也快速 。\n- 但是，当它们分别在不同的进程里执行时，两者沟通就属于IPC跨进程沟通了，不如前者方便，也慢些\n\n- 一个进程是一个独立的执行空间，不会被正在其它进程里的程序所侵犯。这种保护方法是Android的重要安全机制。于是，得先认识进程的内涵，才能进一步了解跨进 程IPC机制。\n- 在Android的进程里，有一个虚拟机(Virtual Machine，简称VM)的对象，可执行Java代码，也引导JNI本地程序的执行，实现Java与C/C++之间的沟通。如下图:\n\n![每一进程有:一个VM对象、主线程、MQ和Looper](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/process-ipc-structure.png)\n\n> 不同进程的地址空间是独立的\n\n每一个进程在诞生时，都会诞生一个主线程(Main Thread)，以及诞生一个Looper类的对象和一个MQ(Message Queue)数据结构。每当主线程作完事情，就会去执行Looper类。\n\n主线程最主要的工作就是处理UI画面的事件(Event)，每当UI事件发生时，Android框架会丢信息(Message)到MQ里。主线程看到MQ有新的信息时，就取出信息，然后依据信息内容而去执行特定的函数。执行完毕，就再继续执行Looper类，不断地观察MQ的动态。\n\n### IPC的IBinder接口 -- 定义与实现\n大家都知道，当两个类都在同一个进程里执行时，两者之间的沟通，只要采取一般的函数调用(Function Call)就行了，既快速又方便。一旦两个类分别在不同的进程里执行时，两者之间的沟通，就不能采取一般的函数调用途径了。只好采取IPC沟通途径。\n\nAndroid框架的IPC沟通仰赖单一的IBinder接口。此时Client端调用IBinder接口的transact()函数，透过IPC机制而调用到远方(Remote)的onTransact()函数。\n\nJava层的IBinder 接口是定义于IBinder.java代码文档里\n~~~ Java\n// IBinder.java\n// .......\npublic interface IBinder {\n// ........\npublic boolean transact(int code, Parcel data, Parcel reply, int flags)\n  throws RemoteException; // ...........\n}\n~~~\n\nIBinder接口定义了一些函数，可以让Client程序可以进行跨进程的调用(当然也能支持同进程的短程调用)。其中，最主要的一个函数就是: transact()函数\n\n在Android的框架里，由Binder基类实现IBinder接口。\n\n![java层的Binder基类定义](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ibinder-binder.png)\n\nBinder基类的很重要目的是支持跨进程调 用Service，也就是让远程的Client可以跨 进程调用某个Service。Binder基类定义于Binder.java文件里:\n~~~ Java\n// Binder.java\n// .......\npublic class Binder implements IBinder {\n  // ..........\n  private int mObject;\n  public Binder() {\n    init();\n  // ...........\n  }\n  //用来实现IBinder的transact()函数接口\n  public final boolean transact(int code, Parcel data, Parcel reply, int flags)\n    throws RemoteException {\n    // ................\n    boolean r = onTransact(code, data, reply, flags); return r;\n  }\n\n  //其角色与transact()函数是相同的，只是这是用来让C/C++本地程序来调用的。\n  private boolean execTransact(int code, int dataObj, int replyObj, int flags) {\n    Parcel data = Parcel.obtain(dataObj); Parcel reply = Parcel.obtain(replyObj);\n    boolean res;\n    res = onTransact(code, data, reply, flags);\n    // ............\n    return res;\n  }\n\n  //这是一个抽象函数，让应用子类来覆写(Override)的.\n  //上述的transact()和 execTransact()两者都是调用onTransact()函数来实现反向调用(IoC, Inversion of Control)的。\n  protected boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n    throws RemoteException {\n  }\n\n  //这是一个本地(Native)函数，让JNI模块来实现这个函数.\n  //Binder()构造函数会调用这个init()本地函数\n  private native final void init();\n}\n~~~\n\nBinder就是EIT造形里的&lt;E&gt;\n\n这个IBinder接口是Binder(即&lt;E&gt;)提供给Client的接口，简称为&lt;CI&gt;\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT.png)\n\nonTransact()就是EIT造形里的&lt;I&gt;，是支持<基类/子类>之间IoC调用的接口\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT-onTransact.png)\n\n\n示例：有一个Activity类别，它想跨进程去调用MediaPlayer播放引擎，以便播放MP3音乐.\n\n类结构图如下：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media.png)\n\n在上图里，从myActivity到IBinder接口，画上了虚线箭头，表示那是抽象概念的。实际上，myActivity并没有直接调用Java层的IBinder接口，而是绕到底层C/C++和Binder驱动而间接调用到Binder基类的execTransact()函数，转而调用myBinder的onTransact()函数。如下图:\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media-detail.png)\n\n### IPC通信的三步骤\n还是用上面的MediaPlayer例子，其IPC通信的三个步骤是:\n- **Step-1.** Activity使用startService()函數來启动Service。\n- **Step-2.** Activity调用bindService()来绑定Service。亦即，Activity建立与Service之间的连结(Connection)。\n- **Step-3.** Activity调用IBinder接口的transact() 函数，透过底层Binder Driver驱动而间接调用到Binder基类的execTransact()函数， 转而调用 myBinder的onTransact()函数。\n","source":"_posts/2017-05-11-Object-Oriented.md","raw":"---\nlayout: post\ntitle:  Android架构师积累\ncategory: accumulation\ntags:\n  - Android Framework\n  - EIT\n  - Object-oriented\nkeywords: EIT, Object-oriented, Framework\nbanner: http://obxk8w81b.bkt.clouddn.com/Beach%20at%20Scheveningen%20in%20Calm%20Weather.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Beach%20at%20Scheveningen%20in%20Calm%20Weather.jpg\ntoc: true\n---\n\n## Android架构师积累 ——By 高焕堂\n“-Oriented”的涵意\n◎ ”-Oriented”意味着一种信仰 。\n◎ ”Object-oriented”相信任何软件都是\n由对象所构成的，而且Nothing else 。\n\n\n”-Driven”的涵意; 例如:Model-driven、Use Case-driven\n-- 其实”-driven”是”引导”，而不是大家常说的”驱动”。\n-- 就向北极星引导我们，指出方向而已。也像汽车司机(Driver)只是引导汽车方向，并没有去驱动汽车;而是引擎才是驱动汽车。\n\n“-Centered”的涵意; 例如:Architecture-centered、 Architecture-centeric\n--一切软件开发的活动都围绕着架构，就像盛诞节的糖果和礼物都挂在圣诞树上一样。\n\n\n### 卡榫函数\n• 所谓「卡榫(Hook)」，就是用来接合两个东西的接口。如果两个东西于不同时间出现，则一方会预留虚空，给予另一边于未来时刻能以实体来填补该空间，两者虚实相依，就密合起来了。设计优良的卡榫，可以让实体易于新陈代谢、抽换自如(Plug and Play, 俗称PnP)。\n<!--more-->\n\n• 变与不变的分离(Separate code that changes from the code that doesn’t)是设计卡榫(Hook)函数及应用框架之基本原则和手艺。\n• 分离出变(Variant)与不变(Invariant)部份之后，就可以将不变部份写在父类别(Super- class)里，而变的部份就写在子类别 (Subclass)里。\n\n在Java里，使用抽象(abstract)函数或可覆写(overridable)函数来实现卡榫函数。\n\n### IoC机制与Default函数\n\n#### 卡榫函数实现IoC机制\n• 控制反转(IoC: Inversion of Control)\n• IoC机制源自于OO语言(如C++等)的类别 继承体系，例如C++语言中，基类的函数可以主动调用子类的函数，这就是典型的IoC机制\n• 基类与子类之间，主控权是在基类手上， 透过Hook函数来调用子类\n• 通常基类是撰写在先，而子类则撰写在后， 这种前辈拥有主导权，进而「控制」后辈 之情形，就通称为「控制反转」。\n\n#### 默认(Default)行为\n• 基类的重要功能:提供默认(预设)行为\n• 基类可事先定义许多「默认」(Default)函数。这些默认函数可让子类来继承(或调用)之。\n\n~~~ Java\ninterface IShape {\n  void template_paint(Graphics gr);\n} // 一般接口\n~~~\n\n~~~ Java\n// Shape.java\nimport java.awt.*;\npublic abstract class Shape implements IShape {\n  public void template_paint(Graphics gr){ //默认行为\n    invariant_paint(gr); //画背景\n    hook_paint(gr); //画前景\n  }\n  private void invariant_paint(Graphics gr){\n    gr.setColor(Color.black); gr.fillRect(10,30, 200,100);\n  }\n\n  abstract protected void hook_paint(Graphics gr);\n}\n~~~\n\n~~~ Java\n// Bird.java\nimport java.awt.*;\npublic class Bird extends Shape {\n  private void hook_paint(Graphics gr){ //控制反转\n    gr.setColor(Color.cyan);\n    gr.drawArc(30,80,90,110,40,100);\n    gr.drawArc(88,93,90,100,40,80);\n    gr.setColor(Color.white);\n    gr.drawArc(30,55,90,150,35,75);\n    gr.drawArc(90,80,90,90,40,80);\n  }\n}  \n~~~\n\n在Android中，子类Activity继承父类Activity，需要重写onCreate()方法，onCreate()方法就是基类主动调用，这也是IOC机制\n\n## 认识EIT造形\n\n> 有了架构设计造形的<简单性>，人们就很容易理解软件的复杂关系，进而提升了掌握软件系统复杂多变的能力，唯有熟谙此道，才能创造架构和产品的<未来性>。\n\n高焕堂老师提出简单的EIT软件造形；则让人们能理解Android多层框架体系里的复杂关系\n\n---\n\nEIT造形是一种基本的结构(Structure)，一种概念(Concept)；我们称它为”EIT造形(Form)”。\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/EIT-form.png)\n\n\n- 强龙做&lt;E&I&gt;，将&lt;T&gt;外包给地头蛇。\n- 强龙掌控&lt;E&I&gt;，外包就不会失控。\n\n所以EIT造形支持当今主流的外包模式。\n\n**题目演练：**\n由<E>提供一个值N，由&lt;T&gt;通过不同的算法，如1+2+3+ ... + N或1+2^2+ ... + N^2进行计算，最后将计算结果传递给&lt;E&gt;。\n\n> 现在可以试试先想想接口&lt;I&gt;设计:\n1.&lt;T&gt;必须有个抽象函数，被&lt;T&gt;反向调用(IoC)到&lt;T&gt;。在调用该函数时，顺便把&lt;E&gt;里的N值传递下去给&lt;T&gt;。\n2.由&lt;T&gt;进行计算工作，然后将计算结果传回给&lt;E&gt;。\n3.不同的算法就对应不同的&lt;T&gt;类\n\n\n代码实现如下：\n~~~ Java\n//Counter.java，这就对应接口<I>\npublic abstract class Counter {\n  public int run(){\n      int N = getCount();\n      return onCal(N);\n  }\n  public int getCount() { return 6; }\n  protected abstract int onCal(int n);\n}\n~~~\n\n~~~ Java\n//myCounter.java，是<T>类的一种算法\npublic class myCounter extends Counter{\n\n  @Override\n  protected int onCal(int n) {\n    int sum = 0;\n    for(int i=1; i<=n; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n}\n~~~\n\n~~~ Java\n//在<E>类中，调用方式如下\ncounter = new myCounter();\nint sum = counter.run();\n~~~\n\n框架(或架构)设计的关键任务就是接口(Interface)设计，这项接口是框架&lt;E&gt;与插件&lt;T&gt;之间的接口，这就是所谓的：框架API。\n\n## IPC\n\nIPC(Inter-Process Communication)通信， 是跨越两个不同进程(Process)之通信\n\n### IPC通信的效率\n- 当我们启动某一支应用程序(App)时， Android系统里的Zygote服务孵化(Fork)一个新进程(Process)给它，然后将它(该App)加载到这个新诞生的进程里。\n- 基于Linux的安全限制，以及进程的基本特性(例如，不同进程的地址空间是独立的)，如果两个类(或其对象)在同一个进程里执行时，两者沟通方便也快速 。\n- 但是，当它们分别在不同的进程里执行时，两者沟通就属于IPC跨进程沟通了，不如前者方便，也慢些\n\n- 一个进程是一个独立的执行空间，不会被正在其它进程里的程序所侵犯。这种保护方法是Android的重要安全机制。于是，得先认识进程的内涵，才能进一步了解跨进 程IPC机制。\n- 在Android的进程里，有一个虚拟机(Virtual Machine，简称VM)的对象，可执行Java代码，也引导JNI本地程序的执行，实现Java与C/C++之间的沟通。如下图:\n\n![每一进程有:一个VM对象、主线程、MQ和Looper](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/process-ipc-structure.png)\n\n> 不同进程的地址空间是独立的\n\n每一个进程在诞生时，都会诞生一个主线程(Main Thread)，以及诞生一个Looper类的对象和一个MQ(Message Queue)数据结构。每当主线程作完事情，就会去执行Looper类。\n\n主线程最主要的工作就是处理UI画面的事件(Event)，每当UI事件发生时，Android框架会丢信息(Message)到MQ里。主线程看到MQ有新的信息时，就取出信息，然后依据信息内容而去执行特定的函数。执行完毕，就再继续执行Looper类，不断地观察MQ的动态。\n\n### IPC的IBinder接口 -- 定义与实现\n大家都知道，当两个类都在同一个进程里执行时，两者之间的沟通，只要采取一般的函数调用(Function Call)就行了，既快速又方便。一旦两个类分别在不同的进程里执行时，两者之间的沟通，就不能采取一般的函数调用途径了。只好采取IPC沟通途径。\n\nAndroid框架的IPC沟通仰赖单一的IBinder接口。此时Client端调用IBinder接口的transact()函数，透过IPC机制而调用到远方(Remote)的onTransact()函数。\n\nJava层的IBinder 接口是定义于IBinder.java代码文档里\n~~~ Java\n// IBinder.java\n// .......\npublic interface IBinder {\n// ........\npublic boolean transact(int code, Parcel data, Parcel reply, int flags)\n  throws RemoteException; // ...........\n}\n~~~\n\nIBinder接口定义了一些函数，可以让Client程序可以进行跨进程的调用(当然也能支持同进程的短程调用)。其中，最主要的一个函数就是: transact()函数\n\n在Android的框架里，由Binder基类实现IBinder接口。\n\n![java层的Binder基类定义](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ibinder-binder.png)\n\nBinder基类的很重要目的是支持跨进程调 用Service，也就是让远程的Client可以跨 进程调用某个Service。Binder基类定义于Binder.java文件里:\n~~~ Java\n// Binder.java\n// .......\npublic class Binder implements IBinder {\n  // ..........\n  private int mObject;\n  public Binder() {\n    init();\n  // ...........\n  }\n  //用来实现IBinder的transact()函数接口\n  public final boolean transact(int code, Parcel data, Parcel reply, int flags)\n    throws RemoteException {\n    // ................\n    boolean r = onTransact(code, data, reply, flags); return r;\n  }\n\n  //其角色与transact()函数是相同的，只是这是用来让C/C++本地程序来调用的。\n  private boolean execTransact(int code, int dataObj, int replyObj, int flags) {\n    Parcel data = Parcel.obtain(dataObj); Parcel reply = Parcel.obtain(replyObj);\n    boolean res;\n    res = onTransact(code, data, reply, flags);\n    // ............\n    return res;\n  }\n\n  //这是一个抽象函数，让应用子类来覆写(Override)的.\n  //上述的transact()和 execTransact()两者都是调用onTransact()函数来实现反向调用(IoC, Inversion of Control)的。\n  protected boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n    throws RemoteException {\n  }\n\n  //这是一个本地(Native)函数，让JNI模块来实现这个函数.\n  //Binder()构造函数会调用这个init()本地函数\n  private native final void init();\n}\n~~~\n\nBinder就是EIT造形里的&lt;E&gt;\n\n这个IBinder接口是Binder(即&lt;E&gt;)提供给Client的接口，简称为&lt;CI&gt;\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT.png)\n\nonTransact()就是EIT造形里的&lt;I&gt;，是支持<基类/子类>之间IoC调用的接口\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT-onTransact.png)\n\n\n示例：有一个Activity类别，它想跨进程去调用MediaPlayer播放引擎，以便播放MP3音乐.\n\n类结构图如下：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media.png)\n\n在上图里，从myActivity到IBinder接口，画上了虚线箭头，表示那是抽象概念的。实际上，myActivity并没有直接调用Java层的IBinder接口，而是绕到底层C/C++和Binder驱动而间接调用到Binder基类的execTransact()函数，转而调用myBinder的onTransact()函数。如下图:\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media-detail.png)\n\n### IPC通信的三步骤\n还是用上面的MediaPlayer例子，其IPC通信的三个步骤是:\n- **Step-1.** Activity使用startService()函數來启动Service。\n- **Step-2.** Activity调用bindService()来绑定Service。亦即，Activity建立与Service之间的连结(Connection)。\n- **Step-3.** Activity调用IBinder接口的transact() 函数，透过底层Binder Driver驱动而间接调用到Binder基类的execTransact()函数， 转而调用 myBinder的onTransact()函数。\n","slug":"Object-Oriented","published":1,"date":"2017-05-10T16:00:00.000Z","updated":"2017-11-23T07:15:17.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0q0037d6ykxkej7qv3","content":"<h2 id=\"Android架构师积累-——By-高焕堂\"><a href=\"#Android架构师积累-——By-高焕堂\" class=\"headerlink\" title=\"Android架构师积累 ——By 高焕堂\"></a>Android架构师积累 ——By 高焕堂</h2><p>“-Oriented”的涵意<br>◎ ”-Oriented”意味着一种信仰 。<br>◎ ”Object-oriented”相信任何软件都是<br>由对象所构成的，而且Nothing else 。</p>\n<p>”-Driven”的涵意; 例如:Model-driven、Use Case-driven<br>– 其实”-driven”是”引导”，而不是大家常说的”驱动”。<br>– 就向北极星引导我们，指出方向而已。也像汽车司机(Driver)只是引导汽车方向，并没有去驱动汽车;而是引擎才是驱动汽车。</p>\n<p>“-Centered”的涵意; 例如:Architecture-centered、 Architecture-centeric<br>–一切软件开发的活动都围绕着架构，就像盛诞节的糖果和礼物都挂在圣诞树上一样。</p>\n<h3 id=\"卡榫函数\"><a href=\"#卡榫函数\" class=\"headerlink\" title=\"卡榫函数\"></a>卡榫函数</h3><p>• 所谓「卡榫(Hook)」，就是用来接合两个东西的接口。如果两个东西于不同时间出现，则一方会预留虚空，给予另一边于未来时刻能以实体来填补该空间，两者虚实相依，就密合起来了。设计优良的卡榫，可以让实体易于新陈代谢、抽换自如(Plug and Play, 俗称PnP)。<br><a id=\"more\"></a></p>\n<p>• 变与不变的分离(Separate code that changes from the code that doesn’t)是设计卡榫(Hook)函数及应用框架之基本原则和手艺。<br>• 分离出变(Variant)与不变(Invariant)部份之后，就可以将不变部份写在父类别(Super- class)里，而变的部份就写在子类别 (Subclass)里。</p>\n<p>在Java里，使用抽象(abstract)函数或可覆写(overridable)函数来实现卡榫函数。</p>\n<h3 id=\"IoC机制与Default函数\"><a href=\"#IoC机制与Default函数\" class=\"headerlink\" title=\"IoC机制与Default函数\"></a>IoC机制与Default函数</h3><h4 id=\"卡榫函数实现IoC机制\"><a href=\"#卡榫函数实现IoC机制\" class=\"headerlink\" title=\"卡榫函数实现IoC机制\"></a>卡榫函数实现IoC机制</h4><p>• 控制反转(IoC: Inversion of Control)<br>• IoC机制源自于OO语言(如C++等)的类别 继承体系，例如C++语言中，基类的函数可以主动调用子类的函数，这就是典型的IoC机制<br>• 基类与子类之间，主控权是在基类手上， 透过Hook函数来调用子类<br>• 通常基类是撰写在先，而子类则撰写在后， 这种前辈拥有主导权，进而「控制」后辈 之情形，就通称为「控制反转」。</p>\n<h4 id=\"默认-Default-行为\"><a href=\"#默认-Default-行为\" class=\"headerlink\" title=\"默认(Default)行为\"></a>默认(Default)行为</h4><p>• 基类的重要功能:提供默认(预设)行为<br>• 基类可事先定义许多「默认」(Default)函数。这些默认函数可让子类来继承(或调用)之。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IShape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">template_paint</span><span class=\"params\">(Graphics gr)</span></span>;</div><div class=\"line\">&#125; <span class=\"comment\">// 一般接口</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Shape.java</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> <span class=\"keyword\">implements</span> <span class=\"title\">IShape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">template_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123; <span class=\"comment\">//默认行为</span></div><div class=\"line\">    invariant_paint(gr); <span class=\"comment\">//画背景</span></div><div class=\"line\">    hook_paint(gr); <span class=\"comment\">//画前景</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invariant_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123;</div><div class=\"line\">    gr.setColor(Color.black); gr.fillRect(<span class=\"number\">10</span>,<span class=\"number\">30</span>, <span class=\"number\">200</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">hook_paint</span><span class=\"params\">(Graphics gr)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bird.java</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hook_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123; <span class=\"comment\">//控制反转</span></div><div class=\"line\">    gr.setColor(Color.cyan);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">30</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">110</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">88</span>,<span class=\"number\">93</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>,<span class=\"number\">40</span>,<span class=\"number\">80</span>);</div><div class=\"line\">    gr.setColor(Color.white);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">30</span>,<span class=\"number\">55</span>,<span class=\"number\">90</span>,<span class=\"number\">150</span>,<span class=\"number\">35</span>,<span class=\"number\">75</span>);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">90</span>,<span class=\"number\">40</span>,<span class=\"number\">80</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Android中，子类Activity继承父类Activity，需要重写onCreate()方法，onCreate()方法就是基类主动调用，这也是IOC机制</p>\n<h2 id=\"认识EIT造形\"><a href=\"#认识EIT造形\" class=\"headerlink\" title=\"认识EIT造形\"></a>认识EIT造形</h2><blockquote>\n<p>有了架构设计造形的&lt;简单性&gt;，人们就很容易理解软件的复杂关系，进而提升了掌握软件系统复杂多变的能力，唯有熟谙此道，才能创造架构和产品的&lt;未来性&gt;。</p>\n</blockquote>\n<p>高焕堂老师提出简单的EIT软件造形；则让人们能理解Android多层框架体系里的复杂关系</p>\n<hr>\n<p>EIT造形是一种基本的结构(Structure)，一种概念(Concept)；我们称它为”EIT造形(Form)”。</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/EIT-form.png\" alt=\"\"></p>\n<ul>\n<li>强龙做&lt;E&amp;I&gt;，将&lt;T&gt;外包给地头蛇。</li>\n<li>强龙掌控&lt;E&amp;I&gt;，外包就不会失控。</li>\n</ul>\n<p>所以EIT造形支持当今主流的外包模式。</p>\n<p><strong>题目演练：</strong><br>由<e>提供一个值N，由&lt;T&gt;通过不同的算法，如1+2+3+ … + N或1+2^2+ … + N^2进行计算，最后将计算结果传递给&lt;E&gt;。</e></p>\n<blockquote>\n<p>现在可以试试先想想接口&lt;I&gt;设计:<br>1.&lt;T&gt;必须有个抽象函数，被&lt;T&gt;反向调用(IoC)到&lt;T&gt;。在调用该函数时，顺便把&lt;E&gt;里的N值传递下去给&lt;T&gt;。<br>2.由&lt;T&gt;进行计算工作，然后将计算结果传回给&lt;E&gt;。<br>3.不同的算法就对应不同的&lt;T&gt;类</p>\n</blockquote>\n<p>代码实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Counter.java，这就对应接口&lt;I&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> N = getCount();</div><div class=\"line\">      <span class=\"keyword\">return</span> onCal(N);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">6</span>; &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">onCal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//myCounter.java，是&lt;T&gt;类的一种算法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">onCal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</div><div class=\"line\">      sum += i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在&lt;E&gt;类中，调用方式如下</span></div><div class=\"line\">counter = <span class=\"keyword\">new</span> myCounter();</div><div class=\"line\"><span class=\"keyword\">int</span> sum = counter.run();</div></pre></td></tr></table></figure>\n<p>框架(或架构)设计的关键任务就是接口(Interface)设计，这项接口是框架&lt;E&gt;与插件&lt;T&gt;之间的接口，这就是所谓的：框架API。</p>\n<h2 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h2><p>IPC(Inter-Process Communication)通信， 是跨越两个不同进程(Process)之通信</p>\n<h3 id=\"IPC通信的效率\"><a href=\"#IPC通信的效率\" class=\"headerlink\" title=\"IPC通信的效率\"></a>IPC通信的效率</h3><ul>\n<li>当我们启动某一支应用程序(App)时， Android系统里的Zygote服务孵化(Fork)一个新进程(Process)给它，然后将它(该App)加载到这个新诞生的进程里。</li>\n<li>基于Linux的安全限制，以及进程的基本特性(例如，不同进程的地址空间是独立的)，如果两个类(或其对象)在同一个进程里执行时，两者沟通方便也快速 。</li>\n<li><p>但是，当它们分别在不同的进程里执行时，两者沟通就属于IPC跨进程沟通了，不如前者方便，也慢些</p>\n</li>\n<li><p>一个进程是一个独立的执行空间，不会被正在其它进程里的程序所侵犯。这种保护方法是Android的重要安全机制。于是，得先认识进程的内涵，才能进一步了解跨进 程IPC机制。</p>\n</li>\n<li>在Android的进程里，有一个虚拟机(Virtual Machine，简称VM)的对象，可执行Java代码，也引导JNI本地程序的执行，实现Java与C/C++之间的沟通。如下图:</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/process-ipc-structure.png\" alt=\"每一进程有:一个VM对象、主线程、MQ和Looper\"></p>\n<blockquote>\n<p>不同进程的地址空间是独立的</p>\n</blockquote>\n<p>每一个进程在诞生时，都会诞生一个主线程(Main Thread)，以及诞生一个Looper类的对象和一个MQ(Message Queue)数据结构。每当主线程作完事情，就会去执行Looper类。</p>\n<p>主线程最主要的工作就是处理UI画面的事件(Event)，每当UI事件发生时，Android框架会丢信息(Message)到MQ里。主线程看到MQ有新的信息时，就取出信息，然后依据信息内容而去执行特定的函数。执行完毕，就再继续执行Looper类，不断地观察MQ的动态。</p>\n<h3 id=\"IPC的IBinder接口-–-定义与实现\"><a href=\"#IPC的IBinder接口-–-定义与实现\" class=\"headerlink\" title=\"IPC的IBinder接口 – 定义与实现\"></a>IPC的IBinder接口 – 定义与实现</h3><p>大家都知道，当两个类都在同一个进程里执行时，两者之间的沟通，只要采取一般的函数调用(Function Call)就行了，既快速又方便。一旦两个类分别在不同的进程里执行时，两者之间的沟通，就不能采取一般的函数调用途径了。只好采取IPC沟通途径。</p>\n<p>Android框架的IPC沟通仰赖单一的IBinder接口。此时Client端调用IBinder接口的transact()函数，透过IPC机制而调用到远方(Remote)的onTransact()函数。</p>\n<p>Java层的IBinder 接口是定义于IBinder.java代码文档里<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBinder.java</span></div><div class=\"line\"><span class=\"comment\">// .......</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBinder</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">// ........</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">  <span class=\"keyword\">throws</span> RemoteException; <span class=\"comment\">// ...........</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>IBinder接口定义了一些函数，可以让Client程序可以进行跨进程的调用(当然也能支持同进程的短程调用)。其中，最主要的一个函数就是: transact()函数</p>\n<p>在Android的框架里，由Binder基类实现IBinder接口。</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ibinder-binder.png\" alt=\"java层的Binder基类定义\"></p>\n<p>Binder基类的很重要目的是支持跨进程调 用Service，也就是让远程的Client可以跨 进程调用某个Service。Binder基类定义于Binder.java文件里:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Binder.java</span></div><div class=\"line\"><span class=\"comment\">// .......</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBinder</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ..........</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mObject;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Binder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">  <span class=\"comment\">// ...........</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//用来实现IBinder的transact()函数接口</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">    <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    <span class=\"comment\">// ................</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> r = onTransact(code, data, reply, flags); <span class=\"keyword\">return</span> r;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//其角色与transact()函数是相同的，只是这是用来让C/C++本地程序来调用的。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">execTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, <span class=\"keyword\">int</span> dataObj, <span class=\"keyword\">int</span> replyObj, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">    Parcel data = Parcel.obtain(dataObj); Parcel reply = Parcel.obtain(replyObj);</div><div class=\"line\">    <span class=\"keyword\">boolean</span> res;</div><div class=\"line\">    res = onTransact(code, data, reply, flags);</div><div class=\"line\">    <span class=\"comment\">// ............</span></div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//这是一个抽象函数，让应用子类来覆写(Override)的.</span></div><div class=\"line\">  <span class=\"comment\">//上述的transact()和 execTransact()两者都是调用onTransact()函数来实现反向调用(IoC, Inversion of Control)的。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">    <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//这是一个本地(Native)函数，让JNI模块来实现这个函数.</span></div><div class=\"line\">  <span class=\"comment\">//Binder()构造函数会调用这个init()本地函数</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Binder就是EIT造形里的&lt;E&gt;</p>\n<p>这个IBinder接口是Binder(即&lt;E&gt;)提供给Client的接口，简称为&lt;CI&gt;<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT.png\" alt=\"\"></p>\n<p>onTransact()就是EIT造形里的&lt;I&gt;，是支持&lt;基类/子类&gt;之间IoC调用的接口<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT-onTransact.png\" alt=\"\"></p>\n<p>示例：有一个Activity类别，它想跨进程去调用MediaPlayer播放引擎，以便播放MP3音乐.</p>\n<p>类结构图如下：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media.png\" alt=\"\"></p>\n<p>在上图里，从myActivity到IBinder接口，画上了虚线箭头，表示那是抽象概念的。实际上，myActivity并没有直接调用Java层的IBinder接口，而是绕到底层C/C++和Binder驱动而间接调用到Binder基类的execTransact()函数，转而调用myBinder的onTransact()函数。如下图:</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media-detail.png\" alt=\"\"></p>\n<h3 id=\"IPC通信的三步骤\"><a href=\"#IPC通信的三步骤\" class=\"headerlink\" title=\"IPC通信的三步骤\"></a>IPC通信的三步骤</h3><p>还是用上面的MediaPlayer例子，其IPC通信的三个步骤是:</p>\n<ul>\n<li><strong>Step-1.</strong> Activity使用startService()函數來启动Service。</li>\n<li><strong>Step-2.</strong> Activity调用bindService()来绑定Service。亦即，Activity建立与Service之间的连结(Connection)。</li>\n<li><strong>Step-3.</strong> Activity调用IBinder接口的transact() 函数，透过底层Binder Driver驱动而间接调用到Binder基类的execTransact()函数， 转而调用 myBinder的onTransact()函数。</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/05/11/Object-Oriented/\">http://agehua.github.io/2017/05/11/Object-Oriented/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.795,"time":227700,"words":759},"excerpt":"<h2 id=\"Android架构师积累-——By-高焕堂\"><a href=\"#Android架构师积累-——By-高焕堂\" class=\"headerlink\" title=\"Android架构师积累 ——By 高焕堂\"></a>Android架构师积累 ——By 高焕堂</h2><p>“-Oriented”的涵意<br>◎ ”-Oriented”意味着一种信仰 。<br>◎ ”Object-oriented”相信任何软件都是<br>由对象所构成的，而且Nothing else 。</p>\n<p>”-Driven”的涵意; 例如:Model-driven、Use Case-driven<br>– 其实”-driven”是”引导”，而不是大家常说的”驱动”。<br>– 就向北极星引导我们，指出方向而已。也像汽车司机(Driver)只是引导汽车方向，并没有去驱动汽车;而是引擎才是驱动汽车。</p>\n<p>“-Centered”的涵意; 例如:Architecture-centered、 Architecture-centeric<br>–一切软件开发的活动都围绕着架构，就像盛诞节的糖果和礼物都挂在圣诞树上一样。</p>\n<h3 id=\"卡榫函数\"><a href=\"#卡榫函数\" class=\"headerlink\" title=\"卡榫函数\"></a>卡榫函数</h3><p>• 所谓「卡榫(Hook)」，就是用来接合两个东西的接口。如果两个东西于不同时间出现，则一方会预留虚空，给予另一边于未来时刻能以实体来填补该空间，两者虚实相依，就密合起来了。设计优良的卡榫，可以让实体易于新陈代谢、抽换自如(Plug and Play, 俗称PnP)。<br>","more":"</p>\n<p>• 变与不变的分离(Separate code that changes from the code that doesn’t)是设计卡榫(Hook)函数及应用框架之基本原则和手艺。<br>• 分离出变(Variant)与不变(Invariant)部份之后，就可以将不变部份写在父类别(Super- class)里，而变的部份就写在子类别 (Subclass)里。</p>\n<p>在Java里，使用抽象(abstract)函数或可覆写(overridable)函数来实现卡榫函数。</p>\n<h3 id=\"IoC机制与Default函数\"><a href=\"#IoC机制与Default函数\" class=\"headerlink\" title=\"IoC机制与Default函数\"></a>IoC机制与Default函数</h3><h4 id=\"卡榫函数实现IoC机制\"><a href=\"#卡榫函数实现IoC机制\" class=\"headerlink\" title=\"卡榫函数实现IoC机制\"></a>卡榫函数实现IoC机制</h4><p>• 控制反转(IoC: Inversion of Control)<br>• IoC机制源自于OO语言(如C++等)的类别 继承体系，例如C++语言中，基类的函数可以主动调用子类的函数，这就是典型的IoC机制<br>• 基类与子类之间，主控权是在基类手上， 透过Hook函数来调用子类<br>• 通常基类是撰写在先，而子类则撰写在后， 这种前辈拥有主导权，进而「控制」后辈 之情形，就通称为「控制反转」。</p>\n<h4 id=\"默认-Default-行为\"><a href=\"#默认-Default-行为\" class=\"headerlink\" title=\"默认(Default)行为\"></a>默认(Default)行为</h4><p>• 基类的重要功能:提供默认(预设)行为<br>• 基类可事先定义许多「默认」(Default)函数。这些默认函数可让子类来继承(或调用)之。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IShape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">template_paint</span><span class=\"params\">(Graphics gr)</span></span>;</div><div class=\"line\">&#125; <span class=\"comment\">// 一般接口</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Shape.java</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> <span class=\"keyword\">implements</span> <span class=\"title\">IShape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">template_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123; <span class=\"comment\">//默认行为</span></div><div class=\"line\">    invariant_paint(gr); <span class=\"comment\">//画背景</span></div><div class=\"line\">    hook_paint(gr); <span class=\"comment\">//画前景</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invariant_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123;</div><div class=\"line\">    gr.setColor(Color.black); gr.fillRect(<span class=\"number\">10</span>,<span class=\"number\">30</span>, <span class=\"number\">200</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">hook_paint</span><span class=\"params\">(Graphics gr)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bird.java</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">hook_paint</span><span class=\"params\">(Graphics gr)</span></span>&#123; <span class=\"comment\">//控制反转</span></div><div class=\"line\">    gr.setColor(Color.cyan);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">30</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">110</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">88</span>,<span class=\"number\">93</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>,<span class=\"number\">40</span>,<span class=\"number\">80</span>);</div><div class=\"line\">    gr.setColor(Color.white);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">30</span>,<span class=\"number\">55</span>,<span class=\"number\">90</span>,<span class=\"number\">150</span>,<span class=\"number\">35</span>,<span class=\"number\">75</span>);</div><div class=\"line\">    gr.drawArc(<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">90</span>,<span class=\"number\">40</span>,<span class=\"number\">80</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Android中，子类Activity继承父类Activity，需要重写onCreate()方法，onCreate()方法就是基类主动调用，这也是IOC机制</p>\n<h2 id=\"认识EIT造形\"><a href=\"#认识EIT造形\" class=\"headerlink\" title=\"认识EIT造形\"></a>认识EIT造形</h2><blockquote>\n<p>有了架构设计造形的&lt;简单性&gt;，人们就很容易理解软件的复杂关系，进而提升了掌握软件系统复杂多变的能力，唯有熟谙此道，才能创造架构和产品的&lt;未来性&gt;。</p>\n</blockquote>\n<p>高焕堂老师提出简单的EIT软件造形；则让人们能理解Android多层框架体系里的复杂关系</p>\n<hr>\n<p>EIT造形是一种基本的结构(Structure)，一种概念(Concept)；我们称它为”EIT造形(Form)”。</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/EIT-form.png\" alt=\"\"></p>\n<ul>\n<li>强龙做&lt;E&amp;I&gt;，将&lt;T&gt;外包给地头蛇。</li>\n<li>强龙掌控&lt;E&amp;I&gt;，外包就不会失控。</li>\n</ul>\n<p>所以EIT造形支持当今主流的外包模式。</p>\n<p><strong>题目演练：</strong><br>由<E>提供一个值N，由&lt;T&gt;通过不同的算法，如1+2+3+ … + N或1+2^2+ … + N^2进行计算，最后将计算结果传递给&lt;E&gt;。</p>\n<blockquote>\n<p>现在可以试试先想想接口&lt;I&gt;设计:<br>1.&lt;T&gt;必须有个抽象函数，被&lt;T&gt;反向调用(IoC)到&lt;T&gt;。在调用该函数时，顺便把&lt;E&gt;里的N值传递下去给&lt;T&gt;。<br>2.由&lt;T&gt;进行计算工作，然后将计算结果传回给&lt;E&gt;。<br>3.不同的算法就对应不同的&lt;T&gt;类</p>\n</blockquote>\n<p>代码实现如下：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Counter.java，这就对应接口&lt;I&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> N = getCount();</div><div class=\"line\">      <span class=\"keyword\">return</span> onCal(N);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">6</span>; &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">onCal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//myCounter.java，是&lt;T&gt;类的一种算法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">onCal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</div><div class=\"line\">      sum += i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在&lt;E&gt;类中，调用方式如下</span></div><div class=\"line\">counter = <span class=\"keyword\">new</span> myCounter();</div><div class=\"line\"><span class=\"keyword\">int</span> sum = counter.run();</div></pre></td></tr></table></figure>\n<p>框架(或架构)设计的关键任务就是接口(Interface)设计，这项接口是框架&lt;E&gt;与插件&lt;T&gt;之间的接口，这就是所谓的：框架API。</p>\n<h2 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC\"></a>IPC</h2><p>IPC(Inter-Process Communication)通信， 是跨越两个不同进程(Process)之通信</p>\n<h3 id=\"IPC通信的效率\"><a href=\"#IPC通信的效率\" class=\"headerlink\" title=\"IPC通信的效率\"></a>IPC通信的效率</h3><ul>\n<li>当我们启动某一支应用程序(App)时， Android系统里的Zygote服务孵化(Fork)一个新进程(Process)给它，然后将它(该App)加载到这个新诞生的进程里。</li>\n<li>基于Linux的安全限制，以及进程的基本特性(例如，不同进程的地址空间是独立的)，如果两个类(或其对象)在同一个进程里执行时，两者沟通方便也快速 。</li>\n<li><p>但是，当它们分别在不同的进程里执行时，两者沟通就属于IPC跨进程沟通了，不如前者方便，也慢些</p>\n</li>\n<li><p>一个进程是一个独立的执行空间，不会被正在其它进程里的程序所侵犯。这种保护方法是Android的重要安全机制。于是，得先认识进程的内涵，才能进一步了解跨进 程IPC机制。</p>\n</li>\n<li>在Android的进程里，有一个虚拟机(Virtual Machine，简称VM)的对象，可执行Java代码，也引导JNI本地程序的执行，实现Java与C/C++之间的沟通。如下图:</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/process-ipc-structure.png\" alt=\"每一进程有:一个VM对象、主线程、MQ和Looper\"></p>\n<blockquote>\n<p>不同进程的地址空间是独立的</p>\n</blockquote>\n<p>每一个进程在诞生时，都会诞生一个主线程(Main Thread)，以及诞生一个Looper类的对象和一个MQ(Message Queue)数据结构。每当主线程作完事情，就会去执行Looper类。</p>\n<p>主线程最主要的工作就是处理UI画面的事件(Event)，每当UI事件发生时，Android框架会丢信息(Message)到MQ里。主线程看到MQ有新的信息时，就取出信息，然后依据信息内容而去执行特定的函数。执行完毕，就再继续执行Looper类，不断地观察MQ的动态。</p>\n<h3 id=\"IPC的IBinder接口-–-定义与实现\"><a href=\"#IPC的IBinder接口-–-定义与实现\" class=\"headerlink\" title=\"IPC的IBinder接口 – 定义与实现\"></a>IPC的IBinder接口 – 定义与实现</h3><p>大家都知道，当两个类都在同一个进程里执行时，两者之间的沟通，只要采取一般的函数调用(Function Call)就行了，既快速又方便。一旦两个类分别在不同的进程里执行时，两者之间的沟通，就不能采取一般的函数调用途径了。只好采取IPC沟通途径。</p>\n<p>Android框架的IPC沟通仰赖单一的IBinder接口。此时Client端调用IBinder接口的transact()函数，透过IPC机制而调用到远方(Remote)的onTransact()函数。</p>\n<p>Java层的IBinder 接口是定义于IBinder.java代码文档里<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IBinder.java</span></div><div class=\"line\"><span class=\"comment\">// .......</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBinder</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">// ........</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">  <span class=\"keyword\">throws</span> RemoteException</span>; <span class=\"comment\">// ...........</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>IBinder接口定义了一些函数，可以让Client程序可以进行跨进程的调用(当然也能支持同进程的短程调用)。其中，最主要的一个函数就是: transact()函数</p>\n<p>在Android的框架里，由Binder基类实现IBinder接口。</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ibinder-binder.png\" alt=\"java层的Binder基类定义\"></p>\n<p>Binder基类的很重要目的是支持跨进程调 用Service，也就是让远程的Client可以跨 进程调用某个Service。Binder基类定义于Binder.java文件里:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Binder.java</span></div><div class=\"line\"><span class=\"comment\">// .......</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBinder</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ..........</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mObject;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Binder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    init();</div><div class=\"line\">  <span class=\"comment\">// ...........</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//用来实现IBinder的transact()函数接口</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">    <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ................</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> r = onTransact(code, data, reply, flags); <span class=\"keyword\">return</span> r;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//其角色与transact()函数是相同的，只是这是用来让C/C++本地程序来调用的。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">execTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, <span class=\"keyword\">int</span> dataObj, <span class=\"keyword\">int</span> replyObj, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">    Parcel data = Parcel.obtain(dataObj); Parcel reply = Parcel.obtain(replyObj);</div><div class=\"line\">    <span class=\"keyword\">boolean</span> res;</div><div class=\"line\">    res = onTransact(code, data, reply, flags);</div><div class=\"line\">    <span class=\"comment\">// ............</span></div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//这是一个抽象函数，让应用子类来覆写(Override)的.</span></div><div class=\"line\">  <span class=\"comment\">//上述的transact()和 execTransact()两者都是调用onTransact()函数来实现反向调用(IoC, Inversion of Control)的。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">    <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//这是一个本地(Native)函数，让JNI模块来实现这个函数.</span></div><div class=\"line\">  <span class=\"comment\">//Binder()构造函数会调用这个init()本地函数</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Binder就是EIT造形里的&lt;E&gt;</p>\n<p>这个IBinder接口是Binder(即&lt;E&gt;)提供给Client的接口，简称为&lt;CI&gt;<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT.png\" alt=\"\"></p>\n<p>onTransact()就是EIT造形里的&lt;I&gt;，是支持&lt;基类/子类&gt;之间IoC调用的接口<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-EIT-onTransact.png\" alt=\"\"></p>\n<p>示例：有一个Activity类别，它想跨进程去调用MediaPlayer播放引擎，以便播放MP3音乐.</p>\n<p>类结构图如下：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media.png\" alt=\"\"></p>\n<p>在上图里，从myActivity到IBinder接口，画上了虚线箭头，表示那是抽象概念的。实际上，myActivity并没有直接调用Java层的IBinder接口，而是绕到底层C/C++和Binder驱动而间接调用到Binder基类的execTransact()函数，转而调用myBinder的onTransact()函数。如下图:</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-example-media-detail.png\" alt=\"\"></p>\n<h3 id=\"IPC通信的三步骤\"><a href=\"#IPC通信的三步骤\" class=\"headerlink\" title=\"IPC通信的三步骤\"></a>IPC通信的三步骤</h3><p>还是用上面的MediaPlayer例子，其IPC通信的三个步骤是:</p>\n<ul>\n<li><strong>Step-1.</strong> Activity使用startService()函數來启动Service。</li>\n<li><strong>Step-2.</strong> Activity调用bindService()来绑定Service。亦即，Activity建立与Service之间的连结(Connection)。</li>\n<li><strong>Step-3.</strong> Activity调用IBinder接口的transact() 函数，透过底层Binder Driver驱动而间接调用到Binder基类的execTransact()函数， 转而调用 myBinder的onTransact()函数。</li>\n</ul>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/05/11/Object-Oriented/\">http://agehua.github.io/2017/05/11/Object-Oriented/</a></p>"},{"layout":"post","title":"Android免root实现hook系统服务拦截方法","keywords":"hook, system service, Binder","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg","toc":true,"_content":"\n本文转载自博文：[Android系统篇之—-免root实现Hook系统服务拦截方法](http://blog.csdn.net/jiangwei0910410003/article/details/52523679)，结合最新开源的滴滴插件化方案 [VirtualApk](https://github.com/didi/VirtualAPK) 对hook系统服务进行分析。\n\n360之前开源了一款插件框架 [Droid Plugin](https://github.com/DroidPluginTeam/DroidPlugin)。与滴滴同一天，360又开源了一款插件框架 [RePlugin](https://github.com/Qihoo360/RePlugin)。\n\n有关新闻介绍在这里：https://www.itcodemonkey.com/article/278.html\n                https://www.itcodemonkey.com/article/277.html\n\n关于360两款插件框架有什么不同，可以查看RePlugin里的[readme](https://github.com/Qihoo360/RePlugin/blob/master/README_CN.md)\n\n本文简单结合**VirtualApk**源码来记录实现hook系统服务方法。\n\n### Android免root实现hook系统服务拦截方法\n\n#### Binder机制回顾\n<!--more-->\n在之前一篇文章中介绍了 Android中的Binder机制和系统远程服务调用机制，本文将继续借助上一篇的内容来实现Hook系统服务拦截指定方法的逻辑，了解了上一篇文章之后，知道系统的服务其实都是一个远程Binder对象，而这个对象都是由ServiceManager大管家管理的，用户在使用系统服务的时候，会通过指定服务的Stub方法的asInterface把远程的Binder对象转化成本地化对象即可使用，而在这个过程中，我们也知道因为系统服务是在system_server进程中的，所以这个系统服务使用过程中属于跨进程调用，那么返回的对象其实就是Proxy代理对象。\n\n#### 系统中服务使用流程\n本文主要就是借助这个知识点，通过Hook系统的服务来拦截服务方法，下面我们就通过**系统剪切板服务**案例作为分析\n~~~ Java\n//获取剪切板服务\nClipboardManager cm =(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);\n//设置剪切板内容\ncm.setPrimaryClip(ClipData.newPlainText(\"data\",\"jack\"));\n//获取剪切板数据对象\nClipData cd = cm.getPrimaryClip();\nString msg = cd.getItemAt(0).getText().toString();\nLog.d(\"jw\", \"msg:\"+ msg);\n~~~\n\n这里看到了，使用系统服务的时候都是用了getSystemService方法，通过定义在Context中的服务描述符常量来获取服务对象，而getSystemService方法定义在ComtextImpl.java类中：\n~~~ Java\n@Override\npublic Object getSystemService(String name) {\n   ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);\n   return fetcher == null ? null : fetcher.getService(this);\n}\n~~~\n这里维护了一个ServiceFetcher的Map结构，看看这个结构在哪里填充数据的：\n~~~ Java\nprivate static void registerService(String serviceName, ServiceFetcher fetcher) {\n    if (!(fetcher instanceof StaticServiceFetcher)) {\n        fetcher.mContextCacheIndex = sNextPerContextServiceCacheIndex++;\n    }\n    SYSTEM_SERVICE_MAP.put(serviceName, fetcher);\n}\n~~~\n在registerService方法中添加一个服务名称和一个ServiceFetcher对象，而这个方法在静态代码块中进行调用的:\n~~~ Java\nstatic {\n    registerService(ACCESSIBILITY_SERVICE, new ServiceFetcher() {\n            public Object getService(ContextImpl ctx) {\n                return AccessibilityManager.getInstance(ctx);\n            }});\n    //...\n    registerService(CLIPBOARD_SERVICE, new ServiceFetcher() {\n            public Object createService(ContextImpl ctx) {\n                return new ClipboardManager(ctx.getOuterContext(),\n                            ctx.mMainThread.getHandler());\n            }});        \n    //....\n\n    registerService(CONNECTIVITY_SERVICE, new ServiceFetcher() {\n            public Object createService(ContextImpl ctx) {\n                IBinder b = ServiceManager.getService(CONNECTIVITY_SERVICE);\n                return new ConnectivityManager(IConnectivityManager.Stub.asInterface(b));\n            }});\n    //....\n}\n~~~\n> ClipboardManager这个服务也在这个代码块中注册了\n\n这里其实是一个ClipboardManager对象，其实这个对象是内部封装了IClipboard.Stub功能，可以看看其他的服务，比如上面的联网服务，直接调用了IConnectivityManager.Stub类的asInterface方法获取Proxy对象。\n\n下面就进去ClipboardManager.java中看看究竟：\n~~~ Java\npublic void setPrimaryClip(ClipData clip) {\n    try {\n        if (clip != null) {\n            clip.prepareToLeaveProcess();\n        }\n        getService().setPrimaryClip(clip, mContext.getOpPackageName());\n    } catch (RemoteException e) {\n    }\n}\n~~~\n看到这里的设置剪切板内容的方法，其实内部是调用了getService方法获取对象然后在调用指定方法，那么可以大概知道了这个getService方法返回的应该就是IClipboard.Stub通过asInterface方法返回的Proxy对象：\n~~~ Java\nstatic private IClipboard getService() {\n    synchronized (sStaticLock) {\n        if (sService != null) {\n            return sService;\n        }\n        IBinder b = ServiceManager.getService(\"clipboard\");\n        sService = IClipboard.Stub.asInterface(b);\n        return sService;\n    }\n}\n~~~\n吧，果然是这样，这里通过ServiceManager获取到Clipboard的远端IBinder对象，然后通过asInterface方法返回一个Proxy对象即可。\n\n到这里我们就简单的分析完了系统中的获取剪切板的服务，其实系统中的服务都是这么个逻辑，只是有的可能会在外面包装一层罢了，下面总结一下流程：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/clipboard-ipc-process.png)\n\n现在只要记住一点：每次获取系统服务的流程都是一样的，先通过ServiceManager的getService方法获取远端服务的IBinder对象，然后在通过指定服务的Stub类的asInterface方法转化成本地可使用对象，而这个对象其实就是一个Proxy对象，在这个过程中，Stub类继承了Binder对象和实现了AIDL接口类型，Proxy对象实现了AIDL接口类型，而AIDL接口类型实现了IInterface接口类型。\n\n### Hook系统服务\n上面分析完了Android中系统服务的使用流程以及原理解析，下面在来看一下android中实现Hook机制的方法和原理解析，我们知道其实在很多系统中都存在这样一个Hook技术，有的也叫作钩子，但是不管任何系统，Hook技术的核心点都是一样的，只有两点即可完成Hook技术：\n\n- 1、找到Hook点，即你想Hook哪个对象，那么得先找到这个对象定义的地方，然后使用反射获取到这个对象实例。所以这里可以看到，一般Hook点都是一个类的**单例方法**或者是**静态变量**，因为这样的话Hook起来就非常方便，都是static类型，反射调用都比较方便无需具体的实例对象即可。而关于这个点也是整个Hook过程中最难的点，因为很难找到这个点。Android中主要是依靠分析系统源码类来做到的。\n- 2、构造一个Hook原始对象的代理类，关于这个代理其实在Java中有两种方式，一种是静态代理，一种是动态代理。\n  - 静态代理：代理类中维护一个原始对象的成员变量，每个方法调用之前调用原始对象的方法即可。无需任何条件限制\n  - 动态代理：比静态代理复杂点就是有一个规则：就是原始对象必须要实现接口才可以操作，原理是因为动态代理其实是自动生成一个代理类的字节码，类名一般都是Proxy$0啥的，这个类会自动实现原始类实现的接口方法，然后在使用反射机制调用接口中的所有方法。\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-proxy-common.png)\n\n下面结合VirtualApk源码，分析这个原理：\n\n    这里的代码与原博文里的代码有所不同，原博文是结合DroidPlugin进行分析\n\n\n在VirtualApk的源码com/didi/virtualapk/delegate/目录下，有两个Proxy结尾的类，这两个类动态代理模式相同，我们只看一个。在IContentProviderProxy.java文件中\n~~~ Java\npublic class IContentProviderProxy implements InvocationHandler {\n\n  //.....代码省略\n  public static IContentProvider newInstance(Context context, IContentProvider iContentProvider) {\n      return (IContentProvider) Proxy.newProxyInstance(iContentProvider.getClass().getClassLoader(),\n              new Class[] { IContentProvider.class }, new IContentProviderProxy(context, iContentProvider));\n  }\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      Log.v(TAG, method.toGenericString() + \" : \" + Arrays.toString(args));\n      wrapperUri(method, args);\n\n      try {\n          return method.invoke(mBase, args);\n      } catch (InvocationTargetException e) {\n          throw e.getTargetException();\n      }\n  }\n\n  //...代码省略\n}\n~~~\n\n看到这里，了解java AOP技术的已经知道IContentProviderProxy这个类使用了**java.lang.ref.proxy**方案来实现动态生成代理类。\n\n> 不了解ASM和InvocationHandler的同学可以看IBM的这篇文章：[AOP 的利器：ASM 3.0 介绍](https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html)\n\n#### 简单介绍下java本身的动态代理机制\n\n在java的动态代理机制中，有两个重要的类或接口，一个是**InvocationHandler(Interface)**、另一个则是**Proxy(Class)**，这一个类和接口是实现我们动态代理所必须用到的。\n\n这里借用上面IBM的文章中的例子：\nAccount类是一个接口，具体操作由AccountImpl类实现\n~~~ Java\npublic interface Account {\n    void operation();\n}\n~~~\n~~~ Java\npublic class AccountImpl extends Account{\n    public void operation() {\n        System.out.println(\"operation...\");\n        //TODO real operation\n    }\n}\n~~~\n现在的要求是在Account的operation()方法执行前加入一个checkSecurity()检查。\n\n那么使用InvocationHandler和Proxy的实现方式就是：\n~~~ Java\nclass SecurityProxyInvocationHandler implements InvocationHandler {\n    private Object proxyedObject;\n    public SecurityProxyInvocationHandler(Object o) {\n        proxyedObject = o;\n    }\n\n    @Override\n    public Object invoke(Object object, Method method, Object[] arguments)\n        throws Throwable {             \n        if (object instanceof Account && method.getName().equals(\"opertaion\")) {\n            SecurityChecker.checkSecurity();\n        }\n        return method.invoke(proxyedObject, arguments);\n    }\n}\n~~~\n~~~ Java\npublic static void main(String[] args) {\n    Account account = (Account) Proxy.newProxyInstance(\n        Account.class.getClassLoader(),\n        new Class[] { Account.class },\n        new SecurityProxyInvocationHandler(new AccountImpl())\n    );\n    account.function();\n}\n~~~\n总结如下：\n- InvocationHandler这个接口只有一个方法**invoke()**：\n~~~ Java\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n~~~\n  - proxy:　　指代我们所代理的那个真实对象\n  - method:　　指代的是我们所要调用真实对象的某个方法的Method对象\n  - args:　　指代的是调用真实对象某个方法时接受的参数\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，当我们通过代理对象（这里就是account对象）调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的**invoke**方法来进行调用\n\n- Proxy类使用的最多的就是**newProxyInstance**这个方法：\n~~~ Java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n~~~\n  - loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n  - interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n  - h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n\nProxy类并不负责实例化对象，newProxyInstance()方法的作用是动态创建一个代理对象的类。\n\nProxy动态生成代理的不足之处在于：\n- Proxy 是面向接口的，所有使用 Proxy 的对象都必须定义一个接口，而且用这些对象的代码也必须是对接口编程的：Proxy 生成的对象是接口一致的而不是对象一致的：例子中 **Proxy.newProxyInstance** 生成的是实现 Account接口的对象而不是 AccountImpl 的子类。这对于软件架构设计，尤其对于既有软件系统是有一定掣肘的。\n- Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大10倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。\n\n> 对比VirtualApk框架中的 IContentProviderProxy 类，和上面Account例子里的 SecurityProxyInvocationHandler 类，可以发现，IContentProviderProxy 使用了 **InvocationHandler 的动态代理机制**，而代理的具体内容就在**invoke()**回调里。\n\n好的，现在在回到VirtualApk的IContentProviderProxy源码的invoke()方法里。invoke() 方法中调用了wrapperUri()，来看下这个方法：\n~~~ Java\nprivate void wrapperUri(Method method, Object[] args) {\n    Uri uri = null;\n    int index = 0;\n    if (args != null) {\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof Uri) {\n                uri = (Uri) args[i];\n                index = i;\n                break;\n            }\n        }\n    }\n\n    //如果挂钩的是call方法\n    Bundle bundleInCallMethod = null;\n    if (method.getName().equals(\"call\")) {\n        bundleInCallMethod = getBundleParameter(args);\n        if (bundleInCallMethod != null) {\n            String uriString = bundleInCallMethod.getString(KEY_WRAPPER_URI);\n            if (uriString != null) {\n                uri = Uri.parse(uriString);\n            }\n        }\n    }\n    //...\n\n    PluginManager pluginManager = PluginManager.getInstance(mContext);\n    //这里根据uri找到对应的ContentProvider\n    ProviderInfo info = pluginManager.resolveContentProvider(uri.getAuthority(), 0);\n    if (info != null) {\n        String pkg = info.packageName;\n        LoadedPlugin plugin = pluginManager.getLoadedPlugin(pkg);\n        String pluginUri = Uri.encode(uri.toString());\n        StringBuilder builder = new StringBuilder(PluginContentResolver.getUri(mContext));\n        builder.append(\"/?plugin=\" + plugin.getLocation());\n        builder.append(\"&pkg=\" + pkg);\n        builder.append(\"&uri=\" + pluginUri);\n        Uri wrapperUri = Uri.parse(builder.toString());\n        if (method.getName().equals(\"call\")) {\n            bundleInCallMethod.putString(KEY_WRAPPER_URI, wrapperUri.toString());\n        } else {\n            args[index] = wrapperUri;\n        }\n    }\n}\n~~~\n\n- 1.从wrapperUri()的第二个参数找到Uri\n- 2.调用resolveContentProvider()方法，根据uri找到占坑的ContentProvider\n  ~~~ Java\n  public ProviderInfo resolveContentProvider(String name, int flags) {\n    return this.mProviders.get(name);\n  }\n  ~~~\n  ProviderInfo对象的解释就是：Holds information about a specific content provider\n- 3.使用StringBuilder对，将uri，pkg，plugin等参数等拼接上去，替换到args中的uri，然后继续走原本的流程。\n\n> 假设是调用了query方法，应该就可以到达占坑的provider的query方法了。这就是插件框架里传说中的占坑，即不用注册就可以启动插件里的组件啦\n\n#### 剪切板实例\n到此我们了解了Java中的Hook技术的核心知识点了，下面就用开始的剪切板服务来做实验，我们Hook系统的剪切板服务功能，拦截其方法，上面也说道了，既然要Hook服务，首先得找到Hook点，通过开始对Android中系统服务的调用流程分析知道，其实这些服务都是一些保存在ServiceManager中的远端IBinder对象，这其实是一个Hook点：\n\n~~~ Java\npublic static IBinder getService(String name) {\n   try {\n       IBinder service = sCache.get(name);\n       if (service != null) {\n           return service;\n       } else {\n           return getIServiceManager().getService(name);\n       }\n   } catch (RemoteException e) {\n       Log.e(TAG, \"error in getService\", e);\n   }\n   return null;\n}\n~~~\n其实ServiceManager中每次在获取服务的时候，其实是先从一个缓存池中查找，如果有就直接返回了：\n~~~ Java\nprivate static HashMap<String, IBinder> sCache = new HashMap<String, IBinder>();\n~~~\n> 这个缓存池正好是全局的static类型，所以就可以很好的使用反射机制获取到它了，然后进行操作了\n\n接下来，我们就需要构造一个剪切板的服务IBinder对象了，然后在把这个对象放到上面得到的池子中即可。\n\n那么按照上面的动态代理的流程（使用Proxy Java原生动态代理）\n- 第一、原始对象必须实现一个接口，这里也正好符合这个规则，每个远程服务其实是实现了IBinder接口的。\n- 第二、其次是要有原始对象，这个也可以，通过上面的缓存池即可获取。\n\n有了这两个条件那么接下来就可以使用动态代理构造一个代理类了：\n~~~ Java\ntry {\n  //下面这一段的意思其实就是ServiceManager.getService(\"clipboard\")\n  //只不过ServiceManager这个类是@hide的\n  Class<?> serviceManager = Class.forName(\"android.os.ServiceManager\");\n  Method getService = serviceManager.getDeclaredMethod(\"getService\", String.class);\n  //取得ServiceManager里的原始的clipboard binder对象\n  //一般来说这是一个Binder代理对象\n  IBinder rawBinder =(IBinder) getService.invoke(null, Context.CLIPBOARD_SERVICE);\n\n  //Hook掉这个Binder代理的queryLocalInterface 方法\n  //然后在queryLocalInterface返回一个IInterface对象，hook掉我们感兴趣的方法即可\n  IBinder hookedBinder =(IBinder) Proxy.newProxyInstance(\n      serviceManager.getClassLoader,\n      new Class<?>[](IBinder.class),\n      new IClipboardHookBinderHandler(rawBinder)\n  );\n\n  //放回ServiceManager中，替换掉原有的\n  Field cacheField = serviceManager.getDeclaredField(\"sCache\");\n  cacheField.setAccessible(true);\n  @SuppressWarnings({\"unchecked\"})\n  Map<String, IBinder> cache = (Map<String,IBinder>) cacheField.get(null);\n  cache.put(Context.CLIPBOARD_SERVICE, hookedBinder);\n}catch (Exception e){\n\n}\n~~~\n\n> Field.get()可以返回一个Object，字段不是静态字段的话，要传入反射类的对象。如果传null是会报 java.lang.NullPointerException。但是如果字段是静态字段的话,传入任何对象都是可以的,包括null\n\n这里是通过反射去获取ServiceManager中的缓存池Binder对象。我们先获取到缓存池，然后得到剪切板服务Binder对象，构造一个代理类，最后在设置回去即可。\n\n下面主要来看一下构造了代理类之后，如何拦截哪些方法？\n~~~ Java\n@Override\npublic Object invoke(Object object, Method method, Object[] args)\n    throws Throwable {             \n    if (method.getName().equals(\"queryLocalInterface\")) {\n        Log.d(TAG, \"hook queryLocalInterface\");\n\n        //这里直接返回真正被hook掉的Service接口\n        //这个代理类必须实现IInterface接口\n        return Proxy.newProxyInstance(\n            base.getClassLoader,\n            new Class<?>[](this.iinterface),\n            new HookBinderInvocationHander(base,stub)\n            );\n    }\n    return method.invoke(base, args);\n}\n~~~\n> 因为拦截的是queryLocalInterface()方法，这个方法返回的是一个远端的服务，还没有转化为本地对象，所以不能去拦截具体的服务方法\n\n这里一定要注意了，有的同学可能想直接在这里拦截setPrimaryClip这样的剪切板方法不就可以了吗？想想是肯定不可以的，为什么呢？因为我们现在代理的是远端服务的Binder对象，他还没有转化成本地对象呢？如何会有这些方法呢，而我们真正要拦截的方法是IClipboardManager，其实就是Proxy类，而这个对象也是Stub类的asInterface方法得到的，所以我们现在的思路是有了远端服务的代理对象，拦截肯定是拦截这个代理对象Binder的一些方法，那么这个远端服务有哪些方法会在这个过程中被调用呢？我们再看看之前的一个简单AIDL的例子：\n~~~ Java\npublic static com.agehua.aidldemo.Demo asInterface(android.os.IBinder obj) {\n    if ((obj == null)) {\n        return null;\n    }\n    //这里的obj就是远端对象，它通过queryLocalInterface()方法获取本进程中的服务，这里就是hook点\n    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n    if (((iin != null) && (iin instanceof com.agehua.aidldemo.Demo))) {\n        return ((com.agehua.aidldemo.Demo) iin);\n    }\n    return new com.agehua.aidldemo.Demo.Stub.Proxy(obj);\n}\n~~~\n\n然后在想，我们如果想拦截IClipboardManager的setPrimaryClip方法，其实就是要拦截ClipboardManager$Proxy的这些方法，那么还需要做一次代理，代理ClipboardManager$Proxy类对象\n\n- 第一、ClipboardManager$Proxy类实现了AIDL接口类型，符合规则。\n- 第二、我们可以直接使用反射获取到IClipboardManager$Stub类，然后反射调用它的asInterface方法就可以得到了IClipboardManager$Proxy对象了，符合规则。\n\n~~~ Java\npublic IClipboardHookBinderHandler(IBinder base) {\n  this.base = base;\n  try {\n    this.stub =Class.forName(\"android.content.IClipboard$Stub\");\n    this.iinterface = Class.forName(\"android.content.IClipboard\");\n  }catch (ClassNotFoundException e){\n\n  }\n}\n~~~\n到这里，看来这个对象也符合了代理的条件，那么就简单了，继续使用动态代理机制产生一个代理类即可：\n~~~ Java\npublic IClipboardHookBinderHandler(IBinder base, Class<?> stubClass) {\n  try {\n    Method asInterfaceMethod = stubClass.getDeclaredMethod(\"asInterface\", IBinder.class);\n    this.base = asInterfaceMethod.invoke(null, base);\n  }catch (Exception e){\n    throw new RuntimeException(\"hooked failed\")\n  }\n}  \n~~~\n这个代理类的InvocationHandler中，先需要通过反射获取到Proxy原始对象：\n~~~ Java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable{\n  if (\"getPrimaryClip\".equals(method.getName())) {\n      return ClipData.newPlainText(null, \"you are hooked\");\n  }\n  //欺骗系统，使之认为剪切板上一直有内容\n  if (\"hasPrimaryClip\".equals(method.getName())) {\n    return true;\n  }\n  //千万不要忘了调用原始对象的方法\n  return method.invoke(base, args);\n}\n~~~\n到这里就已经完成了hook剪切板服务的整个步骤，再看一下流程图：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/hook-clipboard-process.png)\n\n- 1、我们的目的就是拦截系统的服务功能，那么最开始的入口就是服务大管家ServiceManager对象，而在他内部也正好有一个远端服务对象的IBinder缓存池，那么这个变量就是我们操作的对象了，可以先使用反射机制去获取到他，然后在获取到指定的剪切板服务IBinder对象实例。\n- 2、下一步肯定是Hook这个剪切板服务的Binder对象，这里采用动态代理方式产生一个Binder对象代理类，符合两个规则：\n  - 1) 这个Binder对象实现了IBinder接口类型\n  - 2) 我们已经得到了原始的Binder对象实例\n构造完代理类之后，我们拦截的方法是queryLocalInterface方法，为什么是这个方法呢？因为在整个服务使用过程中之后在Stub类中使用到了这个方法，很多同学会认为为什么不在这里直接拦截系统方法呢？这是一个误区，要想清楚，这里的代理对象是远程服务的Binder，还不是本地化对象，不能会有哪些系统方法的，所以得再做一次Hook，去Hook住系统的本地化对象。\n- 3、在拦截了Binder对象的queryLocalInterface方法之后，再一次做一下本地化服务对象的代理生成操作，而这个本地化对象一般都是IClipboard$Proxy，那么动态代理的规则：\n  - 1) 本地化服务对象都会实现AIDL接口类型(这里才有哪些我们想拦截的系统方法)\n  - 2) 通过反射调用IClipboard$Stub类的asInterface方法得到IClipboard$Proxy类对象实例\n符合这两个规则那么就可以产生代理对象了，然后开始拦截服务的指定方法即可。\n\n> 这个Hook系统服务只对本应用有效。真正能够拦截系统并对所有应用有效的，需要hook进system_server进程中，所以就需要root权限\n\n### 总结\n到这里我们就介绍完了Android中Hook系统服务的流程，本文中主要介绍了Hook系统剪切板服务，拦截指定方法。\n同时，对VirtualApk插件框架感兴趣的同学也可以看看**张鸿洋**的这篇文章：[ 滴滴插件化方案 VirtualApk 源码解析](http://blog.csdn.net/lmj623565791/article/details/75000580)\n","source":"_posts/2017-07-12-android-noroot-hook.md","raw":"---\nlayout: post\ntitle:  Android免root实现hook系统服务拦截方法\ncategory: accumulation\ntags:\n  - HOOK\n  - Android system service\n  - Binder\nkeywords: hook, system service, Binder\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Chestnut%20Branches.jpg\ntoc: true\n---\n\n本文转载自博文：[Android系统篇之—-免root实现Hook系统服务拦截方法](http://blog.csdn.net/jiangwei0910410003/article/details/52523679)，结合最新开源的滴滴插件化方案 [VirtualApk](https://github.com/didi/VirtualAPK) 对hook系统服务进行分析。\n\n360之前开源了一款插件框架 [Droid Plugin](https://github.com/DroidPluginTeam/DroidPlugin)。与滴滴同一天，360又开源了一款插件框架 [RePlugin](https://github.com/Qihoo360/RePlugin)。\n\n有关新闻介绍在这里：https://www.itcodemonkey.com/article/278.html\n                https://www.itcodemonkey.com/article/277.html\n\n关于360两款插件框架有什么不同，可以查看RePlugin里的[readme](https://github.com/Qihoo360/RePlugin/blob/master/README_CN.md)\n\n本文简单结合**VirtualApk**源码来记录实现hook系统服务方法。\n\n### Android免root实现hook系统服务拦截方法\n\n#### Binder机制回顾\n<!--more-->\n在之前一篇文章中介绍了 Android中的Binder机制和系统远程服务调用机制，本文将继续借助上一篇的内容来实现Hook系统服务拦截指定方法的逻辑，了解了上一篇文章之后，知道系统的服务其实都是一个远程Binder对象，而这个对象都是由ServiceManager大管家管理的，用户在使用系统服务的时候，会通过指定服务的Stub方法的asInterface把远程的Binder对象转化成本地化对象即可使用，而在这个过程中，我们也知道因为系统服务是在system_server进程中的，所以这个系统服务使用过程中属于跨进程调用，那么返回的对象其实就是Proxy代理对象。\n\n#### 系统中服务使用流程\n本文主要就是借助这个知识点，通过Hook系统的服务来拦截服务方法，下面我们就通过**系统剪切板服务**案例作为分析\n~~~ Java\n//获取剪切板服务\nClipboardManager cm =(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);\n//设置剪切板内容\ncm.setPrimaryClip(ClipData.newPlainText(\"data\",\"jack\"));\n//获取剪切板数据对象\nClipData cd = cm.getPrimaryClip();\nString msg = cd.getItemAt(0).getText().toString();\nLog.d(\"jw\", \"msg:\"+ msg);\n~~~\n\n这里看到了，使用系统服务的时候都是用了getSystemService方法，通过定义在Context中的服务描述符常量来获取服务对象，而getSystemService方法定义在ComtextImpl.java类中：\n~~~ Java\n@Override\npublic Object getSystemService(String name) {\n   ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);\n   return fetcher == null ? null : fetcher.getService(this);\n}\n~~~\n这里维护了一个ServiceFetcher的Map结构，看看这个结构在哪里填充数据的：\n~~~ Java\nprivate static void registerService(String serviceName, ServiceFetcher fetcher) {\n    if (!(fetcher instanceof StaticServiceFetcher)) {\n        fetcher.mContextCacheIndex = sNextPerContextServiceCacheIndex++;\n    }\n    SYSTEM_SERVICE_MAP.put(serviceName, fetcher);\n}\n~~~\n在registerService方法中添加一个服务名称和一个ServiceFetcher对象，而这个方法在静态代码块中进行调用的:\n~~~ Java\nstatic {\n    registerService(ACCESSIBILITY_SERVICE, new ServiceFetcher() {\n            public Object getService(ContextImpl ctx) {\n                return AccessibilityManager.getInstance(ctx);\n            }});\n    //...\n    registerService(CLIPBOARD_SERVICE, new ServiceFetcher() {\n            public Object createService(ContextImpl ctx) {\n                return new ClipboardManager(ctx.getOuterContext(),\n                            ctx.mMainThread.getHandler());\n            }});        \n    //....\n\n    registerService(CONNECTIVITY_SERVICE, new ServiceFetcher() {\n            public Object createService(ContextImpl ctx) {\n                IBinder b = ServiceManager.getService(CONNECTIVITY_SERVICE);\n                return new ConnectivityManager(IConnectivityManager.Stub.asInterface(b));\n            }});\n    //....\n}\n~~~\n> ClipboardManager这个服务也在这个代码块中注册了\n\n这里其实是一个ClipboardManager对象，其实这个对象是内部封装了IClipboard.Stub功能，可以看看其他的服务，比如上面的联网服务，直接调用了IConnectivityManager.Stub类的asInterface方法获取Proxy对象。\n\n下面就进去ClipboardManager.java中看看究竟：\n~~~ Java\npublic void setPrimaryClip(ClipData clip) {\n    try {\n        if (clip != null) {\n            clip.prepareToLeaveProcess();\n        }\n        getService().setPrimaryClip(clip, mContext.getOpPackageName());\n    } catch (RemoteException e) {\n    }\n}\n~~~\n看到这里的设置剪切板内容的方法，其实内部是调用了getService方法获取对象然后在调用指定方法，那么可以大概知道了这个getService方法返回的应该就是IClipboard.Stub通过asInterface方法返回的Proxy对象：\n~~~ Java\nstatic private IClipboard getService() {\n    synchronized (sStaticLock) {\n        if (sService != null) {\n            return sService;\n        }\n        IBinder b = ServiceManager.getService(\"clipboard\");\n        sService = IClipboard.Stub.asInterface(b);\n        return sService;\n    }\n}\n~~~\n吧，果然是这样，这里通过ServiceManager获取到Clipboard的远端IBinder对象，然后通过asInterface方法返回一个Proxy对象即可。\n\n到这里我们就简单的分析完了系统中的获取剪切板的服务，其实系统中的服务都是这么个逻辑，只是有的可能会在外面包装一层罢了，下面总结一下流程：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/clipboard-ipc-process.png)\n\n现在只要记住一点：每次获取系统服务的流程都是一样的，先通过ServiceManager的getService方法获取远端服务的IBinder对象，然后在通过指定服务的Stub类的asInterface方法转化成本地可使用对象，而这个对象其实就是一个Proxy对象，在这个过程中，Stub类继承了Binder对象和实现了AIDL接口类型，Proxy对象实现了AIDL接口类型，而AIDL接口类型实现了IInterface接口类型。\n\n### Hook系统服务\n上面分析完了Android中系统服务的使用流程以及原理解析，下面在来看一下android中实现Hook机制的方法和原理解析，我们知道其实在很多系统中都存在这样一个Hook技术，有的也叫作钩子，但是不管任何系统，Hook技术的核心点都是一样的，只有两点即可完成Hook技术：\n\n- 1、找到Hook点，即你想Hook哪个对象，那么得先找到这个对象定义的地方，然后使用反射获取到这个对象实例。所以这里可以看到，一般Hook点都是一个类的**单例方法**或者是**静态变量**，因为这样的话Hook起来就非常方便，都是static类型，反射调用都比较方便无需具体的实例对象即可。而关于这个点也是整个Hook过程中最难的点，因为很难找到这个点。Android中主要是依靠分析系统源码类来做到的。\n- 2、构造一个Hook原始对象的代理类，关于这个代理其实在Java中有两种方式，一种是静态代理，一种是动态代理。\n  - 静态代理：代理类中维护一个原始对象的成员变量，每个方法调用之前调用原始对象的方法即可。无需任何条件限制\n  - 动态代理：比静态代理复杂点就是有一个规则：就是原始对象必须要实现接口才可以操作，原理是因为动态代理其实是自动生成一个代理类的字节码，类名一般都是Proxy$0啥的，这个类会自动实现原始类实现的接口方法，然后在使用反射机制调用接口中的所有方法。\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-proxy-common.png)\n\n下面结合VirtualApk源码，分析这个原理：\n\n    这里的代码与原博文里的代码有所不同，原博文是结合DroidPlugin进行分析\n\n\n在VirtualApk的源码com/didi/virtualapk/delegate/目录下，有两个Proxy结尾的类，这两个类动态代理模式相同，我们只看一个。在IContentProviderProxy.java文件中\n~~~ Java\npublic class IContentProviderProxy implements InvocationHandler {\n\n  //.....代码省略\n  public static IContentProvider newInstance(Context context, IContentProvider iContentProvider) {\n      return (IContentProvider) Proxy.newProxyInstance(iContentProvider.getClass().getClassLoader(),\n              new Class[] { IContentProvider.class }, new IContentProviderProxy(context, iContentProvider));\n  }\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      Log.v(TAG, method.toGenericString() + \" : \" + Arrays.toString(args));\n      wrapperUri(method, args);\n\n      try {\n          return method.invoke(mBase, args);\n      } catch (InvocationTargetException e) {\n          throw e.getTargetException();\n      }\n  }\n\n  //...代码省略\n}\n~~~\n\n看到这里，了解java AOP技术的已经知道IContentProviderProxy这个类使用了**java.lang.ref.proxy**方案来实现动态生成代理类。\n\n> 不了解ASM和InvocationHandler的同学可以看IBM的这篇文章：[AOP 的利器：ASM 3.0 介绍](https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html)\n\n#### 简单介绍下java本身的动态代理机制\n\n在java的动态代理机制中，有两个重要的类或接口，一个是**InvocationHandler(Interface)**、另一个则是**Proxy(Class)**，这一个类和接口是实现我们动态代理所必须用到的。\n\n这里借用上面IBM的文章中的例子：\nAccount类是一个接口，具体操作由AccountImpl类实现\n~~~ Java\npublic interface Account {\n    void operation();\n}\n~~~\n~~~ Java\npublic class AccountImpl extends Account{\n    public void operation() {\n        System.out.println(\"operation...\");\n        //TODO real operation\n    }\n}\n~~~\n现在的要求是在Account的operation()方法执行前加入一个checkSecurity()检查。\n\n那么使用InvocationHandler和Proxy的实现方式就是：\n~~~ Java\nclass SecurityProxyInvocationHandler implements InvocationHandler {\n    private Object proxyedObject;\n    public SecurityProxyInvocationHandler(Object o) {\n        proxyedObject = o;\n    }\n\n    @Override\n    public Object invoke(Object object, Method method, Object[] arguments)\n        throws Throwable {             \n        if (object instanceof Account && method.getName().equals(\"opertaion\")) {\n            SecurityChecker.checkSecurity();\n        }\n        return method.invoke(proxyedObject, arguments);\n    }\n}\n~~~\n~~~ Java\npublic static void main(String[] args) {\n    Account account = (Account) Proxy.newProxyInstance(\n        Account.class.getClassLoader(),\n        new Class[] { Account.class },\n        new SecurityProxyInvocationHandler(new AccountImpl())\n    );\n    account.function();\n}\n~~~\n总结如下：\n- InvocationHandler这个接口只有一个方法**invoke()**：\n~~~ Java\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n~~~\n  - proxy:　　指代我们所代理的那个真实对象\n  - method:　　指代的是我们所要调用真实对象的某个方法的Method对象\n  - args:　　指代的是调用真实对象某个方法时接受的参数\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，当我们通过代理对象（这里就是account对象）调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的**invoke**方法来进行调用\n\n- Proxy类使用的最多的就是**newProxyInstance**这个方法：\n~~~ Java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n~~~\n  - loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n  - interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n  - h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n\nProxy类并不负责实例化对象，newProxyInstance()方法的作用是动态创建一个代理对象的类。\n\nProxy动态生成代理的不足之处在于：\n- Proxy 是面向接口的，所有使用 Proxy 的对象都必须定义一个接口，而且用这些对象的代码也必须是对接口编程的：Proxy 生成的对象是接口一致的而不是对象一致的：例子中 **Proxy.newProxyInstance** 生成的是实现 Account接口的对象而不是 AccountImpl 的子类。这对于软件架构设计，尤其对于既有软件系统是有一定掣肘的。\n- Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大10倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。\n\n> 对比VirtualApk框架中的 IContentProviderProxy 类，和上面Account例子里的 SecurityProxyInvocationHandler 类，可以发现，IContentProviderProxy 使用了 **InvocationHandler 的动态代理机制**，而代理的具体内容就在**invoke()**回调里。\n\n好的，现在在回到VirtualApk的IContentProviderProxy源码的invoke()方法里。invoke() 方法中调用了wrapperUri()，来看下这个方法：\n~~~ Java\nprivate void wrapperUri(Method method, Object[] args) {\n    Uri uri = null;\n    int index = 0;\n    if (args != null) {\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof Uri) {\n                uri = (Uri) args[i];\n                index = i;\n                break;\n            }\n        }\n    }\n\n    //如果挂钩的是call方法\n    Bundle bundleInCallMethod = null;\n    if (method.getName().equals(\"call\")) {\n        bundleInCallMethod = getBundleParameter(args);\n        if (bundleInCallMethod != null) {\n            String uriString = bundleInCallMethod.getString(KEY_WRAPPER_URI);\n            if (uriString != null) {\n                uri = Uri.parse(uriString);\n            }\n        }\n    }\n    //...\n\n    PluginManager pluginManager = PluginManager.getInstance(mContext);\n    //这里根据uri找到对应的ContentProvider\n    ProviderInfo info = pluginManager.resolveContentProvider(uri.getAuthority(), 0);\n    if (info != null) {\n        String pkg = info.packageName;\n        LoadedPlugin plugin = pluginManager.getLoadedPlugin(pkg);\n        String pluginUri = Uri.encode(uri.toString());\n        StringBuilder builder = new StringBuilder(PluginContentResolver.getUri(mContext));\n        builder.append(\"/?plugin=\" + plugin.getLocation());\n        builder.append(\"&pkg=\" + pkg);\n        builder.append(\"&uri=\" + pluginUri);\n        Uri wrapperUri = Uri.parse(builder.toString());\n        if (method.getName().equals(\"call\")) {\n            bundleInCallMethod.putString(KEY_WRAPPER_URI, wrapperUri.toString());\n        } else {\n            args[index] = wrapperUri;\n        }\n    }\n}\n~~~\n\n- 1.从wrapperUri()的第二个参数找到Uri\n- 2.调用resolveContentProvider()方法，根据uri找到占坑的ContentProvider\n  ~~~ Java\n  public ProviderInfo resolveContentProvider(String name, int flags) {\n    return this.mProviders.get(name);\n  }\n  ~~~\n  ProviderInfo对象的解释就是：Holds information about a specific content provider\n- 3.使用StringBuilder对，将uri，pkg，plugin等参数等拼接上去，替换到args中的uri，然后继续走原本的流程。\n\n> 假设是调用了query方法，应该就可以到达占坑的provider的query方法了。这就是插件框架里传说中的占坑，即不用注册就可以启动插件里的组件啦\n\n#### 剪切板实例\n到此我们了解了Java中的Hook技术的核心知识点了，下面就用开始的剪切板服务来做实验，我们Hook系统的剪切板服务功能，拦截其方法，上面也说道了，既然要Hook服务，首先得找到Hook点，通过开始对Android中系统服务的调用流程分析知道，其实这些服务都是一些保存在ServiceManager中的远端IBinder对象，这其实是一个Hook点：\n\n~~~ Java\npublic static IBinder getService(String name) {\n   try {\n       IBinder service = sCache.get(name);\n       if (service != null) {\n           return service;\n       } else {\n           return getIServiceManager().getService(name);\n       }\n   } catch (RemoteException e) {\n       Log.e(TAG, \"error in getService\", e);\n   }\n   return null;\n}\n~~~\n其实ServiceManager中每次在获取服务的时候，其实是先从一个缓存池中查找，如果有就直接返回了：\n~~~ Java\nprivate static HashMap<String, IBinder> sCache = new HashMap<String, IBinder>();\n~~~\n> 这个缓存池正好是全局的static类型，所以就可以很好的使用反射机制获取到它了，然后进行操作了\n\n接下来，我们就需要构造一个剪切板的服务IBinder对象了，然后在把这个对象放到上面得到的池子中即可。\n\n那么按照上面的动态代理的流程（使用Proxy Java原生动态代理）\n- 第一、原始对象必须实现一个接口，这里也正好符合这个规则，每个远程服务其实是实现了IBinder接口的。\n- 第二、其次是要有原始对象，这个也可以，通过上面的缓存池即可获取。\n\n有了这两个条件那么接下来就可以使用动态代理构造一个代理类了：\n~~~ Java\ntry {\n  //下面这一段的意思其实就是ServiceManager.getService(\"clipboard\")\n  //只不过ServiceManager这个类是@hide的\n  Class<?> serviceManager = Class.forName(\"android.os.ServiceManager\");\n  Method getService = serviceManager.getDeclaredMethod(\"getService\", String.class);\n  //取得ServiceManager里的原始的clipboard binder对象\n  //一般来说这是一个Binder代理对象\n  IBinder rawBinder =(IBinder) getService.invoke(null, Context.CLIPBOARD_SERVICE);\n\n  //Hook掉这个Binder代理的queryLocalInterface 方法\n  //然后在queryLocalInterface返回一个IInterface对象，hook掉我们感兴趣的方法即可\n  IBinder hookedBinder =(IBinder) Proxy.newProxyInstance(\n      serviceManager.getClassLoader,\n      new Class<?>[](IBinder.class),\n      new IClipboardHookBinderHandler(rawBinder)\n  );\n\n  //放回ServiceManager中，替换掉原有的\n  Field cacheField = serviceManager.getDeclaredField(\"sCache\");\n  cacheField.setAccessible(true);\n  @SuppressWarnings({\"unchecked\"})\n  Map<String, IBinder> cache = (Map<String,IBinder>) cacheField.get(null);\n  cache.put(Context.CLIPBOARD_SERVICE, hookedBinder);\n}catch (Exception e){\n\n}\n~~~\n\n> Field.get()可以返回一个Object，字段不是静态字段的话，要传入反射类的对象。如果传null是会报 java.lang.NullPointerException。但是如果字段是静态字段的话,传入任何对象都是可以的,包括null\n\n这里是通过反射去获取ServiceManager中的缓存池Binder对象。我们先获取到缓存池，然后得到剪切板服务Binder对象，构造一个代理类，最后在设置回去即可。\n\n下面主要来看一下构造了代理类之后，如何拦截哪些方法？\n~~~ Java\n@Override\npublic Object invoke(Object object, Method method, Object[] args)\n    throws Throwable {             \n    if (method.getName().equals(\"queryLocalInterface\")) {\n        Log.d(TAG, \"hook queryLocalInterface\");\n\n        //这里直接返回真正被hook掉的Service接口\n        //这个代理类必须实现IInterface接口\n        return Proxy.newProxyInstance(\n            base.getClassLoader,\n            new Class<?>[](this.iinterface),\n            new HookBinderInvocationHander(base,stub)\n            );\n    }\n    return method.invoke(base, args);\n}\n~~~\n> 因为拦截的是queryLocalInterface()方法，这个方法返回的是一个远端的服务，还没有转化为本地对象，所以不能去拦截具体的服务方法\n\n这里一定要注意了，有的同学可能想直接在这里拦截setPrimaryClip这样的剪切板方法不就可以了吗？想想是肯定不可以的，为什么呢？因为我们现在代理的是远端服务的Binder对象，他还没有转化成本地对象呢？如何会有这些方法呢，而我们真正要拦截的方法是IClipboardManager，其实就是Proxy类，而这个对象也是Stub类的asInterface方法得到的，所以我们现在的思路是有了远端服务的代理对象，拦截肯定是拦截这个代理对象Binder的一些方法，那么这个远端服务有哪些方法会在这个过程中被调用呢？我们再看看之前的一个简单AIDL的例子：\n~~~ Java\npublic static com.agehua.aidldemo.Demo asInterface(android.os.IBinder obj) {\n    if ((obj == null)) {\n        return null;\n    }\n    //这里的obj就是远端对象，它通过queryLocalInterface()方法获取本进程中的服务，这里就是hook点\n    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n    if (((iin != null) && (iin instanceof com.agehua.aidldemo.Demo))) {\n        return ((com.agehua.aidldemo.Demo) iin);\n    }\n    return new com.agehua.aidldemo.Demo.Stub.Proxy(obj);\n}\n~~~\n\n然后在想，我们如果想拦截IClipboardManager的setPrimaryClip方法，其实就是要拦截ClipboardManager$Proxy的这些方法，那么还需要做一次代理，代理ClipboardManager$Proxy类对象\n\n- 第一、ClipboardManager$Proxy类实现了AIDL接口类型，符合规则。\n- 第二、我们可以直接使用反射获取到IClipboardManager$Stub类，然后反射调用它的asInterface方法就可以得到了IClipboardManager$Proxy对象了，符合规则。\n\n~~~ Java\npublic IClipboardHookBinderHandler(IBinder base) {\n  this.base = base;\n  try {\n    this.stub =Class.forName(\"android.content.IClipboard$Stub\");\n    this.iinterface = Class.forName(\"android.content.IClipboard\");\n  }catch (ClassNotFoundException e){\n\n  }\n}\n~~~\n到这里，看来这个对象也符合了代理的条件，那么就简单了，继续使用动态代理机制产生一个代理类即可：\n~~~ Java\npublic IClipboardHookBinderHandler(IBinder base, Class<?> stubClass) {\n  try {\n    Method asInterfaceMethod = stubClass.getDeclaredMethod(\"asInterface\", IBinder.class);\n    this.base = asInterfaceMethod.invoke(null, base);\n  }catch (Exception e){\n    throw new RuntimeException(\"hooked failed\")\n  }\n}  \n~~~\n这个代理类的InvocationHandler中，先需要通过反射获取到Proxy原始对象：\n~~~ Java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable{\n  if (\"getPrimaryClip\".equals(method.getName())) {\n      return ClipData.newPlainText(null, \"you are hooked\");\n  }\n  //欺骗系统，使之认为剪切板上一直有内容\n  if (\"hasPrimaryClip\".equals(method.getName())) {\n    return true;\n  }\n  //千万不要忘了调用原始对象的方法\n  return method.invoke(base, args);\n}\n~~~\n到这里就已经完成了hook剪切板服务的整个步骤，再看一下流程图：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/hook-clipboard-process.png)\n\n- 1、我们的目的就是拦截系统的服务功能，那么最开始的入口就是服务大管家ServiceManager对象，而在他内部也正好有一个远端服务对象的IBinder缓存池，那么这个变量就是我们操作的对象了，可以先使用反射机制去获取到他，然后在获取到指定的剪切板服务IBinder对象实例。\n- 2、下一步肯定是Hook这个剪切板服务的Binder对象，这里采用动态代理方式产生一个Binder对象代理类，符合两个规则：\n  - 1) 这个Binder对象实现了IBinder接口类型\n  - 2) 我们已经得到了原始的Binder对象实例\n构造完代理类之后，我们拦截的方法是queryLocalInterface方法，为什么是这个方法呢？因为在整个服务使用过程中之后在Stub类中使用到了这个方法，很多同学会认为为什么不在这里直接拦截系统方法呢？这是一个误区，要想清楚，这里的代理对象是远程服务的Binder，还不是本地化对象，不能会有哪些系统方法的，所以得再做一次Hook，去Hook住系统的本地化对象。\n- 3、在拦截了Binder对象的queryLocalInterface方法之后，再一次做一下本地化服务对象的代理生成操作，而这个本地化对象一般都是IClipboard$Proxy，那么动态代理的规则：\n  - 1) 本地化服务对象都会实现AIDL接口类型(这里才有哪些我们想拦截的系统方法)\n  - 2) 通过反射调用IClipboard$Stub类的asInterface方法得到IClipboard$Proxy类对象实例\n符合这两个规则那么就可以产生代理对象了，然后开始拦截服务的指定方法即可。\n\n> 这个Hook系统服务只对本应用有效。真正能够拦截系统并对所有应用有效的，需要hook进system_server进程中，所以就需要root权限\n\n### 总结\n到这里我们就介绍完了Android中Hook系统服务的流程，本文中主要介绍了Hook系统剪切板服务，拦截指定方法。\n同时，对VirtualApk插件框架感兴趣的同学也可以看看**张鸿洋**的这篇文章：[ 滴滴插件化方案 VirtualApk 源码解析](http://blog.csdn.net/lmj623565791/article/details/75000580)\n","slug":"android-noroot-hook","published":1,"date":"2017-07-11T16:00:00.000Z","updated":"2017-11-23T07:25:44.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0t003bd6yk7054hrta","content":"<p>本文转载自博文：<a href=\"http://blog.csdn.net/jiangwei0910410003/article/details/52523679\" target=\"_blank\" rel=\"external\">Android系统篇之—-免root实现Hook系统服务拦截方法</a>，结合最新开源的滴滴插件化方案 <a href=\"https://github.com/didi/VirtualAPK\" target=\"_blank\" rel=\"external\">VirtualApk</a> 对hook系统服务进行分析。</p>\n<p>360之前开源了一款插件框架 <a href=\"https://github.com/DroidPluginTeam/DroidPlugin\" target=\"_blank\" rel=\"external\">Droid Plugin</a>。与滴滴同一天，360又开源了一款插件框架 <a href=\"https://github.com/Qihoo360/RePlugin\" target=\"_blank\" rel=\"external\">RePlugin</a>。</p>\n<p>有关新闻介绍在这里：<a href=\"https://www.itcodemonkey.com/article/278.html\" target=\"_blank\" rel=\"external\">https://www.itcodemonkey.com/article/278.html</a><br>                <a href=\"https://www.itcodemonkey.com/article/277.html\" target=\"_blank\" rel=\"external\">https://www.itcodemonkey.com/article/277.html</a></p>\n<p>关于360两款插件框架有什么不同，可以查看RePlugin里的<a href=\"https://github.com/Qihoo360/RePlugin/blob/master/README_CN.md\" target=\"_blank\" rel=\"external\">readme</a></p>\n<p>本文简单结合<strong>VirtualApk</strong>源码来记录实现hook系统服务方法。</p>\n<h3 id=\"Android免root实现hook系统服务拦截方法\"><a href=\"#Android免root实现hook系统服务拦截方法\" class=\"headerlink\" title=\"Android免root实现hook系统服务拦截方法\"></a>Android免root实现hook系统服务拦截方法</h3><h4 id=\"Binder机制回顾\"><a href=\"#Binder机制回顾\" class=\"headerlink\" title=\"Binder机制回顾\"></a>Binder机制回顾</h4><a id=\"more\"></a>\n<p>在之前一篇文章中介绍了 Android中的Binder机制和系统远程服务调用机制，本文将继续借助上一篇的内容来实现Hook系统服务拦截指定方法的逻辑，了解了上一篇文章之后，知道系统的服务其实都是一个远程Binder对象，而这个对象都是由ServiceManager大管家管理的，用户在使用系统服务的时候，会通过指定服务的Stub方法的asInterface把远程的Binder对象转化成本地化对象即可使用，而在这个过程中，我们也知道因为系统服务是在system_server进程中的，所以这个系统服务使用过程中属于跨进程调用，那么返回的对象其实就是Proxy代理对象。</p>\n<h4 id=\"系统中服务使用流程\"><a href=\"#系统中服务使用流程\" class=\"headerlink\" title=\"系统中服务使用流程\"></a>系统中服务使用流程</h4><p>本文主要就是借助这个知识点，通过Hook系统的服务来拦截服务方法，下面我们就通过<strong>系统剪切板服务</strong>案例作为分析<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取剪切板服务</span></div><div class=\"line\">ClipboardManager cm =(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\"><span class=\"comment\">//设置剪切板内容</span></div><div class=\"line\">cm.setPrimaryClip(ClipData.newPlainText(<span class=\"string\">\"data\"</span>,<span class=\"string\">\"jack\"</span>));</div><div class=\"line\"><span class=\"comment\">//获取剪切板数据对象</span></div><div class=\"line\">ClipData cd = cm.getPrimaryClip();</div><div class=\"line\">String msg = cd.getItemAt(<span class=\"number\">0</span>).getText().toString();</div><div class=\"line\">Log.d(<span class=\"string\">\"jw\"</span>, <span class=\"string\">\"msg:\"</span>+ msg);</div></pre></td></tr></table></figure></p>\n<p>这里看到了，使用系统服务的时候都是用了getSystemService方法，通过定义在Context中的服务描述符常量来获取服务对象，而getSystemService方法定义在ComtextImpl.java类中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);</div><div class=\"line\">   <span class=\"keyword\">return</span> fetcher == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : fetcher.getService(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里维护了一个ServiceFetcher的Map结构，看看这个结构在哪里填充数据的：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(String serviceName, ServiceFetcher fetcher)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(fetcher <span class=\"keyword\">instanceof</span> StaticServiceFetcher)) &#123;</div><div class=\"line\">        fetcher.mContextCacheIndex = sNextPerContextServiceCacheIndex++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    SYSTEM_SERVICE_MAP.put(serviceName, fetcher);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在registerService方法中添加一个服务名称和一个ServiceFetcher对象，而这个方法在静态代码块中进行调用的:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">    registerService(ACCESSIBILITY_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> AccessibilityManager.getInstance(ctx);</div><div class=\"line\">            &#125;&#125;);</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    registerService(CLIPBOARD_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClipboardManager(ctx.getOuterContext(),</div><div class=\"line\">                            ctx.mMainThread.getHandler());</div><div class=\"line\">            &#125;&#125;);        </div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\"></div><div class=\"line\">    registerService(CONNECTIVITY_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                IBinder b = ServiceManager.getService(CONNECTIVITY_SERVICE);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConnectivityManager(IConnectivityManager.Stub.asInterface(b));</div><div class=\"line\">            &#125;&#125;);</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ClipboardManager这个服务也在这个代码块中注册了</p>\n</blockquote>\n<p>这里其实是一个ClipboardManager对象，其实这个对象是内部封装了IClipboard.Stub功能，可以看看其他的服务，比如上面的联网服务，直接调用了IConnectivityManager.Stub类的asInterface方法获取Proxy对象。</p>\n<p>下面就进去ClipboardManager.java中看看究竟：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrimaryClip</span><span class=\"params\">(ClipData clip)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (clip != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            clip.prepareToLeaveProcess();</div><div class=\"line\">        &#125;</div><div class=\"line\">        getService().setPrimaryClip(clip, mContext.getOpPackageName());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这里的设置剪切板内容的方法，其实内部是调用了getService方法获取对象然后在调用指定方法，那么可以大概知道了这个getService方法返回的应该就是IClipboard.Stub通过asInterface方法返回的Proxy对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> IClipboard <span class=\"title\">getService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (sStaticLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sService;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IBinder b = ServiceManager.getService(<span class=\"string\">\"clipboard\"</span>);</div><div class=\"line\">        sService = IClipboard.Stub.asInterface(b);</div><div class=\"line\">        <span class=\"keyword\">return</span> sService;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>吧，果然是这样，这里通过ServiceManager获取到Clipboard的远端IBinder对象，然后通过asInterface方法返回一个Proxy对象即可。</p>\n<p>到这里我们就简单的分析完了系统中的获取剪切板的服务，其实系统中的服务都是这么个逻辑，只是有的可能会在外面包装一层罢了，下面总结一下流程：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/clipboard-ipc-process.png\" alt=\"\"></p>\n<p>现在只要记住一点：每次获取系统服务的流程都是一样的，先通过ServiceManager的getService方法获取远端服务的IBinder对象，然后在通过指定服务的Stub类的asInterface方法转化成本地可使用对象，而这个对象其实就是一个Proxy对象，在这个过程中，Stub类继承了Binder对象和实现了AIDL接口类型，Proxy对象实现了AIDL接口类型，而AIDL接口类型实现了IInterface接口类型。</p>\n<h3 id=\"Hook系统服务\"><a href=\"#Hook系统服务\" class=\"headerlink\" title=\"Hook系统服务\"></a>Hook系统服务</h3><p>上面分析完了Android中系统服务的使用流程以及原理解析，下面在来看一下android中实现Hook机制的方法和原理解析，我们知道其实在很多系统中都存在这样一个Hook技术，有的也叫作钩子，但是不管任何系统，Hook技术的核心点都是一样的，只有两点即可完成Hook技术：</p>\n<ul>\n<li>1、找到Hook点，即你想Hook哪个对象，那么得先找到这个对象定义的地方，然后使用反射获取到这个对象实例。所以这里可以看到，一般Hook点都是一个类的<strong>单例方法</strong>或者是<strong>静态变量</strong>，因为这样的话Hook起来就非常方便，都是static类型，反射调用都比较方便无需具体的实例对象即可。而关于这个点也是整个Hook过程中最难的点，因为很难找到这个点。Android中主要是依靠分析系统源码类来做到的。</li>\n<li>2、构造一个Hook原始对象的代理类，关于这个代理其实在Java中有两种方式，一种是静态代理，一种是动态代理。<ul>\n<li>静态代理：代理类中维护一个原始对象的成员变量，每个方法调用之前调用原始对象的方法即可。无需任何条件限制</li>\n<li>动态代理：比静态代理复杂点就是有一个规则：就是原始对象必须要实现接口才可以操作，原理是因为动态代理其实是自动生成一个代理类的字节码，类名一般都是Proxy$0啥的，这个类会自动实现原始类实现的接口方法，然后在使用反射机制调用接口中的所有方法。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-proxy-common.png\" alt=\"\"></p>\n<p>下面结合VirtualApk源码，分析这个原理：</p>\n<pre><code>这里的代码与原博文里的代码有所不同，原博文是结合DroidPlugin进行分析\n</code></pre><p>在VirtualApk的源码com/didi/virtualapk/delegate/目录下，有两个Proxy结尾的类，这两个类动态代理模式相同，我们只看一个。在IContentProviderProxy.java文件中<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IContentProviderProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//.....代码省略</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IContentProvider <span class=\"title\">newInstance</span><span class=\"params\">(Context context, IContentProvider iContentProvider)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (IContentProvider) Proxy.newProxyInstance(iContentProvider.getClass().getClassLoader(),</div><div class=\"line\">              <span class=\"keyword\">new</span> Class[] &#123; IContentProvider.class &#125;, <span class=\"keyword\">new</span> IContentProviderProxy(context, iContentProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">      Log.v(TAG, method.toGenericString() + <span class=\"string\">\" : \"</span> + Arrays.toString(args));</div><div class=\"line\">      wrapperUri(method, args);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> method.invoke(mBase, args);</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> e.getTargetException();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...代码省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这里，了解java AOP技术的已经知道IContentProviderProxy这个类使用了<strong>java.lang.ref.proxy</strong>方案来实现动态生成代理类。</p>\n<blockquote>\n<p>不了解ASM和InvocationHandler的同学可以看IBM的这篇文章：<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html\" target=\"_blank\" rel=\"external\">AOP 的利器：ASM 3.0 介绍</a></p>\n</blockquote>\n<h4 id=\"简单介绍下java本身的动态代理机制\"><a href=\"#简单介绍下java本身的动态代理机制\" class=\"headerlink\" title=\"简单介绍下java本身的动态代理机制\"></a>简单介绍下java本身的动态代理机制</h4><p>在java的动态代理机制中，有两个重要的类或接口，一个是<strong>InvocationHandler(Interface)</strong>、另一个则是<strong>Proxy(Class)</strong>，这一个类和接口是实现我们动态代理所必须用到的。</p>\n<p>这里借用上面IBM的文章中的例子：<br>Account类是一个接口，具体操作由AccountImpl类实现<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Account</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"operation...\"</span>);</div><div class=\"line\">        <span class=\"comment\">//TODO real operation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在的要求是在Account的operation()方法执行前加入一个checkSecurity()检查。</p>\n<p>那么使用InvocationHandler和Proxy的实现方式就是：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityProxyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object proxyedObject;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityProxyInvocationHandler</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        proxyedObject = o;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] arguments)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> Throwable &#123;             </div><div class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Account &amp;&amp; method.getName().equals(<span class=\"string\">\"opertaion\"</span>)) &#123;</div><div class=\"line\">            SecurityChecker.checkSecurity();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(proxyedObject, arguments);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Account account = (Account) Proxy.newProxyInstance(</div><div class=\"line\">        Account.class.getClassLoader(),</div><div class=\"line\">        <span class=\"keyword\">new</span> Class[] &#123; Account.class &#125;,</div><div class=\"line\">        <span class=\"keyword\">new</span> SecurityProxyInvocationHandler(<span class=\"keyword\">new</span> AccountImpl())</div><div class=\"line\">    );</div><div class=\"line\">    account.function();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结如下：</p>\n<ul>\n<li><p>InvocationHandler这个接口只有一个方法<strong>invoke()</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span></div></pre></td></tr></table></figure>\n<ul>\n<li>proxy:　　指代我们所代理的那个真实对象</li>\n<li>method:　　指代的是我们所要调用真实对象的某个方法的Method对象</li>\n<li>args:　　指代的是调用真实对象某个方法时接受的参数</li>\n</ul>\n</li>\n</ul>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，当我们通过代理对象（这里就是account对象）调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的<strong>invoke</strong>方法来进行调用</p>\n<ul>\n<li><p>Proxy类使用的最多的就是<strong>newProxyInstance</strong>这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure>\n<ul>\n<li>loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</li>\n<li>interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</li>\n<li>h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</li>\n</ul>\n</li>\n</ul>\n<p>Proxy类并不负责实例化对象，newProxyInstance()方法的作用是动态创建一个代理对象的类。</p>\n<p>Proxy动态生成代理的不足之处在于：</p>\n<ul>\n<li>Proxy 是面向接口的，所有使用 Proxy 的对象都必须定义一个接口，而且用这些对象的代码也必须是对接口编程的：Proxy 生成的对象是接口一致的而不是对象一致的：例子中 <strong>Proxy.newProxyInstance</strong> 生成的是实现 Account接口的对象而不是 AccountImpl 的子类。这对于软件架构设计，尤其对于既有软件系统是有一定掣肘的。</li>\n<li>Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大10倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。</li>\n</ul>\n<blockquote>\n<p>对比VirtualApk框架中的 IContentProviderProxy 类，和上面Account例子里的 SecurityProxyInvocationHandler 类，可以发现，IContentProviderProxy 使用了 <strong>InvocationHandler 的动态代理机制</strong>，而代理的具体内容就在<strong>invoke()</strong>回调里。</p>\n</blockquote>\n<p>好的，现在在回到VirtualApk的IContentProviderProxy源码的invoke()方法里。invoke() 方法中调用了wrapperUri()，来看下这个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">wrapperUri</span><span class=\"params\">(Method method, Object[] args)</span> </span>&#123;</div><div class=\"line\">    Uri uri = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (args[i] <span class=\"keyword\">instanceof</span> Uri) &#123;</div><div class=\"line\">                uri = (Uri) args[i];</div><div class=\"line\">                index = i;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果挂钩的是call方法</span></div><div class=\"line\">    Bundle bundleInCallMethod = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"call\"</span>)) &#123;</div><div class=\"line\">        bundleInCallMethod = getBundleParameter(args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bundleInCallMethod != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            String uriString = bundleInCallMethod.getString(KEY_WRAPPER_URI);</div><div class=\"line\">            <span class=\"keyword\">if</span> (uriString != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                uri = Uri.parse(uriString);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    PluginManager pluginManager = PluginManager.getInstance(mContext);</div><div class=\"line\">    <span class=\"comment\">//这里根据uri找到对应的ContentProvider</span></div><div class=\"line\">    ProviderInfo info = pluginManager.resolveContentProvider(uri.getAuthority(), <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        String pkg = info.packageName;</div><div class=\"line\">        LoadedPlugin plugin = pluginManager.getLoadedPlugin(pkg);</div><div class=\"line\">        String pluginUri = Uri.encode(uri.toString());</div><div class=\"line\">        StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(PluginContentResolver.getUri(mContext));</div><div class=\"line\">        builder.append(<span class=\"string\">\"/?plugin=\"</span> + plugin.getLocation());</div><div class=\"line\">        builder.append(<span class=\"string\">\"&amp;pkg=\"</span> + pkg);</div><div class=\"line\">        builder.append(<span class=\"string\">\"&amp;uri=\"</span> + pluginUri);</div><div class=\"line\">        Uri wrapperUri = Uri.parse(builder.toString());</div><div class=\"line\">        <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"call\"</span>)) &#123;</div><div class=\"line\">            bundleInCallMethod.putString(KEY_WRAPPER_URI, wrapperUri.toString());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            args[index] = wrapperUri;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>1.从wrapperUri()的第二个参数找到Uri</li>\n<li><p>2.调用resolveContentProvider()方法，根据uri找到占坑的ContentProvider</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ProviderInfo <span class=\"title\">resolveContentProvider</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mProviders.get(name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ProviderInfo对象的解释就是：Holds information about a specific content provider</p>\n</li>\n<li>3.使用StringBuilder对，将uri，pkg，plugin等参数等拼接上去，替换到args中的uri，然后继续走原本的流程。</li>\n</ul>\n<blockquote>\n<p>假设是调用了query方法，应该就可以到达占坑的provider的query方法了。这就是插件框架里传说中的占坑，即不用注册就可以启动插件里的组件啦</p>\n</blockquote>\n<h4 id=\"剪切板实例\"><a href=\"#剪切板实例\" class=\"headerlink\" title=\"剪切板实例\"></a>剪切板实例</h4><p>到此我们了解了Java中的Hook技术的核心知识点了，下面就用开始的剪切板服务来做实验，我们Hook系统的剪切板服务功能，拦截其方法，上面也说道了，既然要Hook服务，首先得找到Hook点，通过开始对Android中系统服务的调用流程分析知道，其实这些服务都是一些保存在ServiceManager中的远端IBinder对象，这其实是一个Hook点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IBinder <span class=\"title\">getService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       IBinder service = sCache.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> service;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> getIServiceManager().getService(name);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">       Log.e(TAG, <span class=\"string\">\"error in getService\"</span>, e);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实ServiceManager中每次在获取服务的时候，其实是先从一个缓存池中查找，如果有就直接返回了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, IBinder&gt; sCache = <span class=\"keyword\">new</span> HashMap&lt;String, IBinder&gt;();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个缓存池正好是全局的static类型，所以就可以很好的使用反射机制获取到它了，然后进行操作了</p>\n</blockquote>\n<p>接下来，我们就需要构造一个剪切板的服务IBinder对象了，然后在把这个对象放到上面得到的池子中即可。</p>\n<p>那么按照上面的动态代理的流程（使用Proxy Java原生动态代理）</p>\n<ul>\n<li>第一、原始对象必须实现一个接口，这里也正好符合这个规则，每个远程服务其实是实现了IBinder接口的。</li>\n<li>第二、其次是要有原始对象，这个也可以，通过上面的缓存池即可获取。</li>\n</ul>\n<p>有了这两个条件那么接下来就可以使用动态代理构造一个代理类了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"comment\">//下面这一段的意思其实就是ServiceManager.getService(\"clipboard\")</span></div><div class=\"line\">  <span class=\"comment\">//只不过ServiceManager这个类是@hide的</span></div><div class=\"line\">  Class&lt;?&gt; serviceManager = Class.forName(<span class=\"string\">\"android.os.ServiceManager\"</span>);</div><div class=\"line\">  Method getService = serviceManager.getDeclaredMethod(<span class=\"string\">\"getService\"</span>, String.class);</div><div class=\"line\">  <span class=\"comment\">//取得ServiceManager里的原始的clipboard binder对象</span></div><div class=\"line\">  <span class=\"comment\">//一般来说这是一个Binder代理对象</span></div><div class=\"line\">  IBinder rawBinder =(IBinder) getService.invoke(<span class=\"keyword\">null</span>, Context.CLIPBOARD_SERVICE);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Hook掉这个Binder代理的queryLocalInterface 方法</span></div><div class=\"line\">  <span class=\"comment\">//然后在queryLocalInterface返回一个IInterface对象，hook掉我们感兴趣的方法即可</span></div><div class=\"line\">  IBinder hookedBinder =(IBinder) Proxy.newProxyInstance(</div><div class=\"line\">      serviceManager.getClassLoader,</div><div class=\"line\">      <span class=\"keyword\">new</span> Class&lt;?&gt;[](IBinder.class),</div><div class=\"line\">      <span class=\"keyword\">new</span> IClipboardHookBinderHandler(rawBinder)</div><div class=\"line\">  );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//放回ServiceManager中，替换掉原有的</span></div><div class=\"line\">  Field cacheField = serviceManager.getDeclaredField(<span class=\"string\">\"sCache\"</span>);</div><div class=\"line\">  cacheField.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  Map&lt;String, IBinder&gt; cache = (Map&lt;String,IBinder&gt;) cacheField.get(<span class=\"keyword\">null</span>);</div><div class=\"line\">  cache.put(Context.CLIPBOARD_SERVICE, hookedBinder);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Field.get()可以返回一个Object，字段不是静态字段的话，要传入反射类的对象。如果传null是会报 java.lang.NullPointerException。但是如果字段是静态字段的话,传入任何对象都是可以的,包括null</p>\n</blockquote>\n<p>这里是通过反射去获取ServiceManager中的缓存池Binder对象。我们先获取到缓存池，然后得到剪切板服务Binder对象，构造一个代理类，最后在设置回去即可。</p>\n<p>下面主要来看一下构造了代理类之后，如何拦截哪些方法？<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] args)</span></span></div><div class=\"line\">    <span class=\"keyword\">throws</span> Throwable &#123;             </div><div class=\"line\">    <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"queryLocalInterface\"</span>)) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"hook queryLocalInterface\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里直接返回真正被hook掉的Service接口</span></div><div class=\"line\">        <span class=\"comment\">//这个代理类必须实现IInterface接口</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</div><div class=\"line\">            base.getClassLoader,</div><div class=\"line\">            <span class=\"keyword\">new</span> Class&lt;?&gt;[](<span class=\"keyword\">this</span>.iinterface),</div><div class=\"line\">            <span class=\"keyword\">new</span> HookBinderInvocationHander(base,stub)</div><div class=\"line\">            );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> method.invoke(base, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>因为拦截的是queryLocalInterface()方法，这个方法返回的是一个远端的服务，还没有转化为本地对象，所以不能去拦截具体的服务方法</p>\n</blockquote>\n<p>这里一定要注意了，有的同学可能想直接在这里拦截setPrimaryClip这样的剪切板方法不就可以了吗？想想是肯定不可以的，为什么呢？因为我们现在代理的是远端服务的Binder对象，他还没有转化成本地对象呢？如何会有这些方法呢，而我们真正要拦截的方法是IClipboardManager，其实就是Proxy类，而这个对象也是Stub类的asInterface方法得到的，所以我们现在的思路是有了远端服务的代理对象，拦截肯定是拦截这个代理对象Binder的一些方法，那么这个远端服务有哪些方法会在这个过程中被调用呢？我们再看看之前的一个简单AIDL的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.agehua.aidldemo.<span class=\"function\">Demo <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//这里的obj就是远端对象，它通过queryLocalInterface()方法获取本进程中的服务，这里就是hook点</span></div><div class=\"line\">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">    <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.agehua.aidldemo.Demo))) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((com.agehua.aidldemo.Demo) iin);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.agehua.aidldemo.Demo.Stub.Proxy(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在想，我们如果想拦截IClipboardManager的setPrimaryClip方法，其实就是要拦截ClipboardManager$Proxy的这些方法，那么还需要做一次代理，代理ClipboardManager$Proxy类对象</p>\n<ul>\n<li>第一、ClipboardManager$Proxy类实现了AIDL接口类型，符合规则。</li>\n<li>第二、我们可以直接使用反射获取到IClipboardManager$Stub类，然后反射调用它的asInterface方法就可以得到了IClipboardManager$Proxy对象了，符合规则。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IClipboardHookBinderHandler</span><span class=\"params\">(IBinder base)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = base;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.stub =Class.forName(<span class=\"string\">\"android.content.IClipboard$Stub\"</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.iinterface = Class.forName(<span class=\"string\">\"android.content.IClipboard\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里，看来这个对象也符合了代理的条件，那么就简单了，继续使用动态代理机制产生一个代理类即可：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IClipboardHookBinderHandler</span><span class=\"params\">(IBinder base, Class&lt;?&gt; stubClass)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Method asInterfaceMethod = stubClass.getDeclaredMethod(<span class=\"string\">\"asInterface\"</span>, IBinder.class);</div><div class=\"line\">    <span class=\"keyword\">this</span>.base = asInterfaceMethod.invoke(<span class=\"keyword\">null</span>, base);</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"hooked failed\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个代理类的InvocationHandler中，先需要通过反射获取到Proxy原始对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"getPrimaryClip\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ClipData.newPlainText(<span class=\"keyword\">null</span>, <span class=\"string\">\"you are hooked\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//欺骗系统，使之认为剪切板上一直有内容</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"hasPrimaryClip\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//千万不要忘了调用原始对象的方法</span></div><div class=\"line\">  <span class=\"keyword\">return</span> method.invoke(base, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里就已经完成了hook剪切板服务的整个步骤，再看一下流程图：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/hook-clipboard-process.png\" alt=\"\"></p>\n<ul>\n<li>1、我们的目的就是拦截系统的服务功能，那么最开始的入口就是服务大管家ServiceManager对象，而在他内部也正好有一个远端服务对象的IBinder缓存池，那么这个变量就是我们操作的对象了，可以先使用反射机制去获取到他，然后在获取到指定的剪切板服务IBinder对象实例。</li>\n<li>2、下一步肯定是Hook这个剪切板服务的Binder对象，这里采用动态代理方式产生一个Binder对象代理类，符合两个规则：<ul>\n<li>1) 这个Binder对象实现了IBinder接口类型</li>\n<li>2) 我们已经得到了原始的Binder对象实例<br>构造完代理类之后，我们拦截的方法是queryLocalInterface方法，为什么是这个方法呢？因为在整个服务使用过程中之后在Stub类中使用到了这个方法，很多同学会认为为什么不在这里直接拦截系统方法呢？这是一个误区，要想清楚，这里的代理对象是远程服务的Binder，还不是本地化对象，不能会有哪些系统方法的，所以得再做一次Hook，去Hook住系统的本地化对象。</li>\n</ul>\n</li>\n<li>3、在拦截了Binder对象的queryLocalInterface方法之后，再一次做一下本地化服务对象的代理生成操作，而这个本地化对象一般都是IClipboard$Proxy，那么动态代理的规则：<ul>\n<li>1) 本地化服务对象都会实现AIDL接口类型(这里才有哪些我们想拦截的系统方法)</li>\n<li>2) 通过反射调用IClipboard$Stub类的asInterface方法得到IClipboard$Proxy类对象实例<br>符合这两个规则那么就可以产生代理对象了，然后开始拦截服务的指定方法即可。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这个Hook系统服务只对本应用有效。真正能够拦截系统并对所有应用有效的，需要hook进system_server进程中，所以就需要root权限</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到这里我们就介绍完了Android中Hook系统服务的流程，本文中主要介绍了Hook系统剪切板服务，拦截指定方法。<br>同时，对VirtualApk插件框架感兴趣的同学也可以看看<strong>张鸿洋</strong>的这篇文章：<a href=\"http://blog.csdn.net/lmj623565791/article/details/75000580\" target=\"_blank\" rel=\"external\"> 滴滴插件化方案 VirtualApk 源码解析</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/12/android-noroot-hook/\">http://agehua.github.io/2017/07/12/android-noroot-hook/</a></p>\n","readingTime":{"text":"8 min read","minutes":7.69,"time":461400.00000000006,"words":1538},"excerpt":"<p>本文转载自博文：<a href=\"http://blog.csdn.net/jiangwei0910410003/article/details/52523679\">Android系统篇之—-免root实现Hook系统服务拦截方法</a>，结合最新开源的滴滴插件化方案 <a href=\"https://github.com/didi/VirtualAPK\">VirtualApk</a> 对hook系统服务进行分析。</p>\n<p>360之前开源了一款插件框架 <a href=\"https://github.com/DroidPluginTeam/DroidPlugin\">Droid Plugin</a>。与滴滴同一天，360又开源了一款插件框架 <a href=\"https://github.com/Qihoo360/RePlugin\">RePlugin</a>。</p>\n<p>有关新闻介绍在这里：<a href=\"https://www.itcodemonkey.com/article/278.html\">https://www.itcodemonkey.com/article/278.html</a><br>                <a href=\"https://www.itcodemonkey.com/article/277.html\">https://www.itcodemonkey.com/article/277.html</a></p>\n<p>关于360两款插件框架有什么不同，可以查看RePlugin里的<a href=\"https://github.com/Qihoo360/RePlugin/blob/master/README_CN.md\">readme</a></p>\n<p>本文简单结合<strong>VirtualApk</strong>源码来记录实现hook系统服务方法。</p>\n<h3 id=\"Android免root实现hook系统服务拦截方法\"><a href=\"#Android免root实现hook系统服务拦截方法\" class=\"headerlink\" title=\"Android免root实现hook系统服务拦截方法\"></a>Android免root实现hook系统服务拦截方法</h3><h4 id=\"Binder机制回顾\"><a href=\"#Binder机制回顾\" class=\"headerlink\" title=\"Binder机制回顾\"></a>Binder机制回顾</h4>","more":"<p>在之前一篇文章中介绍了 Android中的Binder机制和系统远程服务调用机制，本文将继续借助上一篇的内容来实现Hook系统服务拦截指定方法的逻辑，了解了上一篇文章之后，知道系统的服务其实都是一个远程Binder对象，而这个对象都是由ServiceManager大管家管理的，用户在使用系统服务的时候，会通过指定服务的Stub方法的asInterface把远程的Binder对象转化成本地化对象即可使用，而在这个过程中，我们也知道因为系统服务是在system_server进程中的，所以这个系统服务使用过程中属于跨进程调用，那么返回的对象其实就是Proxy代理对象。</p>\n<h4 id=\"系统中服务使用流程\"><a href=\"#系统中服务使用流程\" class=\"headerlink\" title=\"系统中服务使用流程\"></a>系统中服务使用流程</h4><p>本文主要就是借助这个知识点，通过Hook系统的服务来拦截服务方法，下面我们就通过<strong>系统剪切板服务</strong>案例作为分析<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取剪切板服务</span></div><div class=\"line\">ClipboardManager cm =(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);</div><div class=\"line\"><span class=\"comment\">//设置剪切板内容</span></div><div class=\"line\">cm.setPrimaryClip(ClipData.newPlainText(<span class=\"string\">\"data\"</span>,<span class=\"string\">\"jack\"</span>));</div><div class=\"line\"><span class=\"comment\">//获取剪切板数据对象</span></div><div class=\"line\">ClipData cd = cm.getPrimaryClip();</div><div class=\"line\">String msg = cd.getItemAt(<span class=\"number\">0</span>).getText().toString();</div><div class=\"line\">Log.d(<span class=\"string\">\"jw\"</span>, <span class=\"string\">\"msg:\"</span>+ msg);</div></pre></td></tr></table></figure></p>\n<p>这里看到了，使用系统服务的时候都是用了getSystemService方法，通过定义在Context中的服务描述符常量来获取服务对象，而getSystemService方法定义在ComtextImpl.java类中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSystemService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);</div><div class=\"line\">   <span class=\"keyword\">return</span> fetcher == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : fetcher.getService(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里维护了一个ServiceFetcher的Map结构，看看这个结构在哪里填充数据的：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(String serviceName, ServiceFetcher fetcher)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(fetcher <span class=\"keyword\">instanceof</span> StaticServiceFetcher)) &#123;</div><div class=\"line\">        fetcher.mContextCacheIndex = sNextPerContextServiceCacheIndex++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    SYSTEM_SERVICE_MAP.put(serviceName, fetcher);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在registerService方法中添加一个服务名称和一个ServiceFetcher对象，而这个方法在静态代码块中进行调用的:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">    registerService(ACCESSIBILITY_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> AccessibilityManager.getInstance(ctx);</div><div class=\"line\">            &#125;&#125;);</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    registerService(CLIPBOARD_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClipboardManager(ctx.getOuterContext(),</div><div class=\"line\">                            ctx.mMainThread.getHandler());</div><div class=\"line\">            &#125;&#125;);        </div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\"></div><div class=\"line\">    registerService(CONNECTIVITY_SERVICE, <span class=\"keyword\">new</span> ServiceFetcher() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createService</span><span class=\"params\">(ContextImpl ctx)</span> </span>&#123;</div><div class=\"line\">                IBinder b = ServiceManager.getService(CONNECTIVITY_SERVICE);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConnectivityManager(IConnectivityManager.Stub.asInterface(b));</div><div class=\"line\">            &#125;&#125;);</div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ClipboardManager这个服务也在这个代码块中注册了</p>\n</blockquote>\n<p>这里其实是一个ClipboardManager对象，其实这个对象是内部封装了IClipboard.Stub功能，可以看看其他的服务，比如上面的联网服务，直接调用了IConnectivityManager.Stub类的asInterface方法获取Proxy对象。</p>\n<p>下面就进去ClipboardManager.java中看看究竟：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrimaryClip</span><span class=\"params\">(ClipData clip)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (clip != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            clip.prepareToLeaveProcess();</div><div class=\"line\">        &#125;</div><div class=\"line\">        getService().setPrimaryClip(clip, mContext.getOpPackageName());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这里的设置剪切板内容的方法，其实内部是调用了getService方法获取对象然后在调用指定方法，那么可以大概知道了这个getService方法返回的应该就是IClipboard.Stub通过asInterface方法返回的Proxy对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> IClipboard <span class=\"title\">getService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (sStaticLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sService;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IBinder b = ServiceManager.getService(<span class=\"string\">\"clipboard\"</span>);</div><div class=\"line\">        sService = IClipboard.Stub.asInterface(b);</div><div class=\"line\">        <span class=\"keyword\">return</span> sService;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>吧，果然是这样，这里通过ServiceManager获取到Clipboard的远端IBinder对象，然后通过asInterface方法返回一个Proxy对象即可。</p>\n<p>到这里我们就简单的分析完了系统中的获取剪切板的服务，其实系统中的服务都是这么个逻辑，只是有的可能会在外面包装一层罢了，下面总结一下流程：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/clipboard-ipc-process.png\" alt=\"\"></p>\n<p>现在只要记住一点：每次获取系统服务的流程都是一样的，先通过ServiceManager的getService方法获取远端服务的IBinder对象，然后在通过指定服务的Stub类的asInterface方法转化成本地可使用对象，而这个对象其实就是一个Proxy对象，在这个过程中，Stub类继承了Binder对象和实现了AIDL接口类型，Proxy对象实现了AIDL接口类型，而AIDL接口类型实现了IInterface接口类型。</p>\n<h3 id=\"Hook系统服务\"><a href=\"#Hook系统服务\" class=\"headerlink\" title=\"Hook系统服务\"></a>Hook系统服务</h3><p>上面分析完了Android中系统服务的使用流程以及原理解析，下面在来看一下android中实现Hook机制的方法和原理解析，我们知道其实在很多系统中都存在这样一个Hook技术，有的也叫作钩子，但是不管任何系统，Hook技术的核心点都是一样的，只有两点即可完成Hook技术：</p>\n<ul>\n<li>1、找到Hook点，即你想Hook哪个对象，那么得先找到这个对象定义的地方，然后使用反射获取到这个对象实例。所以这里可以看到，一般Hook点都是一个类的<strong>单例方法</strong>或者是<strong>静态变量</strong>，因为这样的话Hook起来就非常方便，都是static类型，反射调用都比较方便无需具体的实例对象即可。而关于这个点也是整个Hook过程中最难的点，因为很难找到这个点。Android中主要是依靠分析系统源码类来做到的。</li>\n<li>2、构造一个Hook原始对象的代理类，关于这个代理其实在Java中有两种方式，一种是静态代理，一种是动态代理。<ul>\n<li>静态代理：代理类中维护一个原始对象的成员变量，每个方法调用之前调用原始对象的方法即可。无需任何条件限制</li>\n<li>动态代理：比静态代理复杂点就是有一个规则：就是原始对象必须要实现接口才可以操作，原理是因为动态代理其实是自动生成一个代理类的字节码，类名一般都是Proxy$0啥的，这个类会自动实现原始类实现的接口方法，然后在使用反射机制调用接口中的所有方法。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-proxy-common.png\" alt=\"\"></p>\n<p>下面结合VirtualApk源码，分析这个原理：</p>\n<pre><code>这里的代码与原博文里的代码有所不同，原博文是结合DroidPlugin进行分析\n</code></pre><p>在VirtualApk的源码com/didi/virtualapk/delegate/目录下，有两个Proxy结尾的类，这两个类动态代理模式相同，我们只看一个。在IContentProviderProxy.java文件中<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IContentProviderProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//.....代码省略</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IContentProvider <span class=\"title\">newInstance</span><span class=\"params\">(Context context, IContentProvider iContentProvider)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (IContentProvider) Proxy.newProxyInstance(iContentProvider.getClass().getClassLoader(),</div><div class=\"line\">              <span class=\"keyword\">new</span> Class[] &#123; IContentProvider.class &#125;, <span class=\"keyword\">new</span> IContentProviderProxy(context, iContentProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">      Log.v(TAG, method.toGenericString() + <span class=\"string\">\" : \"</span> + Arrays.toString(args));</div><div class=\"line\">      wrapperUri(method, args);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> method.invoke(mBase, args);</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> e.getTargetException();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...代码省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到这里，了解java AOP技术的已经知道IContentProviderProxy这个类使用了<strong>java.lang.ref.proxy</strong>方案来实现动态生成代理类。</p>\n<blockquote>\n<p>不了解ASM和InvocationHandler的同学可以看IBM的这篇文章：<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-asm30/index.html\">AOP 的利器：ASM 3.0 介绍</a></p>\n</blockquote>\n<h4 id=\"简单介绍下java本身的动态代理机制\"><a href=\"#简单介绍下java本身的动态代理机制\" class=\"headerlink\" title=\"简单介绍下java本身的动态代理机制\"></a>简单介绍下java本身的动态代理机制</h4><p>在java的动态代理机制中，有两个重要的类或接口，一个是<strong>InvocationHandler(Interface)</strong>、另一个则是<strong>Proxy(Class)</strong>，这一个类和接口是实现我们动态代理所必须用到的。</p>\n<p>这里借用上面IBM的文章中的例子：<br>Account类是一个接口，具体操作由AccountImpl类实现<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Account</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"operation...\"</span>);</div><div class=\"line\">        <span class=\"comment\">//TODO real operation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在的要求是在Account的operation()方法执行前加入一个checkSecurity()检查。</p>\n<p>那么使用InvocationHandler和Proxy的实现方式就是：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityProxyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object proxyedObject;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityProxyInvocationHandler</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        proxyedObject = o;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] arguments)</span></div><div class=\"line\">        <span class=\"keyword\">throws</span> Throwable </span>&#123;             </div><div class=\"line\">        <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Account &amp;&amp; method.getName().equals(<span class=\"string\">\"opertaion\"</span>)) &#123;</div><div class=\"line\">            SecurityChecker.checkSecurity();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> method.invoke(proxyedObject, arguments);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    Account account = (Account) Proxy.newProxyInstance(</div><div class=\"line\">        Account.class.getClassLoader(),</div><div class=\"line\">        <span class=\"keyword\">new</span> Class[] &#123; Account.class &#125;,</div><div class=\"line\">        <span class=\"keyword\">new</span> SecurityProxyInvocationHandler(<span class=\"keyword\">new</span> AccountImpl())</div><div class=\"line\">    );</div><div class=\"line\">    account.function();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总结如下：</p>\n<ul>\n<li><p>InvocationHandler这个接口只有一个方法<strong>invoke()</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span></div></pre></td></tr></table></figure>\n<ul>\n<li>proxy:　　指代我们所代理的那个真实对象</li>\n<li>method:　　指代的是我们所要调用真实对象的某个方法的Method对象</li>\n<li>args:　　指代的是调用真实对象某个方法时接受的参数</li>\n</ul>\n</li>\n</ul>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，当我们通过代理对象（这里就是account对象）调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的<strong>invoke</strong>方法来进行调用</p>\n<ul>\n<li><p>Proxy类使用的最多的就是<strong>newProxyInstance</strong>这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure>\n<ul>\n<li>loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</li>\n<li>interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</li>\n<li>h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</li>\n</ul>\n</li>\n</ul>\n<p>Proxy类并不负责实例化对象，newProxyInstance()方法的作用是动态创建一个代理对象的类。</p>\n<p>Proxy动态生成代理的不足之处在于：</p>\n<ul>\n<li>Proxy 是面向接口的，所有使用 Proxy 的对象都必须定义一个接口，而且用这些对象的代码也必须是对接口编程的：Proxy 生成的对象是接口一致的而不是对象一致的：例子中 <strong>Proxy.newProxyInstance</strong> 生成的是实现 Account接口的对象而不是 AccountImpl 的子类。这对于软件架构设计，尤其对于既有软件系统是有一定掣肘的。</li>\n<li>Proxy 毕竟是通过反射实现的，必须在效率上付出代价：有实验数据表明，调用反射比一般的函数开销至少要大10倍。而且，从程序实现上可以看出，对 proxy class 的所有方法调用都要通过使用反射的 invoke 方法。因此，对于性能关键的应用，使用 proxy class 是需要精心考虑的，以避免反射成为整个应用的瓶颈。</li>\n</ul>\n<blockquote>\n<p>对比VirtualApk框架中的 IContentProviderProxy 类，和上面Account例子里的 SecurityProxyInvocationHandler 类，可以发现，IContentProviderProxy 使用了 <strong>InvocationHandler 的动态代理机制</strong>，而代理的具体内容就在<strong>invoke()</strong>回调里。</p>\n</blockquote>\n<p>好的，现在在回到VirtualApk的IContentProviderProxy源码的invoke()方法里。invoke() 方法中调用了wrapperUri()，来看下这个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">wrapperUri</span><span class=\"params\">(Method method, Object[] args)</span> </span>&#123;</div><div class=\"line\">    Uri uri = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (args[i] <span class=\"keyword\">instanceof</span> Uri) &#123;</div><div class=\"line\">                uri = (Uri) args[i];</div><div class=\"line\">                index = i;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果挂钩的是call方法</span></div><div class=\"line\">    Bundle bundleInCallMethod = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"call\"</span>)) &#123;</div><div class=\"line\">        bundleInCallMethod = getBundleParameter(args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bundleInCallMethod != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            String uriString = bundleInCallMethod.getString(KEY_WRAPPER_URI);</div><div class=\"line\">            <span class=\"keyword\">if</span> (uriString != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                uri = Uri.parse(uriString);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\"></div><div class=\"line\">    PluginManager pluginManager = PluginManager.getInstance(mContext);</div><div class=\"line\">    <span class=\"comment\">//这里根据uri找到对应的ContentProvider</span></div><div class=\"line\">    ProviderInfo info = pluginManager.resolveContentProvider(uri.getAuthority(), <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        String pkg = info.packageName;</div><div class=\"line\">        LoadedPlugin plugin = pluginManager.getLoadedPlugin(pkg);</div><div class=\"line\">        String pluginUri = Uri.encode(uri.toString());</div><div class=\"line\">        StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(PluginContentResolver.getUri(mContext));</div><div class=\"line\">        builder.append(<span class=\"string\">\"/?plugin=\"</span> + plugin.getLocation());</div><div class=\"line\">        builder.append(<span class=\"string\">\"&amp;pkg=\"</span> + pkg);</div><div class=\"line\">        builder.append(<span class=\"string\">\"&amp;uri=\"</span> + pluginUri);</div><div class=\"line\">        Uri wrapperUri = Uri.parse(builder.toString());</div><div class=\"line\">        <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"call\"</span>)) &#123;</div><div class=\"line\">            bundleInCallMethod.putString(KEY_WRAPPER_URI, wrapperUri.toString());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            args[index] = wrapperUri;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>1.从wrapperUri()的第二个参数找到Uri</li>\n<li><p>2.调用resolveContentProvider()方法，根据uri找到占坑的ContentProvider</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ProviderInfo <span class=\"title\">resolveContentProvider</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mProviders.get(name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ProviderInfo对象的解释就是：Holds information about a specific content provider</p>\n</li>\n<li>3.使用StringBuilder对，将uri，pkg，plugin等参数等拼接上去，替换到args中的uri，然后继续走原本的流程。</li>\n</ul>\n<blockquote>\n<p>假设是调用了query方法，应该就可以到达占坑的provider的query方法了。这就是插件框架里传说中的占坑，即不用注册就可以启动插件里的组件啦</p>\n</blockquote>\n<h4 id=\"剪切板实例\"><a href=\"#剪切板实例\" class=\"headerlink\" title=\"剪切板实例\"></a>剪切板实例</h4><p>到此我们了解了Java中的Hook技术的核心知识点了，下面就用开始的剪切板服务来做实验，我们Hook系统的剪切板服务功能，拦截其方法，上面也说道了，既然要Hook服务，首先得找到Hook点，通过开始对Android中系统服务的调用流程分析知道，其实这些服务都是一些保存在ServiceManager中的远端IBinder对象，这其实是一个Hook点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IBinder <span class=\"title\">getService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       IBinder service = sCache.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> service;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> getIServiceManager().getService(name);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">       Log.e(TAG, <span class=\"string\">\"error in getService\"</span>, e);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实ServiceManager中每次在获取服务的时候，其实是先从一个缓存池中查找，如果有就直接返回了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, IBinder&gt; sCache = <span class=\"keyword\">new</span> HashMap&lt;String, IBinder&gt;();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个缓存池正好是全局的static类型，所以就可以很好的使用反射机制获取到它了，然后进行操作了</p>\n</blockquote>\n<p>接下来，我们就需要构造一个剪切板的服务IBinder对象了，然后在把这个对象放到上面得到的池子中即可。</p>\n<p>那么按照上面的动态代理的流程（使用Proxy Java原生动态代理）</p>\n<ul>\n<li>第一、原始对象必须实现一个接口，这里也正好符合这个规则，每个远程服务其实是实现了IBinder接口的。</li>\n<li>第二、其次是要有原始对象，这个也可以，通过上面的缓存池即可获取。</li>\n</ul>\n<p>有了这两个条件那么接下来就可以使用动态代理构造一个代理类了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"comment\">//下面这一段的意思其实就是ServiceManager.getService(\"clipboard\")</span></div><div class=\"line\">  <span class=\"comment\">//只不过ServiceManager这个类是@hide的</span></div><div class=\"line\">  Class&lt;?&gt; serviceManager = Class.forName(<span class=\"string\">\"android.os.ServiceManager\"</span>);</div><div class=\"line\">  Method getService = serviceManager.getDeclaredMethod(<span class=\"string\">\"getService\"</span>, String.class);</div><div class=\"line\">  <span class=\"comment\">//取得ServiceManager里的原始的clipboard binder对象</span></div><div class=\"line\">  <span class=\"comment\">//一般来说这是一个Binder代理对象</span></div><div class=\"line\">  IBinder rawBinder =(IBinder) getService.invoke(<span class=\"keyword\">null</span>, Context.CLIPBOARD_SERVICE);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Hook掉这个Binder代理的queryLocalInterface 方法</span></div><div class=\"line\">  <span class=\"comment\">//然后在queryLocalInterface返回一个IInterface对象，hook掉我们感兴趣的方法即可</span></div><div class=\"line\">  IBinder hookedBinder =(IBinder) Proxy.newProxyInstance(</div><div class=\"line\">      serviceManager.getClassLoader,</div><div class=\"line\">      <span class=\"keyword\">new</span> Class&lt;?&gt;[](IBinder.class),</div><div class=\"line\">      <span class=\"keyword\">new</span> IClipboardHookBinderHandler(rawBinder)</div><div class=\"line\">  );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//放回ServiceManager中，替换掉原有的</span></div><div class=\"line\">  Field cacheField = serviceManager.getDeclaredField(<span class=\"string\">\"sCache\"</span>);</div><div class=\"line\">  cacheField.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>&#125;)</div><div class=\"line\">  Map&lt;String, IBinder&gt; cache = (Map&lt;String,IBinder&gt;) cacheField.get(<span class=\"keyword\">null</span>);</div><div class=\"line\">  cache.put(Context.CLIPBOARD_SERVICE, hookedBinder);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Field.get()可以返回一个Object，字段不是静态字段的话，要传入反射类的对象。如果传null是会报 java.lang.NullPointerException。但是如果字段是静态字段的话,传入任何对象都是可以的,包括null</p>\n</blockquote>\n<p>这里是通过反射去获取ServiceManager中的缓存池Binder对象。我们先获取到缓存池，然后得到剪切板服务Binder对象，构造一个代理类，最后在设置回去即可。</p>\n<p>下面主要来看一下构造了代理类之后，如何拦截哪些方法？<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object object, Method method, Object[] args)</span></div><div class=\"line\">    <span class=\"keyword\">throws</span> Throwable </span>&#123;             </div><div class=\"line\">    <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"queryLocalInterface\"</span>)) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"hook queryLocalInterface\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里直接返回真正被hook掉的Service接口</span></div><div class=\"line\">        <span class=\"comment\">//这个代理类必须实现IInterface接口</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</div><div class=\"line\">            base.getClassLoader,</div><div class=\"line\">            <span class=\"keyword\">new</span> Class&lt;?&gt;[](<span class=\"keyword\">this</span>.iinterface),</div><div class=\"line\">            <span class=\"keyword\">new</span> HookBinderInvocationHander(base,stub)</div><div class=\"line\">            );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> method.invoke(base, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>因为拦截的是queryLocalInterface()方法，这个方法返回的是一个远端的服务，还没有转化为本地对象，所以不能去拦截具体的服务方法</p>\n</blockquote>\n<p>这里一定要注意了，有的同学可能想直接在这里拦截setPrimaryClip这样的剪切板方法不就可以了吗？想想是肯定不可以的，为什么呢？因为我们现在代理的是远端服务的Binder对象，他还没有转化成本地对象呢？如何会有这些方法呢，而我们真正要拦截的方法是IClipboardManager，其实就是Proxy类，而这个对象也是Stub类的asInterface方法得到的，所以我们现在的思路是有了远端服务的代理对象，拦截肯定是拦截这个代理对象Binder的一些方法，那么这个远端服务有哪些方法会在这个过程中被调用呢？我们再看看之前的一个简单AIDL的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.agehua.aidldemo.<span class=\"function\">Demo <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//这里的obj就是远端对象，它通过queryLocalInterface()方法获取本进程中的服务，这里就是hook点</span></div><div class=\"line\">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">    <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.agehua.aidldemo.Demo))) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((com.agehua.aidldemo.Demo) iin);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.agehua.aidldemo.Demo.Stub.Proxy(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在想，我们如果想拦截IClipboardManager的setPrimaryClip方法，其实就是要拦截ClipboardManager$Proxy的这些方法，那么还需要做一次代理，代理ClipboardManager$Proxy类对象</p>\n<ul>\n<li>第一、ClipboardManager$Proxy类实现了AIDL接口类型，符合规则。</li>\n<li>第二、我们可以直接使用反射获取到IClipboardManager$Stub类，然后反射调用它的asInterface方法就可以得到了IClipboardManager$Proxy对象了，符合规则。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IClipboardHookBinderHandler</span><span class=\"params\">(IBinder base)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = base;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.stub =Class.forName(<span class=\"string\">\"android.content.IClipboard$Stub\"</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.iinterface = Class.forName(<span class=\"string\">\"android.content.IClipboard\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (ClassNotFoundException e)&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里，看来这个对象也符合了代理的条件，那么就简单了，继续使用动态代理机制产生一个代理类即可：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IClipboardHookBinderHandler</span><span class=\"params\">(IBinder base, Class&lt;?&gt; stubClass)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Method asInterfaceMethod = stubClass.getDeclaredMethod(<span class=\"string\">\"asInterface\"</span>, IBinder.class);</div><div class=\"line\">    <span class=\"keyword\">this</span>.base = asInterfaceMethod.invoke(<span class=\"keyword\">null</span>, base);</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"hooked failed\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个代理类的InvocationHandler中，先需要通过反射获取到Proxy原始对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"getPrimaryClip\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ClipData.newPlainText(<span class=\"keyword\">null</span>, <span class=\"string\">\"you are hooked\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//欺骗系统，使之认为剪切板上一直有内容</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"hasPrimaryClip\"</span>.equals(method.getName())) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//千万不要忘了调用原始对象的方法</span></div><div class=\"line\">  <span class=\"keyword\">return</span> method.invoke(base, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里就已经完成了hook剪切板服务的整个步骤，再看一下流程图：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/hook-clipboard-process.png\" alt=\"\"></p>\n<ul>\n<li>1、我们的目的就是拦截系统的服务功能，那么最开始的入口就是服务大管家ServiceManager对象，而在他内部也正好有一个远端服务对象的IBinder缓存池，那么这个变量就是我们操作的对象了，可以先使用反射机制去获取到他，然后在获取到指定的剪切板服务IBinder对象实例。</li>\n<li>2、下一步肯定是Hook这个剪切板服务的Binder对象，这里采用动态代理方式产生一个Binder对象代理类，符合两个规则：<ul>\n<li>1) 这个Binder对象实现了IBinder接口类型</li>\n<li>2) 我们已经得到了原始的Binder对象实例<br>构造完代理类之后，我们拦截的方法是queryLocalInterface方法，为什么是这个方法呢？因为在整个服务使用过程中之后在Stub类中使用到了这个方法，很多同学会认为为什么不在这里直接拦截系统方法呢？这是一个误区，要想清楚，这里的代理对象是远程服务的Binder，还不是本地化对象，不能会有哪些系统方法的，所以得再做一次Hook，去Hook住系统的本地化对象。</li>\n</ul>\n</li>\n<li>3、在拦截了Binder对象的queryLocalInterface方法之后，再一次做一下本地化服务对象的代理生成操作，而这个本地化对象一般都是IClipboard$Proxy，那么动态代理的规则：<ul>\n<li>1) 本地化服务对象都会实现AIDL接口类型(这里才有哪些我们想拦截的系统方法)</li>\n<li>2) 通过反射调用IClipboard$Stub类的asInterface方法得到IClipboard$Proxy类对象实例<br>符合这两个规则那么就可以产生代理对象了，然后开始拦截服务的指定方法即可。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这个Hook系统服务只对本应用有效。真正能够拦截系统并对所有应用有效的，需要hook进system_server进程中，所以就需要root权限</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到这里我们就介绍完了Android中Hook系统服务的流程，本文中主要介绍了Hook系统剪切板服务，拦截指定方法。<br>同时，对VirtualApk插件框架感兴趣的同学也可以看看<strong>张鸿洋</strong>的这篇文章：<a href=\"http://blog.csdn.net/lmj623565791/article/details/75000580\"> 滴滴插件化方案 VirtualApk 源码解析</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/12/android-noroot-hook/\">http://agehua.github.io/2017/07/12/android-noroot-hook/</a></p>"},{"layout":"post","title":"Handler替代TimerTask","keywords":"handler, TimerTask","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg","toc":true,"_content":"\n### Handler替代TimerTask\n原文来自：http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/\n\n作者文中提到，使用TimerTask更新GUI，debug看起来可以，但实际上根本不起作用。\n同时作者发现，使用handler可以得到更好的表现。\n\n下面是一个例子，使用handler在100ms后启动一个Runnable:\n~~~ Java\nprivate Handler handler = new Handler();\nhandler.postDelayed(runnable, 100);\n~~~\n\n下面代码里有一个小技巧，实现每隔100ms运行一次Runnable，就像TimerTask的scheduleAtFixedRate()方法:\n\n<!--more-->\n~~~ Java\nprivate Runnable runnable = new Runnable() {\n   @Override\n   public void run() {\n      /* do what you need to do */\n      foobar();\n      /* and here comes the \"trick\" */\n      handler.postDelayed(this, 100);\n   }\n};\n~~~\n如何取消运行Runnable呢？只需要调用handler.removeCallback(runnable)就可以了。\n\n这样做还有另一个有点，就是不用总是new Timer(Task)了，可以重复使用上面代码中的handler和runnable。\n","source":"_posts/2017-05-18-handler-replace-timertask.md","raw":"---\nlayout: post\ntitle:  Handler替代TimerTask\ncategory: accumulation\ntags:\n  - TimerTask\n  - handler\nkeywords: handler, TimerTask\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Branch%20in%20a%20Glass%20with%20a%20Book.jpg\ntoc: true\n---\n\n### Handler替代TimerTask\n原文来自：http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/\n\n作者文中提到，使用TimerTask更新GUI，debug看起来可以，但实际上根本不起作用。\n同时作者发现，使用handler可以得到更好的表现。\n\n下面是一个例子，使用handler在100ms后启动一个Runnable:\n~~~ Java\nprivate Handler handler = new Handler();\nhandler.postDelayed(runnable, 100);\n~~~\n\n下面代码里有一个小技巧，实现每隔100ms运行一次Runnable，就像TimerTask的scheduleAtFixedRate()方法:\n\n<!--more-->\n~~~ Java\nprivate Runnable runnable = new Runnable() {\n   @Override\n   public void run() {\n      /* do what you need to do */\n      foobar();\n      /* and here comes the \"trick\" */\n      handler.postDelayed(this, 100);\n   }\n};\n~~~\n如何取消运行Runnable呢？只需要调用handler.removeCallback(runnable)就可以了。\n\n这样做还有另一个有点，就是不用总是new Timer(Task)了，可以重复使用上面代码中的handler和runnable。\n","slug":"handler-replace-timertask","published":1,"date":"2017-05-17T16:00:00.000Z","updated":"2017-11-23T07:15:28.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec0x003ed6yksf73tcd7","content":"<h3 id=\"Handler替代TimerTask\"><a href=\"#Handler替代TimerTask\" class=\"headerlink\" title=\"Handler替代TimerTask\"></a>Handler替代TimerTask</h3><p>原文来自：<a href=\"http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/\" target=\"_blank\" rel=\"external\">http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/</a></p>\n<p>作者文中提到，使用TimerTask更新GUI，debug看起来可以，但实际上根本不起作用。<br>同时作者发现，使用handler可以得到更好的表现。</p>\n<p>下面是一个例子，使用handler在100ms后启动一个Runnable:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">handler.postDelayed(runnable, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure></p>\n<p>下面代码里有一个小技巧，实现每隔100ms运行一次Runnable，就像TimerTask的scheduleAtFixedRate()方法:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/* do what you need to do */</span></div><div class=\"line\">      foobar();</div><div class=\"line\">      <span class=\"comment\">/* and here comes the \"trick\" */</span></div><div class=\"line\">      handler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">100</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如何取消运行Runnable呢？只需要调用handler.removeCallback(runnable)就可以了。</p>\n<p>这样做还有另一个有点，就是不用总是new Timer(Task)了，可以重复使用上面代码中的handler和runnable。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/05/18/handler-replace-timertask/\">http://agehua.github.io/2017/05/18/handler-replace-timertask/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.49,"time":29400,"words":98},"excerpt":"<h3 id=\"Handler替代TimerTask\"><a href=\"#Handler替代TimerTask\" class=\"headerlink\" title=\"Handler替代TimerTask\"></a>Handler替代TimerTask</h3><p>原文来自：<a href=\"http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/\">http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/</a></p>\n<p>作者文中提到，使用TimerTask更新GUI，debug看起来可以，但实际上根本不起作用。<br>同时作者发现，使用handler可以得到更好的表现。</p>\n<p>下面是一个例子，使用handler在100ms后启动一个Runnable:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">handler.postDelayed(runnable, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure></p>\n<p>下面代码里有一个小技巧，实现每隔100ms运行一次Runnable，就像TimerTask的scheduleAtFixedRate()方法:</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/* do what you need to do */</span></div><div class=\"line\">      foobar();</div><div class=\"line\">      <span class=\"comment\">/* and here comes the \"trick\" */</span></div><div class=\"line\">      handler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">100</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如何取消运行Runnable呢？只需要调用handler.removeCallback(runnable)就可以了。</p>\n<p>这样做还有另一个有点，就是不用总是new Timer(Task)了，可以重复使用上面代码中的handler和runnable。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/05/18/handler-replace-timertask/\">http://agehua.github.io/2017/05/18/handler-replace-timertask/</a></p>"},{"layout":"post","title":"Android Binder机制分析（一）","keywords":"AIDL, Binder","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg","toc":true,"_content":"\n### 背景分析\n最近在学习Android非侵入Hook机制，\n\n6月30日，360开源RePlugin，安卓进入“全面插件化”时代：https://www.itcodemonkey.com/article/278.html\n\n同一天，滴滴开源Android端插件化框架VirtualAPK：https://www.itcodemonkey.com/article/277.html\n\n然后本人发现竟然可以不在清单文件中注册就可以启动Activity，还有这种操作？哈哈。后面会有单独的文章介绍这种骚操作。\n\n在搜索中发现了这篇博客，[\nAndroid系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)。本文大部分转载自原来博客，结合自己的分析，是研究Hook机制前的知识储备。\n\n\n### Android中远程服务调用分析\n简单介绍，跨进程调用一个远程服务需要下面这几步：\n<!--more-->\n#### 1.定义一个AIDL文件：Demo.aidl\n> 类似于定义接口类型，这个AIDL文件将在本地和远端都要使用到\n\n~~~ Java\npackage com.agehua.aidldemo;\ninterface Demo {\n    int sendData(String data);\n    String getData();\n}\n~~~\n\n\n#### 2.定义远程服务\n在远程服务中的onBind方法，实现AIDL接口的具体方法，并且返回Binder对象\n~~~ Java\n//远程服务，应该定义在另个一进程中\npublic class DemoService extends Service {\n\n    @Override\n    public IBinder onBind(Intent intent) {\n       //返回远程的Binder对象，并且实现类\n       return new Demo.Stub() {\n          @Override\n          public int sendData(String data) throws RemoteException {\n            return 0;\n          }\n\n          @Override\n          public String getData() throws RemoteException {\n            return \"\";\n          }\n       }\n    }\n}\n~~~\n\n> 接口方法的具体传递实现都是在远端服务中。\n\n#### 3.本地创建连接对象\n本地创建一个服务连接对象，实现ServiceConnection接口，在连接成功之后，会得到一个远端传递过来的Binder对象，就是上面的远端服务onBind方法返回的，得到Binder对象之后在进行转化就可以得到AIDL对象，然后即可调用方法。\n\n~~~ Java\n//连接远程服务的回调\npublic class DemoConnection implements ServiceConnection {\n\n    @Override\n    public void onServiceConnected(Component name, IBinder service) {\n      //连接成功后，会传递远端的Binder对象\n      Demo demo  =Demo.Stub.asInterface(service);\n      try {\n        demo.setData(\" \");\n        demo.getData();\n      }catch (RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    @Override\n    public void onServiceDisconnected(Component name) {\n      //断开连接\n    }\n}\n~~~\n> 连接成功后，从远端服务中获取到了Binder对象，然后在转化成本地接口对象，即可调用方法。\n\n#### 4、连接服务\n连接服务也是比较简单的，这时候把上面的连接对象传递进去即可\n\n~~~ Java\nIntent intent = new Intent(this, DemoService.class);\nbindService(intent, new DemoConnection(), Context.BIND_AUTO_CREATE);\n~~~\n\n### AIDL实现机制分析\n上面的步骤就可以实现一个远程服务调用了。但是有一个核心的地方就是**Demo.Stub类**，这个类起着重要的作用，下面来分析一下它的实现：\n\n> 每次定义了AIDL接口文件之后，编译一下就会在build/generated/source/目录中产生对应的java文件了：\n\n~~~ Java\npackage com.agehua.aidldemo;\n//IInterface接口由AIDL类去实现。IInterface接口包含一个方法asBinder()\npublic interface Demo extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     * 由Stub类实现Binder类和AIDL接口\n     */\n    public static abstract class Stub extends android.os.Binder implements com.agehua.aidldemo.Demo {\n        private static final java.lang.String DESCRIPTOR = \"com.agehua.aidldemo.Demo\";\n\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.agehua.aidldemo.Demo interface,\n         * generating a proxy if needed.\n         * 将远端传过来的Binder对象转化成本地对象\n         */\n        public static com.agehua.aidldemo.Demo asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            //如果本地进程和服务端都在一个进程中，那么直接返回当前类的IInterface\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.agehua.aidldemo.Demo))) {\n                return ((com.agehua.aidldemo.Demo) iin);\n            }\n            //如果本地进程和服务端不在一个进程中，则返回一个代理对象给客户端\n            return new com.agehua.aidldemo.Demo.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        //处理客户端发过来的请求方法，这里不详细展开了\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_sendData: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    int _result = this.sendData(_arg0);\n                    reply.writeNoException();\n                    reply.writeInt(_result);\n                    return true;\n                }\n                case TRANSACTION_getData: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _result = this.getData();\n                    reply.writeNoException();\n                    reply.writeString(_result);\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        //稍后分析这个类\n        private static class Proxy implements android.app.IServiceConnection {\n          /**\n          ...\n          **/\n        }\n\n    }\n\n    //Demo.aidl提供的方法，由Proxy类去实现，这里不用实现\n    public int sendData(java.lang.String data) throws android.os.RemoteException;\n    //Demo.aidl提供的方法，由Proxy类去实现，这里不用实现\n    public java.lang.String getData() throws android.os.RemoteException;\n}\n~~~\n#### 1、AIDL接口必须实现IInterface接口\n\nIInterface接口包含一个asBinder()方法，由这个方法进行转化对象功能，把当前的AIDL对象转化成一个IBinder对象。\n~~~ Java\npackage android.os;\n\npublic interface IInterface\n{\n    /**\n     * Retrieve the Binder object associated with this interface.\n     * You must use this instead of a plain cast, so that proxy objects\n     * can return the correct result.\n     */\n    public IBinder asBinder();\n}\n~~~\n#### 2、AIDL接口中肯定有一个静态实现类Stub\n\n这个类必须实现Binder类，以及本身的AIDL接口类型。那么这个类就具备了Binder类中的四个功能：\n\n- 1.可以将Binder对象转化成AIDL对象，调用asInterface方法，可以看到这个方法其实和上面的asBinder方法对立的\n\n- 2.通信方法onTransact实现，这个方法是最核心的用于通信之间的逻辑实现\n\n- 3.通过queryLocalInterface方法可以根据类的描述符(字符串可以唯一标识这个远端服务的名称即可)获取到对应的AIDL对象(其实是IInterface类型的)\n\n- 4.在构造方法中必须调用Binder中的attachInterface方法把当前服务对象和描述符进行关联\n\n#### 3、Stub类只是中间者，由Proxy类生成服务端的代理\n> 为什么说是由Proxy类生成服务端的代理的呢？\n\n因为在上面的DemoConnection类中，生成本地Demo对象，是调用了Demo.Stub.asInterface(IBinder)这个方法。\n前面提到，服务端和客户端不在同一个进程的时候，asInterface()方法实际上调用了Demo.Stub.Proxy(IBinder)这个方法。\n\n而且Demo.aidl中定义的抽象方法，具体都是由Proxy类去实现的。\n\nStub类，其实只是远端服务Binder对象的一个中间者，下面看代码：\n\n~~~ Java\n//实现了aidl接口类。\nprivate static class Proxy implements com.agehua.aidldemo.Demo {\n      //保存了一个mRemote变量，这个变量就是由服务端传递过来的IBinder对象\n      private android.os.IBinder mRemote;\n\n      Proxy(android.os.IBinder remote) {\n          mRemote = remote;\n      }\n\n      @Override\n      public android.os.IBinder asBinder() {\n          return mRemote;\n      }\n\n      public java.lang.String getInterfaceDescriptor() {\n          return DESCRIPTOR;\n      }\n\n      @Override\n      public int sendData(java.lang.String data) throws android.os.RemoteException {\n          android.os.Parcel _data = android.os.Parcel.obtain();\n          android.os.Parcel _reply = android.os.Parcel.obtain();\n          int _result;\n          try {\n              _data.writeInterfaceToken(DESCRIPTOR);\n              _data.writeString(data);\n              //调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理\n              mRemote.transact(Stub.TRANSACTION_sendData, _data, _reply, 0);\n              _reply.readException();\n              _result = _reply.readInt();\n          } finally {\n              _reply.recycle();\n              _data.recycle();\n          }\n          return _result;\n      }\n\n      @Override\n      public java.lang.String getData() throws android.os.RemoteException {\n          android.os.Parcel _data = android.os.Parcel.obtain();\n          android.os.Parcel _reply = android.os.Parcel.obtain();\n          java.lang.String _result;\n          try {\n              _data.writeInterfaceToken(DESCRIPTOR);\n              //调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理\n              mRemote.transact(Stub.TRANSACTION_getData, _data, _reply, 0);\n              _reply.readException();\n              _result = _reply.readString();\n          } finally {\n              _reply.recycle();\n              _data.recycle();\n          }\n          return _result;\n      }\n}\n~~~\n> Proxy是Stub类中的一个静态类，Proxy对象就是远端传递过来的Binder对象在本地的代理。这里用到的是静态代理模式。\n\n在服务连接成功后，在onServiceConnected()方法中，返回一个服务端Binder对象，本地通过asInterface()方法生成的一个代理；\n~~~ Java\nDemo demo = Demo.Stub.asInterface(IBinder);\n~~~\n这个demo对象，就是客户端这边用户和服务端交互的中间者。我们在前面的**Stub类的asInterface()方法实现**中可以看到：\n\n借助**queryLocalInterface()**方法根据服务描述符来获取对象，会把远端传递过来的Binder对象转化成一个本地对象：\n~~~ Java\npublic IInterface queryLocalInterface(String descriptor) {\n    if (mDescriptor.equals(descriptor)) {\n        return mOwner;\n    }\n    return null;\n}\n~~~\n\n而这个mOwner和mDescriptor之间的对应关系就在attachInterface方法中进行初始化的，也就是在Stub类的构造方法中\n~~~ Java\npublic void attachInterface(IInterface owner, String descriptor) {\n       mOwner = owner;\n       mDescriptor = descriptor;\n}\n~~~\n\n\n那么现在就清楚了，如果客户端和服务端是在一个进程中，那么其实queryLocalInterface获取的就是Stub对象，如果不在一个进程queryLocalInterface查询的对象肯定为null，因为**new Demo.Stub()**和**Demo.Stub.asInterface(IBinder)**方法分别是在**远端进程**和**本地进程**中调用的，在不同进程有不同虚拟机，肯定查不到mOwner对象的，所以这时候其实是返回的Proxy对象了。\n\n通过上面的讲解之后，发现多进程服务通信基准就是借助Binder对象，先传递Binder对象，然后在把Binder转成可以使用的原生对象即可调用了，而对于Stub类和Proxy类其实就是相当于是服务端和客户端的中间者，把一些逻辑封装起来，这种设计也会显得不是那么凌乱：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-principle.png)\n\n\n### 分析系统服务调用流程\n其实系统中的一些服务使用的时候其实也是跨进程使用，比如下面来看一下著名的PackageManager，IPackageManager，PackageManagerService体系：\n\nPackageManagerService是Android系统中最常用的服务之一。它负责系统中Package的管理，应用程序的安装、卸载、信息查询等。PackageManager获取的信息即来自AndroidManifest.XML\n\n![PackageManagerService体系](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/PackageManagerService.png)\n\n~~~Java\ninterface IPackageManager {\n  boolean isPackageAvailable(String packageName, int userId);\n  PackageInfo getPackageInfo(String packageName, int flags, int userId);\n  int getPackageUid(String packageName, int userId);\n  int[] getPackageGids(String packageName);\n\n  String[] currentToCanonicalPackageNames(String[] names);\n  String[] canonicalToCurrentPackageNames(String[] names);\n\n  PermissionInfo getPermissionInfo(String name, int flags)\n\n  ParceledListSlice<PermissionInfo> queryPermissionsByGroup(String group,\n            int flags)\n\n  //...\n}\n~~~\n上面代码在谷歌的源码中查到，详情点击[链接](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/IPackageManager.aidl)\n\n因为我们还没有编译源码，所以看不到IPackageManager.java，这里可能需要AIDL工具单独编译才能看到了：\n~~~ Java\npublic interface IPackageManager extends android.os.IInterface {\n    //定义内部类Stub，派生自Binder，实现IPackageManager接口\n    public static abstract class Stub extends android.os.Binder implements android.content.pm.IPackageManager {\n\n        private static final java.lang.String DESCRIPTOR = \"android.content.pm.IPackageManager\";\n        publicStub() {\n             this.attachInterface(this,DESCRIPTOR);\n        }\n\n        //......\n\n        //定义Stub的内部类Proxy，实现IPackageManager接口\n        private static class Proxy implements android.content.pm.IPackageManager{\n        //通过mRemote变量和服务端交互\n        private android.os.IBinder mRemote;\n\n           Proxy(android.os.IBinderremote) {\n              mRemote = remote;\n           }\n           //......\n        }\n        //......\n}\n~~~\n> 这里看到了熟悉的远端服务中间者Stub和本地端的中间者Proxy类了，而这两个类的规则都和上面一样的。\n\n下面来看一下远端服务实现代码PackageManagerService.java，(这个类就可以在IDE中看到了)：\n~~~ Java\npublic class PackageManagerService extends IPackageManager.Stub {\n    static final String TAG = \"PackageManager\";\n    static final boolean DEBUG_SETTINGS = false;\n    static final boolean DEBUG_PREFERRED = false;\n    static final boolean DEBUG_UPGRADE = false;\n    static final boolean DEBUG_DOMAIN_VERIFICATION = false;\n    //...\n}\n~~~\n> 实现了上面的的Stub类功能。\n\n下面我们再走一遍获取PackageManager的流程：\n~~~ Java\nPackageManager pm = getPackageManager();\n~~~\n而这个getPackageManager方法是在ContextImpl.java中实现的：\n\n~~~ Java\n@Override\npublic PackageManager getPackageManager() {\n    if (mPackageManager != null) {\n        return mPackageManager;\n    }\n\n    IPackageManager pm = ActivityThread.getPackageManager();\n    if (pm != null) {\n        // Doesn't matter if we make more than one instance.\n        return (mPackageManager = new ApplicationPackageManager(this, pm));\n    }\n\n    return null;\n}\n~~~\n具体内容实现是在ActivityThread.getPackageManager()方法中：\n~~~ Java\npublic static IPackageManager getPackageManager() {\n    if (sPackageManager != null) {\n        //Slog.v(\"PackageManager\", \"returning cur default = \" + sPackageManager);\n        return sPackageManager;\n    }\n    IBinder b = ServiceManager.getService(\"package\");\n    //Slog.v(\"PackageManager\", \"default service binder = \" + b);\n    sPackageManager = IPackageManager.Stub.asInterface(b);\n    //Slog.v(\"PackageManager\", \"default service = \" + sPackageManager);\n    return sPackageManager;\n}\n~~~\n\n看到了吧，IPackageManager.Stub.asInterface(b)中的参数b由**ServiceManager.getService**方法获取到。然后在使用Stub的asInterface方法进行转化成本地的PackageManager对象，其实就是那个Proxy对象。然后就可以通过PackageManager来调用方法和远端的PackageManagerService服务进行通信了。\n\n而DemoService是在DemoConnection（继承自ServiceConnection）的onServiceConnected回调中得到远端的IBinder对象，然后获得Proxy对象。\n\n> 这里与自定义远程服务然后调用的区别就是，系统的远程服务都是由ServiceManager保存的，也就是由系统去创建和管理；而自定义的远程服务由开发者去创建、维护和销毁\n\n通过上面的PackageManager案例可以分析，我们在使用系统中的服务的时候的流程都是如此：\n\n![系统服务远程调用详情](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-system-service.png)\n\n总结一下，每个应用在使用系统服务的时候，都会走这么几步：\n\n- 1、调用getService(String serviceName)方法获取服务对象\n- 2、而getSystemService一般都是在ContextImpl类中实现的，其实是调用了ServiceManager的getService方法\n- 3、调用ServiceManager的getService方法获取远端服务的IBinder对象\n- 4、有了远端服务的IBinder对象之后，在使用远端服务的中间者类Stub进行转化对象asInterface方法\n- 5、因为系统中的服务获取都是肯定是跨进程的，远端服务都是在system_server进程中的，所以asInterface方法中返回的是Proxy代理对象，也就是本地端的中间者。\n- 6、最后返回的对象其实就是这个Proxy对象，而这个对象内部使用了静态代理方式，内部有一个来自远端的mRemote变量即IBinder对象。然后直接调用方法其实就是调用mRemote的transact方法进行通信了。\n\n所以在这个过程中可以看到有两个对象很重要，一个是ServiceManager，一个是IBinder对象。[下篇文章](http://agehua.github.io/2017/07/10/android-binder-principle2/)再来一一介绍\n\n\n\n参考文献：\n\n[Android系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n《Android上玩玩Hook？》: http://blog.csdn.net/yzzst/article/details/47318751\n\n《进击的Android注入术<一>》:\nhttp://blog.csdn.net/l173864930/article/details/38455951\n\n极客学院——深入理解Android卷②：\nhttp://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html\n","source":"_posts/2017-07-08-android-binder-principle.md","raw":"---\nlayout: post\ntitle:  Android Binder机制分析（一）\ncategory: accumulation\ntags:\n  - AIDL\n  - Binder\nkeywords: AIDL, Binder\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Almond%20Tree.jpg\ntoc: true\n---\n\n### 背景分析\n最近在学习Android非侵入Hook机制，\n\n6月30日，360开源RePlugin，安卓进入“全面插件化”时代：https://www.itcodemonkey.com/article/278.html\n\n同一天，滴滴开源Android端插件化框架VirtualAPK：https://www.itcodemonkey.com/article/277.html\n\n然后本人发现竟然可以不在清单文件中注册就可以启动Activity，还有这种操作？哈哈。后面会有单独的文章介绍这种骚操作。\n\n在搜索中发现了这篇博客，[\nAndroid系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)。本文大部分转载自原来博客，结合自己的分析，是研究Hook机制前的知识储备。\n\n\n### Android中远程服务调用分析\n简单介绍，跨进程调用一个远程服务需要下面这几步：\n<!--more-->\n#### 1.定义一个AIDL文件：Demo.aidl\n> 类似于定义接口类型，这个AIDL文件将在本地和远端都要使用到\n\n~~~ Java\npackage com.agehua.aidldemo;\ninterface Demo {\n    int sendData(String data);\n    String getData();\n}\n~~~\n\n\n#### 2.定义远程服务\n在远程服务中的onBind方法，实现AIDL接口的具体方法，并且返回Binder对象\n~~~ Java\n//远程服务，应该定义在另个一进程中\npublic class DemoService extends Service {\n\n    @Override\n    public IBinder onBind(Intent intent) {\n       //返回远程的Binder对象，并且实现类\n       return new Demo.Stub() {\n          @Override\n          public int sendData(String data) throws RemoteException {\n            return 0;\n          }\n\n          @Override\n          public String getData() throws RemoteException {\n            return \"\";\n          }\n       }\n    }\n}\n~~~\n\n> 接口方法的具体传递实现都是在远端服务中。\n\n#### 3.本地创建连接对象\n本地创建一个服务连接对象，实现ServiceConnection接口，在连接成功之后，会得到一个远端传递过来的Binder对象，就是上面的远端服务onBind方法返回的，得到Binder对象之后在进行转化就可以得到AIDL对象，然后即可调用方法。\n\n~~~ Java\n//连接远程服务的回调\npublic class DemoConnection implements ServiceConnection {\n\n    @Override\n    public void onServiceConnected(Component name, IBinder service) {\n      //连接成功后，会传递远端的Binder对象\n      Demo demo  =Demo.Stub.asInterface(service);\n      try {\n        demo.setData(\" \");\n        demo.getData();\n      }catch (RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    @Override\n    public void onServiceDisconnected(Component name) {\n      //断开连接\n    }\n}\n~~~\n> 连接成功后，从远端服务中获取到了Binder对象，然后在转化成本地接口对象，即可调用方法。\n\n#### 4、连接服务\n连接服务也是比较简单的，这时候把上面的连接对象传递进去即可\n\n~~~ Java\nIntent intent = new Intent(this, DemoService.class);\nbindService(intent, new DemoConnection(), Context.BIND_AUTO_CREATE);\n~~~\n\n### AIDL实现机制分析\n上面的步骤就可以实现一个远程服务调用了。但是有一个核心的地方就是**Demo.Stub类**，这个类起着重要的作用，下面来分析一下它的实现：\n\n> 每次定义了AIDL接口文件之后，编译一下就会在build/generated/source/目录中产生对应的java文件了：\n\n~~~ Java\npackage com.agehua.aidldemo;\n//IInterface接口由AIDL类去实现。IInterface接口包含一个方法asBinder()\npublic interface Demo extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     * 由Stub类实现Binder类和AIDL接口\n     */\n    public static abstract class Stub extends android.os.Binder implements com.agehua.aidldemo.Demo {\n        private static final java.lang.String DESCRIPTOR = \"com.agehua.aidldemo.Demo\";\n\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.agehua.aidldemo.Demo interface,\n         * generating a proxy if needed.\n         * 将远端传过来的Binder对象转化成本地对象\n         */\n        public static com.agehua.aidldemo.Demo asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            //如果本地进程和服务端都在一个进程中，那么直接返回当前类的IInterface\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.agehua.aidldemo.Demo))) {\n                return ((com.agehua.aidldemo.Demo) iin);\n            }\n            //如果本地进程和服务端不在一个进程中，则返回一个代理对象给客户端\n            return new com.agehua.aidldemo.Demo.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        //处理客户端发过来的请求方法，这里不详细展开了\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_sendData: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    int _result = this.sendData(_arg0);\n                    reply.writeNoException();\n                    reply.writeInt(_result);\n                    return true;\n                }\n                case TRANSACTION_getData: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _result = this.getData();\n                    reply.writeNoException();\n                    reply.writeString(_result);\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        //稍后分析这个类\n        private static class Proxy implements android.app.IServiceConnection {\n          /**\n          ...\n          **/\n        }\n\n    }\n\n    //Demo.aidl提供的方法，由Proxy类去实现，这里不用实现\n    public int sendData(java.lang.String data) throws android.os.RemoteException;\n    //Demo.aidl提供的方法，由Proxy类去实现，这里不用实现\n    public java.lang.String getData() throws android.os.RemoteException;\n}\n~~~\n#### 1、AIDL接口必须实现IInterface接口\n\nIInterface接口包含一个asBinder()方法，由这个方法进行转化对象功能，把当前的AIDL对象转化成一个IBinder对象。\n~~~ Java\npackage android.os;\n\npublic interface IInterface\n{\n    /**\n     * Retrieve the Binder object associated with this interface.\n     * You must use this instead of a plain cast, so that proxy objects\n     * can return the correct result.\n     */\n    public IBinder asBinder();\n}\n~~~\n#### 2、AIDL接口中肯定有一个静态实现类Stub\n\n这个类必须实现Binder类，以及本身的AIDL接口类型。那么这个类就具备了Binder类中的四个功能：\n\n- 1.可以将Binder对象转化成AIDL对象，调用asInterface方法，可以看到这个方法其实和上面的asBinder方法对立的\n\n- 2.通信方法onTransact实现，这个方法是最核心的用于通信之间的逻辑实现\n\n- 3.通过queryLocalInterface方法可以根据类的描述符(字符串可以唯一标识这个远端服务的名称即可)获取到对应的AIDL对象(其实是IInterface类型的)\n\n- 4.在构造方法中必须调用Binder中的attachInterface方法把当前服务对象和描述符进行关联\n\n#### 3、Stub类只是中间者，由Proxy类生成服务端的代理\n> 为什么说是由Proxy类生成服务端的代理的呢？\n\n因为在上面的DemoConnection类中，生成本地Demo对象，是调用了Demo.Stub.asInterface(IBinder)这个方法。\n前面提到，服务端和客户端不在同一个进程的时候，asInterface()方法实际上调用了Demo.Stub.Proxy(IBinder)这个方法。\n\n而且Demo.aidl中定义的抽象方法，具体都是由Proxy类去实现的。\n\nStub类，其实只是远端服务Binder对象的一个中间者，下面看代码：\n\n~~~ Java\n//实现了aidl接口类。\nprivate static class Proxy implements com.agehua.aidldemo.Demo {\n      //保存了一个mRemote变量，这个变量就是由服务端传递过来的IBinder对象\n      private android.os.IBinder mRemote;\n\n      Proxy(android.os.IBinder remote) {\n          mRemote = remote;\n      }\n\n      @Override\n      public android.os.IBinder asBinder() {\n          return mRemote;\n      }\n\n      public java.lang.String getInterfaceDescriptor() {\n          return DESCRIPTOR;\n      }\n\n      @Override\n      public int sendData(java.lang.String data) throws android.os.RemoteException {\n          android.os.Parcel _data = android.os.Parcel.obtain();\n          android.os.Parcel _reply = android.os.Parcel.obtain();\n          int _result;\n          try {\n              _data.writeInterfaceToken(DESCRIPTOR);\n              _data.writeString(data);\n              //调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理\n              mRemote.transact(Stub.TRANSACTION_sendData, _data, _reply, 0);\n              _reply.readException();\n              _result = _reply.readInt();\n          } finally {\n              _reply.recycle();\n              _data.recycle();\n          }\n          return _result;\n      }\n\n      @Override\n      public java.lang.String getData() throws android.os.RemoteException {\n          android.os.Parcel _data = android.os.Parcel.obtain();\n          android.os.Parcel _reply = android.os.Parcel.obtain();\n          java.lang.String _result;\n          try {\n              _data.writeInterfaceToken(DESCRIPTOR);\n              //调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理\n              mRemote.transact(Stub.TRANSACTION_getData, _data, _reply, 0);\n              _reply.readException();\n              _result = _reply.readString();\n          } finally {\n              _reply.recycle();\n              _data.recycle();\n          }\n          return _result;\n      }\n}\n~~~\n> Proxy是Stub类中的一个静态类，Proxy对象就是远端传递过来的Binder对象在本地的代理。这里用到的是静态代理模式。\n\n在服务连接成功后，在onServiceConnected()方法中，返回一个服务端Binder对象，本地通过asInterface()方法生成的一个代理；\n~~~ Java\nDemo demo = Demo.Stub.asInterface(IBinder);\n~~~\n这个demo对象，就是客户端这边用户和服务端交互的中间者。我们在前面的**Stub类的asInterface()方法实现**中可以看到：\n\n借助**queryLocalInterface()**方法根据服务描述符来获取对象，会把远端传递过来的Binder对象转化成一个本地对象：\n~~~ Java\npublic IInterface queryLocalInterface(String descriptor) {\n    if (mDescriptor.equals(descriptor)) {\n        return mOwner;\n    }\n    return null;\n}\n~~~\n\n而这个mOwner和mDescriptor之间的对应关系就在attachInterface方法中进行初始化的，也就是在Stub类的构造方法中\n~~~ Java\npublic void attachInterface(IInterface owner, String descriptor) {\n       mOwner = owner;\n       mDescriptor = descriptor;\n}\n~~~\n\n\n那么现在就清楚了，如果客户端和服务端是在一个进程中，那么其实queryLocalInterface获取的就是Stub对象，如果不在一个进程queryLocalInterface查询的对象肯定为null，因为**new Demo.Stub()**和**Demo.Stub.asInterface(IBinder)**方法分别是在**远端进程**和**本地进程**中调用的，在不同进程有不同虚拟机，肯定查不到mOwner对象的，所以这时候其实是返回的Proxy对象了。\n\n通过上面的讲解之后，发现多进程服务通信基准就是借助Binder对象，先传递Binder对象，然后在把Binder转成可以使用的原生对象即可调用了，而对于Stub类和Proxy类其实就是相当于是服务端和客户端的中间者，把一些逻辑封装起来，这种设计也会显得不是那么凌乱：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-principle.png)\n\n\n### 分析系统服务调用流程\n其实系统中的一些服务使用的时候其实也是跨进程使用，比如下面来看一下著名的PackageManager，IPackageManager，PackageManagerService体系：\n\nPackageManagerService是Android系统中最常用的服务之一。它负责系统中Package的管理，应用程序的安装、卸载、信息查询等。PackageManager获取的信息即来自AndroidManifest.XML\n\n![PackageManagerService体系](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/PackageManagerService.png)\n\n~~~Java\ninterface IPackageManager {\n  boolean isPackageAvailable(String packageName, int userId);\n  PackageInfo getPackageInfo(String packageName, int flags, int userId);\n  int getPackageUid(String packageName, int userId);\n  int[] getPackageGids(String packageName);\n\n  String[] currentToCanonicalPackageNames(String[] names);\n  String[] canonicalToCurrentPackageNames(String[] names);\n\n  PermissionInfo getPermissionInfo(String name, int flags)\n\n  ParceledListSlice<PermissionInfo> queryPermissionsByGroup(String group,\n            int flags)\n\n  //...\n}\n~~~\n上面代码在谷歌的源码中查到，详情点击[链接](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/IPackageManager.aidl)\n\n因为我们还没有编译源码，所以看不到IPackageManager.java，这里可能需要AIDL工具单独编译才能看到了：\n~~~ Java\npublic interface IPackageManager extends android.os.IInterface {\n    //定义内部类Stub，派生自Binder，实现IPackageManager接口\n    public static abstract class Stub extends android.os.Binder implements android.content.pm.IPackageManager {\n\n        private static final java.lang.String DESCRIPTOR = \"android.content.pm.IPackageManager\";\n        publicStub() {\n             this.attachInterface(this,DESCRIPTOR);\n        }\n\n        //......\n\n        //定义Stub的内部类Proxy，实现IPackageManager接口\n        private static class Proxy implements android.content.pm.IPackageManager{\n        //通过mRemote变量和服务端交互\n        private android.os.IBinder mRemote;\n\n           Proxy(android.os.IBinderremote) {\n              mRemote = remote;\n           }\n           //......\n        }\n        //......\n}\n~~~\n> 这里看到了熟悉的远端服务中间者Stub和本地端的中间者Proxy类了，而这两个类的规则都和上面一样的。\n\n下面来看一下远端服务实现代码PackageManagerService.java，(这个类就可以在IDE中看到了)：\n~~~ Java\npublic class PackageManagerService extends IPackageManager.Stub {\n    static final String TAG = \"PackageManager\";\n    static final boolean DEBUG_SETTINGS = false;\n    static final boolean DEBUG_PREFERRED = false;\n    static final boolean DEBUG_UPGRADE = false;\n    static final boolean DEBUG_DOMAIN_VERIFICATION = false;\n    //...\n}\n~~~\n> 实现了上面的的Stub类功能。\n\n下面我们再走一遍获取PackageManager的流程：\n~~~ Java\nPackageManager pm = getPackageManager();\n~~~\n而这个getPackageManager方法是在ContextImpl.java中实现的：\n\n~~~ Java\n@Override\npublic PackageManager getPackageManager() {\n    if (mPackageManager != null) {\n        return mPackageManager;\n    }\n\n    IPackageManager pm = ActivityThread.getPackageManager();\n    if (pm != null) {\n        // Doesn't matter if we make more than one instance.\n        return (mPackageManager = new ApplicationPackageManager(this, pm));\n    }\n\n    return null;\n}\n~~~\n具体内容实现是在ActivityThread.getPackageManager()方法中：\n~~~ Java\npublic static IPackageManager getPackageManager() {\n    if (sPackageManager != null) {\n        //Slog.v(\"PackageManager\", \"returning cur default = \" + sPackageManager);\n        return sPackageManager;\n    }\n    IBinder b = ServiceManager.getService(\"package\");\n    //Slog.v(\"PackageManager\", \"default service binder = \" + b);\n    sPackageManager = IPackageManager.Stub.asInterface(b);\n    //Slog.v(\"PackageManager\", \"default service = \" + sPackageManager);\n    return sPackageManager;\n}\n~~~\n\n看到了吧，IPackageManager.Stub.asInterface(b)中的参数b由**ServiceManager.getService**方法获取到。然后在使用Stub的asInterface方法进行转化成本地的PackageManager对象，其实就是那个Proxy对象。然后就可以通过PackageManager来调用方法和远端的PackageManagerService服务进行通信了。\n\n而DemoService是在DemoConnection（继承自ServiceConnection）的onServiceConnected回调中得到远端的IBinder对象，然后获得Proxy对象。\n\n> 这里与自定义远程服务然后调用的区别就是，系统的远程服务都是由ServiceManager保存的，也就是由系统去创建和管理；而自定义的远程服务由开发者去创建、维护和销毁\n\n通过上面的PackageManager案例可以分析，我们在使用系统中的服务的时候的流程都是如此：\n\n![系统服务远程调用详情](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-system-service.png)\n\n总结一下，每个应用在使用系统服务的时候，都会走这么几步：\n\n- 1、调用getService(String serviceName)方法获取服务对象\n- 2、而getSystemService一般都是在ContextImpl类中实现的，其实是调用了ServiceManager的getService方法\n- 3、调用ServiceManager的getService方法获取远端服务的IBinder对象\n- 4、有了远端服务的IBinder对象之后，在使用远端服务的中间者类Stub进行转化对象asInterface方法\n- 5、因为系统中的服务获取都是肯定是跨进程的，远端服务都是在system_server进程中的，所以asInterface方法中返回的是Proxy代理对象，也就是本地端的中间者。\n- 6、最后返回的对象其实就是这个Proxy对象，而这个对象内部使用了静态代理方式，内部有一个来自远端的mRemote变量即IBinder对象。然后直接调用方法其实就是调用mRemote的transact方法进行通信了。\n\n所以在这个过程中可以看到有两个对象很重要，一个是ServiceManager，一个是IBinder对象。[下篇文章](http://agehua.github.io/2017/07/10/android-binder-principle2/)再来一一介绍\n\n\n\n参考文献：\n\n[Android系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n《Android上玩玩Hook？》: http://blog.csdn.net/yzzst/article/details/47318751\n\n《进击的Android注入术<一>》:\nhttp://blog.csdn.net/l173864930/article/details/38455951\n\n极客学院——深入理解Android卷②：\nhttp://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html\n","slug":"android-binder-principle","published":1,"date":"2017-07-07T16:00:00.000Z","updated":"2017-11-23T07:15:37.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec11003hd6yk3tz2q2a5","content":"<h3 id=\"背景分析\"><a href=\"#背景分析\" class=\"headerlink\" title=\"背景分析\"></a>背景分析</h3><p>最近在学习Android非侵入Hook机制，</p>\n<p>6月30日，360开源RePlugin，安卓进入“全面插件化”时代：<a href=\"https://www.itcodemonkey.com/article/278.html\" target=\"_blank\" rel=\"external\">https://www.itcodemonkey.com/article/278.html</a></p>\n<p>同一天，滴滴开源Android端插件化框架VirtualAPK：<a href=\"https://www.itcodemonkey.com/article/277.html\" target=\"_blank\" rel=\"external\">https://www.itcodemonkey.com/article/277.html</a></p>\n<p>然后本人发现竟然可以不在清单文件中注册就可以启动Activity，还有这种操作？哈哈。后面会有单独的文章介绍这种骚操作。</p>\n<p>在搜索中发现了这篇博客，<a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"external\"><br>Android系统篇之—-Binder机制和远程服务调用机制分析</a>。本文大部分转载自原来博客，结合自己的分析，是研究Hook机制前的知识储备。</p>\n<h3 id=\"Android中远程服务调用分析\"><a href=\"#Android中远程服务调用分析\" class=\"headerlink\" title=\"Android中远程服务调用分析\"></a>Android中远程服务调用分析</h3><p>简单介绍，跨进程调用一个远程服务需要下面这几步：<br><a id=\"more\"></a></p>\n<h4 id=\"1-定义一个AIDL文件：Demo-aidl\"><a href=\"#1-定义一个AIDL文件：Demo-aidl\" class=\"headerlink\" title=\"1.定义一个AIDL文件：Demo.aidl\"></a>1.定义一个AIDL文件：Demo.aidl</h4><blockquote>\n<p>类似于定义接口类型，这个AIDL文件将在本地和远端都要使用到</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.agehua.aidldemo;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(String data)</span></span>;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-定义远程服务\"><a href=\"#2-定义远程服务\" class=\"headerlink\" title=\"2.定义远程服务\"></a>2.定义远程服务</h4><p>在远程服务中的onBind方法，实现AIDL接口的具体方法，并且返回Binder对象<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//远程服务，应该定义在另个一进程中</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//返回远程的Binder对象，并且实现类</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Demo.Stub() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(String data)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>接口方法的具体传递实现都是在远端服务中。</p>\n</blockquote>\n<h4 id=\"3-本地创建连接对象\"><a href=\"#3-本地创建连接对象\" class=\"headerlink\" title=\"3.本地创建连接对象\"></a>3.本地创建连接对象</h4><p>本地创建一个服务连接对象，实现ServiceConnection接口，在连接成功之后，会得到一个远端传递过来的Binder对象，就是上面的远端服务onBind方法返回的，得到Binder对象之后在进行转化就可以得到AIDL对象，然后即可调用方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//连接远程服务的回调</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(Component name, IBinder service)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//连接成功后，会传递远端的Binder对象</span></div><div class=\"line\">      Demo demo  =Demo.Stub.asInterface(service);</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        demo.setData(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        demo.getData();</div><div class=\"line\">      &#125;<span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(Component name)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//断开连接</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>连接成功后，从远端服务中获取到了Binder对象，然后在转化成本地接口对象，即可调用方法。</p>\n</blockquote>\n<h4 id=\"4、连接服务\"><a href=\"#4、连接服务\" class=\"headerlink\" title=\"4、连接服务\"></a>4、连接服务</h4><p>连接服务也是比较简单的，这时候把上面的连接对象传递进去即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, DemoService.class);</div><div class=\"line\">bindService(intent, <span class=\"keyword\">new</span> DemoConnection(), Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure>\n<h3 id=\"AIDL实现机制分析\"><a href=\"#AIDL实现机制分析\" class=\"headerlink\" title=\"AIDL实现机制分析\"></a>AIDL实现机制分析</h3><p>上面的步骤就可以实现一个远程服务调用了。但是有一个核心的地方就是<strong>Demo.Stub类</strong>，这个类起着重要的作用，下面来分析一下它的实现：</p>\n<blockquote>\n<p>每次定义了AIDL接口文件之后，编译一下就会在build/generated/source/目录中产生对应的java文件了：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.agehua.aidldemo;</div><div class=\"line\"><span class=\"comment\">//IInterface接口由AIDL类去实现。IInterface接口包含一个方法asBinder()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     * 由Stub类实现Binder类和AIDL接口</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">agehua</span>.<span class=\"title\">aidldemo</span>.<span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.agehua.aidldemo.Demo\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Cast an IBinder object into an com.agehua.aidldemo.Demo interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         * 将远端传过来的Binder对象转化成本地对象</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.agehua.aidldemo.<span class=\"function\">Demo <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果本地进程和服务端都在一个进程中，那么直接返回当前类的IInterface</span></div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.agehua.aidldemo.Demo))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.agehua.aidldemo.Demo) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果本地进程和服务端不在一个进程中，则返回一个代理对象给客户端</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.agehua.aidldemo.Demo.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//处理客户端发过来的请求方法，这里不详细展开了</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_sendData: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">int</span> _result = <span class=\"keyword\">this</span>.sendData(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeInt(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_getData: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _result = <span class=\"keyword\">this</span>.getData();</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeString(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//稍后分析这个类</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">app</span>.<span class=\"title\">IServiceConnection</span> </span>&#123;</div><div class=\"line\">          <span class=\"comment\">/**</span></div><div class=\"line\">          ...</div><div class=\"line\">          **/</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Demo.aidl提供的方法，由Proxy类去实现，这里不用实现</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(java.lang.String data)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">    <span class=\"comment\">//Demo.aidl提供的方法，由Proxy类去实现，这里不用实现</span></div><div class=\"line\">    <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1、AIDL接口必须实现IInterface接口\"><a href=\"#1、AIDL接口必须实现IInterface接口\" class=\"headerlink\" title=\"1、AIDL接口必须实现IInterface接口\"></a>1、AIDL接口必须实现IInterface接口</h4><p>IInterface接口包含一个asBinder()方法，由这个方法进行转化对象功能，把当前的AIDL对象转化成一个IBinder对象。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> android.os;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IInterface</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Retrieve the Binder object associated with this interface.</div><div class=\"line\">     * You must use this instead of a plain cast, so that proxy objects</div><div class=\"line\">     * can return the correct result.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2、AIDL接口中肯定有一个静态实现类Stub\"><a href=\"#2、AIDL接口中肯定有一个静态实现类Stub\" class=\"headerlink\" title=\"2、AIDL接口中肯定有一个静态实现类Stub\"></a>2、AIDL接口中肯定有一个静态实现类Stub</h4><p>这个类必须实现Binder类，以及本身的AIDL接口类型。那么这个类就具备了Binder类中的四个功能：</p>\n<ul>\n<li><p>1.可以将Binder对象转化成AIDL对象，调用asInterface方法，可以看到这个方法其实和上面的asBinder方法对立的</p>\n</li>\n<li><p>2.通信方法onTransact实现，这个方法是最核心的用于通信之间的逻辑实现</p>\n</li>\n<li><p>3.通过queryLocalInterface方法可以根据类的描述符(字符串可以唯一标识这个远端服务的名称即可)获取到对应的AIDL对象(其实是IInterface类型的)</p>\n</li>\n<li><p>4.在构造方法中必须调用Binder中的attachInterface方法把当前服务对象和描述符进行关联</p>\n</li>\n</ul>\n<h4 id=\"3、Stub类只是中间者，由Proxy类生成服务端的代理\"><a href=\"#3、Stub类只是中间者，由Proxy类生成服务端的代理\" class=\"headerlink\" title=\"3、Stub类只是中间者，由Proxy类生成服务端的代理\"></a>3、Stub类只是中间者，由Proxy类生成服务端的代理</h4><blockquote>\n<p>为什么说是由Proxy类生成服务端的代理的呢？</p>\n</blockquote>\n<p>因为在上面的DemoConnection类中，生成本地Demo对象，是调用了Demo.Stub.asInterface(IBinder)这个方法。<br>前面提到，服务端和客户端不在同一个进程的时候，asInterface()方法实际上调用了Demo.Stub.Proxy(IBinder)这个方法。</p>\n<p>而且Demo.aidl中定义的抽象方法，具体都是由Proxy类去实现的。</p>\n<p>Stub类，其实只是远端服务Binder对象的一个中间者，下面看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现了aidl接口类。</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">agehua</span>.<span class=\"title\">aidldemo</span>.<span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//保存了一个mRemote变量，这个变量就是由服务端传递过来的IBinder对象</span></div><div class=\"line\">      <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">      Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">          mRemote = remote;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(java.lang.String data)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">          android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">          android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">          <span class=\"keyword\">int</span> _result;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">              _data.writeString(data);</div><div class=\"line\">              <span class=\"comment\">//调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理</span></div><div class=\"line\">              mRemote.transact(Stub.TRANSACTION_sendData, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">              _reply.readException();</div><div class=\"line\">              _result = _reply.readInt();</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              _reply.recycle();</div><div class=\"line\">              _data.recycle();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> _result;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">          android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">          android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">          java.lang.String _result;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">              <span class=\"comment\">//调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理</span></div><div class=\"line\">              mRemote.transact(Stub.TRANSACTION_getData, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">              _reply.readException();</div><div class=\"line\">              _result = _reply.readString();</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              _reply.recycle();</div><div class=\"line\">              _data.recycle();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> _result;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Proxy是Stub类中的一个静态类，Proxy对象就是远端传递过来的Binder对象在本地的代理。这里用到的是静态代理模式。</p>\n</blockquote>\n<p>在服务连接成功后，在onServiceConnected()方法中，返回一个服务端Binder对象，本地通过asInterface()方法生成的一个代理；<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Demo demo = Demo.Stub.asInterface(IBinder);</div></pre></td></tr></table></figure></p>\n<p>这个demo对象，就是客户端这边用户和服务端交互的中间者。我们在前面的<strong>Stub类的asInterface()方法实现</strong>中可以看到：</p>\n<p>借助<strong>queryLocalInterface()</strong>方法根据服务描述符来获取对象，会把远端传递过来的Binder对象转化成一个本地对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IInterface <span class=\"title\">queryLocalInterface</span><span class=\"params\">(String descriptor)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDescriptor.equals(descriptor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mOwner;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而这个mOwner和mDescriptor之间的对应关系就在attachInterface方法中进行初始化的，也就是在Stub类的构造方法中<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachInterface</span><span class=\"params\">(IInterface owner, String descriptor)</span> </span>&#123;</div><div class=\"line\">       mOwner = owner;</div><div class=\"line\">       mDescriptor = descriptor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么现在就清楚了，如果客户端和服务端是在一个进程中，那么其实queryLocalInterface获取的就是Stub对象，如果不在一个进程queryLocalInterface查询的对象肯定为null，因为<strong>new Demo.Stub()</strong>和<strong>Demo.Stub.asInterface(IBinder)</strong>方法分别是在<strong>远端进程</strong>和<strong>本地进程</strong>中调用的，在不同进程有不同虚拟机，肯定查不到mOwner对象的，所以这时候其实是返回的Proxy对象了。</p>\n<p>通过上面的讲解之后，发现多进程服务通信基准就是借助Binder对象，先传递Binder对象，然后在把Binder转成可以使用的原生对象即可调用了，而对于Stub类和Proxy类其实就是相当于是服务端和客户端的中间者，把一些逻辑封装起来，这种设计也会显得不是那么凌乱：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-principle.png\" alt=\"\"></p>\n<h3 id=\"分析系统服务调用流程\"><a href=\"#分析系统服务调用流程\" class=\"headerlink\" title=\"分析系统服务调用流程\"></a>分析系统服务调用流程</h3><p>其实系统中的一些服务使用的时候其实也是跨进程使用，比如下面来看一下著名的PackageManager，IPackageManager，PackageManagerService体系：</p>\n<p>PackageManagerService是Android系统中最常用的服务之一。它负责系统中Package的管理，应用程序的安装、卸载、信息查询等。PackageManager获取的信息即来自AndroidManifest.XML</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/PackageManagerService.png\" alt=\"PackageManagerService体系\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPackageManager</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPackageAvailable</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"function\">PackageInfo <span class=\"title\">getPackageInfo</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPackageUid</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"keyword\">int</span>[] getPackageGids(String packageName);</div><div class=\"line\"></div><div class=\"line\">  String[] currentToCanonicalPackageNames(String[] names);</div><div class=\"line\">  String[] canonicalToCurrentPackageNames(String[] names);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\">PermissionInfo <span class=\"title\">getPermissionInfo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\"></div><div class=\"line\">  ParceledListSlice&lt;PermissionInfo&gt; <span class=\"title\">queryPermissionsByGroup</span><span class=\"params\">(String group,</span></div><div class=\"line\">            <span class=\"keyword\">int</span> flags)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码在谷歌的源码中查到，详情点击<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/IPackageManager.aidl\" target=\"_blank\" rel=\"external\">链接</a></p>\n<p>因为我们还没有编译源码，所以看不到IPackageManager.java，这里可能需要AIDL工具单独编译才能看到了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPackageManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义内部类Stub，派生自Binder，实现IPackageManager接口</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">content</span>.<span class=\"title\">pm</span>.<span class=\"title\">IPackageManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"android.content.pm.IPackageManager\"</span>;</div><div class=\"line\">        publicStub() &#123;</div><div class=\"line\">             <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>,DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//定义Stub的内部类Proxy，实现IPackageManager接口</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">content</span>.<span class=\"title\">pm</span>.<span class=\"title\">IPackageManager</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//通过mRemote变量和服务端交互</span></div><div class=\"line\">        <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">           Proxy(android.os.IBinderremote) &#123;</div><div class=\"line\">              mRemote = remote;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">//......</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里看到了熟悉的远端服务中间者Stub和本地端的中间者Proxy类了，而这两个类的规则都和上面一样的。</p>\n</blockquote>\n<p>下面来看一下远端服务实现代码PackageManagerService.java，(这个类就可以在IDE中看到了)：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IPackageManager</span>.<span class=\"title\">Stub</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"PackageManager\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_SETTINGS = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_PREFERRED = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_UPGRADE = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_DOMAIN_VERIFICATION = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>实现了上面的的Stub类功能。</p>\n</blockquote>\n<p>下面我们再走一遍获取PackageManager的流程：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">PackageManager pm = getPackageManager();</div></pre></td></tr></table></figure></p>\n<p>而这个getPackageManager方法是在ContextImpl.java中实现的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PackageManager <span class=\"title\">getPackageManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPackageManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mPackageManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    IPackageManager pm = ActivityThread.getPackageManager();</div><div class=\"line\">    <span class=\"keyword\">if</span> (pm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Doesn't matter if we make more than one instance.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (mPackageManager = <span class=\"keyword\">new</span> ApplicationPackageManager(<span class=\"keyword\">this</span>, pm));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体内容实现是在ActivityThread.getPackageManager()方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPackageManager <span class=\"title\">getPackageManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sPackageManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//Slog.v(\"PackageManager\", \"returning cur default = \" + sPackageManager);</span></div><div class=\"line\">        <span class=\"keyword\">return</span> sPackageManager;</div><div class=\"line\">    &#125;</div><div class=\"line\">    IBinder b = ServiceManager.getService(<span class=\"string\">\"package\"</span>);</div><div class=\"line\">    <span class=\"comment\">//Slog.v(\"PackageManager\", \"default service binder = \" + b);</span></div><div class=\"line\">    sPackageManager = IPackageManager.Stub.asInterface(b);</div><div class=\"line\">    <span class=\"comment\">//Slog.v(\"PackageManager\", \"default service = \" + sPackageManager);</span></div><div class=\"line\">    <span class=\"keyword\">return</span> sPackageManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到了吧，IPackageManager.Stub.asInterface(b)中的参数b由<strong>ServiceManager.getService</strong>方法获取到。然后在使用Stub的asInterface方法进行转化成本地的PackageManager对象，其实就是那个Proxy对象。然后就可以通过PackageManager来调用方法和远端的PackageManagerService服务进行通信了。</p>\n<p>而DemoService是在DemoConnection（继承自ServiceConnection）的onServiceConnected回调中得到远端的IBinder对象，然后获得Proxy对象。</p>\n<blockquote>\n<p>这里与自定义远程服务然后调用的区别就是，系统的远程服务都是由ServiceManager保存的，也就是由系统去创建和管理；而自定义的远程服务由开发者去创建、维护和销毁</p>\n</blockquote>\n<p>通过上面的PackageManager案例可以分析，我们在使用系统中的服务的时候的流程都是如此：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-system-service.png\" alt=\"系统服务远程调用详情\"></p>\n<p>总结一下，每个应用在使用系统服务的时候，都会走这么几步：</p>\n<ul>\n<li>1、调用getService(String serviceName)方法获取服务对象</li>\n<li>2、而getSystemService一般都是在ContextImpl类中实现的，其实是调用了ServiceManager的getService方法</li>\n<li>3、调用ServiceManager的getService方法获取远端服务的IBinder对象</li>\n<li>4、有了远端服务的IBinder对象之后，在使用远端服务的中间者类Stub进行转化对象asInterface方法</li>\n<li>5、因为系统中的服务获取都是肯定是跨进程的，远端服务都是在system_server进程中的，所以asInterface方法中返回的是Proxy代理对象，也就是本地端的中间者。</li>\n<li>6、最后返回的对象其实就是这个Proxy对象，而这个对象内部使用了静态代理方式，内部有一个来自远端的mRemote变量即IBinder对象。然后直接调用方法其实就是调用mRemote的transact方法进行通信了。</li>\n</ul>\n<p>所以在这个过程中可以看到有两个对象很重要，一个是ServiceManager，一个是IBinder对象。<a href=\"http://agehua.github.io/2017/07/10/android-binder-principle2/\">下篇文章</a>再来一一介绍</p>\n<p>参考文献：</p>\n<p><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"external\">Android系统篇之—-Binder机制和远程服务调用机制分析</a></p>\n<p>《Android上玩玩Hook？》: <a href=\"http://blog.csdn.net/yzzst/article/details/47318751\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yzzst/article/details/47318751</a></p>\n<p>《进击的Android注入术&lt;一&gt;》:<br><a href=\"http://blog.csdn.net/l173864930/article/details/38455951\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l173864930/article/details/38455951</a></p>\n<p>极客学院——深入理解Android卷②：<br><a href=\"http://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html\" target=\"_blank\" rel=\"external\">http://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">http://agehua.github.io/2017/07/08/android-binder-principle/</a></p>\n","readingTime":{"text":"8 min read","minutes":7.56,"time":453599.99999999994,"words":1512},"excerpt":"<h3 id=\"背景分析\"><a href=\"#背景分析\" class=\"headerlink\" title=\"背景分析\"></a>背景分析</h3><p>最近在学习Android非侵入Hook机制，</p>\n<p>6月30日，360开源RePlugin，安卓进入“全面插件化”时代：<a href=\"https://www.itcodemonkey.com/article/278.html\">https://www.itcodemonkey.com/article/278.html</a></p>\n<p>同一天，滴滴开源Android端插件化框架VirtualAPK：<a href=\"https://www.itcodemonkey.com/article/277.html\">https://www.itcodemonkey.com/article/277.html</a></p>\n<p>然后本人发现竟然可以不在清单文件中注册就可以启动Activity，还有这种操作？哈哈。后面会有单独的文章介绍这种骚操作。</p>\n<p>在搜索中发现了这篇博客，<a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\"><br>Android系统篇之—-Binder机制和远程服务调用机制分析</a>。本文大部分转载自原来博客，结合自己的分析，是研究Hook机制前的知识储备。</p>\n<h3 id=\"Android中远程服务调用分析\"><a href=\"#Android中远程服务调用分析\" class=\"headerlink\" title=\"Android中远程服务调用分析\"></a>Android中远程服务调用分析</h3><p>简单介绍，跨进程调用一个远程服务需要下面这几步：<br>","more":"</p>\n<h4 id=\"1-定义一个AIDL文件：Demo-aidl\"><a href=\"#1-定义一个AIDL文件：Demo-aidl\" class=\"headerlink\" title=\"1.定义一个AIDL文件：Demo.aidl\"></a>1.定义一个AIDL文件：Demo.aidl</h4><blockquote>\n<p>类似于定义接口类型，这个AIDL文件将在本地和远端都要使用到</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.agehua.aidldemo;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(String data)</span></span>;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-定义远程服务\"><a href=\"#2-定义远程服务\" class=\"headerlink\" title=\"2.定义远程服务\"></a>2.定义远程服务</h4><p>在远程服务中的onBind方法，实现AIDL接口的具体方法，并且返回Binder对象<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//远程服务，应该定义在另个一进程中</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//返回远程的Binder对象，并且实现类</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Demo.Stub() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(String data)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>接口方法的具体传递实现都是在远端服务中。</p>\n</blockquote>\n<h4 id=\"3-本地创建连接对象\"><a href=\"#3-本地创建连接对象\" class=\"headerlink\" title=\"3.本地创建连接对象\"></a>3.本地创建连接对象</h4><p>本地创建一个服务连接对象，实现ServiceConnection接口，在连接成功之后，会得到一个远端传递过来的Binder对象，就是上面的远端服务onBind方法返回的，得到Binder对象之后在进行转化就可以得到AIDL对象，然后即可调用方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//连接远程服务的回调</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(Component name, IBinder service)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//连接成功后，会传递远端的Binder对象</span></div><div class=\"line\">      Demo demo  =Demo.Stub.asInterface(service);</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        demo.setData(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        demo.getData();</div><div class=\"line\">      &#125;<span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(Component name)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//断开连接</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>连接成功后，从远端服务中获取到了Binder对象，然后在转化成本地接口对象，即可调用方法。</p>\n</blockquote>\n<h4 id=\"4、连接服务\"><a href=\"#4、连接服务\" class=\"headerlink\" title=\"4、连接服务\"></a>4、连接服务</h4><p>连接服务也是比较简单的，这时候把上面的连接对象传递进去即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, DemoService.class);</div><div class=\"line\">bindService(intent, <span class=\"keyword\">new</span> DemoConnection(), Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure>\n<h3 id=\"AIDL实现机制分析\"><a href=\"#AIDL实现机制分析\" class=\"headerlink\" title=\"AIDL实现机制分析\"></a>AIDL实现机制分析</h3><p>上面的步骤就可以实现一个远程服务调用了。但是有一个核心的地方就是<strong>Demo.Stub类</strong>，这个类起着重要的作用，下面来分析一下它的实现：</p>\n<blockquote>\n<p>每次定义了AIDL接口文件之后，编译一下就会在build/generated/source/目录中产生对应的java文件了：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.agehua.aidldemo;</div><div class=\"line\"><span class=\"comment\">//IInterface接口由AIDL类去实现。IInterface接口包含一个方法asBinder()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     * 由Stub类实现Binder类和AIDL接口</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">agehua</span>.<span class=\"title\">aidldemo</span>.<span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.agehua.aidldemo.Demo\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Cast an IBinder object into an com.agehua.aidldemo.Demo interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         * 将远端传过来的Binder对象转化成本地对象</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.agehua.aidldemo.<span class=\"function\">Demo <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果本地进程和服务端都在一个进程中，那么直接返回当前类的IInterface</span></div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.agehua.aidldemo.Demo))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.agehua.aidldemo.Demo) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果本地进程和服务端不在一个进程中，则返回一个代理对象给客户端</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.agehua.aidldemo.Demo.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//处理客户端发过来的请求方法，这里不详细展开了</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_sendData: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">int</span> _result = <span class=\"keyword\">this</span>.sendData(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeInt(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_getData: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _result = <span class=\"keyword\">this</span>.getData();</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    reply.writeString(_result);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//稍后分析这个类</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">app</span>.<span class=\"title\">IServiceConnection</span> </span>&#123;</div><div class=\"line\">          <span class=\"comment\">/**</div><div class=\"line\">          ...</div><div class=\"line\">          **/</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Demo.aidl提供的方法，由Proxy类去实现，这里不用实现</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(java.lang.String data)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">    <span class=\"comment\">//Demo.aidl提供的方法，由Proxy类去实现，这里不用实现</span></div><div class=\"line\">    <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"1、AIDL接口必须实现IInterface接口\"><a href=\"#1、AIDL接口必须实现IInterface接口\" class=\"headerlink\" title=\"1、AIDL接口必须实现IInterface接口\"></a>1、AIDL接口必须实现IInterface接口</h4><p>IInterface接口包含一个asBinder()方法，由这个方法进行转化对象功能，把当前的AIDL对象转化成一个IBinder对象。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> android.os;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IInterface</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Retrieve the Binder object associated with this interface.</div><div class=\"line\">     * You must use this instead of a plain cast, so that proxy objects</div><div class=\"line\">     * can return the correct result.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2、AIDL接口中肯定有一个静态实现类Stub\"><a href=\"#2、AIDL接口中肯定有一个静态实现类Stub\" class=\"headerlink\" title=\"2、AIDL接口中肯定有一个静态实现类Stub\"></a>2、AIDL接口中肯定有一个静态实现类Stub</h4><p>这个类必须实现Binder类，以及本身的AIDL接口类型。那么这个类就具备了Binder类中的四个功能：</p>\n<ul>\n<li><p>1.可以将Binder对象转化成AIDL对象，调用asInterface方法，可以看到这个方法其实和上面的asBinder方法对立的</p>\n</li>\n<li><p>2.通信方法onTransact实现，这个方法是最核心的用于通信之间的逻辑实现</p>\n</li>\n<li><p>3.通过queryLocalInterface方法可以根据类的描述符(字符串可以唯一标识这个远端服务的名称即可)获取到对应的AIDL对象(其实是IInterface类型的)</p>\n</li>\n<li><p>4.在构造方法中必须调用Binder中的attachInterface方法把当前服务对象和描述符进行关联</p>\n</li>\n</ul>\n<h4 id=\"3、Stub类只是中间者，由Proxy类生成服务端的代理\"><a href=\"#3、Stub类只是中间者，由Proxy类生成服务端的代理\" class=\"headerlink\" title=\"3、Stub类只是中间者，由Proxy类生成服务端的代理\"></a>3、Stub类只是中间者，由Proxy类生成服务端的代理</h4><blockquote>\n<p>为什么说是由Proxy类生成服务端的代理的呢？</p>\n</blockquote>\n<p>因为在上面的DemoConnection类中，生成本地Demo对象，是调用了Demo.Stub.asInterface(IBinder)这个方法。<br>前面提到，服务端和客户端不在同一个进程的时候，asInterface()方法实际上调用了Demo.Stub.Proxy(IBinder)这个方法。</p>\n<p>而且Demo.aidl中定义的抽象方法，具体都是由Proxy类去实现的。</p>\n<p>Stub类，其实只是远端服务Binder对象的一个中间者，下面看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现了aidl接口类。</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">agehua</span>.<span class=\"title\">aidldemo</span>.<span class=\"title\">Demo</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//保存了一个mRemote变量，这个变量就是由服务端传递过来的IBinder对象</span></div><div class=\"line\">      <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">      Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">          mRemote = remote;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sendData</span><span class=\"params\">(java.lang.String data)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">          android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">          android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">          <span class=\"keyword\">int</span> _result;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">              _data.writeString(data);</div><div class=\"line\">              <span class=\"comment\">//调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理</span></div><div class=\"line\">              mRemote.transact(Stub.TRANSACTION_sendData, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">              _reply.readException();</div><div class=\"line\">              _result = _reply.readInt();</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              _reply.recycle();</div><div class=\"line\">              _data.recycle();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> _result;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">          android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">          android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">          java.lang.String _result;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">              <span class=\"comment\">//调用Binder的transact()方法，会调用上面Stub类中的onTransact方法进一步处理</span></div><div class=\"line\">              mRemote.transact(Stub.TRANSACTION_getData, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">              _reply.readException();</div><div class=\"line\">              _result = _reply.readString();</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              _reply.recycle();</div><div class=\"line\">              _data.recycle();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> _result;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Proxy是Stub类中的一个静态类，Proxy对象就是远端传递过来的Binder对象在本地的代理。这里用到的是静态代理模式。</p>\n</blockquote>\n<p>在服务连接成功后，在onServiceConnected()方法中，返回一个服务端Binder对象，本地通过asInterface()方法生成的一个代理；<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Demo demo = Demo.Stub.asInterface(IBinder);</div></pre></td></tr></table></figure></p>\n<p>这个demo对象，就是客户端这边用户和服务端交互的中间者。我们在前面的<strong>Stub类的asInterface()方法实现</strong>中可以看到：</p>\n<p>借助<strong>queryLocalInterface()</strong>方法根据服务描述符来获取对象，会把远端传递过来的Binder对象转化成一个本地对象：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IInterface <span class=\"title\">queryLocalInterface</span><span class=\"params\">(String descriptor)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDescriptor.equals(descriptor)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mOwner;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而这个mOwner和mDescriptor之间的对应关系就在attachInterface方法中进行初始化的，也就是在Stub类的构造方法中<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachInterface</span><span class=\"params\">(IInterface owner, String descriptor)</span> </span>&#123;</div><div class=\"line\">       mOwner = owner;</div><div class=\"line\">       mDescriptor = descriptor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么现在就清楚了，如果客户端和服务端是在一个进程中，那么其实queryLocalInterface获取的就是Stub对象，如果不在一个进程queryLocalInterface查询的对象肯定为null，因为<strong>new Demo.Stub()</strong>和<strong>Demo.Stub.asInterface(IBinder)</strong>方法分别是在<strong>远端进程</strong>和<strong>本地进程</strong>中调用的，在不同进程有不同虚拟机，肯定查不到mOwner对象的，所以这时候其实是返回的Proxy对象了。</p>\n<p>通过上面的讲解之后，发现多进程服务通信基准就是借助Binder对象，先传递Binder对象，然后在把Binder转成可以使用的原生对象即可调用了，而对于Stub类和Proxy类其实就是相当于是服务端和客户端的中间者，把一些逻辑封装起来，这种设计也会显得不是那么凌乱：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-principle.png\" alt=\"\"></p>\n<h3 id=\"分析系统服务调用流程\"><a href=\"#分析系统服务调用流程\" class=\"headerlink\" title=\"分析系统服务调用流程\"></a>分析系统服务调用流程</h3><p>其实系统中的一些服务使用的时候其实也是跨进程使用，比如下面来看一下著名的PackageManager，IPackageManager，PackageManagerService体系：</p>\n<p>PackageManagerService是Android系统中最常用的服务之一。它负责系统中Package的管理，应用程序的安装、卸载、信息查询等。PackageManager获取的信息即来自AndroidManifest.XML</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/PackageManagerService.png\" alt=\"PackageManagerService体系\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPackageManager</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPackageAvailable</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"function\">PackageInfo <span class=\"title\">getPackageInfo</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPackageUid</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> userId)</span></span>;</div><div class=\"line\">  <span class=\"keyword\">int</span>[] getPackageGids(String packageName);</div><div class=\"line\"></div><div class=\"line\">  String[] currentToCanonicalPackageNames(String[] names);</div><div class=\"line\">  String[] canonicalToCurrentPackageNames(String[] names);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\">PermissionInfo <span class=\"title\">getPermissionInfo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\"></div><div class=\"line\">  ParceledListSlice&lt;PermissionInfo&gt; <span class=\"title\">queryPermissionsByGroup</span><span class=\"params\">(String group,</div><div class=\"line\">            <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>上面代码在谷歌的源码中查到，详情点击<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/IPackageManager.aidl\">链接</a></p>\n<p>因为我们还没有编译源码，所以看不到IPackageManager.java，这里可能需要AIDL工具单独编译才能看到了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPackageManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义内部类Stub，派生自Binder，实现IPackageManager接口</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">content</span>.<span class=\"title\">pm</span>.<span class=\"title\">IPackageManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"android.content.pm.IPackageManager\"</span>;</div><div class=\"line\">        publicStub() &#123;</div><div class=\"line\">             <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>,DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//定义Stub的内部类Proxy，实现IPackageManager接口</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">android</span>.<span class=\"title\">content</span>.<span class=\"title\">pm</span>.<span class=\"title\">IPackageManager</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//通过mRemote变量和服务端交互</span></div><div class=\"line\">        <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">           Proxy(android.os.IBinderremote) &#123;</div><div class=\"line\">              mRemote = remote;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">//......</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里看到了熟悉的远端服务中间者Stub和本地端的中间者Proxy类了，而这两个类的规则都和上面一样的。</p>\n</blockquote>\n<p>下面来看一下远端服务实现代码PackageManagerService.java，(这个类就可以在IDE中看到了)：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IPackageManager</span>.<span class=\"title\">Stub</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"PackageManager\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_SETTINGS = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_PREFERRED = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_UPGRADE = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG_DOMAIN_VERIFICATION = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>实现了上面的的Stub类功能。</p>\n</blockquote>\n<p>下面我们再走一遍获取PackageManager的流程：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">PackageManager pm = getPackageManager();</div></pre></td></tr></table></figure></p>\n<p>而这个getPackageManager方法是在ContextImpl.java中实现的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PackageManager <span class=\"title\">getPackageManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mPackageManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mPackageManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    IPackageManager pm = ActivityThread.getPackageManager();</div><div class=\"line\">    <span class=\"keyword\">if</span> (pm != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Doesn't matter if we make more than one instance.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (mPackageManager = <span class=\"keyword\">new</span> ApplicationPackageManager(<span class=\"keyword\">this</span>, pm));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体内容实现是在ActivityThread.getPackageManager()方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPackageManager <span class=\"title\">getPackageManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sPackageManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//Slog.v(\"PackageManager\", \"returning cur default = \" + sPackageManager);</span></div><div class=\"line\">        <span class=\"keyword\">return</span> sPackageManager;</div><div class=\"line\">    &#125;</div><div class=\"line\">    IBinder b = ServiceManager.getService(<span class=\"string\">\"package\"</span>);</div><div class=\"line\">    <span class=\"comment\">//Slog.v(\"PackageManager\", \"default service binder = \" + b);</span></div><div class=\"line\">    sPackageManager = IPackageManager.Stub.asInterface(b);</div><div class=\"line\">    <span class=\"comment\">//Slog.v(\"PackageManager\", \"default service = \" + sPackageManager);</span></div><div class=\"line\">    <span class=\"keyword\">return</span> sPackageManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到了吧，IPackageManager.Stub.asInterface(b)中的参数b由<strong>ServiceManager.getService</strong>方法获取到。然后在使用Stub的asInterface方法进行转化成本地的PackageManager对象，其实就是那个Proxy对象。然后就可以通过PackageManager来调用方法和远端的PackageManagerService服务进行通信了。</p>\n<p>而DemoService是在DemoConnection（继承自ServiceConnection）的onServiceConnected回调中得到远端的IBinder对象，然后获得Proxy对象。</p>\n<blockquote>\n<p>这里与自定义远程服务然后调用的区别就是，系统的远程服务都是由ServiceManager保存的，也就是由系统去创建和管理；而自定义的远程服务由开发者去创建、维护和销毁</p>\n</blockquote>\n<p>通过上面的PackageManager案例可以分析，我们在使用系统中的服务的时候的流程都是如此：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-system-service.png\" alt=\"系统服务远程调用详情\"></p>\n<p>总结一下，每个应用在使用系统服务的时候，都会走这么几步：</p>\n<ul>\n<li>1、调用getService(String serviceName)方法获取服务对象</li>\n<li>2、而getSystemService一般都是在ContextImpl类中实现的，其实是调用了ServiceManager的getService方法</li>\n<li>3、调用ServiceManager的getService方法获取远端服务的IBinder对象</li>\n<li>4、有了远端服务的IBinder对象之后，在使用远端服务的中间者类Stub进行转化对象asInterface方法</li>\n<li>5、因为系统中的服务获取都是肯定是跨进程的，远端服务都是在system_server进程中的，所以asInterface方法中返回的是Proxy代理对象，也就是本地端的中间者。</li>\n<li>6、最后返回的对象其实就是这个Proxy对象，而这个对象内部使用了静态代理方式，内部有一个来自远端的mRemote变量即IBinder对象。然后直接调用方法其实就是调用mRemote的transact方法进行通信了。</li>\n</ul>\n<p>所以在这个过程中可以看到有两个对象很重要，一个是ServiceManager，一个是IBinder对象。<a href=\"http://agehua.github.io/2017/07/10/android-binder-principle2/\">下篇文章</a>再来一一介绍</p>\n<p>参考文献：</p>\n<p><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\">Android系统篇之—-Binder机制和远程服务调用机制分析</a></p>\n<p>《Android上玩玩Hook？》: <a href=\"http://blog.csdn.net/yzzst/article/details/47318751\">http://blog.csdn.net/yzzst/article/details/47318751</a></p>\n<p>《进击的Android注入术&lt;一&gt;》:<br><a href=\"http://blog.csdn.net/l173864930/article/details/38455951\">http://blog.csdn.net/l173864930/article/details/38455951</a></p>\n<p>极客学院——深入理解Android卷②：<br><a href=\"http://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html\">http://wiki.jikexueyuan.com/project/deep-android-v2/powermanagerservice.html</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">http://agehua.github.io/2017/07/08/android-binder-principle/</a></p>"},{"layout":"post","title":"Mac下Android源码编译（AOSP）","keywords":"aosp, sdk compile","banner":"http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg","toc":true,"_content":"\n\n### Android源码下载\n\nMac上源码下载没有太大问题，主要参考下面两篇文章：\n[自己动手编译最新Android源码及SDK](http://blog.csdn.net/dd864140130/article/details/51718187)\n[谷歌下载源代码](https://source.android.com/source/downloading)\n\nMac上创建磁盘空间，直接区分大小写\n~~~ C++\nhdiutil resize -size 100g ~/android.dmg.sparseimage\n~~~\n我编译的是7.1.1版本的系统源码，狠心之下给了100G空间\n\n\n### Android Build系统\n<!--more-->\n代码下载完成以后，不着急编译，先了解下Android Build系统，看下IBM的这篇文章：[Android Build系统](https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/index.html)\n\n\nAndroid Build 系统用来编译 Android 系统，Android SDK 以及相关文档。该系统主要由 Make 文件，Shell 脚本以及 Python 脚本组成，其中最主要的是 Make 文件。\n\n#### 主要编译步骤\n初始化编译环境：\n~~~ C++\nsource build/envsetup.sh\n~~~\n这句话的意思是引入build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括下面使用 lunch 函数。\n~~~ C++\nlunch\n~~~\n执行完lunch函数，可以看到下面的结果：\n~~~ C++\nYou're building on Darwin\n\nLunch menu... pick a combo:\n     1. aosp_arm-eng\n     2. aosp_arm64-eng\n     3. aosp_mips-eng\n     4. aosp_mips64-eng\n     5. aosp_x86-eng\n     6. aosp_x86_64-eng\n     7. full_fugu-userdebug\n     8. aosp_fugu-userdebug\n     9. mini_emulator_arm64-userdebug\n     10. m_e_arm-userdebug\n     11. m_e_mips-userdebug\n     12. m_e_mips64-eng\n     13. mini_emulator_x86-userdebug\n     14. mini_emulator_x86_64-userdebug\n     15. aosp_dragon-userdebug\n     16. aosp_dragon-eng\n     17. aosp_marlin-userdebug\n     18. aosp_sailfish-userdebug\n     19. aosp_flounder-userdebug\n     20. aosp_angler-userdebug\n     21. aosp_bullhead-userdebug\n     22. hikey-userdebug\n     23. aosp_shamu-userdebug\n\nWhich would you like? [aosp_arm-eng]\n~~~\n这里的lunch是选择编译目标，直接输入数字就代表选中\n> 编译目标格式说明:\n  编译目标的格式:BUILD-BUILDTYPE,比如上面的第一个，aosp_arm-eng的BUILD是aosp_arm,BUILDTYPE是eng.\n\n那么选择哪个编译目标呢？\n这里[StackOverflow上有提问](https://stackoverflow.com/questions/27572817/aosp-build-with-fastest-emulator-boot)，建议编译**aosp_x86-userdebug** with HAXM installed\n\n但是我的lunch并没有列出这个编译目标：\n\n所以这里不使用lunch选择，而是使用choosecombo命令：\n\n        记住也要先执行envsetup.sh脚本哟\n~~~ C++\nchoosecombo\nBuild type choices are:\n     1. release\n     2. debug\n\nWhich would you like? [1]\n//这里直接输入2，选择第二个\n\n\nWhich product would you like? [aosp_arm]\n//这里并没有对应的BUILD，所以直接自己输入：aosp_x86\n\nVariant choices are:\n     1. user\n     2. userdebug\n     3. eng\n//这里选择第二个，直接输入2\n~~~\n这样就选择好了编译目标，对应的Terminal的顶部标题也已经改变\n然后调用“make -j4”进行编译就可以了\n> make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）\n\n下面介绍几个常用到的命令：\n当电脑磁盘空间不够用时，用下面的命令，遍历大文件\n~~~ C++\nsudo ncdu //查看硬盘中的大文件\n~~~\n\n如果make失败，或是想换一个BUILD类型，使用下面的命令：\n~~~ C++\nmake clobber //清理out目录下的文件\n~~~\n\n### 调试Android源码：\n参考这篇文章：[自己动手调试Android源码](http://blog.csdn.net/dd864140130/article/details/51815253)\n\n将Android源码导入Android Studio：\n~~~ C++\nsource build/envsetup.sh\nmmm development/tools/idegen/\nsudo ./development/tools/idegen/idegen.sh\n~~~\n上面代码执行完后，会在源码目录下生成IEDA工程配置文件: android.ipr,android.iml及android.iws.\n可以发现android.ipr文件的应用图标应该改成了Android Studio样式。\n\n> 但这里不用Android Studio来打开工程，而是使用IntelliJ来查看和DebugAndroid源码，具体参考这篇文章[使用 IntelliJ 查看 Android 源码](http://www.jianshu.com/p/1d1b8d0de1ed)\n\n\n#### 单独编译Android源代码工程的模块\n在Android源码找到目录/packages/experimental，在这个目录下有Google提供基于前面提到的Android BUILD模式构建的apk工程。\n如下图：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_make_single_module.png)\n\n我们选择一个工程：MultiPackageApk，要把它安装到模拟器上需要执行下面的命令：\n~~~ C++\nsource build/envsetup.sh\nmmm packages/experimental/MultiPackageApk    \nmake snod  \n~~~\n重启下模拟器，刚才安装的应用就会出现了\n\n单独编译源代码工程出错：\n\n~~~ C++\nninja: error: 'out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.dex.toc', needed by 'out/target/common/obj/APPS/MultiPackageApk_intermediates/with-local/classes.dex', missing and no known rule to make it\nmake: *** [ninja_wrapper] Error 1\n~~~\n解决方案：应该选择好编译环境后（用lunch或choosecombo命令），再执行单独编译源码工作，最后别忘了执行**make snod**\n\n\n#### make failed to build some targets (4 seconds) ####\n\n#### 使用 IntelliJ Debug Android 源码\n参考这篇文章：[使用 IntelliJ Debug Android 源码](http://www.jianshu.com/p/7c2ab3d9498c)\n\n文中，有一个地方跟我的电脑上不太一样：\n#### 打开 monitor 选择 debug 进程\n我电脑上的monitor不是用命令行打开，而是有monitor.app。\n位置在：/Library/Android_sdk/tools/lib/monitor-x86_64/monitor.app\n如下图：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_monitor_position.png)\n\n到这里Android源码部分的内容就整理完了，下篇文章利用Android源码分析下**Activity的启动流程**。\n","source":"_posts/2017-08-01-aosp-compile.md","raw":"---\nlayout: post\ntitle:  Mac下Android源码编译（AOSP）\ncategory: accumulation\ntags:\n  - AOSP\n  - sdk compile\nkeywords: aosp, sdk compile\nbanner: http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Child%20with%20Orange.jpg\ntoc: true\n---\n\n\n### Android源码下载\n\nMac上源码下载没有太大问题，主要参考下面两篇文章：\n[自己动手编译最新Android源码及SDK](http://blog.csdn.net/dd864140130/article/details/51718187)\n[谷歌下载源代码](https://source.android.com/source/downloading)\n\nMac上创建磁盘空间，直接区分大小写\n~~~ C++\nhdiutil resize -size 100g ~/android.dmg.sparseimage\n~~~\n我编译的是7.1.1版本的系统源码，狠心之下给了100G空间\n\n\n### Android Build系统\n<!--more-->\n代码下载完成以后，不着急编译，先了解下Android Build系统，看下IBM的这篇文章：[Android Build系统](https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/index.html)\n\n\nAndroid Build 系统用来编译 Android 系统，Android SDK 以及相关文档。该系统主要由 Make 文件，Shell 脚本以及 Python 脚本组成，其中最主要的是 Make 文件。\n\n#### 主要编译步骤\n初始化编译环境：\n~~~ C++\nsource build/envsetup.sh\n~~~\n这句话的意思是引入build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括下面使用 lunch 函数。\n~~~ C++\nlunch\n~~~\n执行完lunch函数，可以看到下面的结果：\n~~~ C++\nYou're building on Darwin\n\nLunch menu... pick a combo:\n     1. aosp_arm-eng\n     2. aosp_arm64-eng\n     3. aosp_mips-eng\n     4. aosp_mips64-eng\n     5. aosp_x86-eng\n     6. aosp_x86_64-eng\n     7. full_fugu-userdebug\n     8. aosp_fugu-userdebug\n     9. mini_emulator_arm64-userdebug\n     10. m_e_arm-userdebug\n     11. m_e_mips-userdebug\n     12. m_e_mips64-eng\n     13. mini_emulator_x86-userdebug\n     14. mini_emulator_x86_64-userdebug\n     15. aosp_dragon-userdebug\n     16. aosp_dragon-eng\n     17. aosp_marlin-userdebug\n     18. aosp_sailfish-userdebug\n     19. aosp_flounder-userdebug\n     20. aosp_angler-userdebug\n     21. aosp_bullhead-userdebug\n     22. hikey-userdebug\n     23. aosp_shamu-userdebug\n\nWhich would you like? [aosp_arm-eng]\n~~~\n这里的lunch是选择编译目标，直接输入数字就代表选中\n> 编译目标格式说明:\n  编译目标的格式:BUILD-BUILDTYPE,比如上面的第一个，aosp_arm-eng的BUILD是aosp_arm,BUILDTYPE是eng.\n\n那么选择哪个编译目标呢？\n这里[StackOverflow上有提问](https://stackoverflow.com/questions/27572817/aosp-build-with-fastest-emulator-boot)，建议编译**aosp_x86-userdebug** with HAXM installed\n\n但是我的lunch并没有列出这个编译目标：\n\n所以这里不使用lunch选择，而是使用choosecombo命令：\n\n        记住也要先执行envsetup.sh脚本哟\n~~~ C++\nchoosecombo\nBuild type choices are:\n     1. release\n     2. debug\n\nWhich would you like? [1]\n//这里直接输入2，选择第二个\n\n\nWhich product would you like? [aosp_arm]\n//这里并没有对应的BUILD，所以直接自己输入：aosp_x86\n\nVariant choices are:\n     1. user\n     2. userdebug\n     3. eng\n//这里选择第二个，直接输入2\n~~~\n这样就选择好了编译目标，对应的Terminal的顶部标题也已经改变\n然后调用“make -j4”进行编译就可以了\n> make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）\n\n下面介绍几个常用到的命令：\n当电脑磁盘空间不够用时，用下面的命令，遍历大文件\n~~~ C++\nsudo ncdu //查看硬盘中的大文件\n~~~\n\n如果make失败，或是想换一个BUILD类型，使用下面的命令：\n~~~ C++\nmake clobber //清理out目录下的文件\n~~~\n\n### 调试Android源码：\n参考这篇文章：[自己动手调试Android源码](http://blog.csdn.net/dd864140130/article/details/51815253)\n\n将Android源码导入Android Studio：\n~~~ C++\nsource build/envsetup.sh\nmmm development/tools/idegen/\nsudo ./development/tools/idegen/idegen.sh\n~~~\n上面代码执行完后，会在源码目录下生成IEDA工程配置文件: android.ipr,android.iml及android.iws.\n可以发现android.ipr文件的应用图标应该改成了Android Studio样式。\n\n> 但这里不用Android Studio来打开工程，而是使用IntelliJ来查看和DebugAndroid源码，具体参考这篇文章[使用 IntelliJ 查看 Android 源码](http://www.jianshu.com/p/1d1b8d0de1ed)\n\n\n#### 单独编译Android源代码工程的模块\n在Android源码找到目录/packages/experimental，在这个目录下有Google提供基于前面提到的Android BUILD模式构建的apk工程。\n如下图：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_make_single_module.png)\n\n我们选择一个工程：MultiPackageApk，要把它安装到模拟器上需要执行下面的命令：\n~~~ C++\nsource build/envsetup.sh\nmmm packages/experimental/MultiPackageApk    \nmake snod  \n~~~\n重启下模拟器，刚才安装的应用就会出现了\n\n单独编译源代码工程出错：\n\n~~~ C++\nninja: error: 'out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.dex.toc', needed by 'out/target/common/obj/APPS/MultiPackageApk_intermediates/with-local/classes.dex', missing and no known rule to make it\nmake: *** [ninja_wrapper] Error 1\n~~~\n解决方案：应该选择好编译环境后（用lunch或choosecombo命令），再执行单独编译源码工作，最后别忘了执行**make snod**\n\n\n#### make failed to build some targets (4 seconds) ####\n\n#### 使用 IntelliJ Debug Android 源码\n参考这篇文章：[使用 IntelliJ Debug Android 源码](http://www.jianshu.com/p/7c2ab3d9498c)\n\n文中，有一个地方跟我的电脑上不太一样：\n#### 打开 monitor 选择 debug 进程\n我电脑上的monitor不是用命令行打开，而是有monitor.app。\n位置在：/Library/Android_sdk/tools/lib/monitor-x86_64/monitor.app\n如下图：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_monitor_position.png)\n\n到这里Android源码部分的内容就整理完了，下篇文章利用Android源码分析下**Activity的启动流程**。\n","slug":"aosp-compile","published":1,"date":"2017-07-31T16:00:00.000Z","updated":"2017-12-05T06:21:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec14003ld6ykrwk00nbd","content":"<h3 id=\"Android源码下载\"><a href=\"#Android源码下载\" class=\"headerlink\" title=\"Android源码下载\"></a>Android源码下载</h3><p>Mac上源码下载没有太大问题，主要参考下面两篇文章：<br><a href=\"http://blog.csdn.net/dd864140130/article/details/51718187\" target=\"_blank\" rel=\"external\">自己动手编译最新Android源码及SDK</a><br><a href=\"https://source.android.com/source/downloading\" target=\"_blank\" rel=\"external\">谷歌下载源代码</a></p>\n<p>Mac上创建磁盘空间，直接区分大小写<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">hdiutil resize -size <span class=\"number\">100</span>g ~/android.dmg.sparseimage</div></pre></td></tr></table></figure></p>\n<p>我编译的是7.1.1版本的系统源码，狠心之下给了100G空间</p>\n<h3 id=\"Android-Build系统\"><a href=\"#Android-Build系统\" class=\"headerlink\" title=\"Android Build系统\"></a>Android Build系统</h3><a id=\"more\"></a>\n<p>代码下载完成以后，不着急编译，先了解下Android Build系统，看下IBM的这篇文章：<a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/index.html\" target=\"_blank\" rel=\"external\">Android Build系统</a></p>\n<p>Android Build 系统用来编译 Android 系统，Android SDK 以及相关文档。该系统主要由 Make 文件，Shell 脚本以及 Python 脚本组成，其中最主要的是 Make 文件。</p>\n<h4 id=\"主要编译步骤\"><a href=\"#主要编译步骤\" class=\"headerlink\" title=\"主要编译步骤\"></a>主要编译步骤</h4><p>初始化编译环境：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div></pre></td></tr></table></figure></p>\n<p>这句话的意思是引入build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括下面使用 lunch 函数。<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">lunch</div></pre></td></tr></table></figure></p>\n<p>执行完lunch函数，可以看到下面的结果：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">You're building on Darwin</div><div class=\"line\"></div><div class=\"line\">Lunch menu... pick a combo:</div><div class=\"line\">     <span class=\"number\">1.</span> aosp_arm-eng</div><div class=\"line\">     <span class=\"number\">2.</span> aosp_arm64-eng</div><div class=\"line\">     <span class=\"number\">3.</span> aosp_mips-eng</div><div class=\"line\">     <span class=\"number\">4.</span> aosp_mips64-eng</div><div class=\"line\">     <span class=\"number\">5.</span> aosp_x86-eng</div><div class=\"line\">     <span class=\"number\">6.</span> aosp_x86_64-eng</div><div class=\"line\">     <span class=\"number\">7.</span> full_fugu-userdebug</div><div class=\"line\">     <span class=\"number\">8.</span> aosp_fugu-userdebug</div><div class=\"line\">     <span class=\"number\">9.</span> mini_emulator_arm64-userdebug</div><div class=\"line\">     <span class=\"number\">10.</span> m_e_arm-userdebug</div><div class=\"line\">     <span class=\"number\">11.</span> m_e_mips-userdebug</div><div class=\"line\">     <span class=\"number\">12.</span> m_e_mips64-eng</div><div class=\"line\">     <span class=\"number\">13.</span> mini_emulator_x86-userdebug</div><div class=\"line\">     <span class=\"number\">14.</span> mini_emulator_x86_64-userdebug</div><div class=\"line\">     <span class=\"number\">15.</span> aosp_dragon-userdebug</div><div class=\"line\">     <span class=\"number\">16.</span> aosp_dragon-eng</div><div class=\"line\">     <span class=\"number\">17.</span> aosp_marlin-userdebug</div><div class=\"line\">     <span class=\"number\">18.</span> aosp_sailfish-userdebug</div><div class=\"line\">     <span class=\"number\">19.</span> aosp_flounder-userdebug</div><div class=\"line\">     <span class=\"number\">20.</span> aosp_angler-userdebug</div><div class=\"line\">     <span class=\"number\">21.</span> aosp_bullhead-userdebug</div><div class=\"line\">     <span class=\"number\">22.</span> hikey-userdebug</div><div class=\"line\">     <span class=\"number\">23.</span> aosp_shamu-userdebug</div><div class=\"line\"></div><div class=\"line\">Which would you like? [aosp_arm-eng]</div></pre></td></tr></table></figure></p>\n<p>这里的lunch是选择编译目标，直接输入数字就代表选中</p>\n<blockquote>\n<p>编译目标格式说明:<br>  编译目标的格式:BUILD-BUILDTYPE,比如上面的第一个，aosp_arm-eng的BUILD是aosp_arm,BUILDTYPE是eng.</p>\n</blockquote>\n<p>那么选择哪个编译目标呢？<br>这里<a href=\"https://stackoverflow.com/questions/27572817/aosp-build-with-fastest-emulator-boot\" target=\"_blank\" rel=\"external\">StackOverflow上有提问</a>，建议编译<strong>aosp_x86-userdebug</strong> with HAXM installed</p>\n<p>但是我的lunch并没有列出这个编译目标：</p>\n<p>所以这里不使用lunch选择，而是使用choosecombo命令：</p>\n<pre><code>记住也要先执行envsetup.sh脚本哟\n</code></pre><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">choosecombo</div><div class=\"line\">Build type choices are:</div><div class=\"line\">     <span class=\"number\">1.</span> release</div><div class=\"line\">     <span class=\"number\">2.</span> debug</div><div class=\"line\"></div><div class=\"line\">Which would you like? [<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"comment\">//这里直接输入2，选择第二个</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Which product would you like? [aosp_arm]</div><div class=\"line\"><span class=\"comment\">//这里并没有对应的BUILD，所以直接自己输入：aosp_x86</span></div><div class=\"line\"></div><div class=\"line\">Variant choices are:</div><div class=\"line\">     <span class=\"number\">1.</span> user</div><div class=\"line\">     <span class=\"number\">2.</span> userdebug</div><div class=\"line\">     <span class=\"number\">3.</span> eng</div><div class=\"line\"><span class=\"comment\">//这里选择第二个，直接输入2</span></div></pre></td></tr></table></figure>\n<p>这样就选择好了编译目标，对应的Terminal的顶部标题也已经改变<br>然后调用“make -j4”进行编译就可以了</p>\n<blockquote>\n<p>make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）</p>\n</blockquote>\n<p>下面介绍几个常用到的命令：<br>当电脑磁盘空间不够用时，用下面的命令，遍历大文件<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ncdu <span class=\"comment\">//查看硬盘中的大文件</span></div></pre></td></tr></table></figure></p>\n<p>如果make失败，或是想换一个BUILD类型，使用下面的命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">make clobber <span class=\"comment\">//清理out目录下的文件</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"调试Android源码：\"><a href=\"#调试Android源码：\" class=\"headerlink\" title=\"调试Android源码：\"></a>调试Android源码：</h3><p>参考这篇文章：<a href=\"http://blog.csdn.net/dd864140130/article/details/51815253\" target=\"_blank\" rel=\"external\">自己动手调试Android源码</a></p>\n<p>将Android源码导入Android Studio：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div><div class=\"line\">mmm development/tools/idegen/</div><div class=\"line\">sudo ./development/tools/idegen/idegen.sh</div></pre></td></tr></table></figure></p>\n<p>上面代码执行完后，会在源码目录下生成IEDA工程配置文件: android.ipr,android.iml及android.iws.<br>可以发现android.ipr文件的应用图标应该改成了Android Studio样式。</p>\n<blockquote>\n<p>但这里不用Android Studio来打开工程，而是使用IntelliJ来查看和DebugAndroid源码，具体参考这篇文章<a href=\"http://www.jianshu.com/p/1d1b8d0de1ed\" target=\"_blank\" rel=\"external\">使用 IntelliJ 查看 Android 源码</a></p>\n</blockquote>\n<h4 id=\"单独编译Android源代码工程的模块\"><a href=\"#单独编译Android源代码工程的模块\" class=\"headerlink\" title=\"单独编译Android源代码工程的模块\"></a>单独编译Android源代码工程的模块</h4><p>在Android源码找到目录/packages/experimental，在这个目录下有Google提供基于前面提到的Android BUILD模式构建的apk工程。<br>如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_make_single_module.png\" alt=\"\"></p>\n<p>我们选择一个工程：MultiPackageApk，要把它安装到模拟器上需要执行下面的命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div><div class=\"line\">mmm packages/experimental/MultiPackageApk    </div><div class=\"line\">make snod</div></pre></td></tr></table></figure></p>\n<p>重启下模拟器，刚才安装的应用就会出现了</p>\n<p>单独编译源代码工程出错：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">ninja: error: 'out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.dex.toc', needed by 'out/target/common/obj/APPS/MultiPackageApk_intermediates/with-local/classes.dex', missing and no known rule to make it</div><div class=\"line\">make: *** [ninja_wrapper] Error 1</div></pre></td></tr></table></figure>\n<p>解决方案：应该选择好编译环境后（用lunch或choosecombo命令），再执行单独编译源码工作，最后别忘了执行<strong>make snod</strong></p>\n<h4 id=\"make-failed-to-build-some-targets-4-seconds\"><a href=\"#make-failed-to-build-some-targets-4-seconds\" class=\"headerlink\" title=\"make failed to build some targets (4 seconds)\"></a>make failed to build some targets (4 seconds)</h4><h4 id=\"使用-IntelliJ-Debug-Android-源码\"><a href=\"#使用-IntelliJ-Debug-Android-源码\" class=\"headerlink\" title=\"使用 IntelliJ Debug Android 源码\"></a>使用 IntelliJ Debug Android 源码</h4><p>参考这篇文章：<a href=\"http://www.jianshu.com/p/7c2ab3d9498c\" target=\"_blank\" rel=\"external\">使用 IntelliJ Debug Android 源码</a></p>\n<p>文中，有一个地方跟我的电脑上不太一样：</p>\n<h4 id=\"打开-monitor-选择-debug-进程\"><a href=\"#打开-monitor-选择-debug-进程\" class=\"headerlink\" title=\"打开 monitor 选择 debug 进程\"></a>打开 monitor 选择 debug 进程</h4><p>我电脑上的monitor不是用命令行打开，而是有monitor.app。<br>位置在：/Library/Android_sdk/tools/lib/monitor-x86_64/monitor.app<br>如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_monitor_position.png\" alt=\"\"></p>\n<p>到这里Android源码部分的内容就整理完了，下篇文章利用Android源码分析下<strong>Activity的启动流程</strong>。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/01/aosp-compile/\">http://agehua.github.io/2017/08/01/aosp-compile/</a></p>\n","readingTime":{"text":"2 min read","minutes":1.99,"time":119400,"words":398},"excerpt":"<h3 id=\"Android源码下载\"><a href=\"#Android源码下载\" class=\"headerlink\" title=\"Android源码下载\"></a>Android源码下载</h3><p>Mac上源码下载没有太大问题，主要参考下面两篇文章：<br><a href=\"http://blog.csdn.net/dd864140130/article/details/51718187\">自己动手编译最新Android源码及SDK</a><br><a href=\"https://source.android.com/source/downloading\">谷歌下载源代码</a></p>\n<p>Mac上创建磁盘空间，直接区分大小写<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">hdiutil resize -size <span class=\"number\">100</span>g ~/android.dmg.sparseimage</div></pre></td></tr></table></figure></p>\n<p>我编译的是7.1.1版本的系统源码，狠心之下给了100G空间</p>\n<h3 id=\"Android-Build系统\"><a href=\"#Android-Build系统\" class=\"headerlink\" title=\"Android Build系统\"></a>Android Build系统</h3>","more":"<p>代码下载完成以后，不着急编译，先了解下Android Build系统，看下IBM的这篇文章：<a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/index.html\">Android Build系统</a></p>\n<p>Android Build 系统用来编译 Android 系统，Android SDK 以及相关文档。该系统主要由 Make 文件，Shell 脚本以及 Python 脚本组成，其中最主要的是 Make 文件。</p>\n<h4 id=\"主要编译步骤\"><a href=\"#主要编译步骤\" class=\"headerlink\" title=\"主要编译步骤\"></a>主要编译步骤</h4><p>初始化编译环境：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div></pre></td></tr></table></figure></p>\n<p>这句话的意思是引入build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括下面使用 lunch 函数。<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">lunch</div></pre></td></tr></table></figure></p>\n<p>执行完lunch函数，可以看到下面的结果：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">You're building on Darwin</div><div class=\"line\"></div><div class=\"line\">Lunch menu... pick a combo:</div><div class=\"line\">     <span class=\"number\">1.</span> aosp_arm-eng</div><div class=\"line\">     <span class=\"number\">2.</span> aosp_arm64-eng</div><div class=\"line\">     <span class=\"number\">3.</span> aosp_mips-eng</div><div class=\"line\">     <span class=\"number\">4.</span> aosp_mips64-eng</div><div class=\"line\">     <span class=\"number\">5.</span> aosp_x86-eng</div><div class=\"line\">     <span class=\"number\">6.</span> aosp_x86_64-eng</div><div class=\"line\">     <span class=\"number\">7.</span> full_fugu-userdebug</div><div class=\"line\">     <span class=\"number\">8.</span> aosp_fugu-userdebug</div><div class=\"line\">     <span class=\"number\">9.</span> mini_emulator_arm64-userdebug</div><div class=\"line\">     <span class=\"number\">10.</span> m_e_arm-userdebug</div><div class=\"line\">     <span class=\"number\">11.</span> m_e_mips-userdebug</div><div class=\"line\">     <span class=\"number\">12.</span> m_e_mips64-eng</div><div class=\"line\">     <span class=\"number\">13.</span> mini_emulator_x86-userdebug</div><div class=\"line\">     <span class=\"number\">14.</span> mini_emulator_x86_64-userdebug</div><div class=\"line\">     <span class=\"number\">15.</span> aosp_dragon-userdebug</div><div class=\"line\">     <span class=\"number\">16.</span> aosp_dragon-eng</div><div class=\"line\">     <span class=\"number\">17.</span> aosp_marlin-userdebug</div><div class=\"line\">     <span class=\"number\">18.</span> aosp_sailfish-userdebug</div><div class=\"line\">     <span class=\"number\">19.</span> aosp_flounder-userdebug</div><div class=\"line\">     <span class=\"number\">20.</span> aosp_angler-userdebug</div><div class=\"line\">     <span class=\"number\">21.</span> aosp_bullhead-userdebug</div><div class=\"line\">     <span class=\"number\">22.</span> hikey-userdebug</div><div class=\"line\">     <span class=\"number\">23.</span> aosp_shamu-userdebug</div><div class=\"line\"></div><div class=\"line\">Which would you like? [aosp_arm-eng]</div></pre></td></tr></table></figure></p>\n<p>这里的lunch是选择编译目标，直接输入数字就代表选中</p>\n<blockquote>\n<p>编译目标格式说明:<br>  编译目标的格式:BUILD-BUILDTYPE,比如上面的第一个，aosp_arm-eng的BUILD是aosp_arm,BUILDTYPE是eng.</p>\n</blockquote>\n<p>那么选择哪个编译目标呢？<br>这里<a href=\"https://stackoverflow.com/questions/27572817/aosp-build-with-fastest-emulator-boot\">StackOverflow上有提问</a>，建议编译<strong>aosp_x86-userdebug</strong> with HAXM installed</p>\n<p>但是我的lunch并没有列出这个编译目标：</p>\n<p>所以这里不使用lunch选择，而是使用choosecombo命令：</p>\n<pre><code>记住也要先执行envsetup.sh脚本哟\n</code></pre><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">choosecombo</div><div class=\"line\">Build type choices are:</div><div class=\"line\">     <span class=\"number\">1.</span> release</div><div class=\"line\">     <span class=\"number\">2.</span> debug</div><div class=\"line\"></div><div class=\"line\">Which would you like? [<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"comment\">//这里直接输入2，选择第二个</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Which product would you like? [aosp_arm]</div><div class=\"line\"><span class=\"comment\">//这里并没有对应的BUILD，所以直接自己输入：aosp_x86</span></div><div class=\"line\"></div><div class=\"line\">Variant choices are:</div><div class=\"line\">     <span class=\"number\">1.</span> user</div><div class=\"line\">     <span class=\"number\">2.</span> userdebug</div><div class=\"line\">     <span class=\"number\">3.</span> eng</div><div class=\"line\"><span class=\"comment\">//这里选择第二个，直接输入2</span></div></pre></td></tr></table></figure>\n<p>这样就选择好了编译目标，对应的Terminal的顶部标题也已经改变<br>然后调用“make -j4”进行编译就可以了</p>\n<blockquote>\n<p>make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）</p>\n</blockquote>\n<p>下面介绍几个常用到的命令：<br>当电脑磁盘空间不够用时，用下面的命令，遍历大文件<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ncdu <span class=\"comment\">//查看硬盘中的大文件</span></div></pre></td></tr></table></figure></p>\n<p>如果make失败，或是想换一个BUILD类型，使用下面的命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">make clobber <span class=\"comment\">//清理out目录下的文件</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"调试Android源码：\"><a href=\"#调试Android源码：\" class=\"headerlink\" title=\"调试Android源码：\"></a>调试Android源码：</h3><p>参考这篇文章：<a href=\"http://blog.csdn.net/dd864140130/article/details/51815253\">自己动手调试Android源码</a></p>\n<p>将Android源码导入Android Studio：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div><div class=\"line\">mmm development/tools/idegen/</div><div class=\"line\">sudo ./development/tools/idegen/idegen.sh</div></pre></td></tr></table></figure></p>\n<p>上面代码执行完后，会在源码目录下生成IEDA工程配置文件: android.ipr,android.iml及android.iws.<br>可以发现android.ipr文件的应用图标应该改成了Android Studio样式。</p>\n<blockquote>\n<p>但这里不用Android Studio来打开工程，而是使用IntelliJ来查看和DebugAndroid源码，具体参考这篇文章<a href=\"http://www.jianshu.com/p/1d1b8d0de1ed\">使用 IntelliJ 查看 Android 源码</a></p>\n</blockquote>\n<h4 id=\"单独编译Android源代码工程的模块\"><a href=\"#单独编译Android源代码工程的模块\" class=\"headerlink\" title=\"单独编译Android源代码工程的模块\"></a>单独编译Android源代码工程的模块</h4><p>在Android源码找到目录/packages/experimental，在这个目录下有Google提供基于前面提到的Android BUILD模式构建的apk工程。<br>如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_make_single_module.png\" alt=\"\"></p>\n<p>我们选择一个工程：MultiPackageApk，要把它安装到模拟器上需要执行下面的命令：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">source build/envsetup.sh</div><div class=\"line\">mmm packages/experimental/MultiPackageApk    </div><div class=\"line\">make snod</div></pre></td></tr></table></figure></p>\n<p>重启下模拟器，刚才安装的应用就会出现了</p>\n<p>单独编译源代码工程出错：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">ninja: error: 'out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.dex.toc', needed by 'out/target/common/obj/APPS/MultiPackageApk_intermediates/with-local/classes.dex', missing and no known rule to make it</div><div class=\"line\">make: *** [ninja_wrapper] Error 1</div></pre></td></tr></table></figure>\n<p>解决方案：应该选择好编译环境后（用lunch或choosecombo命令），再执行单独编译源码工作，最后别忘了执行<strong>make snod</strong></p>\n<h4 id=\"make-failed-to-build-some-targets-4-seconds\"><a href=\"#make-failed-to-build-some-targets-4-seconds\" class=\"headerlink\" title=\"make failed to build some targets (4 seconds)\"></a>make failed to build some targets (4 seconds)</h4><h4 id=\"使用-IntelliJ-Debug-Android-源码\"><a href=\"#使用-IntelliJ-Debug-Android-源码\" class=\"headerlink\" title=\"使用 IntelliJ Debug Android 源码\"></a>使用 IntelliJ Debug Android 源码</h4><p>参考这篇文章：<a href=\"http://www.jianshu.com/p/7c2ab3d9498c\">使用 IntelliJ Debug Android 源码</a></p>\n<p>文中，有一个地方跟我的电脑上不太一样：</p>\n<h4 id=\"打开-monitor-选择-debug-进程\"><a href=\"#打开-monitor-选择-debug-进程\" class=\"headerlink\" title=\"打开 monitor 选择 debug 进程\"></a>打开 monitor 选择 debug 进程</h4><p>我电脑上的monitor不是用命令行打开，而是有monitor.app。<br>位置在：/Library/Android_sdk/tools/lib/monitor-x86_64/monitor.app<br>如下图：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/aosp_monitor_position.png\" alt=\"\"></p>\n<p>到这里Android源码部分的内容就整理完了，下篇文章利用Android源码分析下<strong>Activity的启动流程</strong>。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/01/aosp-compile/\">http://agehua.github.io/2017/08/01/aosp-compile/</a></p>"},{"layout":"post","title":"Android Binder机制分析（二）","keywords":"AIDL, Binder","banner":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Branches.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Blossoming%20Branches.jpg","toc":true,"_content":"\n### 背景\n[上篇文章](http://agehua.github.io/2017/07/08/android-binder-principle/\n)分析到了Binder机制，分别介绍了自定义AIDL服务和调用系统的远程服务和他们之间的区别。\n本文承接上篇文章，继续介绍ServiceManager和系统服务的注册流程，最后对Binder机制进行分析。\n\n\n> 关于系统服务的注册流程，大都转载自[这篇文章](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n### 服务大管家ServiceManager\n> ServiceManager.java的源码可以在谷歌源码中看到，[点击这里](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/ServiceManager.java)\n\n[上篇文章](http://agehua.github.io/2017/07/08/android-binder-principle/\n)末尾提到，系统服务的IBinder对象都是由ServiceManager统一管理的。为什么这么说呢，先看下ServiceManager.getService方法:\n<!--more-->\n~~~ Java\n/**\n * Returns a reference to a service with the given name.\n *\n * @param name the name of the service to get\n * @return a reference to the service, or <code>null</code> if the service doesn't exist\n */\npublic static IBinder getService(String name) {\n   try {\n       IBinder service = sCache.get(name);\n       if (service != null) {\n           return service;\n       } else {\n           return getIServiceManager().getService(name);\n       }\n   } catch (RemoteException e) {\n       Log.e(TAG, \"error in getService\", e);\n   }\n   return null;\n}\n~~~\n\nsCache是一个本地静态Map对象，作为缓存池：\n~~~ Java\nprivate static HashMap<String, IBinder> sCache = new HashMap<String, IBinder>();\n~~~\n> ServiceManager本身会维护一个IBinder缓存池，也是为了效率高考虑，对于一个应用频繁的使用一些服务的话效率就会高很多。\n\n然后最核心的获取服务的方法是getIServiceManager方法：\n~~~ Java\nprivate static IServiceManager getIServiceManager() {\n    if (sServiceManager != null) {\n        return sServiceManager;\n    }\n    // Find the service manager\n    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());\n    return sServiceManager;\n}\n~~~\n> 在上面的代码中，调用了ServiceManagerNative.asInterface()方法，是不是说明ServiceManager也通过远端服务来取得对应的服务呢？\n\n具体在看一下ServiceManagerNative.java方法：\n~~~ Java\npublic abstract class ServiceManagerNative extends Binder implements IServiceManager\n{\n    /**\n     * Cast a Binder object into a service manager interface, generating\n     * a proxy if needed.\n     */\n    static public IServiceManager asInterface(IBinder obj)\n    {\n        if (obj == null) {\n            return null;\n        }\n        IServiceManager in =\n            (IServiceManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ServiceManagerProxy(obj);\n    }\n\n    //....\n}    \n~~~\n\n> 看到上面的代码，基本可以确认，在获取ServiceManager对象也是通过了远程调用。只是名字改成了ServiceManagerNative，本应该叫ServiceManagerService的。\n\n看到这里的ServiceManager也是通过远端服务获取到他的IBinder对象，然后在转化成本地对象进行使用的。那么刚刚看到系统的服务都是通过ServiceManager管理获取的，而现在ServiceManager本身是怎么获取到的IBinder对象的呢？这个就要从系统启动的时机看了，众所周知系统启动的时候是根据init.rc文件进行操作的：\n\n~~~ C++\nservice servicemanager /system/bin/servicemanager\n    class core\n    user system\n    group system\n    critical\n    onrestart restart healthd\n    onrestart restart zygote\n    onrestart restart media\n    onrestart restart surfaceflinger\n    onrestart restart drm\n~~~\n\n这里会启动一个servicemanager服务，那么就要去**service_manager.c**程序中的入口程序看了：\n\n![service_manager服务启动流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-init.png)\n\n这个入口其实包含了Binder机制的重要信息，而主要就是三件事：\n\n- 1、打开底层的Binder驱动程序，这个后面介绍Binder机制在介绍\n- 2、通过向binder程序发送命令：**BINDER_SET_CONTEXT_MGR**，告诉binder程序，我要成为大管家\n- 3、进入循环监听上层应用的服务请求处理，所以这里可以看到其实ServiceManager是一个守护进程在后台默默监听\n\n在第二步中成为大管家的代码深入看一看：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-service-manager.png)\n\n其实这里的逻辑也是比较简单的，首先创建一个属于servicemanager的binder节点，然后在创建一个binder链表，而这个链表的作用就是存放上层中需要系统服务的所有binder对象的节点，这样ServiceManager就可以实现了服务的增加和查询操作了。\n\n再来看看ServiceManager的添加服务操作：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-add-service.png)\n\n添加服务比较复杂，首先查看这个服务有没有注册权限限制，不是所有的服务都能注册的，然后在查看这个服务是不是已经被注册过了，最后在通知binder驱动程序注册一个服务即可。\n\n然后在来看看ServiceManager的查找服务功能：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-find-service.png)\n\n查找服务就比较简单了，直接通过服务的描述符名称遍历binder链表节点即可。\n\n- 1、Service Manager能集中管理系统内的所有服务，它能被施加权限控制，并不是任何进程都能注册服务的。\n- 2、Service Manager支持通过字符串名称来查找对应的Service。\n- 3、由于各种原因的影响，Server进程可能生死无常。如果有了Service Manager做统一的管理，那么Client只要向Service Manager做查询，就能得到Server的最新信息。\n\n### 系统服务注册流程分析\n这部分内容也可以参考博客：[Android深入浅出之Binder机制](http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html)\n\n下面来看一下一些系统服务是如何进程注册的，这里用MediaService来进行查看吧。\n\n系统中的MediaService服务的启动也是在init.rc中的\n~~~ C++\nservice media /system/bin/mediaserver\n  class main\n  user media\n  group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm\n  ioprio rt 4\n~~~\n查看Main_mediaserver.cpp源码的main函数：\n~~~ C++\nint main(int argc, char** argv)\n{\n  //获得一个ProcessState实例\n  sp<ProcessState> proc(ProcessState::self());\n\n  //得到一个ServiceManager对象\n  sp<IServiceManager> sm = defaultServiceManager();\n  MediaPlayerService::instantiate();//初始化MediaPlayerService服务\n  ProcessState::self()->startThreadPool();\n  IPCThreadState::self()->joinThreadPool();\n}\n~~~\n> sp是google搞出来的为了方便C/C++程序员管理指针的分配和释放的一套方法，就把它当做一个普通的指针看待，sp&lt;XXX&gt;就看成是XXX*就可以了\n\n这里用MediaPlayerService来看看注册操作：\n~~~ C++\nvoid MediaPlayerService::instantiate() {\n  defaultServiceManager()->addService(\n    String16(\"media.player\"), new MediaPlayerService());\n  )\n}\n~~~\n\n看到熟悉的代码了把，这里通过ServiceManager来进行服务注册了，那么这里是如何获取到ServiceManager的？\n~~~ C++\nsp<IServiceManager> defaultServiceManager() {\n  if (gDefaultServiceManager != NULL) return gDefaultServiceManager;\n\n  {\n    AutoMutex _l(gDefaultServiceManagerLock); //--->锁保护\n    while (gDefaultServiceManager == NULL) {\n      gDefaultServiceManager = interface_cast<IServiceManager> (\n        ProcessState::self()->getContextObject(NULL));\n      if (gDefaultServiceManager == NULL)\n        sleep(1);\n    }\n  }\n  return gDefaultServiceManager;\n}\n~~~\n看看ProcessState.cpp的源码：\n~~~ C++\nsp<IBinder> ProcessState::getContextObject(const sp<IBinder>& caller) {\n  return getStrongProxyForHandle(0);\n}\n~~~\n看看getStrongProxyForHandle方法实现：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/getStrongProxyForHandle.png)\n\n这里看到了，会使用IPCThreadState的transact方法和底层的Binder进行通信的，然后使用一个句柄handle构造一个BpBinder对象，而BpBinder对象其实就是native层实现的Binder对象，以后只要看到Bp开头的就是代理对象对应Java层的Proxy对象，Bn开头的就是native对象对应Java层的Stub对象。\n\n在上面分析servicemanager的时候知道会维护一个binder节点链表，那里其实就有一个每个binder对应句柄handle，而后续进行通信的话都是通过这个句柄来标识是哪个服务的binder对象了，这样也就在通信的时候不会发生紊乱了，而servicemanager的句柄handle就是0。还有一个知识点就是可以看到IPC通信的时候传输数据使用的就是Parcel类，这个类就是为了跨进程通信产生的，他有一个方法readStrongBinder，就是可以从Parcel的数据中获取到Binder对象，这个也是在跨进程中传递Binder对象的核心地方。\n~~~ Java\npublic final IBinder readStrongBinder() {\n  return nativeReadStronBinder(mNativePtr);\n}\n~~~\n\n好了，上面就通过系统的mediaserver服务来讲解了系统服务的注册流程：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/media-server-process.png)\n\n到这里就分析完了Android中的远程服务调用机制逻辑以及ServiceManager这个服务大管家的作用:\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-manager-activity.png)\n\n- 1、首先跨进程通信的话，肯定会有两个对象：一个是本地端的中间者Proxy对象，一个是远程端的中间者Stub对象\n- 2、Proxy对象通过静态代理模式维持一个远端传递过来的Binder对象，而Stub对象可以把远端传递过来的Binder对象转化成一个实际服务对象给应用使用\n- 3、Android中在使用系统服务的时候通过getSystemService方法获取到的其实都是Stub把远端的Binder转化的对象，因为系统服务都是在system_server进程中，所以肯定是跨进程获取对象的，那么这个Binder对象其实就是上面的Proxy对象\n- 4、系统的服务都是在一个指定的系统进程中system_server\n- 5、服务大管家ServiceManager在系统启动的时候也是先获取自生的Binder对象，然后转化成实际操作对象，然后才可以操作系统服务的注册和查询功能\n\n下面是系统一些服务的注册流程：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/system-service-register-process.png)\n\n上面已经介绍了远程服务调用机制以及ServiceManager的实现原理，下面就要看看另外一个重点，也是上面提到的一个重要对象Binder，准确来说这个是Binder机制，在Android中Binder机制最复杂的一个架构系统了，它的设计很复杂，所以有很多同学在了解Binder机制的时候，总是看着看着就晕了，今天我们就直说重点，而且说得要相对明了简单。\n\n### Binder机制解析\n#### 第一、Android中的IPC为何要采用Binder机制\n\nBinder是Android系统进程间通信(IPC)方式之一。Linux已经拥有的进程间通信IPC手段包括(Internet Process Connection)：管道(Pipe)、信号(Signal)和跟踪(Trace)、插口(Socket)、报文队列(Message)、共享内存(Share Memory)和信号量(Semaphore)。\n\nBinder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID,PID身份，既支持实名Binder也支持匿名Binder，安全性高。对Binder而言，Binder可以看成Server提供的实现某个特定服务的访问接入点， Client通过这个‘地址’向Server发送请求来使用该服务；对Client而言，Binder可以看成是通向Server的管道入口，要想和某个Server通信首先必须建立这个管道并获得管道入口。\n\n#### 第二、Android中的Binder实现原理\n\n其实Android中的Binder通信都是通过虚拟驱动设备程序/dev/binder来实现的，我们知道一些硬件都会对应一个驱动程序，而binder驱动程序没有对应的硬件，所以叫做**虚拟驱动设备程序**，其实他就是一个字符驱动设备，或者叫做miscdevice混杂设备驱动。\n\n其实混杂驱动设备是字符设备的一种，它们共享一个主设备号(10)，但次设备号不同，所有的混杂设备形成一个链表，对设备访问时内核根据次设备号查找到相应的miscdevice设备。例如:触摸屏，LED，按键，串口。即：为了节约主设备号，将某些设备用链表的形式连接在一起，最后通过查找次设备区分。这里用主设备无法匹配出设备驱动，只能找到链表，再通过次设备号，才能找到设备驱动。而之前所学的，一般字符设备，通过主设备号，就能找到设备驱动了。我们可以通过命令查看/dev/binder驱动的主设备号：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/device-number.png)\n\n#### 第三、Android中Binder通信机制\n\n先来看一张图，我们可以大体的了解到了客户端和服务端通过Binder驱动进行通信\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-drive-principle.png)\n\n首先不管是客户端进程还是服务端进程都是在用户空间的，而binder驱动是在内核空间的，通信的数据是有规定格式也叫作IPC数据，既然是一种通信机制，肯定是需要协议，数据格式等基础结构信息的：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/IPC-data-format.png)\n\n上面在分析了ServiceManager的启动的时候说到了，第一步是打开驱动程序，具体打开函数在binder.c中：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-open-drive.png)\n\n在使用一个驱动之前，肯定要先打开驱动，然后把驱动程序映射到内存中，接着借助IPCTreadState.cpp和binder驱动进行通信了：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/transact-binder.png)\n\n所以看到这里IPCThreadState也是需要进入后台进行监听的，处理来自客户端和服务端的数据传输消息\n\n最后再来看一下通信时序图。\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/communication-timing.png)\n\n到这里我们就介绍完了Binder机制了，关于Binder机制最好不要看太深，因为越深你觉得越复杂越难理解，其实你只要了解到他是一个通信工具，通信采用的是驱动操作，通过传输IPC数据来进行通信即可。其他的关于他的详细数据格式和通信协议，感兴趣的同学可以了解一下，但是太过复杂而且在实际中也没多大用途，所以这里就不介绍了。\n\n### 技术点概要\n#### 理解远程服务通信机制\n\n通过案例先了解到本地端和服务端跨进程通信，主要就是借助Binder进行功能调用，而在这里主要有两个核心类，一个是Stub类，这个类是继承了Binder类具备了将远程传递的Binder对象转化成本地实际对象asInterface方法即可，同时实现了IXXX接口，需要实现AIDL中的功能方法，还有一个类就是Proxy类，实现了IXXX接口，同时内部保留着远端传递的Binder对象，然后通过这个对象调用远端方法。这里Stub类就是服务端的中间者，而Proxy就是本地端的中间者。\n\n#### 系统服务调用流程\n\n通过分析了跨进程通信机制原理之后，再去看看Android系统中在使用一些服务的时候，通过getSystemService方法获取服务对象，其实这内部就是通过跨进程获取到了远端服务的Binder对象，然后转化成系统服务对象给应用调用，而这些系统服务的Binder对象在系统启动的时候服务会自动注册到ServiceManager中。\n\n#### 服务大管家ServiceManager\n\n在整个远程服务调用过程中两个重要对象，一个是Binder对象，一个就是ServiceManager类，这个类是管理系统服务的类，他可以注册服务，查询服务，系统服务在系统启动的时候会通过addService进行服务注册，然后应用就可以通过getService进行服务查询，而在这个过程中，底层会维护一个这些服务的binder链表结构，同时每个服务的binder对象都一个句柄handle，通过这个句柄来表示通信标识，这样通信才不会紊乱。\n\n#### 底层通信核心Binder\n\n最后分析了底层真正实现跨进程通信的机制Binder，其实是通过虚拟驱动程序/dev/binder进行通信的。一个通信机制肯定有通信协议，传输的数据结构，但是这里并没有介绍这些知识，原因是我们后面的需求并不会用到这些，其次是这些知识点太详细介绍也不好，因为会越看越乱。\n\n### 总结\n\n本文介绍的东东有点多，但是如果掌握了Android中的Binder机制和远程服务调用机制对后面拦截系统api做了铺垫，说到结束了才告诉大家为什么要介绍这个知识点，是因为最近在研究如何拦截系统启动Activity的事，那么就必须了解Activity的启动流程，但是在这个过程中有一个对象就是ActivityManagerService，而他就和Binder以及远程服务调用机制紧密联系了，如果不了解Binder机制，后面工作是没办法进行的，好了，说到最后再来一张神图算是总结了本文内容：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-summary.png)\n\n这张图非常好的表达了Android中应用使用系统服务的一个流程，也是最好的最全的解释了。看懂这张图之后，那么对Android中的binder机制和远程服务调用机制就可以掌握了，可以进行后续的拦截操作了。\n\n参考文献：\n[Android系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n[进击的Android注入术《五》](http://blog.csdn.net/L173864930/article/details/38468433)\n\n[Android深入浅出之Binder机制](http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html)\n","source":"_posts/2017-07-10-android-binder-principle2.md","raw":"---\nlayout: post\ntitle:  Android Binder机制分析（二）\ncategory: accumulation\ntags:\n  - AIDL\n  - Binder\nkeywords: AIDL, Binder\nbanner: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Branches.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Blossoming%20Branches.jpg\ntoc: true\n---\n\n### 背景\n[上篇文章](http://agehua.github.io/2017/07/08/android-binder-principle/\n)分析到了Binder机制，分别介绍了自定义AIDL服务和调用系统的远程服务和他们之间的区别。\n本文承接上篇文章，继续介绍ServiceManager和系统服务的注册流程，最后对Binder机制进行分析。\n\n\n> 关于系统服务的注册流程，大都转载自[这篇文章](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n### 服务大管家ServiceManager\n> ServiceManager.java的源码可以在谷歌源码中看到，[点击这里](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/ServiceManager.java)\n\n[上篇文章](http://agehua.github.io/2017/07/08/android-binder-principle/\n)末尾提到，系统服务的IBinder对象都是由ServiceManager统一管理的。为什么这么说呢，先看下ServiceManager.getService方法:\n<!--more-->\n~~~ Java\n/**\n * Returns a reference to a service with the given name.\n *\n * @param name the name of the service to get\n * @return a reference to the service, or <code>null</code> if the service doesn't exist\n */\npublic static IBinder getService(String name) {\n   try {\n       IBinder service = sCache.get(name);\n       if (service != null) {\n           return service;\n       } else {\n           return getIServiceManager().getService(name);\n       }\n   } catch (RemoteException e) {\n       Log.e(TAG, \"error in getService\", e);\n   }\n   return null;\n}\n~~~\n\nsCache是一个本地静态Map对象，作为缓存池：\n~~~ Java\nprivate static HashMap<String, IBinder> sCache = new HashMap<String, IBinder>();\n~~~\n> ServiceManager本身会维护一个IBinder缓存池，也是为了效率高考虑，对于一个应用频繁的使用一些服务的话效率就会高很多。\n\n然后最核心的获取服务的方法是getIServiceManager方法：\n~~~ Java\nprivate static IServiceManager getIServiceManager() {\n    if (sServiceManager != null) {\n        return sServiceManager;\n    }\n    // Find the service manager\n    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());\n    return sServiceManager;\n}\n~~~\n> 在上面的代码中，调用了ServiceManagerNative.asInterface()方法，是不是说明ServiceManager也通过远端服务来取得对应的服务呢？\n\n具体在看一下ServiceManagerNative.java方法：\n~~~ Java\npublic abstract class ServiceManagerNative extends Binder implements IServiceManager\n{\n    /**\n     * Cast a Binder object into a service manager interface, generating\n     * a proxy if needed.\n     */\n    static public IServiceManager asInterface(IBinder obj)\n    {\n        if (obj == null) {\n            return null;\n        }\n        IServiceManager in =\n            (IServiceManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ServiceManagerProxy(obj);\n    }\n\n    //....\n}    \n~~~\n\n> 看到上面的代码，基本可以确认，在获取ServiceManager对象也是通过了远程调用。只是名字改成了ServiceManagerNative，本应该叫ServiceManagerService的。\n\n看到这里的ServiceManager也是通过远端服务获取到他的IBinder对象，然后在转化成本地对象进行使用的。那么刚刚看到系统的服务都是通过ServiceManager管理获取的，而现在ServiceManager本身是怎么获取到的IBinder对象的呢？这个就要从系统启动的时机看了，众所周知系统启动的时候是根据init.rc文件进行操作的：\n\n~~~ C++\nservice servicemanager /system/bin/servicemanager\n    class core\n    user system\n    group system\n    critical\n    onrestart restart healthd\n    onrestart restart zygote\n    onrestart restart media\n    onrestart restart surfaceflinger\n    onrestart restart drm\n~~~\n\n这里会启动一个servicemanager服务，那么就要去**service_manager.c**程序中的入口程序看了：\n\n![service_manager服务启动流程](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-init.png)\n\n这个入口其实包含了Binder机制的重要信息，而主要就是三件事：\n\n- 1、打开底层的Binder驱动程序，这个后面介绍Binder机制在介绍\n- 2、通过向binder程序发送命令：**BINDER_SET_CONTEXT_MGR**，告诉binder程序，我要成为大管家\n- 3、进入循环监听上层应用的服务请求处理，所以这里可以看到其实ServiceManager是一个守护进程在后台默默监听\n\n在第二步中成为大管家的代码深入看一看：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-service-manager.png)\n\n其实这里的逻辑也是比较简单的，首先创建一个属于servicemanager的binder节点，然后在创建一个binder链表，而这个链表的作用就是存放上层中需要系统服务的所有binder对象的节点，这样ServiceManager就可以实现了服务的增加和查询操作了。\n\n再来看看ServiceManager的添加服务操作：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-add-service.png)\n\n添加服务比较复杂，首先查看这个服务有没有注册权限限制，不是所有的服务都能注册的，然后在查看这个服务是不是已经被注册过了，最后在通知binder驱动程序注册一个服务即可。\n\n然后在来看看ServiceManager的查找服务功能：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-find-service.png)\n\n查找服务就比较简单了，直接通过服务的描述符名称遍历binder链表节点即可。\n\n- 1、Service Manager能集中管理系统内的所有服务，它能被施加权限控制，并不是任何进程都能注册服务的。\n- 2、Service Manager支持通过字符串名称来查找对应的Service。\n- 3、由于各种原因的影响，Server进程可能生死无常。如果有了Service Manager做统一的管理，那么Client只要向Service Manager做查询，就能得到Server的最新信息。\n\n### 系统服务注册流程分析\n这部分内容也可以参考博客：[Android深入浅出之Binder机制](http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html)\n\n下面来看一下一些系统服务是如何进程注册的，这里用MediaService来进行查看吧。\n\n系统中的MediaService服务的启动也是在init.rc中的\n~~~ C++\nservice media /system/bin/mediaserver\n  class main\n  user media\n  group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm\n  ioprio rt 4\n~~~\n查看Main_mediaserver.cpp源码的main函数：\n~~~ C++\nint main(int argc, char** argv)\n{\n  //获得一个ProcessState实例\n  sp<ProcessState> proc(ProcessState::self());\n\n  //得到一个ServiceManager对象\n  sp<IServiceManager> sm = defaultServiceManager();\n  MediaPlayerService::instantiate();//初始化MediaPlayerService服务\n  ProcessState::self()->startThreadPool();\n  IPCThreadState::self()->joinThreadPool();\n}\n~~~\n> sp是google搞出来的为了方便C/C++程序员管理指针的分配和释放的一套方法，就把它当做一个普通的指针看待，sp&lt;XXX&gt;就看成是XXX*就可以了\n\n这里用MediaPlayerService来看看注册操作：\n~~~ C++\nvoid MediaPlayerService::instantiate() {\n  defaultServiceManager()->addService(\n    String16(\"media.player\"), new MediaPlayerService());\n  )\n}\n~~~\n\n看到熟悉的代码了把，这里通过ServiceManager来进行服务注册了，那么这里是如何获取到ServiceManager的？\n~~~ C++\nsp<IServiceManager> defaultServiceManager() {\n  if (gDefaultServiceManager != NULL) return gDefaultServiceManager;\n\n  {\n    AutoMutex _l(gDefaultServiceManagerLock); //--->锁保护\n    while (gDefaultServiceManager == NULL) {\n      gDefaultServiceManager = interface_cast<IServiceManager> (\n        ProcessState::self()->getContextObject(NULL));\n      if (gDefaultServiceManager == NULL)\n        sleep(1);\n    }\n  }\n  return gDefaultServiceManager;\n}\n~~~\n看看ProcessState.cpp的源码：\n~~~ C++\nsp<IBinder> ProcessState::getContextObject(const sp<IBinder>& caller) {\n  return getStrongProxyForHandle(0);\n}\n~~~\n看看getStrongProxyForHandle方法实现：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/getStrongProxyForHandle.png)\n\n这里看到了，会使用IPCThreadState的transact方法和底层的Binder进行通信的，然后使用一个句柄handle构造一个BpBinder对象，而BpBinder对象其实就是native层实现的Binder对象，以后只要看到Bp开头的就是代理对象对应Java层的Proxy对象，Bn开头的就是native对象对应Java层的Stub对象。\n\n在上面分析servicemanager的时候知道会维护一个binder节点链表，那里其实就有一个每个binder对应句柄handle，而后续进行通信的话都是通过这个句柄来标识是哪个服务的binder对象了，这样也就在通信的时候不会发生紊乱了，而servicemanager的句柄handle就是0。还有一个知识点就是可以看到IPC通信的时候传输数据使用的就是Parcel类，这个类就是为了跨进程通信产生的，他有一个方法readStrongBinder，就是可以从Parcel的数据中获取到Binder对象，这个也是在跨进程中传递Binder对象的核心地方。\n~~~ Java\npublic final IBinder readStrongBinder() {\n  return nativeReadStronBinder(mNativePtr);\n}\n~~~\n\n好了，上面就通过系统的mediaserver服务来讲解了系统服务的注册流程：\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/media-server-process.png)\n\n到这里就分析完了Android中的远程服务调用机制逻辑以及ServiceManager这个服务大管家的作用:\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-manager-activity.png)\n\n- 1、首先跨进程通信的话，肯定会有两个对象：一个是本地端的中间者Proxy对象，一个是远程端的中间者Stub对象\n- 2、Proxy对象通过静态代理模式维持一个远端传递过来的Binder对象，而Stub对象可以把远端传递过来的Binder对象转化成一个实际服务对象给应用使用\n- 3、Android中在使用系统服务的时候通过getSystemService方法获取到的其实都是Stub把远端的Binder转化的对象，因为系统服务都是在system_server进程中，所以肯定是跨进程获取对象的，那么这个Binder对象其实就是上面的Proxy对象\n- 4、系统的服务都是在一个指定的系统进程中system_server\n- 5、服务大管家ServiceManager在系统启动的时候也是先获取自生的Binder对象，然后转化成实际操作对象，然后才可以操作系统服务的注册和查询功能\n\n下面是系统一些服务的注册流程：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/system-service-register-process.png)\n\n上面已经介绍了远程服务调用机制以及ServiceManager的实现原理，下面就要看看另外一个重点，也是上面提到的一个重要对象Binder，准确来说这个是Binder机制，在Android中Binder机制最复杂的一个架构系统了，它的设计很复杂，所以有很多同学在了解Binder机制的时候，总是看着看着就晕了，今天我们就直说重点，而且说得要相对明了简单。\n\n### Binder机制解析\n#### 第一、Android中的IPC为何要采用Binder机制\n\nBinder是Android系统进程间通信(IPC)方式之一。Linux已经拥有的进程间通信IPC手段包括(Internet Process Connection)：管道(Pipe)、信号(Signal)和跟踪(Trace)、插口(Socket)、报文队列(Message)、共享内存(Share Memory)和信号量(Semaphore)。\n\nBinder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID,PID身份，既支持实名Binder也支持匿名Binder，安全性高。对Binder而言，Binder可以看成Server提供的实现某个特定服务的访问接入点， Client通过这个‘地址’向Server发送请求来使用该服务；对Client而言，Binder可以看成是通向Server的管道入口，要想和某个Server通信首先必须建立这个管道并获得管道入口。\n\n#### 第二、Android中的Binder实现原理\n\n其实Android中的Binder通信都是通过虚拟驱动设备程序/dev/binder来实现的，我们知道一些硬件都会对应一个驱动程序，而binder驱动程序没有对应的硬件，所以叫做**虚拟驱动设备程序**，其实他就是一个字符驱动设备，或者叫做miscdevice混杂设备驱动。\n\n其实混杂驱动设备是字符设备的一种，它们共享一个主设备号(10)，但次设备号不同，所有的混杂设备形成一个链表，对设备访问时内核根据次设备号查找到相应的miscdevice设备。例如:触摸屏，LED，按键，串口。即：为了节约主设备号，将某些设备用链表的形式连接在一起，最后通过查找次设备区分。这里用主设备无法匹配出设备驱动，只能找到链表，再通过次设备号，才能找到设备驱动。而之前所学的，一般字符设备，通过主设备号，就能找到设备驱动了。我们可以通过命令查看/dev/binder驱动的主设备号：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/device-number.png)\n\n#### 第三、Android中Binder通信机制\n\n先来看一张图，我们可以大体的了解到了客户端和服务端通过Binder驱动进行通信\n\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-drive-principle.png)\n\n首先不管是客户端进程还是服务端进程都是在用户空间的，而binder驱动是在内核空间的，通信的数据是有规定格式也叫作IPC数据，既然是一种通信机制，肯定是需要协议，数据格式等基础结构信息的：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/IPC-data-format.png)\n\n上面在分析了ServiceManager的启动的时候说到了，第一步是打开驱动程序，具体打开函数在binder.c中：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-open-drive.png)\n\n在使用一个驱动之前，肯定要先打开驱动，然后把驱动程序映射到内存中，接着借助IPCTreadState.cpp和binder驱动进行通信了：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/transact-binder.png)\n\n所以看到这里IPCThreadState也是需要进入后台进行监听的，处理来自客户端和服务端的数据传输消息\n\n最后再来看一下通信时序图。\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/communication-timing.png)\n\n到这里我们就介绍完了Binder机制了，关于Binder机制最好不要看太深，因为越深你觉得越复杂越难理解，其实你只要了解到他是一个通信工具，通信采用的是驱动操作，通过传输IPC数据来进行通信即可。其他的关于他的详细数据格式和通信协议，感兴趣的同学可以了解一下，但是太过复杂而且在实际中也没多大用途，所以这里就不介绍了。\n\n### 技术点概要\n#### 理解远程服务通信机制\n\n通过案例先了解到本地端和服务端跨进程通信，主要就是借助Binder进行功能调用，而在这里主要有两个核心类，一个是Stub类，这个类是继承了Binder类具备了将远程传递的Binder对象转化成本地实际对象asInterface方法即可，同时实现了IXXX接口，需要实现AIDL中的功能方法，还有一个类就是Proxy类，实现了IXXX接口，同时内部保留着远端传递的Binder对象，然后通过这个对象调用远端方法。这里Stub类就是服务端的中间者，而Proxy就是本地端的中间者。\n\n#### 系统服务调用流程\n\n通过分析了跨进程通信机制原理之后，再去看看Android系统中在使用一些服务的时候，通过getSystemService方法获取服务对象，其实这内部就是通过跨进程获取到了远端服务的Binder对象，然后转化成系统服务对象给应用调用，而这些系统服务的Binder对象在系统启动的时候服务会自动注册到ServiceManager中。\n\n#### 服务大管家ServiceManager\n\n在整个远程服务调用过程中两个重要对象，一个是Binder对象，一个就是ServiceManager类，这个类是管理系统服务的类，他可以注册服务，查询服务，系统服务在系统启动的时候会通过addService进行服务注册，然后应用就可以通过getService进行服务查询，而在这个过程中，底层会维护一个这些服务的binder链表结构，同时每个服务的binder对象都一个句柄handle，通过这个句柄来表示通信标识，这样通信才不会紊乱。\n\n#### 底层通信核心Binder\n\n最后分析了底层真正实现跨进程通信的机制Binder，其实是通过虚拟驱动程序/dev/binder进行通信的。一个通信机制肯定有通信协议，传输的数据结构，但是这里并没有介绍这些知识，原因是我们后面的需求并不会用到这些，其次是这些知识点太详细介绍也不好，因为会越看越乱。\n\n### 总结\n\n本文介绍的东东有点多，但是如果掌握了Android中的Binder机制和远程服务调用机制对后面拦截系统api做了铺垫，说到结束了才告诉大家为什么要介绍这个知识点，是因为最近在研究如何拦截系统启动Activity的事，那么就必须了解Activity的启动流程，但是在这个过程中有一个对象就是ActivityManagerService，而他就和Binder以及远程服务调用机制紧密联系了，如果不了解Binder机制，后面工作是没办法进行的，好了，说到最后再来一张神图算是总结了本文内容：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-summary.png)\n\n这张图非常好的表达了Android中应用使用系统服务的一个流程，也是最好的最全的解释了。看懂这张图之后，那么对Android中的binder机制和远程服务调用机制就可以掌握了，可以进行后续的拦截操作了。\n\n参考文献：\n[Android系统篇之—-Binder机制和远程服务调用机制分析](http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/)\n\n[进击的Android注入术《五》](http://blog.csdn.net/L173864930/article/details/38468433)\n\n[Android深入浅出之Binder机制](http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html)\n","slug":"android-binder-principle2","published":1,"date":"2017-07-09T16:00:00.000Z","updated":"2017-11-23T07:15:48.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec18003od6ykbkgy2aq7","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p><a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">上篇文章</a>分析到了Binder机制，分别介绍了自定义AIDL服务和调用系统的远程服务和他们之间的区别。<br>本文承接上篇文章，继续介绍ServiceManager和系统服务的注册流程，最后对Binder机制进行分析。</p>\n<blockquote>\n<p>关于系统服务的注册流程，大都转载自<a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"external\">这篇文章</a></p>\n</blockquote>\n<h3 id=\"服务大管家ServiceManager\"><a href=\"#服务大管家ServiceManager\" class=\"headerlink\" title=\"服务大管家ServiceManager\"></a>服务大管家ServiceManager</h3><blockquote>\n<p>ServiceManager.java的源码可以在谷歌源码中看到，<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/ServiceManager.java\" target=\"_blank\" rel=\"external\">点击这里</a></p>\n</blockquote>\n<p><a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">上篇文章</a>末尾提到，系统服务的IBinder对象都是由ServiceManager统一管理的。为什么这么说呢，先看下ServiceManager.getService方法:<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns a reference to a service with the given name.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name the name of the service to get</div><div class=\"line\"> * <span class=\"doctag\">@return</span> a reference to the service, or &lt;code&gt;null&lt;/code&gt; if the service doesn't exist</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IBinder <span class=\"title\">getService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       IBinder service = sCache.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> service;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> getIServiceManager().getService(name);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">       Log.e(TAG, <span class=\"string\">\"error in getService\"</span>, e);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sCache是一个本地静态Map对象，作为缓存池：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, IBinder&gt; sCache = <span class=\"keyword\">new</span> HashMap&lt;String, IBinder&gt;();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ServiceManager本身会维护一个IBinder缓存池，也是为了效率高考虑，对于一个应用频繁的使用一些服务的话效率就会高很多。</p>\n</blockquote>\n<p>然后最核心的获取服务的方法是getIServiceManager方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IServiceManager <span class=\"title\">getIServiceManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sServiceManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sServiceManager;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Find the service manager</span></div><div class=\"line\">    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</div><div class=\"line\">    <span class=\"keyword\">return</span> sServiceManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在上面的代码中，调用了ServiceManagerNative.asInterface()方法，是不是说明ServiceManager也通过远端服务来取得对应的服务呢？</p>\n</blockquote>\n<p>具体在看一下ServiceManagerNative.java方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IServiceManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Cast a Binder object into a service manager interface, generating</div><div class=\"line\">     * a proxy if needed.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IServiceManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IServiceManager in =</div><div class=\"line\">            (IServiceManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServiceManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>看到上面的代码，基本可以确认，在获取ServiceManager对象也是通过了远程调用。只是名字改成了ServiceManagerNative，本应该叫ServiceManagerService的。</p>\n</blockquote>\n<p>看到这里的ServiceManager也是通过远端服务获取到他的IBinder对象，然后在转化成本地对象进行使用的。那么刚刚看到系统的服务都是通过ServiceManager管理获取的，而现在ServiceManager本身是怎么获取到的IBinder对象的呢？这个就要从系统启动的时机看了，众所周知系统启动的时候是根据init.rc文件进行操作的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">service servicemanager /system/bin/servicemanager</div><div class=\"line\">    <span class=\"keyword\">class</span> core</div><div class=\"line\">    user system</div><div class=\"line\">    group system</div><div class=\"line\">    critical</div><div class=\"line\">    onrestart restart healthd</div><div class=\"line\">    onrestart restart zygote</div><div class=\"line\">    onrestart restart media</div><div class=\"line\">    onrestart restart surfaceflinger</div><div class=\"line\">    onrestart restart drm</div></pre></td></tr></table></figure>\n<p>这里会启动一个servicemanager服务，那么就要去<strong>service_manager.c</strong>程序中的入口程序看了：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-init.png\" alt=\"service_manager服务启动流程\"></p>\n<p>这个入口其实包含了Binder机制的重要信息，而主要就是三件事：</p>\n<ul>\n<li>1、打开底层的Binder驱动程序，这个后面介绍Binder机制在介绍</li>\n<li>2、通过向binder程序发送命令：<strong>BINDER_SET_CONTEXT_MGR</strong>，告诉binder程序，我要成为大管家</li>\n<li>3、进入循环监听上层应用的服务请求处理，所以这里可以看到其实ServiceManager是一个守护进程在后台默默监听</li>\n</ul>\n<p>在第二步中成为大管家的代码深入看一看：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-service-manager.png\" alt=\"\"></p>\n<p>其实这里的逻辑也是比较简单的，首先创建一个属于servicemanager的binder节点，然后在创建一个binder链表，而这个链表的作用就是存放上层中需要系统服务的所有binder对象的节点，这样ServiceManager就可以实现了服务的增加和查询操作了。</p>\n<p>再来看看ServiceManager的添加服务操作：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-add-service.png\" alt=\"\"></p>\n<p>添加服务比较复杂，首先查看这个服务有没有注册权限限制，不是所有的服务都能注册的，然后在查看这个服务是不是已经被注册过了，最后在通知binder驱动程序注册一个服务即可。</p>\n<p>然后在来看看ServiceManager的查找服务功能：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-find-service.png\" alt=\"\"></p>\n<p>查找服务就比较简单了，直接通过服务的描述符名称遍历binder链表节点即可。</p>\n<ul>\n<li>1、Service Manager能集中管理系统内的所有服务，它能被施加权限控制，并不是任何进程都能注册服务的。</li>\n<li>2、Service Manager支持通过字符串名称来查找对应的Service。</li>\n<li>3、由于各种原因的影响，Server进程可能生死无常。如果有了Service Manager做统一的管理，那么Client只要向Service Manager做查询，就能得到Server的最新信息。</li>\n</ul>\n<h3 id=\"系统服务注册流程分析\"><a href=\"#系统服务注册流程分析\" class=\"headerlink\" title=\"系统服务注册流程分析\"></a>系统服务注册流程分析</h3><p>这部分内容也可以参考博客：<a href=\"http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html\" target=\"_blank\" rel=\"external\">Android深入浅出之Binder机制</a></p>\n<p>下面来看一下一些系统服务是如何进程注册的，这里用MediaService来进行查看吧。</p>\n<p>系统中的MediaService服务的启动也是在init.rc中的<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">service media /system/bin/mediaserver</div><div class=\"line\">  <span class=\"keyword\">class</span> main</div><div class=\"line\">  user media</div><div class=\"line\">  group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm</div><div class=\"line\">  ioprio rt <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>查看Main_mediaserver.cpp源码的main函数：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//获得一个ProcessState实例</span></div><div class=\"line\">  sp&lt;ProcessState&gt; proc(ProcessState::self());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//得到一个ServiceManager对象</span></div><div class=\"line\">  sp&lt;IServiceManager&gt; sm = defaultServiceManager();</div><div class=\"line\">  MediaPlayerService::instantiate();<span class=\"comment\">//初始化MediaPlayerService服务</span></div><div class=\"line\">  ProcessState::self()-&gt;startThreadPool();</div><div class=\"line\">  IPCThreadState::self()-&gt;joinThreadPool();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>sp是google搞出来的为了方便C/C++程序员管理指针的分配和释放的一套方法，就把它当做一个普通的指针看待，sp&lt;XXX&gt;就看成是XXX*就可以了</p>\n</blockquote>\n<p>这里用MediaPlayerService来看看注册操作：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MediaPlayerService::instantiate() &#123;</div><div class=\"line\">  defaultServiceManager()-&gt;addService(</div><div class=\"line\">    String16(<span class=\"string\">\"media.player\"</span>), <span class=\"keyword\">new</span> MediaPlayerService());</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到熟悉的代码了把，这里通过ServiceManager来进行服务注册了，那么这里是如何获取到ServiceManager的？<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sp&lt;IServiceManager&gt; defaultServiceManager() &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (gDefaultServiceManager != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> gDefaultServiceManager;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    AutoMutex _l(gDefaultServiceManagerLock); <span class=\"comment\">//---&gt;锁保护</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (gDefaultServiceManager == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      gDefaultServiceManager = interface_cast&lt;IServiceManager&gt; (</div><div class=\"line\">        ProcessState::self()-&gt;getContextObject(<span class=\"literal\">NULL</span>));</div><div class=\"line\">      <span class=\"keyword\">if</span> (gDefaultServiceManager == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> gDefaultServiceManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看看ProcessState.cpp的源码：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sp&lt;IBinder&gt; ProcessState::getContextObject(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; caller) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getStrongProxyForHandle(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看看getStrongProxyForHandle方法实现：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/getStrongProxyForHandle.png\" alt=\"\"></p>\n<p>这里看到了，会使用IPCThreadState的transact方法和底层的Binder进行通信的，然后使用一个句柄handle构造一个BpBinder对象，而BpBinder对象其实就是native层实现的Binder对象，以后只要看到Bp开头的就是代理对象对应Java层的Proxy对象，Bn开头的就是native对象对应Java层的Stub对象。</p>\n<p>在上面分析servicemanager的时候知道会维护一个binder节点链表，那里其实就有一个每个binder对应句柄handle，而后续进行通信的话都是通过这个句柄来标识是哪个服务的binder对象了，这样也就在通信的时候不会发生紊乱了，而servicemanager的句柄handle就是0。还有一个知识点就是可以看到IPC通信的时候传输数据使用的就是Parcel类，这个类就是为了跨进程通信产生的，他有一个方法readStrongBinder，就是可以从Parcel的数据中获取到Binder对象，这个也是在跨进程中传递Binder对象的核心地方。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IBinder <span class=\"title\">readStrongBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nativeReadStronBinder(mNativePtr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>好了，上面就通过系统的mediaserver服务来讲解了系统服务的注册流程：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/media-server-process.png\" alt=\"\"></p>\n<p>到这里就分析完了Android中的远程服务调用机制逻辑以及ServiceManager这个服务大管家的作用:</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-manager-activity.png\" alt=\"\"></p>\n<ul>\n<li>1、首先跨进程通信的话，肯定会有两个对象：一个是本地端的中间者Proxy对象，一个是远程端的中间者Stub对象</li>\n<li>2、Proxy对象通过静态代理模式维持一个远端传递过来的Binder对象，而Stub对象可以把远端传递过来的Binder对象转化成一个实际服务对象给应用使用</li>\n<li>3、Android中在使用系统服务的时候通过getSystemService方法获取到的其实都是Stub把远端的Binder转化的对象，因为系统服务都是在system_server进程中，所以肯定是跨进程获取对象的，那么这个Binder对象其实就是上面的Proxy对象</li>\n<li>4、系统的服务都是在一个指定的系统进程中system_server</li>\n<li>5、服务大管家ServiceManager在系统启动的时候也是先获取自生的Binder对象，然后转化成实际操作对象，然后才可以操作系统服务的注册和查询功能</li>\n</ul>\n<p>下面是系统一些服务的注册流程：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/system-service-register-process.png\" alt=\"\"></p>\n<p>上面已经介绍了远程服务调用机制以及ServiceManager的实现原理，下面就要看看另外一个重点，也是上面提到的一个重要对象Binder，准确来说这个是Binder机制，在Android中Binder机制最复杂的一个架构系统了，它的设计很复杂，所以有很多同学在了解Binder机制的时候，总是看着看着就晕了，今天我们就直说重点，而且说得要相对明了简单。</p>\n<h3 id=\"Binder机制解析\"><a href=\"#Binder机制解析\" class=\"headerlink\" title=\"Binder机制解析\"></a>Binder机制解析</h3><h4 id=\"第一、Android中的IPC为何要采用Binder机制\"><a href=\"#第一、Android中的IPC为何要采用Binder机制\" class=\"headerlink\" title=\"第一、Android中的IPC为何要采用Binder机制\"></a>第一、Android中的IPC为何要采用Binder机制</h4><p>Binder是Android系统进程间通信(IPC)方式之一。Linux已经拥有的进程间通信IPC手段包括(Internet Process Connection)：管道(Pipe)、信号(Signal)和跟踪(Trace)、插口(Socket)、报文队列(Message)、共享内存(Share Memory)和信号量(Semaphore)。</p>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID,PID身份，既支持实名Binder也支持匿名Binder，安全性高。对Binder而言，Binder可以看成Server提供的实现某个特定服务的访问接入点， Client通过这个‘地址’向Server发送请求来使用该服务；对Client而言，Binder可以看成是通向Server的管道入口，要想和某个Server通信首先必须建立这个管道并获得管道入口。</p>\n<h4 id=\"第二、Android中的Binder实现原理\"><a href=\"#第二、Android中的Binder实现原理\" class=\"headerlink\" title=\"第二、Android中的Binder实现原理\"></a>第二、Android中的Binder实现原理</h4><p>其实Android中的Binder通信都是通过虚拟驱动设备程序/dev/binder来实现的，我们知道一些硬件都会对应一个驱动程序，而binder驱动程序没有对应的硬件，所以叫做<strong>虚拟驱动设备程序</strong>，其实他就是一个字符驱动设备，或者叫做miscdevice混杂设备驱动。</p>\n<p>其实混杂驱动设备是字符设备的一种，它们共享一个主设备号(10)，但次设备号不同，所有的混杂设备形成一个链表，对设备访问时内核根据次设备号查找到相应的miscdevice设备。例如:触摸屏，LED，按键，串口。即：为了节约主设备号，将某些设备用链表的形式连接在一起，最后通过查找次设备区分。这里用主设备无法匹配出设备驱动，只能找到链表，再通过次设备号，才能找到设备驱动。而之前所学的，一般字符设备，通过主设备号，就能找到设备驱动了。我们可以通过命令查看/dev/binder驱动的主设备号：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/device-number.png\" alt=\"\"></p>\n<h4 id=\"第三、Android中Binder通信机制\"><a href=\"#第三、Android中Binder通信机制\" class=\"headerlink\" title=\"第三、Android中Binder通信机制\"></a>第三、Android中Binder通信机制</h4><p>先来看一张图，我们可以大体的了解到了客户端和服务端通过Binder驱动进行通信</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-drive-principle.png\" alt=\"\"></p>\n<p>首先不管是客户端进程还是服务端进程都是在用户空间的，而binder驱动是在内核空间的，通信的数据是有规定格式也叫作IPC数据，既然是一种通信机制，肯定是需要协议，数据格式等基础结构信息的：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/IPC-data-format.png\" alt=\"\"></p>\n<p>上面在分析了ServiceManager的启动的时候说到了，第一步是打开驱动程序，具体打开函数在binder.c中：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-open-drive.png\" alt=\"\"></p>\n<p>在使用一个驱动之前，肯定要先打开驱动，然后把驱动程序映射到内存中，接着借助IPCTreadState.cpp和binder驱动进行通信了：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/transact-binder.png\" alt=\"\"></p>\n<p>所以看到这里IPCThreadState也是需要进入后台进行监听的，处理来自客户端和服务端的数据传输消息</p>\n<p>最后再来看一下通信时序图。<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/communication-timing.png\" alt=\"\"></p>\n<p>到这里我们就介绍完了Binder机制了，关于Binder机制最好不要看太深，因为越深你觉得越复杂越难理解，其实你只要了解到他是一个通信工具，通信采用的是驱动操作，通过传输IPC数据来进行通信即可。其他的关于他的详细数据格式和通信协议，感兴趣的同学可以了解一下，但是太过复杂而且在实际中也没多大用途，所以这里就不介绍了。</p>\n<h3 id=\"技术点概要\"><a href=\"#技术点概要\" class=\"headerlink\" title=\"技术点概要\"></a>技术点概要</h3><h4 id=\"理解远程服务通信机制\"><a href=\"#理解远程服务通信机制\" class=\"headerlink\" title=\"理解远程服务通信机制\"></a>理解远程服务通信机制</h4><p>通过案例先了解到本地端和服务端跨进程通信，主要就是借助Binder进行功能调用，而在这里主要有两个核心类，一个是Stub类，这个类是继承了Binder类具备了将远程传递的Binder对象转化成本地实际对象asInterface方法即可，同时实现了IXXX接口，需要实现AIDL中的功能方法，还有一个类就是Proxy类，实现了IXXX接口，同时内部保留着远端传递的Binder对象，然后通过这个对象调用远端方法。这里Stub类就是服务端的中间者，而Proxy就是本地端的中间者。</p>\n<h4 id=\"系统服务调用流程\"><a href=\"#系统服务调用流程\" class=\"headerlink\" title=\"系统服务调用流程\"></a>系统服务调用流程</h4><p>通过分析了跨进程通信机制原理之后，再去看看Android系统中在使用一些服务的时候，通过getSystemService方法获取服务对象，其实这内部就是通过跨进程获取到了远端服务的Binder对象，然后转化成系统服务对象给应用调用，而这些系统服务的Binder对象在系统启动的时候服务会自动注册到ServiceManager中。</p>\n<h4 id=\"服务大管家ServiceManager-1\"><a href=\"#服务大管家ServiceManager-1\" class=\"headerlink\" title=\"服务大管家ServiceManager\"></a>服务大管家ServiceManager</h4><p>在整个远程服务调用过程中两个重要对象，一个是Binder对象，一个就是ServiceManager类，这个类是管理系统服务的类，他可以注册服务，查询服务，系统服务在系统启动的时候会通过addService进行服务注册，然后应用就可以通过getService进行服务查询，而在这个过程中，底层会维护一个这些服务的binder链表结构，同时每个服务的binder对象都一个句柄handle，通过这个句柄来表示通信标识，这样通信才不会紊乱。</p>\n<h4 id=\"底层通信核心Binder\"><a href=\"#底层通信核心Binder\" class=\"headerlink\" title=\"底层通信核心Binder\"></a>底层通信核心Binder</h4><p>最后分析了底层真正实现跨进程通信的机制Binder，其实是通过虚拟驱动程序/dev/binder进行通信的。一个通信机制肯定有通信协议，传输的数据结构，但是这里并没有介绍这些知识，原因是我们后面的需求并不会用到这些，其次是这些知识点太详细介绍也不好，因为会越看越乱。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文介绍的东东有点多，但是如果掌握了Android中的Binder机制和远程服务调用机制对后面拦截系统api做了铺垫，说到结束了才告诉大家为什么要介绍这个知识点，是因为最近在研究如何拦截系统启动Activity的事，那么就必须了解Activity的启动流程，但是在这个过程中有一个对象就是ActivityManagerService，而他就和Binder以及远程服务调用机制紧密联系了，如果不了解Binder机制，后面工作是没办法进行的，好了，说到最后再来一张神图算是总结了本文内容：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-summary.png\" alt=\"\"></p>\n<p>这张图非常好的表达了Android中应用使用系统服务的一个流程，也是最好的最全的解释了。看懂这张图之后，那么对Android中的binder机制和远程服务调用机制就可以掌握了，可以进行后续的拦截操作了。</p>\n<p>参考文献：<br><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"external\">Android系统篇之—-Binder机制和远程服务调用机制分析</a></p>\n<p><a href=\"http://blog.csdn.net/L173864930/article/details/38468433\" target=\"_blank\" rel=\"external\">进击的Android注入术《五》</a></p>\n<p><a href=\"http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html\" target=\"_blank\" rel=\"external\">Android深入浅出之Binder机制</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/10/android-binder-principle2/\">http://agehua.github.io/2017/07/10/android-binder-principle2/</a></p>\n","readingTime":{"text":"4 min read","minutes":3.28,"time":196799.99999999997,"words":656},"excerpt":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p><a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">上篇文章</a>分析到了Binder机制，分别介绍了自定义AIDL服务和调用系统的远程服务和他们之间的区别。<br>本文承接上篇文章，继续介绍ServiceManager和系统服务的注册流程，最后对Binder机制进行分析。</p>\n<blockquote>\n<p>关于系统服务的注册流程，大都转载自<a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\">这篇文章</a></p>\n</blockquote>\n<h3 id=\"服务大管家ServiceManager\"><a href=\"#服务大管家ServiceManager\" class=\"headerlink\" title=\"服务大管家ServiceManager\"></a>服务大管家ServiceManager</h3><blockquote>\n<p>ServiceManager.java的源码可以在谷歌源码中看到，<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/ServiceManager.java\">点击这里</a></p>\n</blockquote>\n<p><a href=\"http://agehua.github.io/2017/07/08/android-binder-principle/\">上篇文章</a>末尾提到，系统服务的IBinder对象都是由ServiceManager统一管理的。为什么这么说呢，先看下ServiceManager.getService方法:<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Returns a reference to a service with the given name.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name the name of the service to get</div><div class=\"line\"> * <span class=\"doctag\">@return</span> a reference to the service, or &lt;code&gt;null&lt;/code&gt; if the service doesn't exist</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IBinder <span class=\"title\">getService</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       IBinder service = sCache.get(name);</div><div class=\"line\">       <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> service;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> getIServiceManager().getService(name);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">       Log.e(TAG, <span class=\"string\">\"error in getService\"</span>, e);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sCache是一个本地静态Map对象，作为缓存池：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, IBinder&gt; sCache = <span class=\"keyword\">new</span> HashMap&lt;String, IBinder&gt;();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ServiceManager本身会维护一个IBinder缓存池，也是为了效率高考虑，对于一个应用频繁的使用一些服务的话效率就会高很多。</p>\n</blockquote>\n<p>然后最核心的获取服务的方法是getIServiceManager方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IServiceManager <span class=\"title\">getIServiceManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sServiceManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sServiceManager;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Find the service manager</span></div><div class=\"line\">    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</div><div class=\"line\">    <span class=\"keyword\">return</span> sServiceManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在上面的代码中，调用了ServiceManagerNative.asInterface()方法，是不是说明ServiceManager也通过远端服务来取得对应的服务呢？</p>\n</blockquote>\n<p>具体在看一下ServiceManagerNative.java方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IServiceManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Cast a Binder object into a service manager interface, generating</div><div class=\"line\">     * a proxy if needed.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IServiceManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IServiceManager in =</div><div class=\"line\">            (IServiceManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServiceManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>看到上面的代码，基本可以确认，在获取ServiceManager对象也是通过了远程调用。只是名字改成了ServiceManagerNative，本应该叫ServiceManagerService的。</p>\n</blockquote>\n<p>看到这里的ServiceManager也是通过远端服务获取到他的IBinder对象，然后在转化成本地对象进行使用的。那么刚刚看到系统的服务都是通过ServiceManager管理获取的，而现在ServiceManager本身是怎么获取到的IBinder对象的呢？这个就要从系统启动的时机看了，众所周知系统启动的时候是根据init.rc文件进行操作的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">service servicemanager /system/bin/servicemanager</div><div class=\"line\">    <span class=\"keyword\">class</span> core</div><div class=\"line\">    user system</div><div class=\"line\">    group system</div><div class=\"line\">    critical</div><div class=\"line\">    onrestart restart healthd</div><div class=\"line\">    onrestart restart zygote</div><div class=\"line\">    onrestart restart media</div><div class=\"line\">    onrestart restart surfaceflinger</div><div class=\"line\">    onrestart restart drm</div></pre></td></tr></table></figure>\n<p>这里会启动一个servicemanager服务，那么就要去<strong>service_manager.c</strong>程序中的入口程序看了：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-init.png\" alt=\"service_manager服务启动流程\"></p>\n<p>这个入口其实包含了Binder机制的重要信息，而主要就是三件事：</p>\n<ul>\n<li>1、打开底层的Binder驱动程序，这个后面介绍Binder机制在介绍</li>\n<li>2、通过向binder程序发送命令：<strong>BINDER_SET_CONTEXT_MGR</strong>，告诉binder程序，我要成为大管家</li>\n<li>3、进入循环监听上层应用的服务请求处理，所以这里可以看到其实ServiceManager是一个守护进程在后台默默监听</li>\n</ul>\n<p>在第二步中成为大管家的代码深入看一看：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-service-manager.png\" alt=\"\"></p>\n<p>其实这里的逻辑也是比较简单的，首先创建一个属于servicemanager的binder节点，然后在创建一个binder链表，而这个链表的作用就是存放上层中需要系统服务的所有binder对象的节点，这样ServiceManager就可以实现了服务的增加和查询操作了。</p>\n<p>再来看看ServiceManager的添加服务操作：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-add-service.png\" alt=\"\"></p>\n<p>添加服务比较复杂，首先查看这个服务有没有注册权限限制，不是所有的服务都能注册的，然后在查看这个服务是不是已经被注册过了，最后在通知binder驱动程序注册一个服务即可。</p>\n<p>然后在来看看ServiceManager的查找服务功能：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/servicemanager-find-service.png\" alt=\"\"></p>\n<p>查找服务就比较简单了，直接通过服务的描述符名称遍历binder链表节点即可。</p>\n<ul>\n<li>1、Service Manager能集中管理系统内的所有服务，它能被施加权限控制，并不是任何进程都能注册服务的。</li>\n<li>2、Service Manager支持通过字符串名称来查找对应的Service。</li>\n<li>3、由于各种原因的影响，Server进程可能生死无常。如果有了Service Manager做统一的管理，那么Client只要向Service Manager做查询，就能得到Server的最新信息。</li>\n</ul>\n<h3 id=\"系统服务注册流程分析\"><a href=\"#系统服务注册流程分析\" class=\"headerlink\" title=\"系统服务注册流程分析\"></a>系统服务注册流程分析</h3><p>这部分内容也可以参考博客：<a href=\"http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html\">Android深入浅出之Binder机制</a></p>\n<p>下面来看一下一些系统服务是如何进程注册的，这里用MediaService来进行查看吧。</p>\n<p>系统中的MediaService服务的启动也是在init.rc中的<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">service media /system/bin/mediaserver</div><div class=\"line\">  <span class=\"keyword\">class</span> main</div><div class=\"line\">  user media</div><div class=\"line\">  group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm</div><div class=\"line\">  ioprio rt <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>查看Main_mediaserver.cpp源码的main函数：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获得一个ProcessState实例</span></div><div class=\"line\">  sp&lt;ProcessState&gt; proc(ProcessState::self());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//得到一个ServiceManager对象</span></div><div class=\"line\">  sp&lt;IServiceManager&gt; sm = defaultServiceManager();</div><div class=\"line\">  MediaPlayerService::instantiate();<span class=\"comment\">//初始化MediaPlayerService服务</span></div><div class=\"line\">  ProcessState::self()-&gt;startThreadPool();</div><div class=\"line\">  IPCThreadState::self()-&gt;joinThreadPool();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>sp是google搞出来的为了方便C/C++程序员管理指针的分配和释放的一套方法，就把它当做一个普通的指针看待，sp&lt;XXX&gt;就看成是XXX*就可以了</p>\n</blockquote>\n<p>这里用MediaPlayerService来看看注册操作：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MediaPlayerService::instantiate() &#123;</div><div class=\"line\">  defaultServiceManager()-&gt;addService(</div><div class=\"line\">    String16(<span class=\"string\">\"media.player\"</span>), <span class=\"keyword\">new</span> MediaPlayerService());</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看到熟悉的代码了把，这里通过ServiceManager来进行服务注册了，那么这里是如何获取到ServiceManager的？<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sp&lt;IServiceManager&gt; defaultServiceManager() &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (gDefaultServiceManager != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> gDefaultServiceManager;</div><div class=\"line\"></div><div class=\"line\">  &#123;</div><div class=\"line\">    AutoMutex _l(gDefaultServiceManagerLock); <span class=\"comment\">//---&gt;锁保护</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (gDefaultServiceManager == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      gDefaultServiceManager = interface_cast&lt;IServiceManager&gt; (</div><div class=\"line\">        ProcessState::self()-&gt;getContextObject(<span class=\"literal\">NULL</span>));</div><div class=\"line\">      <span class=\"keyword\">if</span> (gDefaultServiceManager == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> gDefaultServiceManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看看ProcessState.cpp的源码：<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><div class=\"line\">sp&lt;IBinder&gt; ProcessState::getContextObject(<span class=\"keyword\">const</span> sp&lt;IBinder&gt;&amp; caller) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getStrongProxyForHandle(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看看getStrongProxyForHandle方法实现：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/getStrongProxyForHandle.png\" alt=\"\"></p>\n<p>这里看到了，会使用IPCThreadState的transact方法和底层的Binder进行通信的，然后使用一个句柄handle构造一个BpBinder对象，而BpBinder对象其实就是native层实现的Binder对象，以后只要看到Bp开头的就是代理对象对应Java层的Proxy对象，Bn开头的就是native对象对应Java层的Stub对象。</p>\n<p>在上面分析servicemanager的时候知道会维护一个binder节点链表，那里其实就有一个每个binder对应句柄handle，而后续进行通信的话都是通过这个句柄来标识是哪个服务的binder对象了，这样也就在通信的时候不会发生紊乱了，而servicemanager的句柄handle就是0。还有一个知识点就是可以看到IPC通信的时候传输数据使用的就是Parcel类，这个类就是为了跨进程通信产生的，他有一个方法readStrongBinder，就是可以从Parcel的数据中获取到Binder对象，这个也是在跨进程中传递Binder对象的核心地方。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IBinder <span class=\"title\">readStrongBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nativeReadStronBinder(mNativePtr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>好了，上面就通过系统的mediaserver服务来讲解了系统服务的注册流程：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/media-server-process.png\" alt=\"\"></p>\n<p>到这里就分析完了Android中的远程服务调用机制逻辑以及ServiceManager这个服务大管家的作用:</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/service-manager-activity.png\" alt=\"\"></p>\n<ul>\n<li>1、首先跨进程通信的话，肯定会有两个对象：一个是本地端的中间者Proxy对象，一个是远程端的中间者Stub对象</li>\n<li>2、Proxy对象通过静态代理模式维持一个远端传递过来的Binder对象，而Stub对象可以把远端传递过来的Binder对象转化成一个实际服务对象给应用使用</li>\n<li>3、Android中在使用系统服务的时候通过getSystemService方法获取到的其实都是Stub把远端的Binder转化的对象，因为系统服务都是在system_server进程中，所以肯定是跨进程获取对象的，那么这个Binder对象其实就是上面的Proxy对象</li>\n<li>4、系统的服务都是在一个指定的系统进程中system_server</li>\n<li>5、服务大管家ServiceManager在系统启动的时候也是先获取自生的Binder对象，然后转化成实际操作对象，然后才可以操作系统服务的注册和查询功能</li>\n</ul>\n<p>下面是系统一些服务的注册流程：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/system-service-register-process.png\" alt=\"\"></p>\n<p>上面已经介绍了远程服务调用机制以及ServiceManager的实现原理，下面就要看看另外一个重点，也是上面提到的一个重要对象Binder，准确来说这个是Binder机制，在Android中Binder机制最复杂的一个架构系统了，它的设计很复杂，所以有很多同学在了解Binder机制的时候，总是看着看着就晕了，今天我们就直说重点，而且说得要相对明了简单。</p>\n<h3 id=\"Binder机制解析\"><a href=\"#Binder机制解析\" class=\"headerlink\" title=\"Binder机制解析\"></a>Binder机制解析</h3><h4 id=\"第一、Android中的IPC为何要采用Binder机制\"><a href=\"#第一、Android中的IPC为何要采用Binder机制\" class=\"headerlink\" title=\"第一、Android中的IPC为何要采用Binder机制\"></a>第一、Android中的IPC为何要采用Binder机制</h4><p>Binder是Android系统进程间通信(IPC)方式之一。Linux已经拥有的进程间通信IPC手段包括(Internet Process Connection)：管道(Pipe)、信号(Signal)和跟踪(Trace)、插口(Socket)、报文队列(Message)、共享内存(Share Memory)和信号量(Semaphore)。</p>\n<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID,PID身份，既支持实名Binder也支持匿名Binder，安全性高。对Binder而言，Binder可以看成Server提供的实现某个特定服务的访问接入点， Client通过这个‘地址’向Server发送请求来使用该服务；对Client而言，Binder可以看成是通向Server的管道入口，要想和某个Server通信首先必须建立这个管道并获得管道入口。</p>\n<h4 id=\"第二、Android中的Binder实现原理\"><a href=\"#第二、Android中的Binder实现原理\" class=\"headerlink\" title=\"第二、Android中的Binder实现原理\"></a>第二、Android中的Binder实现原理</h4><p>其实Android中的Binder通信都是通过虚拟驱动设备程序/dev/binder来实现的，我们知道一些硬件都会对应一个驱动程序，而binder驱动程序没有对应的硬件，所以叫做<strong>虚拟驱动设备程序</strong>，其实他就是一个字符驱动设备，或者叫做miscdevice混杂设备驱动。</p>\n<p>其实混杂驱动设备是字符设备的一种，它们共享一个主设备号(10)，但次设备号不同，所有的混杂设备形成一个链表，对设备访问时内核根据次设备号查找到相应的miscdevice设备。例如:触摸屏，LED，按键，串口。即：为了节约主设备号，将某些设备用链表的形式连接在一起，最后通过查找次设备区分。这里用主设备无法匹配出设备驱动，只能找到链表，再通过次设备号，才能找到设备驱动。而之前所学的，一般字符设备，通过主设备号，就能找到设备驱动了。我们可以通过命令查看/dev/binder驱动的主设备号：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/device-number.png\" alt=\"\"></p>\n<h4 id=\"第三、Android中Binder通信机制\"><a href=\"#第三、Android中Binder通信机制\" class=\"headerlink\" title=\"第三、Android中Binder通信机制\"></a>第三、Android中Binder通信机制</h4><p>先来看一张图，我们可以大体的了解到了客户端和服务端通过Binder驱动进行通信</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-drive-principle.png\" alt=\"\"></p>\n<p>首先不管是客户端进程还是服务端进程都是在用户空间的，而binder驱动是在内核空间的，通信的数据是有规定格式也叫作IPC数据，既然是一种通信机制，肯定是需要协议，数据格式等基础结构信息的：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/IPC-data-format.png\" alt=\"\"></p>\n<p>上面在分析了ServiceManager的启动的时候说到了，第一步是打开驱动程序，具体打开函数在binder.c中：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-open-drive.png\" alt=\"\"></p>\n<p>在使用一个驱动之前，肯定要先打开驱动，然后把驱动程序映射到内存中，接着借助IPCTreadState.cpp和binder驱动进行通信了：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/transact-binder.png\" alt=\"\"></p>\n<p>所以看到这里IPCThreadState也是需要进入后台进行监听的，处理来自客户端和服务端的数据传输消息</p>\n<p>最后再来看一下通信时序图。<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/communication-timing.png\" alt=\"\"></p>\n<p>到这里我们就介绍完了Binder机制了，关于Binder机制最好不要看太深，因为越深你觉得越复杂越难理解，其实你只要了解到他是一个通信工具，通信采用的是驱动操作，通过传输IPC数据来进行通信即可。其他的关于他的详细数据格式和通信协议，感兴趣的同学可以了解一下，但是太过复杂而且在实际中也没多大用途，所以这里就不介绍了。</p>\n<h3 id=\"技术点概要\"><a href=\"#技术点概要\" class=\"headerlink\" title=\"技术点概要\"></a>技术点概要</h3><h4 id=\"理解远程服务通信机制\"><a href=\"#理解远程服务通信机制\" class=\"headerlink\" title=\"理解远程服务通信机制\"></a>理解远程服务通信机制</h4><p>通过案例先了解到本地端和服务端跨进程通信，主要就是借助Binder进行功能调用，而在这里主要有两个核心类，一个是Stub类，这个类是继承了Binder类具备了将远程传递的Binder对象转化成本地实际对象asInterface方法即可，同时实现了IXXX接口，需要实现AIDL中的功能方法，还有一个类就是Proxy类，实现了IXXX接口，同时内部保留着远端传递的Binder对象，然后通过这个对象调用远端方法。这里Stub类就是服务端的中间者，而Proxy就是本地端的中间者。</p>\n<h4 id=\"系统服务调用流程\"><a href=\"#系统服务调用流程\" class=\"headerlink\" title=\"系统服务调用流程\"></a>系统服务调用流程</h4><p>通过分析了跨进程通信机制原理之后，再去看看Android系统中在使用一些服务的时候，通过getSystemService方法获取服务对象，其实这内部就是通过跨进程获取到了远端服务的Binder对象，然后转化成系统服务对象给应用调用，而这些系统服务的Binder对象在系统启动的时候服务会自动注册到ServiceManager中。</p>\n<h4 id=\"服务大管家ServiceManager-1\"><a href=\"#服务大管家ServiceManager-1\" class=\"headerlink\" title=\"服务大管家ServiceManager\"></a>服务大管家ServiceManager</h4><p>在整个远程服务调用过程中两个重要对象，一个是Binder对象，一个就是ServiceManager类，这个类是管理系统服务的类，他可以注册服务，查询服务，系统服务在系统启动的时候会通过addService进行服务注册，然后应用就可以通过getService进行服务查询，而在这个过程中，底层会维护一个这些服务的binder链表结构，同时每个服务的binder对象都一个句柄handle，通过这个句柄来表示通信标识，这样通信才不会紊乱。</p>\n<h4 id=\"底层通信核心Binder\"><a href=\"#底层通信核心Binder\" class=\"headerlink\" title=\"底层通信核心Binder\"></a>底层通信核心Binder</h4><p>最后分析了底层真正实现跨进程通信的机制Binder，其实是通过虚拟驱动程序/dev/binder进行通信的。一个通信机制肯定有通信协议，传输的数据结构，但是这里并没有介绍这些知识，原因是我们后面的需求并不会用到这些，其次是这些知识点太详细介绍也不好，因为会越看越乱。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文介绍的东东有点多，但是如果掌握了Android中的Binder机制和远程服务调用机制对后面拦截系统api做了铺垫，说到结束了才告诉大家为什么要介绍这个知识点，是因为最近在研究如何拦截系统启动Activity的事，那么就必须了解Activity的启动流程，但是在这个过程中有一个对象就是ActivityManagerService，而他就和Binder以及远程服务调用机制紧密联系了，如果不了解Binder机制，后面工作是没办法进行的，好了，说到最后再来一张神图算是总结了本文内容：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/binder-summary.png\" alt=\"\"></p>\n<p>这张图非常好的表达了Android中应用使用系统服务的一个流程，也是最好的最全的解释了。看懂这张图之后，那么对Android中的binder机制和远程服务调用机制就可以掌握了，可以进行后续的拦截操作了。</p>\n<p>参考文献：<br><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-binder%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/\">Android系统篇之—-Binder机制和远程服务调用机制分析</a></p>\n<p><a href=\"http://blog.csdn.net/L173864930/article/details/38468433\">进击的Android注入术《五》</a></p>\n<p><a href=\"http://www.cnblogs.com/innost/archive/2011/01/09/1931456.html\">Android深入浅出之Binder机制</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/07/10/android-binder-principle2/\">http://agehua.github.io/2017/07/10/android-binder-principle2/</a></p>"},{"layout":"post","title":"Activity启动流程分析","keywords":"AOSP, AMS, Binder","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg","toc":true,"_content":"\n## Activity启动流程分析\n\n本文主要介绍Activity的启动过程和过程中主要涉及的类。如果你跟随上一篇文章，成功编译了Android源码，可以动手跟本篇文章一步一步调试分析整个启动过程。没有编译源码，也可以看看[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/)，这里也有源码。\n\n### 主要对象功能介绍\n\n#### zygote进程和SystemServer进程\nandroid是基于Linux系统的，而在linux中，所有的进程都是由init进程直接或者是间接fork出来的，**zygote** 进程也不例外。\n\n> 每一个App其实都是\n- 一个单独的dalvik虚拟机\n- 一个单独的进程\n\nAndroid系统开启新进程的方式，是通过fork第一个**zygote** 进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程。\n<!--more-->\n\n**SystemServer** 也是一个进程，而且是由zygote进程fork出来的。\n为什么说SystemServer非常重要呢？因为系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService等等。\n\n> 我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？\nApp与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。\n\n\n#### 与Activity启动有关的类\n我们下面的文章将围绕着这几个类进行介绍。可能你第一次看的时候，印象不深，不过没关系，当你跟随者我读完这篇文章的时候，相信那时候你会对这些类更加的熟悉和深刻。\n\n- **ActivityManagerServices**，简称AMS，服务端对象，负责系统中所有Activity的生命周期，查看源码，[点击这里](https://android.googlesource.com/platform/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java)\n\n- **ActivityThread**，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作\n\n- **ApplicationThread**，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n\n- **ApplicationThreadProxy**，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n\n- **Instrumentation**，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n\n- **ActivityStack**，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n\n- **ActivityRecord**，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息，比如在哪进程中ProcessState，当前的状态CurentState等。其实就是服务器端的Activity对象的映像。\n\n- **TaskRecord**，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n- **ProcessRecord**，这个类记录的是一个进程中的信息，因为一个应用中可能会包含多个进程。\n\n#### App程序的入口\n我们一般在启动Activity的时候都是使用系统提供的方法Activity.startActivity()操作的，本文就在此方法上分析整个过程:\n\n> 这里我的app进程是：foo.bar.multi，后面深入源码后会在系统进程system_process和app进程之间切换。\n\n~~~ Java\n@Override\npublic void startActivity(Intent intent) {\n    this.startActivity(intent, null);\n}\n\n@Override\npublic void startActivity(Intent intent, @Nullable Bundle options) {\n    if (options != null) { //options这里为null\n        startActivityForResult(intent, -1, options);\n    } else {\n        // Note we want to go through this call for compatibility with\n        // applications that may have overridden the method.\n        startActivityForResult(intent, -1);\n    }\n}\n\npublic void startActivityForResult(@RequiresPermission Intent intent, int requestCode,\n        @Nullable Bundle options) {\n    if (mParent == null) { //这里mParent不为空\n        options = transferSpringboardActivityOptions(options);\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, this,\n                intent, requestCode, options);\n        if (ar != null) {\n            mMainThread.sendActivityResult(\n                mToken, mEmbeddedID, requestCode, ar.getResultCode(),\n                ar.getResultData());\n        }\n\n        // 代码省略....\n    } else {\n        // 代码省略....\n    }\n}\n~~~\n上面代码可以看到，这里用到了mMainThread变量去执行的操作，再看看这个变量，它是ActivityThread的一个实例。ActivityThread是一个应用非常关键的一个类，首先它是一个应用的主线程，其次就是他才是一个程序的入口（main方法）的地方：\n\n~~~ Java\npublic static void main(String[] args) {\n    //...代码省略\n}\n~~~\n没有Android源码的，可以看这里：[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java)。后面介绍这个入口main方法什么时候执行。\n\n上面的mInstrumentation对象，是在Activity的attach()方法中被赋值的\n\n#### Instrumentation是什么？和ActivityThread是什么关系？\n\n接着说上面的mInstrumentation.execStartActivity()方法，有三个同名的重载方法：\n~~~ Java\npublic ActivityResult execStartActivity(\n          Context who, IBinder contextThread, IBinder token, Activity target,\n          Intent intent, int requestCode, Bundle options)\n\n\npublic ActivityResult execStartActivity(\n         Context who, IBinder contextThread, IBinder token, String target,\n         Intent intent, int requestCode, Bundle options)\n\npublic ActivityResult execStartActivity(\n         Context who, IBinder contextThread, IBinder token, Activity target,\n         Intent intent, int requestCode, Bundle options, UserHandle user)\n~~~\n考验眼力的时候到了，仔细看下，上面的mInstrumentation.execStartActivity()调用的其实是第一个重载方法：\n~~~ Java\npublic ActivityResult execStartActivity(Context who, IBinder contextThread, IBinder token, Activity target,\n        Intent intent, int requestCode, Bundle options) {\n    IApplicationThread whoThread = (IApplicationThread) contextThread;\n        //...ignore some code...\n  try {\n        intent.migrateExtraStreamToClipData();\n        intent.prepareToLeaveProcess();\n        int result = ActivityManagerNative.getDefault()\n            .startActivity(whoThread, who.getBasePackageName(), intent,\n                    intent.resolveTypeIfNeeded(who.getContentResolver()),\n                    token, target != null ? target.mEmbeddedID : null,\n                    requestCode, 0, null, options);\n        checkStartActivityResult(result, intent);\n    } catch (RemoteException e) {\n    }\n    return null;\n}\n~~~\n可以看到execStartActivity()方法，调用了ActivityManagerNative的startActivity()方法，看到这个ActivityManagerNative类有没有感觉和之前一篇文章，[Android Binder机制分析（二）](https://agehua.github.io/2017/07/10/android-binder-principle2/)里的ServiceManagerNative有点类似，这里涉及到的是系统服务间的Binder机制，不了解的同学可以看看这篇文章。\n\n稍后分析ActivityManagerNative，这里简单介绍下Instrumentation类。\n\nInstrumentation意为“仪器”。每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。\n\nInstrumentation这个类里面的方法大多数和Application和Activity有关，可以说是对Application和Activity初始化和生命周期的工具类。\n\n举个例子，callActivityOnCreate()\n~~~ Java\npublic void callActivityOnCreate(Activity activity, Bundle icicle) {\n    prePerformCreate(activity);\n    activity.performCreate(icicle);\n    postPerformCreate(activity);\n}\n~~~\n对activity.performCreate(icicle);这一行代码熟悉吗？这一行里面就调用了传说中的Activity的入口函数onCreate()，不信？接着往下看Activity.performCreate()\n~~~ Java\nfinal void performCreate(Bundle icicle) {\n    onCreate(icicle);\n    mActivityTransitionState.readState(icicle);\n    performCreateCommon();\n}\n~~~\n确实，onCreate在这里调用了。但是有一件事情必须说清楚，那就是这个Instrumentation类这么重要，为啥我在开发的过程中，没有发现他的踪迹呢？\n\n是的，Instrumentation这个类很重要，对Activity生命周期方法的调用根本就离不开他，但他只负责Activity的内部管理。\n外部想调整Activity的状态，必须通过ActivityThread。\n\nActivityThread你都没听说过？那你肯定听说过传说中的UI线程吧？是的，这就是UI线程。我们前面说过，App和AMS是通过Binder传递信息的，那么ActivityThread就是专门与AMS的外交工作的。Instrumentation相当于老板娘，处理家务，很少露面。ActivityThread是老板，处理对外事务。\n\n所以说，AMS是董事会，负责指挥和调度的，ActivityThread是老板，虽然说家里的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是老板娘，负责家里的大事小事，但是一般不抛头露面，听一家之主ActivityThread的安排。\n\n#### 简介AMS和ActivityThread之间的Binder通信\n前面的两篇文章：[Android Binder机制分析（一）](https://agehua.github.io/2017/07/08/android-binder-principle/)和[Android Binder机制分析（二）](https://agehua.github.io/2017/07/10/android-binder-principle2/)。已经介绍了Android都是通过Binder机制调用远程的系统服务。这里在介绍下ActivityThread（App进程）是如何调用AMS服务的。\n\n前面我们说到，在调用Activity.startActivity()的时候，实际上调用的是：\n**mInstrumentation.execStartActivity()**\n这个方法里面调用的是：\n~~~ Java\nActivityManagerNative.getDefault().startActivity()\n~~~\n> 用鼠标定位一下，上面的startActivity()方法，会发现这个方法是IActivityManager接口里的方法。注意IActivityManager继承了IInterface接口，而这个接口就是AIDL接口类必须实现的接口。\n\n再看，ActivityManagerNative.getDefault()返回的就是ActivityManagerService的远程接口的本地代理，即ActivityManagerProxy。\n~~~ Java\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n\n //从类声明上，我们可以看到ActivityManagerNative是Binder的一个子类，而且实现了IActivityManager接口\n static public IActivityManager getDefault() {\n        return gDefault.get();\n }\n\n//最终返回的还是一个ActivityManagerProxy对象\nstatic public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        //这里面的Binder类型的obj参数会作为ActivityManagerProxy的成员变量保存为mRemote成员变量，负责进行IPC通信\n        return new ActivityManagerProxy(obj);\n    }\n}\n~~~\n\n其实ActivityManagerNative类就是远端服务的中间者Stub类，其实名字不叫Stub罢了，以后其实只要看到是继承了Binder类和实现了AIDL接口类型的就是Stub类，不要关心类名了。看到他的asInterface方法的时候也是和之前的其他系统服务都是类似的。\n~~~ Java\n//通过单例模式获取一个IActivityManager对象，这个对象通过asInterface(b)获得\nprivate static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n       protected IActivityManager create() {\n           IBinder b = ServiceManager.getService(\"activity\");\n           if (false) {\n               Log.v(\"ActivityManager\", \"default service binder = \" + b);\n           }\n           IActivityManager am = asInterface(b);\n           if (false) {\n               Log.v(\"ActivityManager\", \"default service = \" + am);\n           }\n           return am;\n       }\n   };\n}\n~~~\n在这里可以看到了，其实gDefalut借助Singleton实现的单例模式，而在内部可以看到先从ServiceManager中获取到AMS远端服务的Binder对象，然后使用asInterface方法转化成本地化对象（其实就是ActivityManagerProxy对象，这个对象是ActivityManagerNative的内部类）。然后我们在看看上面调用了startActivity方法，其实就是调用了ActivityManagerProxy对象的这个方法。\n\n在这里面做的事情就是IPC通信，利用Binder对象，调用transact()，把所有需要的参数封装成Parcel对象，向AMS发送数据进行通信。\n\n> 这个方法中添加一个断点，注意这里startActivity()是ActivityManagerProxy类的方法，这里的进程应该还是App进程：foo.bar.multi\n\n~~~ Java\npublic int startActivity(IApplicationThread caller, String callingPackage, Intent intent,\n        String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle options) throws RemoteException {\n    Parcel data = Parcel.obtain();\n    Parcel reply = Parcel.obtain();\n    data.writeInterfaceToken(IActivityManager.descriptor);\n    data.writeStrongBinder(caller != null ? caller.asBinder() : null);\n    data.writeString(callingPackage);\n    intent.writeToParcel(data, 0);\n    //...省略部分代码\n    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n    reply.readException();\n    int result = reply.readInt();\n    reply.recycle();\n    data.recycle();\n    return result;\n}\n~~~\n      注意，这里先别放开断点\n\n> Binder本质上只是一种底层通信方式，和具体服务没有关系。为了提供具体服务，Server必须提供一套接口函数以便Client通过远程访问使用各种服务。这时通常采用Proxy设计模式：将接口函数定义在一个抽象类中，Server和Client都会以该抽象类为基类实现所有接口函数，所不同的是Server端是真正的功能实现，而Client端是对这些函数远程调用请求的包装。\n\n客户端：ActivityManagerProxy =====>Binder驱动=====> ActivityManagerService：服务器\n\nBinder只能传递数据，并不知道是要调用ActivityManagerServices的哪个方法，所以在数据中会添加方法的唯一标识码，比如前面的startActivity()方法中的标识：START_ACTIVITY_TRANSACTION。\n\n在远端服务调用了transact()方法后，即mRemote.transact()，会转接到远端服务中间者ActivityManagerNative的onTransact方法中，找到对应的标识码：\n>  注意这里的接收者ActivityManagerNative的onTransact方法是在system_process进程中，想要继续debug调试的的话，需要在monitor中选中这个进程，然后再在下面的方法中添加断点。最后放开上面添加的断点。\n\n~~~ Java\n@Override\npublic boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n        throws RemoteException {\n    switch (code) {\n    case START_ACTIVITY_TRANSACTION:\n    {   //最好在case方法里面添加断点，避免受其他系统发送的消息影响\n        data.enforceInterface(IActivityManager.descriptor);\n        IBinder b = data.readStrongBinder();\n        IApplicationThread app = ApplicationThreadNative.asInterface(b);\n        String callingPackage = data.readString();\n        Intent intent = Intent.CREATOR.createFromParcel(data);\n        String resolvedType = data.readString();\n        IBinder resultTo = data.readStrongBinder();\n        String resultWho = data.readString();\n        int requestCode = data.readInt();\n        int startFlags = data.readInt();\n        ProfilerInfo profilerInfo = data.readInt() != 0\n                ? ProfilerInfo.CREATOR.createFromParcel(data) : null;\n        Bundle options = data.readInt() != 0\n                ? Bundle.CREATOR.createFromParcel(data) : null;\n        int result = startActivity(app, callingPackage, intent, resolvedType,\n                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);\n        reply.writeNoException();\n        reply.writeInt(result);\n        return true;\n    }\n    //...省略\n}\n~~~\n这里的startActivity方法，是在IActivityManager接口中定义的，跟ActivityManagerProxy没有关系了，是由远端服务来实现的，这里我们可以猜想应该是叫做ActivityManagerService中，这个类的源代码可以在[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/am/ActivityManagerService.java)里找到：\n\n这个类里有三个重载的startActivity()方法，仔细看，对应的应该是第三个方法：\n~~~ Java\nfinal int startActivity(Intent intent, ActivityStackSupervisor.ActivityContainer container)\n\n@Override\npublic int startActivity(IBinder whoThread, String callingPackage,\n        Intent intent, String resolvedType, Bundle bOptions)\n\n@Override\npublic final int startActivity(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions)\n~~~\n\n这个方法直接调用了startActivityAsUser()方法\n~~~ Java\n@Override\npublic final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {\n    enforceNotIsolatedCaller(\"startActivity\");\n    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),\n            userId, false, ALLOW_FULL_ONLY, \"startActivity\", null);\n    // TODO: Switch to user app stacks here.\n    return mActivityStarter.startActivityMayWait(caller, -1, callingPackage, intent,\n            resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n            profilerInfo, null, null, bOptions, false, userId, null, null);\n}\n~~~\n\n这里的mActivityStarter是在ActivityManagerService创建的时候初始化的。\n~~~ Java\npublic ActivityManagerService(Context systemContext) {\n    //...省略代码\n    mStackSupervisor = new ActivityStackSupervisor(this);\n    mActivityStarter = new ActivityStarter(this, mStackSupervisor);\n    //...省略代码\n}\n~~~\n下面就是ActiviStarter、ActivityStack和ActivityStackSupervisor三个类之间方法调来调去了，这里为了节省篇幅就不再贴代码了，有毅力的同学可以每个方法都打上一个断点，走一遍：\n\nActivityStarter.startActivityMayWait()-> ActivityStarter.startActivityLocked()-> ActivityStarter.startActivityUnchecked()-> ActivityStackSupervisor.resumeFocusedStackTopActivityLocked()\n\n再往后都是ActivityStackSupervisor类的方法，调用：\n\n从resumeFocusedStackTopActivityLocked()-> resumeFocusedStackTopActivityLocked()-> resumeTopActivityUncheckedLocked()\n-> resumeTopActivityInnerLocked()-> startSpecificActivityLocked()-> realStartActivityLocked()\n\n\n#### IApplicationThread接口简介\n\n重点在最后的方法里realStartActivityLocked()调用了，**app.thread.scheduleLaunchActivity()**方法\n~~~ Java\nfinal boolean realStartActivityLocked(ActivityRecord r, ProcessRecord app,\n            boolean andResume, boolean checkConfig) throws RemoteException {\n\n    //...代码省略\n\n    final ActivityStack stack = task.stack;\n    try {\n        //...代码省略\n\n        app.forceProcessStateUpTo(mService.mTopProcessState);\n        app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                new Configuration(task.mOverrideConfig), r.compat, r.launchedFromPackage,\n                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n\n        //...代码省略\n    } catch (RemoteException e) {\n\n    }\n\n    return true;\n}\n~~~\nscheduleLaunchActivity()方法是IApplicationThread接口里面的方法，但是是由那个类实现的呢，这里就需要猜了，哈哈\n\n下面几个类都实现了相同的接口IApplicationThread：\n~~~ Java\nprivate class ApplicationThread extends ApplicationThreadNative {}\n\npublic abstract class ApplicationThreadNative extends Binder implements IApplicationThread{}\n\nclass ApplicationThreadProxy implements IApplicationThread {}\n\npublic interface IApplicationThread extends IInterface {}\n~~~\nIApplicationThread的源码在这里：[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/IApplicationThread.java)\n\n> IApplicationThread是实现了IInterface接口的，说明也是用的Binder远程通讯，这里的当前进程是system_process，\n本地代理类应该是ApplicationThreadProxy类，而这个类是内部类，在ApplicationThreadNative类中\n\n来看ApplicationThreadProxy类的scheduleLaunchActivity()方法：\n~~~ Java\npublic final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n        int procState, Bundle state, PersistableBundle persistentState,\n        List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n        boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) throws RemoteException {\n    Parcel data = Parcel.obtain();\n    data.writeInterfaceToken(IApplicationThread.descriptor);\n\n    //....写入数据\n\n    mRemote.transact(SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION, data, null,\n            IBinder.FLAG_ONEWAY);\n    data.recycle();\n}\n~~~\n记住这个标识，SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION，在ApplicationThreadNative类的onTransact()方法里找：\n\n> 这里注意，调用完mRemote.transact()方法，回调的onTransact()方法已经不再system_process进程中了，而是到了App进程：foo.bar.multi\n\n~~~ Java\n//onTransact()方法里：\ncase SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:\n    {\n        data.enforceInterface(IApplicationThread.descriptor);\n        // 取出数据\n        scheduleLaunchActivity(intent, b, ident, info, curConfig, overrideConfig, compatInfo,\n                referrer, voiceInteractor, procState, state, persistentState, ri, pi,\n                notResumed, isForward, profilerInfo);\n        return true;\n    }\n~~~\n取出各种数据，在调用scheduleLaunchActivity()方法。\n\n> 这里的cheduleLaunchActivity()在哪里实现？感觉应该在ApplicationThreadService类里。但是并没有这个类。其实应该是ApplicationThread类，不叫XXXService了，这个类实现了ApplicationThreadNative接口，同时它是ActivityThread的内部类\n\n到这里总结下IApplicationThread接口的Binder机制：\n\n客户端：ApplicationThread <=====Binder驱动<===== ApplicationThreadProxy：服务器\n对比之前的IActivityManager：\n客户端：ActivityManagerProxy =====>Binder驱动=====> ActivityManagerService：服务器\n有没有发现**Binder只能单向传递**。\n\n这两次的Binder通信如下图所示：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ams_binder_process.png)\n\n再来看ApplicationThread类的scheduleLaunchActivity()方法\n~~~ Java\n// we use token to identify this activity without having to send the\n// activity itself back to the activity manager. (matters more with ipc)\n@Override\npublic final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n        int procState, Bundle state, PersistableBundle persistentState,\n        List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n        boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) {\n\n    updateProcessState(procState, false);\n    ActivityClientRecord r = new ActivityClientRecord();\n\n    r.token = token;\n    r.ident = ident;\n    r.intent = intent;\n    r.referrer = referrer;\n    r.voiceInteractor = voiceInteractor;\n    r.activityInfo = info;\n    r.compatInfo = compatInfo;\n    r.state = state;\n    r.persistentState = persistentState;\n\n    r.pendingResults = pendingResults;\n    r.pendingIntents = pendingNewIntents;\n\n    r.startsNotResumed = notResumed;\n    r.isForward = isForward;\n\n    r.profilerInfo = profilerInfo;\n\n    r.overrideConfig = overrideConfig;\n    updatePendingConfiguration(curConfig);\n\n    sendMessage(H.LAUNCH_ACTIVITY, r);\n}\n~~~\n\n\n在继续看接收消息的地方，在H类里（H类继承了Handler），\n~~~ Java\npublic void handleMessage(Message msg) {\n    if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n    switch (msg.what) {\n        case LAUNCH_ACTIVITY: {\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\n            final ActivityClientRecord r = (ActivityClientRecord) msg.obj;\n\n            r.packageInfo = getPackageInfoNoCheck(\n                  r.activityInfo.applicationInfo, r.compatInfo);\n            handleLaunchActivity(r, null, \"LAUNCH_ACTIVITY\");\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n        } break;\n\n    //....\n~~~\nhandleLaunchActivity()->performLaunchActivity()。\n\nperformLaunchActivity()通过ClassLoader导入相应的Activity类，然后把它启动起来，注意看代码里的注释。\n~~~ Java\n    Activity activity = null;\n    try {\n        //通过ClassLoader将foo.bar.multi.XXXActivity类加载进来：\n        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();\n        activity = mInstrumentation.newActivity(\n                cl, component.getClassName(), r.intent);\n        StrictMode.incrementExpectedActivityCount(activity.getClass());\n        r.intent.setExtrasClassLoader(cl);\n        r.intent.prepareToEnterProcess();\n        if (r.state != null) {\n            r.state.setClassLoader(cl);\n        }\n    } catch (Exception e) {\n        if (!mInstrumentation.onException(activity, e)) {\n            throw new RuntimeException(\n                \"Unable to instantiate activity \" + component\n                + \": \" + e.toString(), e);\n\n\n    try {\n        //创建Application对象，这是根据AndroidManifest.xml配置文件中的Application标签的信息来创建的\n        Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n        //代码主要创建Activity的上下文信息，并通过attach方法将这些上下文信息设置到XXXActivity中去：\n        if (activity != null) {\n          activity.attach(appContext, this, getInstrumentation(), r.token,\n          r.ident, app, r.intent, r.activityInfo, title, r.parent,\n          r.embeddedID, r.lastNonConfigurationInstances, config,\n          r.referrer, r.voiceInteractor, window);\n\n        //调用activity的onCreate函数，上面提到过这个方法：\n        mInstrumentation.callActivityOnCreate(activity, r.state);\n\n~~~\n\n\n无论是通过点击应用程序图标来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都要借助于应用程序框架层的ActivityManagerService服务进程。在Android应用程序框架层中，ActivityManagerService是一个非常重要的接口，它不但负责启动Activity和Service，还负责管理Activity和Service。\n\nAndroid应用程序框架层中的ActivityManagerService启动Activity的过程大致如下图所示：\n\n![图片来自：http://blog.csdn.net/luoshengyang/article/details/6685853](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/activity-start-process.png)\n\n在这个图中，ActivityManagerService和ActivityStack位于同一个进程中，而ApplicationThread和ActivityThread位于另一个进程中。其中，ActivityManagerService是负责管理Activity的生命周期的，ActivityManagerService还借助ActivityStack是来把所有的Activity按照后进先出的顺序放在一个堆栈中；对于每一个应用程序来说，都有一个ActivityThread来表示应用程序的主进程，而每一个ActivityThread都包含有一个ApplicationThread实例，它是一个Binder对象，负责和其它进程进行通信。\n\n下面简要总结一下启动的过程：\n\n- Step 1. 无论是通过Launcher来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都通过Binder进程间通信进入到ActivityManagerService进程中，并且调用ActivityManagerService.startActivity接口；\n- Step 2. ActivityManagerService调用ActivityStack.startActivityMayWait来做准备要启动的Activity的相关信息；\n- Step 3. ActivityStack通知ApplicationThread要进行Activity启动调度了，这里的ApplicationThread代表的是调用ActivityManagerService.startActivity接口的进程，对于通过点击应用程序图标的情景来说，这个进程就是Launcher了，而对于通过在Activity内部调用startActivity的情景来说，这个进程就是这个Activity所在的进程了；\n- Step 4. ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入到ActivityManagerService进程中，看看是否需要创建新的进程来启动Activity；\n- Step 5. 对于通过点击应用程序图标来启动Activity的情景来说，ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程，而对于通过在Activity内部调用startActivity来启动新的Activity来说，这一步是不需要执行的，因为新的Activity就在原来的Activity所在的进程中进行启动；\n- Step 6. ActivityManagerServic调用ApplicationThread.scheduleLaunchActivity接口，通知相应的进程执行启动Activity的操作；\n- Step 7. ApplicationThread把这个启动Activity的操作转发给ActivityThread，ActivityThread通过ClassLoader导入相应的Activity类，然后把它启动起来。\n\n\n### 补充，通过Launcher启动Activity\nAndroid的Launcher本身也是一个应用程序，点击应用图标，调用的方法还是Activity.startActivity()。与之前分析的不同之处是在ActivityStackSupervisor.startSpecificActivityLocked()方法中：\n~~~ Java\nvoid startSpecificActivityLocked(ActivityRecord r,\n        boolean andResume, boolean checkConfig) {\n    // Is this activity's application already running?\n    ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n            r.info.applicationInfo.uid, true);\n\n    r.task.stack.setLaunchTime(r);\n\n    //区别在这里，Launcher启动方式，app为null，应用内启动app不为null\n    if (app != null && app.thread != null) {\n        try {\n            if ((r.info.flags&ActivityInfo.FLAG_MULTIPROCESS) == 0\n                    || !\"android\".equals(r.info.packageName)) {\n                // Don't add this if it is a platform component that is marked\n                // to run in multiple processes, because this is actually\n                // part of the framework so doesn't make sense to track as a\n                // separate apk in the process.\n                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,\n                        mService.mProcessStats);\n            }\n            realStartActivityLocked(r, app, andResume, checkConfig);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception when starting activity \"\n                    + r.intent.getComponent().flattenToShortString(), e);\n        }\n          // If a dead object exception was thrown -- fall through to\n        // restart the application.\n    }\n    //所以要执行ActivityServiceManager的去开启一个新的进程\n    mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n            \"activity\", r.intent.getComponent(), false, false, true);\n}\n~~~\n> 每一个应用程序都有自己的uid，uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。当然，我们可以配置两个应用程序具有相同的uid和package，或者在AndroidManifest.xml 配置文件的application标签或者activity标签中显式指定相同的process属性值，这样，不同的Activity可以运行在不同的进程中。\n\nmService.startProcessLocked()方法最终会调用到下面的代码去开启新的进程\n~~~ Java\nProcess.ProcessStartResult startResult = Process.start(entryPoint,\n                app.processName, uid, uid, gids, debugFlags, mountExternal,\n                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                app.info.dataDir, entryPointArgs);\n~~~\n新的进程会导入android.app.ActivityThread 类，并且执行它的main方法，这个main方法其实就是一个应用进程的入口方法。这就是为什么我们前面说每一个应用程序都有一个ActivityThread实例来对应的原因。\n\n在main方法中，调用了自身的attach方法，在attach方法中：\n~~~ Java\nprivate void attach(boolean system) {\n    //...\n    final IActivityManager mgr = ActivityManagerNative.getDefault();\n    try {\n        mgr.attachApplication(mAppThread);\n    } catch (RemoteException ex) {\n        throw ex.rethrowFromSystemServer();\n    }\n    //...\n}\n~~~\n\n在ActivityManagerService的attachApplication()方法中又调用了ttachApplicationLocked()方法：\n~~~ Java\nprivate final boolean attachApplicationLocked(IApplicationThread thread,\n        int pid) {\n    //...代码省略\n    // See if the top visible activity is waiting to run in this process...\n    if (normalMode) {\n        try {\n            if (mStackSupervisor.attachApplicationLocked(app)) {\n                didSomething = true;\n            }\n        } catch (Exception e) {\n            Slog.wtf(TAG, \"Exception thrown launching activities in \" + app, e);\n            badApp = true;\n        }\n    }\n    // Find any services that should be running in this process...\n    if (!badApp) {\n        try {\n            didSomething |= mServices.attachApplicationLocked(app, processName);\n        } catch (Exception e) {\n            Slog.wtf(TAG, \"Exception thrown starting services in \" + app, e);\n            badApp = true;\n        }\n    }\n    // Check if a next-broadcast receiver is in this process...\n    if (!badApp && isPendingBroadcastProcessLocked(pid)) {\n        try {\n            didSomething |= sendPendingBroadcastsLocked(app);\n        } catch (Exception e) {\n            // If the app died trying to launch the receiver we declare it 'bad'\n            Slog.wtf(TAG, \"Exception thrown dispatching broadcasts in \" + app, e);\n            badApp = true;\n        }\n    }\n    //...代码省略\n~~~\n这个方法中最终调用了ActivityStackSupervisor类的attachApplicationLocked()方法，而attachApplicationLocked()方法又调用了realStartActivityLocked()方法。\n\n后面的过程就基本与普通Activity启动模式一样了。\n\n\n### 参考资料\n[Android源码分析-Activity的启动过程](http://blog.csdn.net/singwhatiwanna/article/details/18154335)\n\n罗老师的，[Android应用程序的Activity启动过程简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6685853)和 [Android应用程序启动过程源代码分析](http://blog.csdn.net/luoshengyang/article/details/6689748)\n\n[【凯子哥带你学Framework】Activity启动过程全解析](http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287)\n\n[Android系统篇之—-解读AMS远端服务调用机制以及Activity的启动流程](\nhttp://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-%E8%A7%A3%E8%AF%BBams%E8%BF%9C%E7%AB%AF%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Aactivity%E7%9A%84%E5%90%AF%E5%8A%A8/)\n","source":"_posts/2017-08-02-activity-start-process.md","raw":"---\nlayout: post\ntitle:  Activity启动流程分析\ncategory: accumulation\ntags:\n  - AMS\n  - AOSP\n  - Binder\nkeywords: AOSP, AMS, Binder\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20Reminiscence%20of%20the%20North.jpg\ntoc: true\n---\n\n## Activity启动流程分析\n\n本文主要介绍Activity的启动过程和过程中主要涉及的类。如果你跟随上一篇文章，成功编译了Android源码，可以动手跟本篇文章一步一步调试分析整个启动过程。没有编译源码，也可以看看[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/)，这里也有源码。\n\n### 主要对象功能介绍\n\n#### zygote进程和SystemServer进程\nandroid是基于Linux系统的，而在linux中，所有的进程都是由init进程直接或者是间接fork出来的，**zygote** 进程也不例外。\n\n> 每一个App其实都是\n- 一个单独的dalvik虚拟机\n- 一个单独的进程\n\nAndroid系统开启新进程的方式，是通过fork第一个**zygote** 进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程。\n<!--more-->\n\n**SystemServer** 也是一个进程，而且是由zygote进程fork出来的。\n为什么说SystemServer非常重要呢？因为系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService等等。\n\n> 我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？\nApp与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。\n\n\n#### 与Activity启动有关的类\n我们下面的文章将围绕着这几个类进行介绍。可能你第一次看的时候，印象不深，不过没关系，当你跟随者我读完这篇文章的时候，相信那时候你会对这些类更加的熟悉和深刻。\n\n- **ActivityManagerServices**，简称AMS，服务端对象，负责系统中所有Activity的生命周期，查看源码，[点击这里](https://android.googlesource.com/platform/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java)\n\n- **ActivityThread**，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作\n\n- **ApplicationThread**，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。\n\n- **ApplicationThreadProxy**，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。\n\n- **Instrumentation**，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。\n\n- **ActivityStack**，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。\n\n- **ActivityRecord**，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息，比如在哪进程中ProcessState，当前的状态CurentState等。其实就是服务器端的Activity对象的映像。\n\n- **TaskRecord**，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。\n\n- **ProcessRecord**，这个类记录的是一个进程中的信息，因为一个应用中可能会包含多个进程。\n\n#### App程序的入口\n我们一般在启动Activity的时候都是使用系统提供的方法Activity.startActivity()操作的，本文就在此方法上分析整个过程:\n\n> 这里我的app进程是：foo.bar.multi，后面深入源码后会在系统进程system_process和app进程之间切换。\n\n~~~ Java\n@Override\npublic void startActivity(Intent intent) {\n    this.startActivity(intent, null);\n}\n\n@Override\npublic void startActivity(Intent intent, @Nullable Bundle options) {\n    if (options != null) { //options这里为null\n        startActivityForResult(intent, -1, options);\n    } else {\n        // Note we want to go through this call for compatibility with\n        // applications that may have overridden the method.\n        startActivityForResult(intent, -1);\n    }\n}\n\npublic void startActivityForResult(@RequiresPermission Intent intent, int requestCode,\n        @Nullable Bundle options) {\n    if (mParent == null) { //这里mParent不为空\n        options = transferSpringboardActivityOptions(options);\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, this,\n                intent, requestCode, options);\n        if (ar != null) {\n            mMainThread.sendActivityResult(\n                mToken, mEmbeddedID, requestCode, ar.getResultCode(),\n                ar.getResultData());\n        }\n\n        // 代码省略....\n    } else {\n        // 代码省略....\n    }\n}\n~~~\n上面代码可以看到，这里用到了mMainThread变量去执行的操作，再看看这个变量，它是ActivityThread的一个实例。ActivityThread是一个应用非常关键的一个类，首先它是一个应用的主线程，其次就是他才是一个程序的入口（main方法）的地方：\n\n~~~ Java\npublic static void main(String[] args) {\n    //...代码省略\n}\n~~~\n没有Android源码的，可以看这里：[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java)。后面介绍这个入口main方法什么时候执行。\n\n上面的mInstrumentation对象，是在Activity的attach()方法中被赋值的\n\n#### Instrumentation是什么？和ActivityThread是什么关系？\n\n接着说上面的mInstrumentation.execStartActivity()方法，有三个同名的重载方法：\n~~~ Java\npublic ActivityResult execStartActivity(\n          Context who, IBinder contextThread, IBinder token, Activity target,\n          Intent intent, int requestCode, Bundle options)\n\n\npublic ActivityResult execStartActivity(\n         Context who, IBinder contextThread, IBinder token, String target,\n         Intent intent, int requestCode, Bundle options)\n\npublic ActivityResult execStartActivity(\n         Context who, IBinder contextThread, IBinder token, Activity target,\n         Intent intent, int requestCode, Bundle options, UserHandle user)\n~~~\n考验眼力的时候到了，仔细看下，上面的mInstrumentation.execStartActivity()调用的其实是第一个重载方法：\n~~~ Java\npublic ActivityResult execStartActivity(Context who, IBinder contextThread, IBinder token, Activity target,\n        Intent intent, int requestCode, Bundle options) {\n    IApplicationThread whoThread = (IApplicationThread) contextThread;\n        //...ignore some code...\n  try {\n        intent.migrateExtraStreamToClipData();\n        intent.prepareToLeaveProcess();\n        int result = ActivityManagerNative.getDefault()\n            .startActivity(whoThread, who.getBasePackageName(), intent,\n                    intent.resolveTypeIfNeeded(who.getContentResolver()),\n                    token, target != null ? target.mEmbeddedID : null,\n                    requestCode, 0, null, options);\n        checkStartActivityResult(result, intent);\n    } catch (RemoteException e) {\n    }\n    return null;\n}\n~~~\n可以看到execStartActivity()方法，调用了ActivityManagerNative的startActivity()方法，看到这个ActivityManagerNative类有没有感觉和之前一篇文章，[Android Binder机制分析（二）](https://agehua.github.io/2017/07/10/android-binder-principle2/)里的ServiceManagerNative有点类似，这里涉及到的是系统服务间的Binder机制，不了解的同学可以看看这篇文章。\n\n稍后分析ActivityManagerNative，这里简单介绍下Instrumentation类。\n\nInstrumentation意为“仪器”。每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。\n\nInstrumentation这个类里面的方法大多数和Application和Activity有关，可以说是对Application和Activity初始化和生命周期的工具类。\n\n举个例子，callActivityOnCreate()\n~~~ Java\npublic void callActivityOnCreate(Activity activity, Bundle icicle) {\n    prePerformCreate(activity);\n    activity.performCreate(icicle);\n    postPerformCreate(activity);\n}\n~~~\n对activity.performCreate(icicle);这一行代码熟悉吗？这一行里面就调用了传说中的Activity的入口函数onCreate()，不信？接着往下看Activity.performCreate()\n~~~ Java\nfinal void performCreate(Bundle icicle) {\n    onCreate(icicle);\n    mActivityTransitionState.readState(icicle);\n    performCreateCommon();\n}\n~~~\n确实，onCreate在这里调用了。但是有一件事情必须说清楚，那就是这个Instrumentation类这么重要，为啥我在开发的过程中，没有发现他的踪迹呢？\n\n是的，Instrumentation这个类很重要，对Activity生命周期方法的调用根本就离不开他，但他只负责Activity的内部管理。\n外部想调整Activity的状态，必须通过ActivityThread。\n\nActivityThread你都没听说过？那你肯定听说过传说中的UI线程吧？是的，这就是UI线程。我们前面说过，App和AMS是通过Binder传递信息的，那么ActivityThread就是专门与AMS的外交工作的。Instrumentation相当于老板娘，处理家务，很少露面。ActivityThread是老板，处理对外事务。\n\n所以说，AMS是董事会，负责指挥和调度的，ActivityThread是老板，虽然说家里的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是老板娘，负责家里的大事小事，但是一般不抛头露面，听一家之主ActivityThread的安排。\n\n#### 简介AMS和ActivityThread之间的Binder通信\n前面的两篇文章：[Android Binder机制分析（一）](https://agehua.github.io/2017/07/08/android-binder-principle/)和[Android Binder机制分析（二）](https://agehua.github.io/2017/07/10/android-binder-principle2/)。已经介绍了Android都是通过Binder机制调用远程的系统服务。这里在介绍下ActivityThread（App进程）是如何调用AMS服务的。\n\n前面我们说到，在调用Activity.startActivity()的时候，实际上调用的是：\n**mInstrumentation.execStartActivity()**\n这个方法里面调用的是：\n~~~ Java\nActivityManagerNative.getDefault().startActivity()\n~~~\n> 用鼠标定位一下，上面的startActivity()方法，会发现这个方法是IActivityManager接口里的方法。注意IActivityManager继承了IInterface接口，而这个接口就是AIDL接口类必须实现的接口。\n\n再看，ActivityManagerNative.getDefault()返回的就是ActivityManagerService的远程接口的本地代理，即ActivityManagerProxy。\n~~~ Java\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n\n //从类声明上，我们可以看到ActivityManagerNative是Binder的一个子类，而且实现了IActivityManager接口\n static public IActivityManager getDefault() {\n        return gDefault.get();\n }\n\n//最终返回的还是一个ActivityManagerProxy对象\nstatic public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        //这里面的Binder类型的obj参数会作为ActivityManagerProxy的成员变量保存为mRemote成员变量，负责进行IPC通信\n        return new ActivityManagerProxy(obj);\n    }\n}\n~~~\n\n其实ActivityManagerNative类就是远端服务的中间者Stub类，其实名字不叫Stub罢了，以后其实只要看到是继承了Binder类和实现了AIDL接口类型的就是Stub类，不要关心类名了。看到他的asInterface方法的时候也是和之前的其他系统服务都是类似的。\n~~~ Java\n//通过单例模式获取一个IActivityManager对象，这个对象通过asInterface(b)获得\nprivate static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n       protected IActivityManager create() {\n           IBinder b = ServiceManager.getService(\"activity\");\n           if (false) {\n               Log.v(\"ActivityManager\", \"default service binder = \" + b);\n           }\n           IActivityManager am = asInterface(b);\n           if (false) {\n               Log.v(\"ActivityManager\", \"default service = \" + am);\n           }\n           return am;\n       }\n   };\n}\n~~~\n在这里可以看到了，其实gDefalut借助Singleton实现的单例模式，而在内部可以看到先从ServiceManager中获取到AMS远端服务的Binder对象，然后使用asInterface方法转化成本地化对象（其实就是ActivityManagerProxy对象，这个对象是ActivityManagerNative的内部类）。然后我们在看看上面调用了startActivity方法，其实就是调用了ActivityManagerProxy对象的这个方法。\n\n在这里面做的事情就是IPC通信，利用Binder对象，调用transact()，把所有需要的参数封装成Parcel对象，向AMS发送数据进行通信。\n\n> 这个方法中添加一个断点，注意这里startActivity()是ActivityManagerProxy类的方法，这里的进程应该还是App进程：foo.bar.multi\n\n~~~ Java\npublic int startActivity(IApplicationThread caller, String callingPackage, Intent intent,\n        String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle options) throws RemoteException {\n    Parcel data = Parcel.obtain();\n    Parcel reply = Parcel.obtain();\n    data.writeInterfaceToken(IActivityManager.descriptor);\n    data.writeStrongBinder(caller != null ? caller.asBinder() : null);\n    data.writeString(callingPackage);\n    intent.writeToParcel(data, 0);\n    //...省略部分代码\n    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n    reply.readException();\n    int result = reply.readInt();\n    reply.recycle();\n    data.recycle();\n    return result;\n}\n~~~\n      注意，这里先别放开断点\n\n> Binder本质上只是一种底层通信方式，和具体服务没有关系。为了提供具体服务，Server必须提供一套接口函数以便Client通过远程访问使用各种服务。这时通常采用Proxy设计模式：将接口函数定义在一个抽象类中，Server和Client都会以该抽象类为基类实现所有接口函数，所不同的是Server端是真正的功能实现，而Client端是对这些函数远程调用请求的包装。\n\n客户端：ActivityManagerProxy =====>Binder驱动=====> ActivityManagerService：服务器\n\nBinder只能传递数据，并不知道是要调用ActivityManagerServices的哪个方法，所以在数据中会添加方法的唯一标识码，比如前面的startActivity()方法中的标识：START_ACTIVITY_TRANSACTION。\n\n在远端服务调用了transact()方法后，即mRemote.transact()，会转接到远端服务中间者ActivityManagerNative的onTransact方法中，找到对应的标识码：\n>  注意这里的接收者ActivityManagerNative的onTransact方法是在system_process进程中，想要继续debug调试的的话，需要在monitor中选中这个进程，然后再在下面的方法中添加断点。最后放开上面添加的断点。\n\n~~~ Java\n@Override\npublic boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n        throws RemoteException {\n    switch (code) {\n    case START_ACTIVITY_TRANSACTION:\n    {   //最好在case方法里面添加断点，避免受其他系统发送的消息影响\n        data.enforceInterface(IActivityManager.descriptor);\n        IBinder b = data.readStrongBinder();\n        IApplicationThread app = ApplicationThreadNative.asInterface(b);\n        String callingPackage = data.readString();\n        Intent intent = Intent.CREATOR.createFromParcel(data);\n        String resolvedType = data.readString();\n        IBinder resultTo = data.readStrongBinder();\n        String resultWho = data.readString();\n        int requestCode = data.readInt();\n        int startFlags = data.readInt();\n        ProfilerInfo profilerInfo = data.readInt() != 0\n                ? ProfilerInfo.CREATOR.createFromParcel(data) : null;\n        Bundle options = data.readInt() != 0\n                ? Bundle.CREATOR.createFromParcel(data) : null;\n        int result = startActivity(app, callingPackage, intent, resolvedType,\n                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);\n        reply.writeNoException();\n        reply.writeInt(result);\n        return true;\n    }\n    //...省略\n}\n~~~\n这里的startActivity方法，是在IActivityManager接口中定义的，跟ActivityManagerProxy没有关系了，是由远端服务来实现的，这里我们可以猜想应该是叫做ActivityManagerService中，这个类的源代码可以在[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/am/ActivityManagerService.java)里找到：\n\n这个类里有三个重载的startActivity()方法，仔细看，对应的应该是第三个方法：\n~~~ Java\nfinal int startActivity(Intent intent, ActivityStackSupervisor.ActivityContainer container)\n\n@Override\npublic int startActivity(IBinder whoThread, String callingPackage,\n        Intent intent, String resolvedType, Bundle bOptions)\n\n@Override\npublic final int startActivity(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions)\n~~~\n\n这个方法直接调用了startActivityAsUser()方法\n~~~ Java\n@Override\npublic final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {\n    enforceNotIsolatedCaller(\"startActivity\");\n    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),\n            userId, false, ALLOW_FULL_ONLY, \"startActivity\", null);\n    // TODO: Switch to user app stacks here.\n    return mActivityStarter.startActivityMayWait(caller, -1, callingPackage, intent,\n            resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n            profilerInfo, null, null, bOptions, false, userId, null, null);\n}\n~~~\n\n这里的mActivityStarter是在ActivityManagerService创建的时候初始化的。\n~~~ Java\npublic ActivityManagerService(Context systemContext) {\n    //...省略代码\n    mStackSupervisor = new ActivityStackSupervisor(this);\n    mActivityStarter = new ActivityStarter(this, mStackSupervisor);\n    //...省略代码\n}\n~~~\n下面就是ActiviStarter、ActivityStack和ActivityStackSupervisor三个类之间方法调来调去了，这里为了节省篇幅就不再贴代码了，有毅力的同学可以每个方法都打上一个断点，走一遍：\n\nActivityStarter.startActivityMayWait()-> ActivityStarter.startActivityLocked()-> ActivityStarter.startActivityUnchecked()-> ActivityStackSupervisor.resumeFocusedStackTopActivityLocked()\n\n再往后都是ActivityStackSupervisor类的方法，调用：\n\n从resumeFocusedStackTopActivityLocked()-> resumeFocusedStackTopActivityLocked()-> resumeTopActivityUncheckedLocked()\n-> resumeTopActivityInnerLocked()-> startSpecificActivityLocked()-> realStartActivityLocked()\n\n\n#### IApplicationThread接口简介\n\n重点在最后的方法里realStartActivityLocked()调用了，**app.thread.scheduleLaunchActivity()**方法\n~~~ Java\nfinal boolean realStartActivityLocked(ActivityRecord r, ProcessRecord app,\n            boolean andResume, boolean checkConfig) throws RemoteException {\n\n    //...代码省略\n\n    final ActivityStack stack = task.stack;\n    try {\n        //...代码省略\n\n        app.forceProcessStateUpTo(mService.mTopProcessState);\n        app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                new Configuration(task.mOverrideConfig), r.compat, r.launchedFromPackage,\n                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n\n        //...代码省略\n    } catch (RemoteException e) {\n\n    }\n\n    return true;\n}\n~~~\nscheduleLaunchActivity()方法是IApplicationThread接口里面的方法，但是是由那个类实现的呢，这里就需要猜了，哈哈\n\n下面几个类都实现了相同的接口IApplicationThread：\n~~~ Java\nprivate class ApplicationThread extends ApplicationThreadNative {}\n\npublic abstract class ApplicationThreadNative extends Binder implements IApplicationThread{}\n\nclass ApplicationThreadProxy implements IApplicationThread {}\n\npublic interface IApplicationThread extends IInterface {}\n~~~\nIApplicationThread的源码在这里：[android.googlesource](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/IApplicationThread.java)\n\n> IApplicationThread是实现了IInterface接口的，说明也是用的Binder远程通讯，这里的当前进程是system_process，\n本地代理类应该是ApplicationThreadProxy类，而这个类是内部类，在ApplicationThreadNative类中\n\n来看ApplicationThreadProxy类的scheduleLaunchActivity()方法：\n~~~ Java\npublic final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n        int procState, Bundle state, PersistableBundle persistentState,\n        List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n        boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) throws RemoteException {\n    Parcel data = Parcel.obtain();\n    data.writeInterfaceToken(IApplicationThread.descriptor);\n\n    //....写入数据\n\n    mRemote.transact(SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION, data, null,\n            IBinder.FLAG_ONEWAY);\n    data.recycle();\n}\n~~~\n记住这个标识，SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION，在ApplicationThreadNative类的onTransact()方法里找：\n\n> 这里注意，调用完mRemote.transact()方法，回调的onTransact()方法已经不再system_process进程中了，而是到了App进程：foo.bar.multi\n\n~~~ Java\n//onTransact()方法里：\ncase SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:\n    {\n        data.enforceInterface(IApplicationThread.descriptor);\n        // 取出数据\n        scheduleLaunchActivity(intent, b, ident, info, curConfig, overrideConfig, compatInfo,\n                referrer, voiceInteractor, procState, state, persistentState, ri, pi,\n                notResumed, isForward, profilerInfo);\n        return true;\n    }\n~~~\n取出各种数据，在调用scheduleLaunchActivity()方法。\n\n> 这里的cheduleLaunchActivity()在哪里实现？感觉应该在ApplicationThreadService类里。但是并没有这个类。其实应该是ApplicationThread类，不叫XXXService了，这个类实现了ApplicationThreadNative接口，同时它是ActivityThread的内部类\n\n到这里总结下IApplicationThread接口的Binder机制：\n\n客户端：ApplicationThread <=====Binder驱动<===== ApplicationThreadProxy：服务器\n对比之前的IActivityManager：\n客户端：ActivityManagerProxy =====>Binder驱动=====> ActivityManagerService：服务器\n有没有发现**Binder只能单向传递**。\n\n这两次的Binder通信如下图所示：\n![](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ams_binder_process.png)\n\n再来看ApplicationThread类的scheduleLaunchActivity()方法\n~~~ Java\n// we use token to identify this activity without having to send the\n// activity itself back to the activity manager. (matters more with ipc)\n@Override\npublic final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,\n        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,\n        int procState, Bundle state, PersistableBundle persistentState,\n        List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents,\n        boolean notResumed, boolean isForward, ProfilerInfo profilerInfo) {\n\n    updateProcessState(procState, false);\n    ActivityClientRecord r = new ActivityClientRecord();\n\n    r.token = token;\n    r.ident = ident;\n    r.intent = intent;\n    r.referrer = referrer;\n    r.voiceInteractor = voiceInteractor;\n    r.activityInfo = info;\n    r.compatInfo = compatInfo;\n    r.state = state;\n    r.persistentState = persistentState;\n\n    r.pendingResults = pendingResults;\n    r.pendingIntents = pendingNewIntents;\n\n    r.startsNotResumed = notResumed;\n    r.isForward = isForward;\n\n    r.profilerInfo = profilerInfo;\n\n    r.overrideConfig = overrideConfig;\n    updatePendingConfiguration(curConfig);\n\n    sendMessage(H.LAUNCH_ACTIVITY, r);\n}\n~~~\n\n\n在继续看接收消息的地方，在H类里（H类继承了Handler），\n~~~ Java\npublic void handleMessage(Message msg) {\n    if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n    switch (msg.what) {\n        case LAUNCH_ACTIVITY: {\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\n            final ActivityClientRecord r = (ActivityClientRecord) msg.obj;\n\n            r.packageInfo = getPackageInfoNoCheck(\n                  r.activityInfo.applicationInfo, r.compatInfo);\n            handleLaunchActivity(r, null, \"LAUNCH_ACTIVITY\");\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n        } break;\n\n    //....\n~~~\nhandleLaunchActivity()->performLaunchActivity()。\n\nperformLaunchActivity()通过ClassLoader导入相应的Activity类，然后把它启动起来，注意看代码里的注释。\n~~~ Java\n    Activity activity = null;\n    try {\n        //通过ClassLoader将foo.bar.multi.XXXActivity类加载进来：\n        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();\n        activity = mInstrumentation.newActivity(\n                cl, component.getClassName(), r.intent);\n        StrictMode.incrementExpectedActivityCount(activity.getClass());\n        r.intent.setExtrasClassLoader(cl);\n        r.intent.prepareToEnterProcess();\n        if (r.state != null) {\n            r.state.setClassLoader(cl);\n        }\n    } catch (Exception e) {\n        if (!mInstrumentation.onException(activity, e)) {\n            throw new RuntimeException(\n                \"Unable to instantiate activity \" + component\n                + \": \" + e.toString(), e);\n\n\n    try {\n        //创建Application对象，这是根据AndroidManifest.xml配置文件中的Application标签的信息来创建的\n        Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n        //代码主要创建Activity的上下文信息，并通过attach方法将这些上下文信息设置到XXXActivity中去：\n        if (activity != null) {\n          activity.attach(appContext, this, getInstrumentation(), r.token,\n          r.ident, app, r.intent, r.activityInfo, title, r.parent,\n          r.embeddedID, r.lastNonConfigurationInstances, config,\n          r.referrer, r.voiceInteractor, window);\n\n        //调用activity的onCreate函数，上面提到过这个方法：\n        mInstrumentation.callActivityOnCreate(activity, r.state);\n\n~~~\n\n\n无论是通过点击应用程序图标来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都要借助于应用程序框架层的ActivityManagerService服务进程。在Android应用程序框架层中，ActivityManagerService是一个非常重要的接口，它不但负责启动Activity和Service，还负责管理Activity和Service。\n\nAndroid应用程序框架层中的ActivityManagerService启动Activity的过程大致如下图所示：\n\n![图片来自：http://blog.csdn.net/luoshengyang/article/details/6685853](http://oui2w5whj.bkt.clouddn.com/blogimages/2017/activity-start-process.png)\n\n在这个图中，ActivityManagerService和ActivityStack位于同一个进程中，而ApplicationThread和ActivityThread位于另一个进程中。其中，ActivityManagerService是负责管理Activity的生命周期的，ActivityManagerService还借助ActivityStack是来把所有的Activity按照后进先出的顺序放在一个堆栈中；对于每一个应用程序来说，都有一个ActivityThread来表示应用程序的主进程，而每一个ActivityThread都包含有一个ApplicationThread实例，它是一个Binder对象，负责和其它进程进行通信。\n\n下面简要总结一下启动的过程：\n\n- Step 1. 无论是通过Launcher来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都通过Binder进程间通信进入到ActivityManagerService进程中，并且调用ActivityManagerService.startActivity接口；\n- Step 2. ActivityManagerService调用ActivityStack.startActivityMayWait来做准备要启动的Activity的相关信息；\n- Step 3. ActivityStack通知ApplicationThread要进行Activity启动调度了，这里的ApplicationThread代表的是调用ActivityManagerService.startActivity接口的进程，对于通过点击应用程序图标的情景来说，这个进程就是Launcher了，而对于通过在Activity内部调用startActivity的情景来说，这个进程就是这个Activity所在的进程了；\n- Step 4. ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入到ActivityManagerService进程中，看看是否需要创建新的进程来启动Activity；\n- Step 5. 对于通过点击应用程序图标来启动Activity的情景来说，ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程，而对于通过在Activity内部调用startActivity来启动新的Activity来说，这一步是不需要执行的，因为新的Activity就在原来的Activity所在的进程中进行启动；\n- Step 6. ActivityManagerServic调用ApplicationThread.scheduleLaunchActivity接口，通知相应的进程执行启动Activity的操作；\n- Step 7. ApplicationThread把这个启动Activity的操作转发给ActivityThread，ActivityThread通过ClassLoader导入相应的Activity类，然后把它启动起来。\n\n\n### 补充，通过Launcher启动Activity\nAndroid的Launcher本身也是一个应用程序，点击应用图标，调用的方法还是Activity.startActivity()。与之前分析的不同之处是在ActivityStackSupervisor.startSpecificActivityLocked()方法中：\n~~~ Java\nvoid startSpecificActivityLocked(ActivityRecord r,\n        boolean andResume, boolean checkConfig) {\n    // Is this activity's application already running?\n    ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n            r.info.applicationInfo.uid, true);\n\n    r.task.stack.setLaunchTime(r);\n\n    //区别在这里，Launcher启动方式，app为null，应用内启动app不为null\n    if (app != null && app.thread != null) {\n        try {\n            if ((r.info.flags&ActivityInfo.FLAG_MULTIPROCESS) == 0\n                    || !\"android\".equals(r.info.packageName)) {\n                // Don't add this if it is a platform component that is marked\n                // to run in multiple processes, because this is actually\n                // part of the framework so doesn't make sense to track as a\n                // separate apk in the process.\n                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,\n                        mService.mProcessStats);\n            }\n            realStartActivityLocked(r, app, andResume, checkConfig);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception when starting activity \"\n                    + r.intent.getComponent().flattenToShortString(), e);\n        }\n          // If a dead object exception was thrown -- fall through to\n        // restart the application.\n    }\n    //所以要执行ActivityServiceManager的去开启一个新的进程\n    mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n            \"activity\", r.intent.getComponent(), false, false, true);\n}\n~~~\n> 每一个应用程序都有自己的uid，uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。当然，我们可以配置两个应用程序具有相同的uid和package，或者在AndroidManifest.xml 配置文件的application标签或者activity标签中显式指定相同的process属性值，这样，不同的Activity可以运行在不同的进程中。\n\nmService.startProcessLocked()方法最终会调用到下面的代码去开启新的进程\n~~~ Java\nProcess.ProcessStartResult startResult = Process.start(entryPoint,\n                app.processName, uid, uid, gids, debugFlags, mountExternal,\n                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                app.info.dataDir, entryPointArgs);\n~~~\n新的进程会导入android.app.ActivityThread 类，并且执行它的main方法，这个main方法其实就是一个应用进程的入口方法。这就是为什么我们前面说每一个应用程序都有一个ActivityThread实例来对应的原因。\n\n在main方法中，调用了自身的attach方法，在attach方法中：\n~~~ Java\nprivate void attach(boolean system) {\n    //...\n    final IActivityManager mgr = ActivityManagerNative.getDefault();\n    try {\n        mgr.attachApplication(mAppThread);\n    } catch (RemoteException ex) {\n        throw ex.rethrowFromSystemServer();\n    }\n    //...\n}\n~~~\n\n在ActivityManagerService的attachApplication()方法中又调用了ttachApplicationLocked()方法：\n~~~ Java\nprivate final boolean attachApplicationLocked(IApplicationThread thread,\n        int pid) {\n    //...代码省略\n    // See if the top visible activity is waiting to run in this process...\n    if (normalMode) {\n        try {\n            if (mStackSupervisor.attachApplicationLocked(app)) {\n                didSomething = true;\n            }\n        } catch (Exception e) {\n            Slog.wtf(TAG, \"Exception thrown launching activities in \" + app, e);\n            badApp = true;\n        }\n    }\n    // Find any services that should be running in this process...\n    if (!badApp) {\n        try {\n            didSomething |= mServices.attachApplicationLocked(app, processName);\n        } catch (Exception e) {\n            Slog.wtf(TAG, \"Exception thrown starting services in \" + app, e);\n            badApp = true;\n        }\n    }\n    // Check if a next-broadcast receiver is in this process...\n    if (!badApp && isPendingBroadcastProcessLocked(pid)) {\n        try {\n            didSomething |= sendPendingBroadcastsLocked(app);\n        } catch (Exception e) {\n            // If the app died trying to launch the receiver we declare it 'bad'\n            Slog.wtf(TAG, \"Exception thrown dispatching broadcasts in \" + app, e);\n            badApp = true;\n        }\n    }\n    //...代码省略\n~~~\n这个方法中最终调用了ActivityStackSupervisor类的attachApplicationLocked()方法，而attachApplicationLocked()方法又调用了realStartActivityLocked()方法。\n\n后面的过程就基本与普通Activity启动模式一样了。\n\n\n### 参考资料\n[Android源码分析-Activity的启动过程](http://blog.csdn.net/singwhatiwanna/article/details/18154335)\n\n罗老师的，[Android应用程序的Activity启动过程简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6685853)和 [Android应用程序启动过程源代码分析](http://blog.csdn.net/luoshengyang/article/details/6689748)\n\n[【凯子哥带你学Framework】Activity启动过程全解析](http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287)\n\n[Android系统篇之—-解读AMS远端服务调用机制以及Activity的启动流程](\nhttp://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-%E8%A7%A3%E8%AF%BBams%E8%BF%9C%E7%AB%AF%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Aactivity%E7%9A%84%E5%90%AF%E5%8A%A8/)\n","slug":"activity-start-process","published":1,"date":"2017-08-01T16:00:00.000Z","updated":"2017-11-23T07:20:01.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec1f003rd6ykwzl0gdfa","content":"<h2 id=\"Activity启动流程分析\"><a href=\"#Activity启动流程分析\" class=\"headerlink\" title=\"Activity启动流程分析\"></a>Activity启动流程分析</h2><p>本文主要介绍Activity的启动过程和过程中主要涉及的类。如果你跟随上一篇文章，成功编译了Android源码，可以动手跟本篇文章一步一步调试分析整个启动过程。没有编译源码，也可以看看<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/\" target=\"_blank\" rel=\"external\">android.googlesource</a>，这里也有源码。</p>\n<h3 id=\"主要对象功能介绍\"><a href=\"#主要对象功能介绍\" class=\"headerlink\" title=\"主要对象功能介绍\"></a>主要对象功能介绍</h3><h4 id=\"zygote进程和SystemServer进程\"><a href=\"#zygote进程和SystemServer进程\" class=\"headerlink\" title=\"zygote进程和SystemServer进程\"></a>zygote进程和SystemServer进程</h4><p>android是基于Linux系统的，而在linux中，所有的进程都是由init进程直接或者是间接fork出来的，<strong>zygote</strong> 进程也不例外。</p>\n<blockquote>\n<p>每一个App其实都是</p>\n<ul>\n<li>一个单独的dalvik虚拟机</li>\n<li>一个单独的进程</li>\n</ul>\n</blockquote>\n<p>Android系统开启新进程的方式，是通过fork第一个<strong>zygote</strong> 进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程。<br><a id=\"more\"></a></p>\n<p><strong>SystemServer</strong> 也是一个进程，而且是由zygote进程fork出来的。<br>为什么说SystemServer非常重要呢？因为系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService等等。</p>\n<blockquote>\n<p>我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？<br>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。</p>\n</blockquote>\n<h4 id=\"与Activity启动有关的类\"><a href=\"#与Activity启动有关的类\" class=\"headerlink\" title=\"与Activity启动有关的类\"></a>与Activity启动有关的类</h4><p>我们下面的文章将围绕着这几个类进行介绍。可能你第一次看的时候，印象不深，不过没关系，当你跟随者我读完这篇文章的时候，相信那时候你会对这些类更加的熟悉和深刻。</p>\n<ul>\n<li><p><strong>ActivityManagerServices</strong>，简称AMS，服务端对象，负责系统中所有Activity的生命周期，查看源码，<a href=\"https://android.googlesource.com/platform/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java\" target=\"_blank\" rel=\"external\">点击这里</a></p>\n</li>\n<li><p><strong>ActivityThread</strong>，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作</p>\n</li>\n<li><p><strong>ApplicationThread</strong>，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</p>\n</li>\n<li><p><strong>ApplicationThreadProxy</strong>，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</p>\n</li>\n<li><p><strong>Instrumentation</strong>，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。</p>\n</li>\n<li><p><strong>ActivityStack</strong>，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</p>\n</li>\n<li><p><strong>ActivityRecord</strong>，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息，比如在哪进程中ProcessState，当前的状态CurentState等。其实就是服务器端的Activity对象的映像。</p>\n</li>\n<li><p><strong>TaskRecord</strong>，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</p>\n</li>\n<li><p><strong>ProcessRecord</strong>，这个类记录的是一个进程中的信息，因为一个应用中可能会包含多个进程。</p>\n</li>\n</ul>\n<h4 id=\"App程序的入口\"><a href=\"#App程序的入口\" class=\"headerlink\" title=\"App程序的入口\"></a>App程序的入口</h4><p>我们一般在启动Activity的时候都是使用系统提供的方法Activity.startActivity()操作的，本文就在此方法上分析整个过程:</p>\n<blockquote>\n<p>这里我的app进程是：foo.bar.multi，后面深入源码后会在系统进程system_process和app进程之间切换。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.startActivity(intent, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//options这里为null</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(@RequiresPermission Intent intent, <span class=\"keyword\">int</span> requestCode,</span></span></div><div class=\"line\">        @Nullable Bundle options) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//这里mParent不为空</span></div><div class=\"line\">        options = transferSpringboardActivityOptions(options);</div><div class=\"line\">        Instrumentation.ActivityResult ar =</div><div class=\"line\">            mInstrumentation.execStartActivity(</div><div class=\"line\">                <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, <span class=\"keyword\">this</span>,</div><div class=\"line\">                intent, requestCode, options);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mMainThread.sendActivityResult(</div><div class=\"line\">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class=\"line\">                ar.getResultData());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 代码省略....</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 代码省略....</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码可以看到，这里用到了mMainThread变量去执行的操作，再看看这个变量，它是ActivityThread的一个实例。ActivityThread是一个应用非常关键的一个类，首先它是一个应用的主线程，其次就是他才是一个程序的入口（main方法）的地方：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>没有Android源码的，可以看这里：<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java\" target=\"_blank\" rel=\"external\">android.googlesource</a>。后面介绍这个入口main方法什么时候执行。</p>\n<p>上面的mInstrumentation对象，是在Activity的attach()方法中被赋值的</p>\n<h4 id=\"Instrumentation是什么？和ActivityThread是什么关系？\"><a href=\"#Instrumentation是什么？和ActivityThread是什么关系？\" class=\"headerlink\" title=\"Instrumentation是什么？和ActivityThread是什么关系？\"></a>Instrumentation是什么？和ActivityThread是什么关系？</h4><p>接着说上面的mInstrumentation.execStartActivity()方法，有三个同名的重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></span></div><div class=\"line\">          Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">          Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></div><div class=\"line\">         Context who, IBinder contextThread, IBinder token, String target,</div><div class=\"line\">         Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></div><div class=\"line\">         Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">         Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options, UserHandle user)</div></pre></td></tr></table></figure></p>\n<p>考验眼力的时候到了，仔细看下，上面的mInstrumentation.execStartActivity()调用的其实是第一个重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(Context who, IBinder contextThread, IBinder token, Activity target,</span></span></div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options) &#123;</div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">        <span class=\"comment\">//...ignore some code...</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        intent.prepareToLeaveProcess();</div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到execStartActivity()方法，调用了ActivityManagerNative的startActivity()方法，看到这个ActivityManagerNative类有没有感觉和之前一篇文章，<a href=\"https://agehua.github.io/2017/07/10/android-binder-principle2/\">Android Binder机制分析（二）</a>里的ServiceManagerNative有点类似，这里涉及到的是系统服务间的Binder机制，不了解的同学可以看看这篇文章。</p>\n<p>稍后分析ActivityManagerNative，这里简单介绍下Instrumentation类。</p>\n<p>Instrumentation意为“仪器”。每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。</p>\n<p>Instrumentation这个类里面的方法大多数和Application和Activity有关，可以说是对Application和Activity初始化和生命周期的工具类。</p>\n<p>举个例子，callActivityOnCreate()<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    prePerformCreate(activity);</div><div class=\"line\">    activity.performCreate(icicle);</div><div class=\"line\">    postPerformCreate(activity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对activity.performCreate(icicle);这一行代码熟悉吗？这一行里面就调用了传说中的Activity的入口函数onCreate()，不信？接着往下看Activity.performCreate()<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    onCreate(icicle);</div><div class=\"line\">    mActivityTransitionState.readState(icicle);</div><div class=\"line\">    performCreateCommon();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>确实，onCreate在这里调用了。但是有一件事情必须说清楚，那就是这个Instrumentation类这么重要，为啥我在开发的过程中，没有发现他的踪迹呢？</p>\n<p>是的，Instrumentation这个类很重要，对Activity生命周期方法的调用根本就离不开他，但他只负责Activity的内部管理。<br>外部想调整Activity的状态，必须通过ActivityThread。</p>\n<p>ActivityThread你都没听说过？那你肯定听说过传说中的UI线程吧？是的，这就是UI线程。我们前面说过，App和AMS是通过Binder传递信息的，那么ActivityThread就是专门与AMS的外交工作的。Instrumentation相当于老板娘，处理家务，很少露面。ActivityThread是老板，处理对外事务。</p>\n<p>所以说，AMS是董事会，负责指挥和调度的，ActivityThread是老板，虽然说家里的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是老板娘，负责家里的大事小事，但是一般不抛头露面，听一家之主ActivityThread的安排。</p>\n<h4 id=\"简介AMS和ActivityThread之间的Binder通信\"><a href=\"#简介AMS和ActivityThread之间的Binder通信\" class=\"headerlink\" title=\"简介AMS和ActivityThread之间的Binder通信\"></a>简介AMS和ActivityThread之间的Binder通信</h4><p>前面的两篇文章：<a href=\"https://agehua.github.io/2017/07/08/android-binder-principle/\">Android Binder机制分析（一）</a>和<a href=\"https://agehua.github.io/2017/07/10/android-binder-principle2/\">Android Binder机制分析（二）</a>。已经介绍了Android都是通过Binder机制调用远程的系统服务。这里在介绍下ActivityThread（App进程）是如何调用AMS服务的。</p>\n<p>前面我们说到，在调用Activity.startActivity()的时候，实际上调用的是：<br><strong>mInstrumentation.execStartActivity()</strong><br>这个方法里面调用的是：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">ActivityManagerNative.getDefault().startActivity()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>用鼠标定位一下，上面的startActivity()方法，会发现这个方法是IActivityManager接口里的方法。注意IActivityManager继承了IInterface接口，而这个接口就是AIDL接口类必须实现的接口。</p>\n</blockquote>\n<p>再看，ActivityManagerNative.getDefault()返回的就是ActivityManagerService的远程接口的本地代理，即ActivityManagerProxy。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//从类声明上，我们可以看到ActivityManagerNative是Binder的一个子类，而且实现了IActivityManager接口</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最终返回的还是一个ActivityManagerProxy对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里面的Binder类型的obj参数会作为ActivityManagerProxy的成员变量保存为mRemote成员变量，负责进行IPC通信</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实ActivityManagerNative类就是远端服务的中间者Stub类，其实名字不叫Stub罢了，以后其实只要看到是继承了Binder类和实现了AIDL接口类型的就是Stub类，不要关心类名了。看到他的asInterface方法的时候也是和之前的其他系统服务都是类似的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过单例模式获取一个IActivityManager对象，这个对象通过asInterface(b)获得</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">           &#125;</div><div class=\"line\">           IActivityManager am = asInterface(b);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> am;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这里可以看到了，其实gDefalut借助Singleton实现的单例模式，而在内部可以看到先从ServiceManager中获取到AMS远端服务的Binder对象，然后使用asInterface方法转化成本地化对象（其实就是ActivityManagerProxy对象，这个对象是ActivityManagerNative的内部类）。然后我们在看看上面调用了startActivity方法，其实就是调用了ActivityManagerProxy对象的这个方法。</p>\n<p>在这里面做的事情就是IPC通信，利用Binder对象，调用transact()，把所有需要的参数封装成Parcel对象，向AMS发送数据进行通信。</p>\n<blockquote>\n<p>这个方法中添加一个断点，注意这里startActivity()是ActivityManagerProxy类的方法，这里的进程应该还是App进程：foo.bar.multi</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></div><div class=\"line\">        String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    Parcel reply = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">    data.writeStrongBinder(caller != <span class=\"keyword\">null</span> ? caller.asBinder() : <span class=\"keyword\">null</span>);</div><div class=\"line\">    data.writeString(callingPackage);</div><div class=\"line\">    intent.writeToParcel(data, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\">    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">    reply.readException();</div><div class=\"line\">    <span class=\"keyword\">int</span> result = reply.readInt();</div><div class=\"line\">    reply.recycle();</div><div class=\"line\">    data.recycle();</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>注意，这里先别放开断点\n</code></pre><blockquote>\n<p>Binder本质上只是一种底层通信方式，和具体服务没有关系。为了提供具体服务，Server必须提供一套接口函数以便Client通过远程访问使用各种服务。这时通常采用Proxy设计模式：将接口函数定义在一个抽象类中，Server和Client都会以该抽象类为基类实现所有接口函数，所不同的是Server端是真正的功能实现，而Client端是对这些函数远程调用请求的包装。</p>\n</blockquote>\n<p>客户端：ActivityManagerProxy =====&gt;Binder驱动=====&gt; ActivityManagerService：服务器</p>\n<p>Binder只能传递数据，并不知道是要调用ActivityManagerServices的哪个方法，所以在数据中会添加方法的唯一标识码，比如前面的startActivity()方法中的标识：START_ACTIVITY_TRANSACTION。</p>\n<p>在远端服务调用了transact()方法后，即mRemote.transact()，会转接到远端服务中间者ActivityManagerNative的onTransact方法中，找到对应的标识码：</p>\n<blockquote>\n<p> 注意这里的接收者ActivityManagerNative的onTransact方法是在system_process进程中，想要继续debug调试的的话，需要在monitor中选中这个进程，然后再在下面的方法中添加断点。最后放开上面添加的断点。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;   <span class=\"comment\">//最好在case方法里面添加断点，避免受其他系统发送的消息影响</span></div><div class=\"line\">        data.enforceInterface(IActivityManager.descriptor);</div><div class=\"line\">        IBinder b = data.readStrongBinder();</div><div class=\"line\">        IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">        String callingPackage = data.readString();</div><div class=\"line\">        Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">        String resolvedType = data.readString();</div><div class=\"line\">        IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">        String resultWho = data.readString();</div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode = data.readInt();</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags = data.readInt();</div><div class=\"line\">        ProfilerInfo profilerInfo = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                ? ProfilerInfo.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">        Bundle options = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                ? Bundle.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = startActivity(app, callingPackage, intent, resolvedType,</div><div class=\"line\">                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);</div><div class=\"line\">        reply.writeNoException();</div><div class=\"line\">        reply.writeInt(result);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的startActivity方法，是在IActivityManager接口中定义的，跟ActivityManagerProxy没有关系了，是由远端服务来实现的，这里我们可以猜想应该是叫做ActivityManagerService中，这个类的源代码可以在<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/am/ActivityManagerService.java\" target=\"_blank\" rel=\"external\">android.googlesource</a>里找到：</p>\n<p>这个类里有三个重载的startActivity()方法，仔细看，对应的应该是第三个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, ActivityStackSupervisor.ActivityContainer container)</span></span></div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IBinder whoThread, String callingPackage,</span></div><div class=\"line\">        Intent intent, String resolvedType, Bundle bOptions)</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</div></pre></td></tr></table></figure></p>\n<p>这个方法直接调用了startActivityAsUser()方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class=\"keyword\">int</span> userId) &#123;</div><div class=\"line\">    enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</div><div class=\"line\">            userId, <span class=\"keyword\">false</span>, ALLOW_FULL_ONLY, <span class=\"string\">\"startActivity\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Switch to user app stacks here.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mActivityStarter.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">            resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">            profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, bOptions, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的mActivityStarter是在ActivityManagerService创建的时候初始化的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerService</span><span class=\"params\">(Context systemContext)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...省略代码</span></div><div class=\"line\">    mStackSupervisor = <span class=\"keyword\">new</span> ActivityStackSupervisor(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mActivityStarter = <span class=\"keyword\">new</span> ActivityStarter(<span class=\"keyword\">this</span>, mStackSupervisor);</div><div class=\"line\">    <span class=\"comment\">//...省略代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面就是ActiviStarter、ActivityStack和ActivityStackSupervisor三个类之间方法调来调去了，这里为了节省篇幅就不再贴代码了，有毅力的同学可以每个方法都打上一个断点，走一遍：</p>\n<p>ActivityStarter.startActivityMayWait()-&gt; ActivityStarter.startActivityLocked()-&gt; ActivityStarter.startActivityUnchecked()-&gt; ActivityStackSupervisor.resumeFocusedStackTopActivityLocked()</p>\n<p>再往后都是ActivityStackSupervisor类的方法，调用：</p>\n<p>从resumeFocusedStackTopActivityLocked()-&gt; resumeFocusedStackTopActivityLocked()-&gt; resumeTopActivityUncheckedLocked()<br>-&gt; resumeTopActivityInnerLocked()-&gt; startSpecificActivityLocked()-&gt; realStartActivityLocked()</p>\n<h4 id=\"IApplicationThread接口简介\"><a href=\"#IApplicationThread接口简介\" class=\"headerlink\" title=\"IApplicationThread接口简介\"></a>IApplicationThread接口简介</h4><p>重点在最后的方法里realStartActivityLocked()调用了，<strong>app.thread.scheduleLaunchActivity()</strong>方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r, ProcessRecord app,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityStack stack = task.stack;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//...代码省略</span></div><div class=\"line\"></div><div class=\"line\">        app.forceProcessStateUpTo(mService.mTopProcessState);</div><div class=\"line\">        app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(task.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//...代码省略</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>scheduleLaunchActivity()方法是IApplicationThread接口里面的方法，但是是由那个类实现的呢，这里就需要猜了，哈哈</p>\n<p>下面几个类都实现了相同的接口IApplicationThread：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">IInterface</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>IApplicationThread的源码在这里：<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/IApplicationThread.java\" target=\"_blank\" rel=\"external\">android.googlesource</a></p>\n<blockquote>\n<p>IApplicationThread是实现了IInterface接口的，说明也是用的Binder远程通讯，这里的当前进程是system_process，<br>本地代理类应该是ApplicationThreadProxy类，而这个类是内部类，在ApplicationThreadNative类中</p>\n</blockquote>\n<p>来看ApplicationThreadProxy类的scheduleLaunchActivity()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></div><div class=\"line\">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">        <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....写入数据</span></div><div class=\"line\"></div><div class=\"line\">    mRemote.transact(SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">            IBinder.FLAG_ONEWAY);</div><div class=\"line\">    data.recycle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>记住这个标识，SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION，在ApplicationThreadNative类的onTransact()方法里找：</p>\n<blockquote>\n<p>这里注意，调用完mRemote.transact()方法，回调的onTransact()方法已经不再system_process进程中了，而是到了App进程：foo.bar.multi</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//onTransact()方法里：</span></div><div class=\"line\"><span class=\"keyword\">case</span> SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;</div><div class=\"line\">        data.enforceInterface(IApplicationThread.descriptor);</div><div class=\"line\">        <span class=\"comment\">// 取出数据</span></div><div class=\"line\">        scheduleLaunchActivity(intent, b, ident, info, curConfig, overrideConfig, compatInfo,</div><div class=\"line\">                referrer, voiceInteractor, procState, state, persistentState, ri, pi,</div><div class=\"line\">                notResumed, isForward, profilerInfo);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>取出各种数据，在调用scheduleLaunchActivity()方法。</p>\n<blockquote>\n<p>这里的cheduleLaunchActivity()在哪里实现？感觉应该在ApplicationThreadService类里。但是并没有这个类。其实应该是ApplicationThread类，不叫XXXService了，这个类实现了ApplicationThreadNative接口，同时它是ActivityThread的内部类</p>\n</blockquote>\n<p>到这里总结下IApplicationThread接口的Binder机制：</p>\n<p>客户端：ApplicationThread &lt;=====Binder驱动&lt;===== ApplicationThreadProxy：服务器<br>对比之前的IActivityManager：<br>客户端：ActivityManagerProxy =====&gt;Binder驱动=====&gt; ActivityManagerService：服务器<br>有没有发现<strong>Binder只能单向传递</strong>。</p>\n<p>这两次的Binder通信如下图所示：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ams_binder_process.png\" alt=\"\"></p>\n<p>再来看ApplicationThread类的scheduleLaunchActivity()方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use token to identify this activity without having to send the</span></div><div class=\"line\"><span class=\"comment\">// activity itself back to the activity manager. (matters more with ipc)</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></div><div class=\"line\">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">        <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class=\"line\"></div><div class=\"line\">    updateProcessState(procState, <span class=\"keyword\">false</span>);</div><div class=\"line\">    ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\"></div><div class=\"line\">    r.token = token;</div><div class=\"line\">    r.ident = ident;</div><div class=\"line\">    r.intent = intent;</div><div class=\"line\">    r.referrer = referrer;</div><div class=\"line\">    r.voiceInteractor = voiceInteractor;</div><div class=\"line\">    r.activityInfo = info;</div><div class=\"line\">    r.compatInfo = compatInfo;</div><div class=\"line\">    r.state = state;</div><div class=\"line\">    r.persistentState = persistentState;</div><div class=\"line\"></div><div class=\"line\">    r.pendingResults = pendingResults;</div><div class=\"line\">    r.pendingIntents = pendingNewIntents;</div><div class=\"line\"></div><div class=\"line\">    r.startsNotResumed = notResumed;</div><div class=\"line\">    r.isForward = isForward;</div><div class=\"line\"></div><div class=\"line\">    r.profilerInfo = profilerInfo;</div><div class=\"line\"></div><div class=\"line\">    r.overrideConfig = overrideConfig;</div><div class=\"line\">    updatePendingConfiguration(curConfig);</div><div class=\"line\"></div><div class=\"line\">    sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在继续看接收消息的地方，在H类里（H类继承了Handler），<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">    <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"activityStart\"</span>);</div><div class=\"line\">            <span class=\"keyword\">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class=\"line\"></div><div class=\"line\">            r.packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                  r.activityInfo.applicationInfo, r.compatInfo);</div><div class=\"line\">            handleLaunchActivity(r, <span class=\"keyword\">null</span>, <span class=\"string\">\"LAUNCH_ACTIVITY\"</span>);</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">        &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....</span></div></pre></td></tr></table></figure></p>\n<p>handleLaunchActivity()-&gt;performLaunchActivity()。</p>\n<p>performLaunchActivity()通过ClassLoader导入相应的Activity类，然后把它启动起来，注意看代码里的注释。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//通过ClassLoader将foo.bar.multi.XXXActivity类加载进来：</span></div><div class=\"line\">    java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class=\"line\">    activity = mInstrumentation.newActivity(</div><div class=\"line\">            cl, component.getClassName(), r.intent);</div><div class=\"line\">    StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class=\"line\">    r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">    r.intent.prepareToEnterProcess();</div><div class=\"line\">    <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.state.setClassLoader(cl);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Unable to instantiate activity \"</span> + component</div><div class=\"line\">            + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//创建Application对象，这是根据AndroidManifest.xml配置文件中的Application标签的信息来创建的</span></div><div class=\"line\">    Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//代码主要创建Activity的上下文信息，并通过attach方法将这些上下文信息设置到XXXActivity中去：</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">      r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">      r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class=\"line\">      r.referrer, r.voiceInteractor, window);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//调用activity的onCreate函数，上面提到过这个方法：</span></div><div class=\"line\">    mInstrumentation.callActivityOnCreate(activity, r.state);</div></pre></td></tr></table></figure></p>\n<p>无论是通过点击应用程序图标来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都要借助于应用程序框架层的ActivityManagerService服务进程。在Android应用程序框架层中，ActivityManagerService是一个非常重要的接口，它不但负责启动Activity和Service，还负责管理Activity和Service。</p>\n<p>Android应用程序框架层中的ActivityManagerService启动Activity的过程大致如下图所示：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/activity-start-process.png\" alt=\"图片来自：http://blog.csdn.net/luoshengyang/article/details/6685853\"></p>\n<p>在这个图中，ActivityManagerService和ActivityStack位于同一个进程中，而ApplicationThread和ActivityThread位于另一个进程中。其中，ActivityManagerService是负责管理Activity的生命周期的，ActivityManagerService还借助ActivityStack是来把所有的Activity按照后进先出的顺序放在一个堆栈中；对于每一个应用程序来说，都有一个ActivityThread来表示应用程序的主进程，而每一个ActivityThread都包含有一个ApplicationThread实例，它是一个Binder对象，负责和其它进程进行通信。</p>\n<p>下面简要总结一下启动的过程：</p>\n<ul>\n<li>Step 1. 无论是通过Launcher来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都通过Binder进程间通信进入到ActivityManagerService进程中，并且调用ActivityManagerService.startActivity接口；</li>\n<li>Step 2. ActivityManagerService调用ActivityStack.startActivityMayWait来做准备要启动的Activity的相关信息；</li>\n<li>Step 3. ActivityStack通知ApplicationThread要进行Activity启动调度了，这里的ApplicationThread代表的是调用ActivityManagerService.startActivity接口的进程，对于通过点击应用程序图标的情景来说，这个进程就是Launcher了，而对于通过在Activity内部调用startActivity的情景来说，这个进程就是这个Activity所在的进程了；</li>\n<li>Step 4. ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入到ActivityManagerService进程中，看看是否需要创建新的进程来启动Activity；</li>\n<li>Step 5. 对于通过点击应用程序图标来启动Activity的情景来说，ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程，而对于通过在Activity内部调用startActivity来启动新的Activity来说，这一步是不需要执行的，因为新的Activity就在原来的Activity所在的进程中进行启动；</li>\n<li>Step 6. ActivityManagerServic调用ApplicationThread.scheduleLaunchActivity接口，通知相应的进程执行启动Activity的操作；</li>\n<li>Step 7. ApplicationThread把这个启动Activity的操作转发给ActivityThread，ActivityThread通过ClassLoader导入相应的Activity类，然后把它启动起来。</li>\n</ul>\n<h3 id=\"补充，通过Launcher启动Activity\"><a href=\"#补充，通过Launcher启动Activity\" class=\"headerlink\" title=\"补充，通过Launcher启动Activity\"></a>补充，通过Launcher启动Activity</h3><p>Android的Launcher本身也是一个应用程序，点击应用图标，调用的方法还是Activity.startActivity()。与之前分析的不同之处是在ActivityStackSupervisor.startSpecificActivityLocked()方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) &#123;</div><div class=\"line\">    <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">            r.info.applicationInfo.uid, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    r.task.stack.setLaunchTime(r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//区别在这里，Launcher启动方式，app为null，应用内启动app不为null</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class=\"number\">0</span></div><div class=\"line\">                    || !<span class=\"string\">\"android\"</span>.equals(r.info.packageName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't add this if it is a platform component that is marked</span></div><div class=\"line\">                <span class=\"comment\">// to run in multiple processes, because this is actually</span></div><div class=\"line\">                <span class=\"comment\">// part of the framework so doesn't make sense to track as a</span></div><div class=\"line\">                <span class=\"comment\">// separate apk in the process.</span></div><div class=\"line\">                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</div><div class=\"line\">                        mService.mProcessStats);</div><div class=\"line\">            &#125;</div><div class=\"line\">            realStartActivityLocked(r, app, andResume, checkConfig);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                    + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">          <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">        <span class=\"comment\">// restart the application.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//所以要执行ActivityServiceManager的去开启一个新的进程</span></div><div class=\"line\">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">            <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>每一个应用程序都有自己的uid，uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。当然，我们可以配置两个应用程序具有相同的uid和package，或者在AndroidManifest.xml 配置文件的application标签或者activity标签中显式指定相同的process属性值，这样，不同的Activity可以运行在不同的进程中。</p>\n</blockquote>\n<p>mService.startProcessLocked()方法最终会调用到下面的代码去开启新的进程<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                app.info.dataDir, entryPointArgs);</div></pre></td></tr></table></figure></p>\n<p>新的进程会导入android.app.ActivityThread 类，并且执行它的main方法，这个main方法其实就是一个应用进程的入口方法。这就是为什么我们前面说每一个应用程序都有一个ActivityThread实例来对应的原因。</p>\n<p>在main方法中，调用了自身的attach方法，在attach方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mgr.attachApplication(mAppThread);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在ActivityManagerService的attachApplication()方法中又调用了ttachApplicationLocked()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> pid) &#123;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\">    <span class=\"comment\">// See if the top visible activity is waiting to run in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (normalMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class=\"line\">                didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown launching activities in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Find any services that should be running in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= mServices.attachApplicationLocked(app, processName);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown starting services in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check if a next-broadcast receiver is in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= sendPendingBroadcastsLocked(app);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// If the app died trying to launch the receiver we declare it 'bad'</span></div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown dispatching broadcasts in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div></pre></td></tr></table></figure></p>\n<p>这个方法中最终调用了ActivityStackSupervisor类的attachApplicationLocked()方法，而attachApplicationLocked()方法又调用了realStartActivityLocked()方法。</p>\n<p>后面的过程就基本与普通Activity启动模式一样了。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/18154335\" target=\"_blank\" rel=\"external\">Android源码分析-Activity的启动过程</a></p>\n<p>罗老师的，<a href=\"http://blog.csdn.net/luoshengyang/article/details/6685853\" target=\"_blank\" rel=\"external\">Android应用程序的Activity启动过程简要介绍和学习计划</a>和 <a href=\"http://blog.csdn.net/luoshengyang/article/details/6689748\" target=\"_blank\" rel=\"external\">Android应用程序启动过程源代码分析</a></p>\n<p><a href=\"http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287\" target=\"_blank\" rel=\"external\">【凯子哥带你学Framework】Activity启动过程全解析</a></p>\n<p><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-%E8%A7%A3%E8%AF%BBams%E8%BF%9C%E7%AB%AF%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Aactivity%E7%9A%84%E5%90%AF%E5%8A%A8/\" target=\"_blank\" rel=\"external\">Android系统篇之—-解读AMS远端服务调用机制以及Activity的启动流程</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/02/activity-start-process/\">http://agehua.github.io/2017/08/02/activity-start-process/</a></p>\n","readingTime":{"text":"13 min read","minutes":12.095,"time":725700,"words":2419},"excerpt":"<h2 id=\"Activity启动流程分析\"><a href=\"#Activity启动流程分析\" class=\"headerlink\" title=\"Activity启动流程分析\"></a>Activity启动流程分析</h2><p>本文主要介绍Activity的启动过程和过程中主要涉及的类。如果你跟随上一篇文章，成功编译了Android源码，可以动手跟本篇文章一步一步调试分析整个启动过程。没有编译源码，也可以看看<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/\">android.googlesource</a>，这里也有源码。</p>\n<h3 id=\"主要对象功能介绍\"><a href=\"#主要对象功能介绍\" class=\"headerlink\" title=\"主要对象功能介绍\"></a>主要对象功能介绍</h3><h4 id=\"zygote进程和SystemServer进程\"><a href=\"#zygote进程和SystemServer进程\" class=\"headerlink\" title=\"zygote进程和SystemServer进程\"></a>zygote进程和SystemServer进程</h4><p>android是基于Linux系统的，而在linux中，所有的进程都是由init进程直接或者是间接fork出来的，<strong>zygote</strong> 进程也不例外。</p>\n<blockquote>\n<p>每一个App其实都是</p>\n<ul>\n<li>一个单独的dalvik虚拟机</li>\n<li>一个单独的进程</li>\n</ul>\n</blockquote>\n<p>Android系统开启新进程的方式，是通过fork第一个<strong>zygote</strong> 进程实现的。所以说，除了第一个zygote进程，其他应用所在的进程都是zygote的子进程。<br>","more":"</p>\n<p><strong>SystemServer</strong> 也是一个进程，而且是由zygote进程fork出来的。<br>为什么说SystemServer非常重要呢？因为系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService等等。</p>\n<blockquote>\n<p>我们的App和AMS(SystemServer进程)还有zygote进程分属于三个独立的进程，他们之间如何通信呢？<br>App与AMS通过Binder进行IPC通信，AMS(SystemServer进程)与zygote通过Socket进行IPC通信。</p>\n</blockquote>\n<h4 id=\"与Activity启动有关的类\"><a href=\"#与Activity启动有关的类\" class=\"headerlink\" title=\"与Activity启动有关的类\"></a>与Activity启动有关的类</h4><p>我们下面的文章将围绕着这几个类进行介绍。可能你第一次看的时候，印象不深，不过没关系，当你跟随者我读完这篇文章的时候，相信那时候你会对这些类更加的熟悉和深刻。</p>\n<ul>\n<li><p><strong>ActivityManagerServices</strong>，简称AMS，服务端对象，负责系统中所有Activity的生命周期，查看源码，<a href=\"https://android.googlesource.com/platform/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java\">点击这里</a></p>\n</li>\n<li><p><strong>ActivityThread</strong>，App的真正入口。当开启App之后，会调用main()开始运行，开启消息循环队列，这就是传说中的UI线程或者叫主线程。与ActivityManagerServices配合，一起完成Activity的管理工作</p>\n</li>\n<li><p><strong>ApplicationThread</strong>，用来实现ActivityManagerService与ActivityThread之间的交互。在ActivityManagerService需要管理相关Application中的Activity的生命周期时，通过ApplicationThread的代理对象与ActivityThread通讯。</p>\n</li>\n<li><p><strong>ApplicationThreadProxy</strong>，是ApplicationThread在服务器端的代理，负责和客户端的ApplicationThread通讯。AMS就是通过该代理与ActivityThread进行通信的。</p>\n</li>\n<li><p><strong>Instrumentation</strong>，每一个应用程序只有一个Instrumentation对象，每个Activity内都有一个对该对象的引用。Instrumentation可以理解为应用进程的管家，ActivityThread要创建或暂停某个Activity时，都需要通过Instrumentation来进行具体的操作。</p>\n</li>\n<li><p><strong>ActivityStack</strong>，Activity在AMS的栈管理，用来记录已经启动的Activity的先后关系，状态信息等。通过ActivityStack决定是否需要启动新的进程。</p>\n</li>\n<li><p><strong>ActivityRecord</strong>，ActivityStack的管理对象，每个Activity在AMS对应一个ActivityRecord，来记录Activity的状态以及其他的管理信息，比如在哪进程中ProcessState，当前的状态CurentState等。其实就是服务器端的Activity对象的映像。</p>\n</li>\n<li><p><strong>TaskRecord</strong>，AMS抽象出来的一个“任务”的概念，是记录ActivityRecord的栈，一个“Task”包含若干个ActivityRecord。AMS用TaskRecord确保Activity启动和退出的顺序。如果你清楚Activity的4种launchMode，那么对这个概念应该不陌生。</p>\n</li>\n<li><p><strong>ProcessRecord</strong>，这个类记录的是一个进程中的信息，因为一个应用中可能会包含多个进程。</p>\n</li>\n</ul>\n<h4 id=\"App程序的入口\"><a href=\"#App程序的入口\" class=\"headerlink\" title=\"App程序的入口\"></a>App程序的入口</h4><p>我们一般在启动Activity的时候都是使用系统提供的方法Activity.startActivity()操作的，本文就在此方法上分析整个过程:</p>\n<blockquote>\n<p>这里我的app进程是：foo.bar.multi，后面深入源码后会在系统进程system_process和app进程之间切换。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.startActivity(intent, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//options这里为null</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(@RequiresPermission Intent intent, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        @Nullable Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//这里mParent不为空</span></div><div class=\"line\">        options = transferSpringboardActivityOptions(options);</div><div class=\"line\">        Instrumentation.ActivityResult ar =</div><div class=\"line\">            mInstrumentation.execStartActivity(</div><div class=\"line\">                <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, <span class=\"keyword\">this</span>,</div><div class=\"line\">                intent, requestCode, options);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mMainThread.sendActivityResult(</div><div class=\"line\">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class=\"line\">                ar.getResultData());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 代码省略....</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 代码省略....</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码可以看到，这里用到了mMainThread变量去执行的操作，再看看这个变量，它是ActivityThread的一个实例。ActivityThread是一个应用非常关键的一个类，首先它是一个应用的主线程，其次就是他才是一个程序的入口（main方法）的地方：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>没有Android源码的，可以看这里：<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java\">android.googlesource</a>。后面介绍这个入口main方法什么时候执行。</p>\n<p>上面的mInstrumentation对象，是在Activity的attach()方法中被赋值的</p>\n<h4 id=\"Instrumentation是什么？和ActivityThread是什么关系？\"><a href=\"#Instrumentation是什么？和ActivityThread是什么关系？\" class=\"headerlink\" title=\"Instrumentation是什么？和ActivityThread是什么关系？\"></a>Instrumentation是什么？和ActivityThread是什么关系？</h4><p>接着说上面的mInstrumentation.execStartActivity()方法，有三个同名的重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</div><div class=\"line\">          Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">          Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</div><div class=\"line\">         Context who, IBinder contextThread, IBinder token, String target,</div><div class=\"line\">         Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</div><div class=\"line\">         Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">         Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options, UserHandle user)</span></span></div></pre></td></tr></table></figure></p>\n<p>考验眼力的时候到了，仔细看下，上面的mInstrumentation.execStartActivity()调用的其实是第一个重载方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">        <span class=\"comment\">//...ignore some code...</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        intent.prepareToLeaveProcess();</div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivity(whoThread, who.getBasePackageName(), intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到execStartActivity()方法，调用了ActivityManagerNative的startActivity()方法，看到这个ActivityManagerNative类有没有感觉和之前一篇文章，<a href=\"https://agehua.github.io/2017/07/10/android-binder-principle2/\">Android Binder机制分析（二）</a>里的ServiceManagerNative有点类似，这里涉及到的是系统服务间的Binder机制，不了解的同学可以看看这篇文章。</p>\n<p>稍后分析ActivityManagerNative，这里简单介绍下Instrumentation类。</p>\n<p>Instrumentation意为“仪器”。每个Activity都持有Instrumentation对象的一个引用，但是整个进程只会存在一个Instrumentation对象。</p>\n<p>Instrumentation这个类里面的方法大多数和Application和Activity有关，可以说是对Application和Activity初始化和生命周期的工具类。</p>\n<p>举个例子，callActivityOnCreate()<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    prePerformCreate(activity);</div><div class=\"line\">    activity.performCreate(icicle);</div><div class=\"line\">    postPerformCreate(activity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对activity.performCreate(icicle);这一行代码熟悉吗？这一行里面就调用了传说中的Activity的入口函数onCreate()，不信？接着往下看Activity.performCreate()<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    onCreate(icicle);</div><div class=\"line\">    mActivityTransitionState.readState(icicle);</div><div class=\"line\">    performCreateCommon();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>确实，onCreate在这里调用了。但是有一件事情必须说清楚，那就是这个Instrumentation类这么重要，为啥我在开发的过程中，没有发现他的踪迹呢？</p>\n<p>是的，Instrumentation这个类很重要，对Activity生命周期方法的调用根本就离不开他，但他只负责Activity的内部管理。<br>外部想调整Activity的状态，必须通过ActivityThread。</p>\n<p>ActivityThread你都没听说过？那你肯定听说过传说中的UI线程吧？是的，这就是UI线程。我们前面说过，App和AMS是通过Binder传递信息的，那么ActivityThread就是专门与AMS的外交工作的。Instrumentation相当于老板娘，处理家务，很少露面。ActivityThread是老板，处理对外事务。</p>\n<p>所以说，AMS是董事会，负责指挥和调度的，ActivityThread是老板，虽然说家里的事自己说了算，但是需要听从AMS的指挥，而Instrumentation则是老板娘，负责家里的大事小事，但是一般不抛头露面，听一家之主ActivityThread的安排。</p>\n<h4 id=\"简介AMS和ActivityThread之间的Binder通信\"><a href=\"#简介AMS和ActivityThread之间的Binder通信\" class=\"headerlink\" title=\"简介AMS和ActivityThread之间的Binder通信\"></a>简介AMS和ActivityThread之间的Binder通信</h4><p>前面的两篇文章：<a href=\"https://agehua.github.io/2017/07/08/android-binder-principle/\">Android Binder机制分析（一）</a>和<a href=\"https://agehua.github.io/2017/07/10/android-binder-principle2/\">Android Binder机制分析（二）</a>。已经介绍了Android都是通过Binder机制调用远程的系统服务。这里在介绍下ActivityThread（App进程）是如何调用AMS服务的。</p>\n<p>前面我们说到，在调用Activity.startActivity()的时候，实际上调用的是：<br><strong>mInstrumentation.execStartActivity()</strong><br>这个方法里面调用的是：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">ActivityManagerNative.getDefault().startActivity()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>用鼠标定位一下，上面的startActivity()方法，会发现这个方法是IActivityManager接口里的方法。注意IActivityManager继承了IInterface接口，而这个接口就是AIDL接口类必须实现的接口。</p>\n</blockquote>\n<p>再看，ActivityManagerNative.getDefault()返回的就是ActivityManagerService的远程接口的本地代理，即ActivityManagerProxy。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//从类声明上，我们可以看到ActivityManagerNative是Binder的一个子类，而且实现了IActivityManager接口</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最终返回的还是一个ActivityManagerProxy对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里面的Binder类型的obj参数会作为ActivityManagerProxy的成员变量保存为mRemote成员变量，负责进行IPC通信</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实ActivityManagerNative类就是远端服务的中间者Stub类，其实名字不叫Stub罢了，以后其实只要看到是继承了Binder类和实现了AIDL接口类型的就是Stub类，不要关心类名了。看到他的asInterface方法的时候也是和之前的其他系统服务都是类似的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过单例模式获取一个IActivityManager对象，这个对象通过asInterface(b)获得</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">           &#125;</div><div class=\"line\">           IActivityManager am = asInterface(b);</div><div class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">               Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> am;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这里可以看到了，其实gDefalut借助Singleton实现的单例模式，而在内部可以看到先从ServiceManager中获取到AMS远端服务的Binder对象，然后使用asInterface方法转化成本地化对象（其实就是ActivityManagerProxy对象，这个对象是ActivityManagerNative的内部类）。然后我们在看看上面调用了startActivity方法，其实就是调用了ActivityManagerProxy对象的这个方法。</p>\n<p>在这里面做的事情就是IPC通信，利用Binder对象，调用transact()，把所有需要的参数封装成Parcel对象，向AMS发送数据进行通信。</p>\n<blockquote>\n<p>这个方法中添加一个断点，注意这里startActivity()是ActivityManagerProxy类的方法，这里的进程应该还是App进程：foo.bar.multi</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage, Intent intent,</div><div class=\"line\">        String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    Parcel reply = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">    data.writeStrongBinder(caller != <span class=\"keyword\">null</span> ? caller.asBinder() : <span class=\"keyword\">null</span>);</div><div class=\"line\">    data.writeString(callingPackage);</div><div class=\"line\">    intent.writeToParcel(data, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"comment\">//...省略部分代码</span></div><div class=\"line\">    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">    reply.readException();</div><div class=\"line\">    <span class=\"keyword\">int</span> result = reply.readInt();</div><div class=\"line\">    reply.recycle();</div><div class=\"line\">    data.recycle();</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>注意，这里先别放开断点\n</code></pre><blockquote>\n<p>Binder本质上只是一种底层通信方式，和具体服务没有关系。为了提供具体服务，Server必须提供一套接口函数以便Client通过远程访问使用各种服务。这时通常采用Proxy设计模式：将接口函数定义在一个抽象类中，Server和Client都会以该抽象类为基类实现所有接口函数，所不同的是Server端是真正的功能实现，而Client端是对这些函数远程调用请求的包装。</p>\n</blockquote>\n<p>客户端：ActivityManagerProxy =====&gt;Binder驱动=====&gt; ActivityManagerService：服务器</p>\n<p>Binder只能传递数据，并不知道是要调用ActivityManagerServices的哪个方法，所以在数据中会添加方法的唯一标识码，比如前面的startActivity()方法中的标识：START_ACTIVITY_TRANSACTION。</p>\n<p>在远端服务调用了transact()方法后，即mRemote.transact()，会转接到远端服务中间者ActivityManagerNative的onTransact方法中，找到对应的标识码：</p>\n<blockquote>\n<p> 注意这里的接收者ActivityManagerNative的onTransact方法是在system_process进程中，想要继续debug调试的的话，需要在monitor中选中这个进程，然后再在下面的方法中添加断点。最后放开上面添加的断点。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">        <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;   <span class=\"comment\">//最好在case方法里面添加断点，避免受其他系统发送的消息影响</span></div><div class=\"line\">        data.enforceInterface(IActivityManager.descriptor);</div><div class=\"line\">        IBinder b = data.readStrongBinder();</div><div class=\"line\">        IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">        String callingPackage = data.readString();</div><div class=\"line\">        Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">        String resolvedType = data.readString();</div><div class=\"line\">        IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">        String resultWho = data.readString();</div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode = data.readInt();</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags = data.readInt();</div><div class=\"line\">        ProfilerInfo profilerInfo = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                ? ProfilerInfo.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">        Bundle options = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                ? Bundle.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> result = startActivity(app, callingPackage, intent, resolvedType,</div><div class=\"line\">                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);</div><div class=\"line\">        reply.writeNoException();</div><div class=\"line\">        reply.writeInt(result);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的startActivity方法，是在IActivityManager接口中定义的，跟ActivityManagerProxy没有关系了，是由远端服务来实现的，这里我们可以猜想应该是叫做ActivityManagerService中，这个类的源代码可以在<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/am/ActivityManagerService.java\">android.googlesource</a>里找到：</p>\n<p>这个类里有三个重载的startActivity()方法，仔细看，对应的应该是第三个方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, ActivityStackSupervisor.ActivityContainer container)</span></div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IBinder whoThread, String callingPackage,</div><div class=\"line\">        Intent intent, String resolvedType, Bundle bOptions)</span></div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span></span></div></pre></td></tr></table></figure></p>\n<p>这个方法直接调用了startActivityAsUser()方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityAsUser</span><span class=\"params\">(IApplicationThread caller, String callingPackage,</div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">        <span class=\"keyword\">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class=\"keyword\">int</span> userId)</span> </span>&#123;</div><div class=\"line\">    enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</div><div class=\"line\">            userId, <span class=\"keyword\">false</span>, ALLOW_FULL_ONLY, <span class=\"string\">\"startActivity\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Switch to user app stacks here.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mActivityStarter.startActivityMayWait(caller, -<span class=\"number\">1</span>, callingPackage, intent,</div><div class=\"line\">            resolvedType, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">            profilerInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, bOptions, <span class=\"keyword\">false</span>, userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的mActivityStarter是在ActivityManagerService创建的时候初始化的。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerService</span><span class=\"params\">(Context systemContext)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...省略代码</span></div><div class=\"line\">    mStackSupervisor = <span class=\"keyword\">new</span> ActivityStackSupervisor(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mActivityStarter = <span class=\"keyword\">new</span> ActivityStarter(<span class=\"keyword\">this</span>, mStackSupervisor);</div><div class=\"line\">    <span class=\"comment\">//...省略代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面就是ActiviStarter、ActivityStack和ActivityStackSupervisor三个类之间方法调来调去了，这里为了节省篇幅就不再贴代码了，有毅力的同学可以每个方法都打上一个断点，走一遍：</p>\n<p>ActivityStarter.startActivityMayWait()-&gt; ActivityStarter.startActivityLocked()-&gt; ActivityStarter.startActivityUnchecked()-&gt; ActivityStackSupervisor.resumeFocusedStackTopActivityLocked()</p>\n<p>再往后都是ActivityStackSupervisor类的方法，调用：</p>\n<p>从resumeFocusedStackTopActivityLocked()-&gt; resumeFocusedStackTopActivityLocked()-&gt; resumeTopActivityUncheckedLocked()<br>-&gt; resumeTopActivityInnerLocked()-&gt; startSpecificActivityLocked()-&gt; realStartActivityLocked()</p>\n<h4 id=\"IApplicationThread接口简介\"><a href=\"#IApplicationThread接口简介\" class=\"headerlink\" title=\"IApplicationThread接口简介\"></a>IApplicationThread接口简介</h4><p>重点在最后的方法里realStartActivityLocked()调用了，<strong>app.thread.scheduleLaunchActivity()</strong>方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r, ProcessRecord app,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> ActivityStack stack = task.stack;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//...代码省略</span></div><div class=\"line\"></div><div class=\"line\">        app.forceProcessStateUpTo(mService.mTopProcessState);</div><div class=\"line\">        app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                System.identityHashCode(r), r.info, <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                <span class=\"keyword\">new</span> Configuration(task.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class=\"line\">                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class=\"line\">                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//...代码省略</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>scheduleLaunchActivity()方法是IApplicationThread接口里面的方法，但是是由那个类实现的呢，这里就需要猜了，哈哈</p>\n<p>下面几个类都实现了相同的接口IApplicationThread：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">IInterface</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>IApplicationThread的源码在这里：<a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/IApplicationThread.java\">android.googlesource</a></p>\n<blockquote>\n<p>IApplicationThread是实现了IInterface接口的，说明也是用的Binder远程通讯，这里的当前进程是system_process，<br>本地代理类应该是ApplicationThreadProxy类，而这个类是内部类，在ApplicationThreadNative类中</p>\n</blockquote>\n<p>来看ApplicationThreadProxy类的scheduleLaunchActivity()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">        <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">    Parcel data = Parcel.obtain();</div><div class=\"line\">    data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....写入数据</span></div><div class=\"line\"></div><div class=\"line\">    mRemote.transact(SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">            IBinder.FLAG_ONEWAY);</div><div class=\"line\">    data.recycle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>记住这个标识，SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION，在ApplicationThreadNative类的onTransact()方法里找：</p>\n<blockquote>\n<p>这里注意，调用完mRemote.transact()方法，回调的onTransact()方法已经不再system_process进程中了，而是到了App进程：foo.bar.multi</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//onTransact()方法里：</span></div><div class=\"line\"><span class=\"keyword\">case</span> SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:</div><div class=\"line\">    &#123;</div><div class=\"line\">        data.enforceInterface(IApplicationThread.descriptor);</div><div class=\"line\">        <span class=\"comment\">// 取出数据</span></div><div class=\"line\">        scheduleLaunchActivity(intent, b, ident, info, curConfig, overrideConfig, compatInfo,</div><div class=\"line\">                referrer, voiceInteractor, procState, state, persistentState, ri, pi,</div><div class=\"line\">                notResumed, isForward, profilerInfo);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>取出各种数据，在调用scheduleLaunchActivity()方法。</p>\n<blockquote>\n<p>这里的cheduleLaunchActivity()在哪里实现？感觉应该在ApplicationThreadService类里。但是并没有这个类。其实应该是ApplicationThread类，不叫XXXService了，这个类实现了ApplicationThreadNative接口，同时它是ActivityThread的内部类</p>\n</blockquote>\n<p>到这里总结下IApplicationThread接口的Binder机制：</p>\n<p>客户端：ApplicationThread &lt;=====Binder驱动&lt;===== ApplicationThreadProxy：服务器<br>对比之前的IActivityManager：<br>客户端：ActivityManagerProxy =====&gt;Binder驱动=====&gt; ActivityManagerService：服务器<br>有没有发现<strong>Binder只能单向传递</strong>。</p>\n<p>这两次的Binder通信如下图所示：<br><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/ams_binder_process.png\" alt=\"\"></p>\n<p>再来看ApplicationThread类的scheduleLaunchActivity()方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use token to identify this activity without having to send the</span></div><div class=\"line\"><span class=\"comment\">// activity itself back to the activity manager. (matters more with ipc)</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">        ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class=\"line\">        CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class=\"line\">        <span class=\"keyword\">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class=\"line\">        List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward, ProfilerInfo profilerInfo)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    updateProcessState(procState, <span class=\"keyword\">false</span>);</div><div class=\"line\">    ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\"></div><div class=\"line\">    r.token = token;</div><div class=\"line\">    r.ident = ident;</div><div class=\"line\">    r.intent = intent;</div><div class=\"line\">    r.referrer = referrer;</div><div class=\"line\">    r.voiceInteractor = voiceInteractor;</div><div class=\"line\">    r.activityInfo = info;</div><div class=\"line\">    r.compatInfo = compatInfo;</div><div class=\"line\">    r.state = state;</div><div class=\"line\">    r.persistentState = persistentState;</div><div class=\"line\"></div><div class=\"line\">    r.pendingResults = pendingResults;</div><div class=\"line\">    r.pendingIntents = pendingNewIntents;</div><div class=\"line\"></div><div class=\"line\">    r.startsNotResumed = notResumed;</div><div class=\"line\">    r.isForward = isForward;</div><div class=\"line\"></div><div class=\"line\">    r.profilerInfo = profilerInfo;</div><div class=\"line\"></div><div class=\"line\">    r.overrideConfig = overrideConfig;</div><div class=\"line\">    updatePendingConfiguration(curConfig);</div><div class=\"line\"></div><div class=\"line\">    sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在继续看接收消息的地方，在H类里（H类继承了Handler），<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">    <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"activityStart\"</span>);</div><div class=\"line\">            <span class=\"keyword\">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class=\"line\"></div><div class=\"line\">            r.packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                  r.activityInfo.applicationInfo, r.compatInfo);</div><div class=\"line\">            handleLaunchActivity(r, <span class=\"keyword\">null</span>, <span class=\"string\">\"LAUNCH_ACTIVITY\"</span>);</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">        &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//....</span></div></pre></td></tr></table></figure></p>\n<p>handleLaunchActivity()-&gt;performLaunchActivity()。</p>\n<p>performLaunchActivity()通过ClassLoader导入相应的Activity类，然后把它启动起来，注意看代码里的注释。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//通过ClassLoader将foo.bar.multi.XXXActivity类加载进来：</span></div><div class=\"line\">    java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class=\"line\">    activity = mInstrumentation.newActivity(</div><div class=\"line\">            cl, component.getClassName(), r.intent);</div><div class=\"line\">    StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class=\"line\">    r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">    r.intent.prepareToEnterProcess();</div><div class=\"line\">    <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        r.state.setClassLoader(cl);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Unable to instantiate activity \"</span> + component</div><div class=\"line\">            + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//创建Application对象，这是根据AndroidManifest.xml配置文件中的Application标签的信息来创建的</span></div><div class=\"line\">    Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//代码主要创建Activity的上下文信息，并通过attach方法将这些上下文信息设置到XXXActivity中去：</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">      r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">      r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class=\"line\">      r.referrer, r.voiceInteractor, window);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//调用activity的onCreate函数，上面提到过这个方法：</span></div><div class=\"line\">    mInstrumentation.callActivityOnCreate(activity, r.state);</div></pre></td></tr></table></figure></p>\n<p>无论是通过点击应用程序图标来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都要借助于应用程序框架层的ActivityManagerService服务进程。在Android应用程序框架层中，ActivityManagerService是一个非常重要的接口，它不但负责启动Activity和Service，还负责管理Activity和Service。</p>\n<p>Android应用程序框架层中的ActivityManagerService启动Activity的过程大致如下图所示：</p>\n<p><img src=\"http://oui2w5whj.bkt.clouddn.com/blogimages/2017/activity-start-process.png\" alt=\"图片来自：http://blog.csdn.net/luoshengyang/article/details/6685853\"></p>\n<p>在这个图中，ActivityManagerService和ActivityStack位于同一个进程中，而ApplicationThread和ActivityThread位于另一个进程中。其中，ActivityManagerService是负责管理Activity的生命周期的，ActivityManagerService还借助ActivityStack是来把所有的Activity按照后进先出的顺序放在一个堆栈中；对于每一个应用程序来说，都有一个ActivityThread来表示应用程序的主进程，而每一个ActivityThread都包含有一个ApplicationThread实例，它是一个Binder对象，负责和其它进程进行通信。</p>\n<p>下面简要总结一下启动的过程：</p>\n<ul>\n<li>Step 1. 无论是通过Launcher来启动Activity，还是通过Activity内部调用startActivity接口来启动新的Activity，都通过Binder进程间通信进入到ActivityManagerService进程中，并且调用ActivityManagerService.startActivity接口；</li>\n<li>Step 2. ActivityManagerService调用ActivityStack.startActivityMayWait来做准备要启动的Activity的相关信息；</li>\n<li>Step 3. ActivityStack通知ApplicationThread要进行Activity启动调度了，这里的ApplicationThread代表的是调用ActivityManagerService.startActivity接口的进程，对于通过点击应用程序图标的情景来说，这个进程就是Launcher了，而对于通过在Activity内部调用startActivity的情景来说，这个进程就是这个Activity所在的进程了；</li>\n<li>Step 4. ApplicationThread不执行真正的启动操作，它通过调用ActivityManagerService.activityPaused接口进入到ActivityManagerService进程中，看看是否需要创建新的进程来启动Activity；</li>\n<li>Step 5. 对于通过点击应用程序图标来启动Activity的情景来说，ActivityManagerService在这一步中，会调用startProcessLocked来创建一个新的进程，而对于通过在Activity内部调用startActivity来启动新的Activity来说，这一步是不需要执行的，因为新的Activity就在原来的Activity所在的进程中进行启动；</li>\n<li>Step 6. ActivityManagerServic调用ApplicationThread.scheduleLaunchActivity接口，通知相应的进程执行启动Activity的操作；</li>\n<li>Step 7. ApplicationThread把这个启动Activity的操作转发给ActivityThread，ActivityThread通过ClassLoader导入相应的Activity类，然后把它启动起来。</li>\n</ul>\n<h3 id=\"补充，通过Launcher启动Activity\"><a href=\"#补充，通过Launcher启动Activity\" class=\"headerlink\" title=\"补充，通过Launcher启动Activity\"></a>补充，通过Launcher启动Activity</h3><p>Android的Launcher本身也是一个应用程序，点击应用图标，调用的方法还是Activity.startActivity()。与之前分析的不同之处是在ActivityStackSupervisor.startSpecificActivityLocked()方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">            r.info.applicationInfo.uid, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    r.task.stack.setLaunchTime(r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//区别在这里，Launcher启动方式，app为null，应用内启动app不为null</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class=\"number\">0</span></div><div class=\"line\">                    || !<span class=\"string\">\"android\"</span>.equals(r.info.packageName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Don't add this if it is a platform component that is marked</span></div><div class=\"line\">                <span class=\"comment\">// to run in multiple processes, because this is actually</span></div><div class=\"line\">                <span class=\"comment\">// part of the framework so doesn't make sense to track as a</span></div><div class=\"line\">                <span class=\"comment\">// separate apk in the process.</span></div><div class=\"line\">                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</div><div class=\"line\">                        mService.mProcessStats);</div><div class=\"line\">            &#125;</div><div class=\"line\">            realStartActivityLocked(r, app, andResume, checkConfig);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                    + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">          <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">        <span class=\"comment\">// restart the application.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//所以要执行ActivityServiceManager的去开启一个新的进程</span></div><div class=\"line\">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">            <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>每一个应用程序都有自己的uid，uid + process的组合就可以为每一个应用程序创建一个ProcessRecord。当然，我们可以配置两个应用程序具有相同的uid和package，或者在AndroidManifest.xml 配置文件的application标签或者activity标签中显式指定相同的process属性值，这样，不同的Activity可以运行在不同的进程中。</p>\n</blockquote>\n<p>mService.startProcessLocked()方法最终会调用到下面的代码去开启新的进程<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Process.ProcessStartResult startResult = Process.start(entryPoint,</div><div class=\"line\">                app.processName, uid, uid, gids, debugFlags, mountExternal,</div><div class=\"line\">                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,</div><div class=\"line\">                app.info.dataDir, entryPointArgs);</div></pre></td></tr></table></figure></p>\n<p>新的进程会导入android.app.ActivityThread 类，并且执行它的main方法，这个main方法其实就是一个应用进程的入口方法。这就是为什么我们前面说每一个应用程序都有一个ActivityThread实例来对应的原因。</p>\n<p>在main方法中，调用了自身的attach方法，在attach方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"keyword\">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mgr.attachApplication(mAppThread);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> ex.rethrowFromSystemServer();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在ActivityManagerService的attachApplication()方法中又调用了ttachApplicationLocked()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</div><div class=\"line\">        <span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div><div class=\"line\">    <span class=\"comment\">// See if the top visible activity is waiting to run in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (normalMode) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class=\"line\">                didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown launching activities in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Find any services that should be running in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= mServices.attachApplicationLocked(app, processName);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown starting services in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check if a next-broadcast receiver is in this process...</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            didSomething |= sendPendingBroadcastsLocked(app);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// If the app died trying to launch the receiver we declare it 'bad'</span></div><div class=\"line\">            Slog.wtf(TAG, <span class=\"string\">\"Exception thrown dispatching broadcasts in \"</span> + app, e);</div><div class=\"line\">            badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...代码省略</span></div></pre></td></tr></table></figure></p>\n<p>这个方法中最终调用了ActivityStackSupervisor类的attachApplicationLocked()方法，而attachApplicationLocked()方法又调用了realStartActivityLocked()方法。</p>\n<p>后面的过程就基本与普通Activity启动模式一样了。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/18154335\">Android源码分析-Activity的启动过程</a></p>\n<p>罗老师的，<a href=\"http://blog.csdn.net/luoshengyang/article/details/6685853\">Android应用程序的Activity启动过程简要介绍和学习计划</a>和 <a href=\"http://blog.csdn.net/luoshengyang/article/details/6689748\">Android应用程序启动过程源代码分析</a></p>\n<p><a href=\"http://blog.csdn.net/zhaokaiqiang1992/article/details/49428287\">【凯子哥带你学Framework】Activity启动过程全解析</a></p>\n<p><a href=\"http://www.wjdiankong.cn/android%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B-%E8%A7%A3%E8%AF%BBams%E8%BF%9C%E7%AB%AF%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Aactivity%E7%9A%84%E5%90%AF%E5%8A%A8/\">Android系统篇之—-解读AMS远端服务调用机制以及Activity的启动流程</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/02/activity-start-process/\">http://agehua.github.io/2017/08/02/activity-start-process/</a></p>"},{"layout":"post","title":"Android面试题积累","keywords":"Basic Knowledge, Interview","banner":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg","toc":true,"_content":"\n### 1、Activity面试题\n\n1、Activity是什么\nActivity是四大组件之一，它提供一个界面让用户点击和各种滑动操作，这就是Activity\n\n2、Activity四种状态\nruning\npaused\nstopped\nkilled\n\n3、Activity生命周期\nonCreate()\nonStart()\nonResume()\nonPause()\nonStop()\nonDestroy()\nonRestart()\n\n4、进程的优先级\n空进程\n后台进程\n服务进程\n可见进程\n前台进程\n\n5、Activity任务栈\n先进后出\n<!--more-->\n6、Activity启动模式\nstandard\nsingletop\nsingletask: 能够保证Activity A在栈中只有一个实例，这个栈也允许存在其他的实例.\n> 特别需要注意的是使用startActivityForResult方法的时候，根据startActivityForResult的api说明: if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result\n意思就是使用startActivityForResult方法启动一个singleTask的Activity，该Activity不会启动，会收到一个RESULT_CANCELED结果\n\nsingleinstance: singleInstance要求activity的实例不仅只有一个，并且整个task中只有一个activity实例，而singleTask所在的栈中允许存在其他activity的实例。\n> singleInstance的activity也具有上面的特性，此外，activity设置了singleInstance，那么无论被启动的activity有没有设置singleInstance，都无法获取返回值\n\n7、scheme跳转协议\nAndroid中的scheme是一种页面内跳转协议，通过定义自己的scheme协议，可以跳转到app中的各个页面\n服务器可以定制化告诉app跳转哪个页面\nApp可以通过跳转到另一个App页面\n可以通过H5页面跳转页面（DeepLink）：\n~~~\n<a href=\"[scheme]://[host]/[path]?[query]\">启动应用程序</a>\n~~~\n~~~ Java\n<intent-filter>\n    <data android:scheme=\"http\" />\n    <!-- or you can use deep linking like  -->\n    <data android:scheme=\"http\" android:host=\"xyz.abc.com\"/>\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n</intent-filter>\n~~~\n\n### 2、Fragment面试题\n\n1、Fragment为什么被称为第五大组件\nFragment比Activity更节省内存，其切换模式也更加舒适，使用频率不低于四大组件，且有自己的生命周期，而且必须依附于Activity\n\n2、Activity创建Fragment的方式\n静态创建：在activity布局文件里声明fragment，\nactivity_main.xml中声明：\n<fragment\n    android:name=\"com.example.myfragment.MyFragment\"\n    android:id=\"@+id/myfragment_1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n/>\n\n动态创建：通过java代码将fragment添加到已存的ViewGroup中\nfragment = new MyFragment();\nfragmentStack.push(fragment);\ntransaction = manager.beginTransaction();\ntransaction.add(R.id.fragments, fragment);\ntransaction.commit();\n\n\n3、FragmentPageAdapter和FragmentPageStateAdapter的区别\nFragmentPageAdapter在每次切换页面的的时候，是将Fragment进行分离，适合页面较少的Fragment使用以保存一些内存，对系统内存不会多大影响\nFragmentPageStateAdapter在每次切换页面的时候，是将Fragment进行回收，适合页面较多的Fragment使用，这样就不会消耗更多的内存\n\n4、Fragment生命周期\nonAttach()\nonCreate()\nonCreateView()\nonActivityCreated()\nonStart()\nonResume()\nonPause()\nonStop()\nonDestroyView()\nonDestroy()\nonDetach()\n\n5、Fragment的通信\nFragment调用Activity中的方法：getActivity\nActivity调用Fragment中的方法：接口回调\nFragment调用Fragment中的方法：FragmentManager.findFragmentById\n\n6、Fragment的replace、add、remove方法\nreplace：替代Fragment的栈顶页面\nadd：添加Fragment到栈顶页面\nremove：移除Fragment栈顶页面\n\n\n### 3、Service面试题\n\n1、Service是什么\nService是四大组件之一，它可以在后台执行长时间运行操作而没有用户界面的应用组件\n\n2、Service和Thread的区别\nService是安卓中系统的组件，它运行在独立进程的主线程中，不可以执行耗时操作，超时会有ANR异常。Thread是程序执行的最小单元，分配CPU的基本单位，可以开启子线程执行耗时操作\nService在不同Activity中可以获取自身实例，可以方便的对Service进行操作。Thread在不同的Activity中难以获取自身实例，如果Activity被销毁，Thread实例就很难再获取得到\n\n3、Service启动方式\nstartService\nbindService\n\n4、Service生命周期\nstartService\nonCreate()\nonStartCommand()\nonDestroy()\nbindService\nonCreate()\nonBind()\nonUnbind()\nonDestroy()\n\n\n### 4、Broadcast Receiver面试题\n\n1、Broadcast Receiver是什么\nBroadcast是四大组件之一，是一种广泛运用在应用程序之间传输信息的机制，通过发送Intent来传送我们的数据\n\n2、Broadcast Receiver的使用场景\n同一App具有多个进程的不同组件之间的消息通信\n不同App之间的组件之间的消息通信\n\n3、Broadcast Receiver的种类\n普通广播\n有序广播 Context.sendOrderedBroadcast\n本地广播 LocalBroadcastManager.getInstance(context).sendBroadcast(intent) 除了能解决BroadcastReceiver进程间安全性问题外，相对Context操作的BroadcastReceiver而言还具有更高的运行效率。\nSticky广播 的sendStickyBroadcast(Intent)接口发送，需要添加权限<uses-permission android:name=\"android.permission.BROADCAST_STICKY\"/>\n也可以通过Context的removeStickyBroadcast(Intent intent)接口移除缓存的粘性广播。\nsticky有序广播 StickyOrderedBroadcast\n\n\n4、Broadcast Receiver的实现\n静态注册：注册后一直运行，尽管Activity、进程、App被杀死还是可以接收到广播\n动态注册：跟随Activity的生命周期\n\n5、Broadcast Receiver实现机制\n自定义广播类继承BroadcastReceiver，复写onReceiver()\n通过Binder机制向AMS进行注册广播\n广播发送者通过Binder机制向AMS发送广播\nAMS查找符合相应条件的广播发送到BroadcastReceiver相应的循环队列中\n消息队列执行拿到广播，回调BroadcastReceiver的onReceiver()\n\n6、LocalBroadcastManager特点\n本地广播只能在自身App内传播，不必担心泄漏隐私数据\n本地广播不允许其他App对你的App发送该广播，不必担心安全漏洞被利用\n本地广播比全局广播更高效\n以上三点都是源于其内部是用Handler实现的\n\n\n### 5、WebView面试题\n\n1、WebView安全漏洞\nAPI16之前存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java反射机制利用该漏洞执行任意Java对象的方法\n\n2、WebView销毁步骤\nWebView在其他容器上时（如：LinearLayout），当销毁Activity时，需要在onDestroy()中先移除容器上的WebView，然后再将WebView.destroy()，这样就不会导致内存泄漏\n\n3、WebView的jsbridge\n客户端和服务端之间可以通过Javascript来互相调用各自的方法\n\n4、WebViewClient的onPageFinished\nWebViewClient的onPageFinished在每次完成页面的时候调用，但是遇到未加载完成的页面跳转其他页面时，就会一直调用，使用WebChromeClient.onProgressChanged可以替代\n\n5、WebView后台耗电\n在WebView加载页面的时候，会自动开启线程去加载，如果不很好的关闭这些线程，就会导致电量消耗加大，可以采用暴力的方法，直接在onDestroy方法中System.exit(0)结束当前正在运行中的java虚拟机\n\n6、WebView硬件加速\nAndroid3.0引入硬件加速，默认会开启，WebView在硬件加速的情况下滑动更加平滑，性能更加好，但是会出现白块或者页面闪烁的副作用，建议WebView暂时关闭硬件加速\n\n7、WebView内存泄漏\n由于WebView是依附于Activity的，Activity的生命周期和WebView启动的线程的生命周期是不一致的，这会导致WebView一直持有对这个Activity的引用而无法释放，解决方案如下\n独立进程，简单暴力，不过可能涉及到进程间通信（推荐）\n动态添加WebView，对传入WebView中使用的Context使用弱引用\n\n\n### 6、Binder面试题\n\n1、Linux内核的基本知识\n\n![](/images/blogimages/2017/binder-01.png)\n进程隔离/虚拟地址空间：进程间是不可以共享数据的，相当于被隔离，每个进程被分配到不同的虚拟地址中\n系统调用：Linux内核对应用有访问权限，用户只能在应用层通过系统调用，调用内核的某些程序\nbinder驱动：它负责各个用户的进程，通过binder通信内核来进行交互的模块\n\n而Binder，就是充当 连接 两个进程（内核空间）的通道。\n\n2、为什么使用Binder\n性能上，相比传统的Socket更加高效\n安全性高，支持协议双方互相校验\n\n3、Binder通信模型\n![](/images/blogimages/2017/binder-02.png)\n> 虚线表示并非直接交互\n\n说明1：Client进程、Server进程 & Service Manager 进程之间的交互都必须通过Binder驱动（使用 open 和 ioctl文件操作函数），而非直接交互\n\n原因：\n1. Client进程、Server进程 & Service Manager进程属于进程空间的用户空间，不可进行进程间交互\n2. Binder驱动 属于 进程空间的 内核空间，可进行进程间 & 进程内交互\n\n说明2： Binder驱动 & Service Manager进程 属于 Android基础架构（即系统已经实现好了）；而Client 进程 和 Server 进程 属于Android应用层（需要开发者自己实现）\n\n所以，在进行跨进程通信时，开发者只需自定义Client & Server 进程 并 显式使用上述3个步骤，最终借助 Android的基本架构功能就可完成进程间通信\n\n详细参考这篇博客：[图文详解 Android Binder 跨进程通信机制原理](http://blog.csdn.net/carson_ho/article/details/73560642)\n\n对比 Linux （Android基于linux）上的其他进程通信方式（管道/消息队列/共享内存/信号量/Socket），Binder 机制的优点有：\n\n- 高效\nBinder数据拷贝只需要一次，而管道、消息队列、Socket都需要2次\n通过驱动在内核空间拷贝数据，不需要额外的同步处理\n- 安全性高\nBinder 机制为每个进程分配了 UID/PID 来作为鉴别身份的标示，并且在 Binder 通信时会根据 UID/PID 进行有效性检测\n传统的进程通信方式对于通信双方的身份并没有做出严格的验证\n如，Socket通信 ip地址是客户端手动填入，容易出现伪造\n- 使用简单\n采用Client/Server 架构\n实现 面向对象 的调用方式，即在使用Binder时就和调用一个本地对象实例一样\n\n\n4、AIDL\n客户端通过aidl文件的Stub.asInterface()方法，拿到Proxy代理类\n通过调用Proxy代理类的方法，将参数进行封包后，调用底层的transact()方法\ntransact()方法会回调onTransact()方法，进行参数的解封\n在onTransact()方法中调用服务端对应的方法，并将结果返回\n\n### 7、Handler面试题\n\n1、Handler是什么\nHandler通过发送和处理Message和Runnable对象来关联相对应线程的MessageQueue\n\n2、Handler使用方法\npost(runnable)\nsendMessage(message)\n\n3、Handler工作原理\n[Android进阶——Android消息机制之Looper、Handler、MessageQueen](http://blog.csdn.net/qq_30379689/article/details/53394061)\n\n4、Handler引起的内存泄漏\n原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放\n解决：\nHandler内部持有外部Activity的弱引用\nHandler改为静态内部类\nHandler.removeCallback()\n\n\n### 8、AsyncTask面试题\n\n1、AsyncTask是什么\n它本质上就是一个封装了线程池和Handler的异步框架\n\n2、AsyncTask使用方法\n三个参数\nParams：表示后台任务执行时的参数类型，该参数会传给AysncTask的 **doInBackground()** 方法\nProgress：表示后台任务的执行进度的参数类型，该参数会作为 **onProgressUpdate()** 方法的参数\nResult：表示后台任务的返回结果的参数类型，该参数会作为 **onPostExecute()** 方法的参数\n五个方法\nonPreExecute()：异步任务开启之前回调，在主线程中执行\ndoInBackground()：执行异步任务，在线程池中执行\nonProgressUpdate()：当doInBackground中调用publishProgress时回调，在主线程中执行\nonPostExecute()：在异步任务执行之后回调，在主线程中执行\nonCancelled()：在异步任务被取消时回调\n\n3、AsyncTask工作原理\nAndroid进阶——多线程系列之异步任务AsyncTask的使用与源码分析\nhttp://blog.csdn.net/qq_30379689/article/details/53203556\n\n4、AsyncTask引起的内存泄漏\n原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放\n解决：\nAsyncTask内部持有外部Activity的弱引用\nAsyncTask改为静态内部类\nAsyncTask.cancel()\n\n5、AsyncTask生命周期\n在Activity销毁之前，取消AsyncTask的运行，以此来保证程序的稳定\n\n6、AsyncTask结果丢失\n由于屏幕旋转、Activity在内存紧张时被回收等情况下，Activity会被重新创建，此时，旧的AsyncTask持有旧的Activity引用，这个时候会导致AsyncTask的 **onPostExecute()对UI更新无效**\n\n7、AsyncTask并行or串行\nAsyncTask在Android 2.3之前默认采用并行执行任务，AsyncTask在Android 2.3之后默认采用串行执行任务\n如果需要在Android 2.3之后采用并行执行任务，可以调用AsyncTask的executeOnExecutor()\n\n\n### 9、HandlerThread面试题\n\n1、HandlerThread产生背景\n当系统有多个耗时任务需要执行时，每个任务都会开启一个新线程去执行耗时任务，这样会导致系统多次创建和销毁线程，从而影响性能。为了解决这一问题，Google提供了HandlerThread，HandlerThread是在线程中创建一个Looper循环器，让Looper轮询消息队列，当有耗时任务进入队列时，则不需要开启新线程，在原有的线程中执行耗时任务即可，否则线程阻塞\n\n2、HanlderThread的特点、\nHandlerThread本质上是一个线程，继承自Thread\nHandlerThread有自己的Looper对象，可以进行Looper循环，可以创建Handler\nHandlerThread可以在Handler的handlerMessage中执行异步方法\nHandlerThread优点是异步不会堵塞，减少对性能的消耗\nHandlerThread缺点是不能同时继续进行多任务处理，需要等待进行处理，处理效率较低\nHandlerThread与线程池不同，HandlerThread是一个串行队列，背后只有一个线程。\n\n\n### 10、IntentService面试题\n\n1、IntentService是什么\nIntentService是继承自Service并处理异步请求的一个类，其内部采用HandlerThread和Handler实现的，在IntentService内有一个工作线程来处理耗时操作，其优先级比普通Service高。当任务完成后，IntentService会自动停止，而不需要手动调用stopSelf()。另外，可以多次启动IntentService，每个耗时操作都会以工作队列的方式在IntentService中 **onHandlerIntent()** 回调方法中执行，并且每次只会执行一个工作线程\n\n2、IntentService使用方法\n创建Service继承自IntentService\n覆写构造方法和onHandlerIntent()方法\n在onHandlerIntent()中执行耗时操作\n\n### 11、视图工作机制面试题\n\n[Android进阶——Android视图工作机制之measure、layout、draw](http://blog.csdn.net/qq_30379689/article/details/54588736)\n\n[Android事件分发机制之dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent](http://blog.csdn.net/qq_30379689/article/details/53967177)\n\n### 12、ListView面试题\n\n1、ListView是什么\nListView是能将一个数据集合以动态滚动的方式展示到用户界面上的View\n\n2、ListView的RecycleBin机制\n\n![](/images/blogimages/2017/listview_recyclebin.png)\n\n3、ListView的优化\n重用convertView\n使用ViewHolder\n图片三级缓存\n监听滑动事件\n少用透明View\n开启硬件加速\n\n\n### 13、Android项目构建面试题\n\n1、android构建流程\n\n![](/images/blogimages/2017/android_build_process.png)\n\n2、jenkins持续集成构建\n这里可参考[蒲公英文档](http://www.pgyer.com/doc/view/jenkins)\n\n3、Git常用命令\ngit init：仓库的初始化\ngit status：查看当前仓库的状态\ngit diff：查看仓库与上次修改的内容\ngit add：将文件放进暂存区\ngit commit：提交代码\ngit clone：克隆代码\ngit bransh：查看当前分支\ngit checkout：切换当前分支\n\n4、git工作流\nfork/clone（主流）\nfork：将别人的仓库代码fork到自己的仓库上\nclone：克隆下自己仓库的代码\nupdate、commit：修改代码并提交到自己的仓库\npush：提交到自己的仓库\npull request：请求添加到别人的仓库\nclone\n\n5、proguard是什么\nProGuard工具是用于压缩、优化和混淆我们的代码，其主作用是移除或混淆代码中无用类、字段、方法和属性\n\n6、proguard技术功能\n压缩\n优化\n混淆\n预检测\n\n7、proguard工作原理\n将无用的字段或方法存入到EntryPoint中，将非EntryPoint的字段和方法进行替换\n\n8、为什么要混淆\n由于Java是一门跨平台的解释性语言，其源代码被编译成class字节码来适应其他平台，而class文件包含了Java源代码信息，很容易被反编译\n\n\n### 14、ANR面试题\n\n1、什么是ANR\nApplication Not Responding，页面无响应的对话框\n\n2、发生ANR的条件\n应用程序的响应性是由ActivityManager和WindowManager系统服务监视的，当ANR发生条件满足时，就会弹出ANR的对话框\nActivity超过5秒无响应\nBroadcastReceiver超过10秒无响应\nService超过20秒无响应\n\n3、造成ANR的主要原因\n主线程被IO操作阻塞\nActivity的所有生命周期回调都是执行在主线程的\nService默认执行在主线程中\nBoardcastReceiver的回调onReceive()执行在主线程中\nAsyncTask的回调除了doInBackground，其他都是在主线程中\n没有使用子线程Looper的Handler的handlerMessage，post(Runnable)都是执行在主线程中\n\n4、如何解决ANR\n使用AsyncTask处理耗时IO操作\n使用Thread或HandlerThread提供优先级\n使用Handler处理工作线程的耗时操作\nActivity的onCreate和onResume回调尽量避免耗时操作\n\n\n### 15、OOM面试题\n\n1、什么是OOM\nOOM指Out of memory（内存溢出），当前占用内存加上我们申请的内存资源超过了Dalvik虚拟机的最大内存限制就会抛出Out of memory异常\n\n2、OOM相关概念\n内存溢出：指程序在申请内存时，没有足够的空间供其使用\n内存泄漏：指程序分配出去的内存不再使用，无法进行回收\n内存抖动：指程序短时间内大量创建对象，然后回收的现象\n\n3、解决OOM\nBitmap相关\n图片压缩\n加载缩略图\n在滚动时不加载图片\n回收Bitmap\n使用inBitmap属性\n捕获异常\n其他相关\nlistview重用convertView、使用LruCache\n避免onDraw方法执行对象的创建\n谨慎使用多进程\n\n\n### 16、Bitmap面试题\n\n1、recycle\n在安卓3.0以前Bitmap是存放在堆中的，我们只要回收堆内存即可\n在安卓3.0以后Bitmap是存放在内存中的，我们需要回收native层和Java层的内存\n官方建议我们3.0以后使用recycle方法进行回收，该方法也可以不主动调用，因为垃圾回收器会自动收集不可用的Bitmap对象进行回收\nrecycle方法会判断Bitmap在不可用的情况下，将发送指令到垃圾回收器，让其回收native层和Java层的内存，则Bitmap进入dead状态\nrecycle方法是不可逆的，如果再次调用getPixels()等方法，则获取不到想要的结果\n\n2、LruCache原理\nLruCache是个泛型类，内部采用LinkedHashMap来实现缓存机制，它提供get方法和put方法来获取缓存和添加缓存，其最重要的方法trimToSize是用来移除最少使用的缓存和使用最久的缓存，并添加最新的缓存到队列中\n\n3、计算inSampleSize\n~~~ Java\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n        if (width > height) {\n            inSampleSize = Math.round((float)height / (float)reqHeight);\n        } else {\n            inSampleSize = Math.round((float)width / (float)reqWidth);\n        }\n    }\n    return inSampleSize;\n}\n~~~\n\n4、缩略图\n~~~ Java\npublic static Bitmap thumbnail(String path,int maxWidth, int maxHeight, boolean autoRotate) {\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    Bitmap bitmap = BitmapFactory.decodeFile(path, options);\n    options.inJustDecodeBounds = false;\n    int sampleSize = calculateInSampleSize(options, maxWidth, maxHeight);\n    options.inSampleSize = sampleSize;\n    options.inPreferredConfig = Bitmap.Config.RGB_565;\n    options.inPurgeable = true;\n    options.inInputShareable = true;\n    if (bitmap != null && !bitmap.isRecycled()) {\n        bitmap.recycle();\n    }\n    bitmap = BitmapFactory.decodeFile(path, options);\n    return bitmap;\n}\n~~~\n\n\n5、保存Bitmap\n~~~ Java\npublic static String save(Bitmap bitmap,Bitmap.CompressFormat format, int quality, File destFile) {\n    try {\n        FileOutputStream out = new FileOutputStream(destFile);\n        if (bitmap.compress(format, quality, out)) {\n            out.flush();\n            out.close();\n        }\n        if (bitmap != null && !bitmap.isRecycled()) {\n            bitmap.recycle();\n        }\n        return destFile.getAbsolutePath();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n~~~\n\n\n6、保存到SD卡\n\n~~~ Java\npublic static String save(Bitmap bitmap,Bitmap.CompressFormat format, int quality, Context context) {\n    if (!Environment.getExternalStorageState()\n            .equals(Environment.MEDIA_MOUNTED)) {\n        return null;\n    }\n    File dir = new File(Environment.getExternalStorageDirectory()\n            + \"/\" + context.getPackageName() + \"/save/\");\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n    File destFile = new File(dir, UUID.randomUUID().toString());\n    return save(bitmap, format, quality, destFile);\n}\n~~~\n\n7、三级缓存\n网络缓存\n本地缓存\n内存缓存\n\n### 17、UI卡顿面试题\n\n1、UI卡顿原理\nView的绘制帧数保持60fps是最佳，这要求每帧的绘制时间不超过16ms（1000/60），如果安卓不能在16ms内完成界面的渲染，那么就会出现卡顿现象\n\n2、UI卡顿的原因分析\n在UI线程中做轻微的耗时操作，导致UI线程卡顿\n布局Layout过于复杂，无法在16ms内完成渲染\n同一时间动画执行的次数过多，导致CPU和GPU负载过重\noverDraw，导致像素在同一帧的时间内被绘制多次，使CPU和GPU负载过重\nView频繁的触发measure、layout，导致measure、layout累计耗时过多和整个View频繁的重新渲染\n频繁的触发GC操作导致线程暂停，会使得安卓系统在16ms内无法完成绘制\n冗余资源及逻辑等导致加载和执行缓慢\nANR\n\n3、UI卡顿的优化\n布局优化\n使用include、ViewStub、merge\n不要出现过于嵌套和冗余的布局\n使用自定义View取代复杂的View\nListView优化\n复用convertView\n滑动不加载\n背景和图片优化\n缩略图\n图片压缩\n避免ANR\n不要在UI线程中做耗时操作\n\n### 18、内存泄漏面试题\n\n1、Java内存泄漏引起的主要原因\n长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏\n\n2、Java内存分配策略\n静态存储区：又称方法区，主要存储全局变量和静态变量，在整个程序运行期间都存在\n栈区：方法体的局部变量会在栈区创建空间，并在方法执行结束后会自动释放变量的空间和内存\n堆区：保存动态产生的数据，如：new出来的对象和数组，在不使用的时候由Java回收器自动回收\n\n3、Android解决内存泄漏的例子\n单例造成的内存泄漏：在单例中，使用context.getApplicationContext()作为单例的context\n匿名内部类造成的内存泄漏：由于非静态内部类持有匿名外部类的引用，必须将内部类设置为static\nHandler造成的内存泄漏：使用static的Handler内部类，同时在实现内部类中持有Context的弱引用\n避免使用static变量：由于static变量会跟Activity生命周期一致，当Activity退出后台被后台回收时，static变量是不安全，所以也要管理好static变量的生命周期\n资源未关闭造成的内存泄漏：比如Socket、Broadcast、Cursor、Bitmap、ListView等，使用完后要关闭\nAsyncTask造成的内存泄漏：由于非静态内部类持有匿名内部类的引用而造成内存泄漏，可以通过AsyncTask内部持有外部Activity的弱引用同时改为静态内部类或在onDestroy()中执行AsyncTask.cancel()进行修复\n\n\n### 19、内存管理面试题\n\n1、Android内存管理机制\n分配机制\n管理机制\n\n2、内存管理机制的特点\n更少的占用内存\n在合适的时候，合理的释放系统资源\n在系统内存紧张的时候，能释放掉大部分不重要的资源\n能合理的在特殊生命周期中，保存或还原重要数据\n\n3、内存优化方法\nService完成任务后应停止它，或用IntentService（因为可以自动停止服务）代替Service\n在UI不可见的时候，释放其UI资源\n在系统内存紧张的时候，尽可能多的释放非重要资源\n避免滥用Bitmap导致内存浪费\n避免使用依赖注入框架\n使用针对内存优化过的数据容器\n使用ZIP对齐的APK\n使用多进程\n\n### 20、冷启动和热启动面试题\n\n1、什么是冷启动和热启动\n冷启动：在启动应用前，系统中没有该应用的任何进程信息\n热启动：在启动应用时，在已有的进程上启动应用（用户使用返回键退出应用，然后马上又重新启动应用）\n\n2、冷启动和热启动的区别\n冷启动：创建Application后再创建和初始化MainActivity\n热启动：创建和初始化MainActivity即可\n\n3、冷启动时间的计算\n这个时间值从应用启动（创建进程）开始计算，到完成视图的第一次绘制为止\n\n4、冷启动流程\nZygote进程中fork创建出一个新的进程\n创建和初始化Application类、创建MainActivity\ninflate布局、当onCreate/onStart/onResume方法都走完\ncontentView的measure/layout/draw显示在界面上\n总结：Application构造方法->attachBaseContext()->onCreate()->Activity构造方法->onCreate()->配置主题中背景等属性->onStart()->onResume()->测量布局绘制显示在界面上\n\n5、冷启动优化\n减少第一个界面onCreate()方法的工作量\n不要让Application参与业务的操作\n不要在Application进行耗时操作\n不要以静态变量的方式在Application中保存数据\n减少布局的复杂性和深度\n不要在mainThread中加载资源\n通过懒加载方式初始化第三方SDK\n\n\n### 21、其他优化面试题\n\n1、Android不用静态变量存储数据\n静态变量等数据由于进程已经被杀死而被初始化\n使用其他数据传输方式：文件/sp/contentProvider\n\n2、SharePreference安全问题\n不能跨进程同步\n文件不宜过大\n\n3、内存对象序列化\nSerializeble：是java的序列化方式，Serializeble在序列化的时候会产生大量的临时对象，从而引起频繁的GC\nParcelable：是Android的序列化方式，且性能比Serializeble高，Parcelable不能使用在要将数据存储在硬盘上的情况\n\n4、避免在UI线程中做繁重的操作\n\n### 22、架构模式面试题\n\nAndroid基础——框架模式MVC在安卓中的实践\nhttp://blog.csdn.net/qq_30379689/article/details/52909656\nAndroid基础——框架模式MVP在安卓中的实践\nhttp://blog.csdn.net/qq_30379689/article/details/52910567\nAndroid基础——框架模式MVVM之DataBinding的实践\nhttp://blog.csdn.net/qq_30379689/article/details/53037430\n\n\n### 23、插件化面试题\n\n1、插件化解决的问题\n动态加载APK（反射、类加载器）\n资源加载（反射、AssetManager、独立资源、分段资源）\n代码加载（反射获取生命周期）\n\n2、类加载器（Java中字节码添加到虚拟机中）\nDexClassLoader：能够加载未安装的jar/apk/dex，主要用于动态加载和代码热更新\nPathClassLoader：只能加载系统中已经安装过的apk\n\n\n### 24、热更新面试题\n\n1、热更新主要流程\n线上检查到Crash\n拉出Bugfix分支修复Crash问题\njenkins构建和补丁生成\napp通过推送或主动拉取补丁文件\n将Bugfix代码合到master上\n\n2、热更新主流框架\nDexposed\nAndFix\nNuwa\nTinker\n\n3、热更新的原理\n在ClassLoader创建一个dexElements数组\n将修复好的dex文件存放在dexElements数组的最前面\nClassLoader会遍历dexElements数组，找到最前面的dex文件优先加载\n\n\n### 25、进程保活面试题\n\n1、进程的优先级\n空进程\n后台进程\n服务进程\n可见进程\n前台进程\n\n2、Android进程回收策略\nLow memory Killer（定时执行）：通过一些比较复杂的评分机制，对进程进行打分，然后将分数高的进程判定为bad进程，杀死并释放内存\nOOM_ODJ：判别进程的优先级\n\n3、Android保活方案\n利用系统广播拉活\n利用系统Service机制拉活\n利用Native进程拉活\n利用JobScheduler机制拉活\n利用账号同步机制拉活\n\n### 26、Lint面试题\n\n1、什么是Android Lint\nAndroid Lint是一个静态代码分析工具，它能够对你的Android项目中潜在的Bug、可优化的代码、安全性、性能、可用性、可访问性、国际化等进行检查\n\n2、Lint工作流程\n![](/images/blogimages/2017/android_lint.png)\n\n3、配置Lint\n创建Lint.xml到根目录下，自定义Lint安全等级等\n在Java文件中可以使用@suppressLint(“NewApi”)来忽视Lint的报错\n在xml文件中可以使用tool:ignore(“UnusedResources”)来忽视Lint的报错\n自定义Lint检查，可以创建类，继承Detector和实现JavaPsiScanner\n\n### 27、Kotlin面试题\n\n1、什么是Kotlin\nKotlin是一种基于JVM的编程语言\n对Java的一种拓展，比Java更简洁\nKotlin支持函数式编程\nKotlin类和Java类可以相互调用\n\n2、Kotlin环境搭建\n直接在Plugin中下载Kotlin插件即可\n系统会自动配置到Kotlin环境\n","source":"_posts/2017-08-17-IntervieweeQuestions.md","raw":"---\nlayout: post\ntitle:  Android面试题积累\ncategory: accumulation\ntags:\n  - Interview Knowledge\n  - ANDROID\nkeywords: Basic Knowledge, Interview\nbanner: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg\ntoc: true\n---\n\n### 1、Activity面试题\n\n1、Activity是什么\nActivity是四大组件之一，它提供一个界面让用户点击和各种滑动操作，这就是Activity\n\n2、Activity四种状态\nruning\npaused\nstopped\nkilled\n\n3、Activity生命周期\nonCreate()\nonStart()\nonResume()\nonPause()\nonStop()\nonDestroy()\nonRestart()\n\n4、进程的优先级\n空进程\n后台进程\n服务进程\n可见进程\n前台进程\n\n5、Activity任务栈\n先进后出\n<!--more-->\n6、Activity启动模式\nstandard\nsingletop\nsingletask: 能够保证Activity A在栈中只有一个实例，这个栈也允许存在其他的实例.\n> 特别需要注意的是使用startActivityForResult方法的时候，根据startActivityForResult的api说明: if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result\n意思就是使用startActivityForResult方法启动一个singleTask的Activity，该Activity不会启动，会收到一个RESULT_CANCELED结果\n\nsingleinstance: singleInstance要求activity的实例不仅只有一个，并且整个task中只有一个activity实例，而singleTask所在的栈中允许存在其他activity的实例。\n> singleInstance的activity也具有上面的特性，此外，activity设置了singleInstance，那么无论被启动的activity有没有设置singleInstance，都无法获取返回值\n\n7、scheme跳转协议\nAndroid中的scheme是一种页面内跳转协议，通过定义自己的scheme协议，可以跳转到app中的各个页面\n服务器可以定制化告诉app跳转哪个页面\nApp可以通过跳转到另一个App页面\n可以通过H5页面跳转页面（DeepLink）：\n~~~\n<a href=\"[scheme]://[host]/[path]?[query]\">启动应用程序</a>\n~~~\n~~~ Java\n<intent-filter>\n    <data android:scheme=\"http\" />\n    <!-- or you can use deep linking like  -->\n    <data android:scheme=\"http\" android:host=\"xyz.abc.com\"/>\n    <action android:name=\"android.intent.action.VIEW\"/>\n    <category android:name=\"android.intent.category.BROWSABLE\"/>\n    <category android:name=\"android.intent.category.DEFAULT\"/>\n</intent-filter>\n~~~\n\n### 2、Fragment面试题\n\n1、Fragment为什么被称为第五大组件\nFragment比Activity更节省内存，其切换模式也更加舒适，使用频率不低于四大组件，且有自己的生命周期，而且必须依附于Activity\n\n2、Activity创建Fragment的方式\n静态创建：在activity布局文件里声明fragment，\nactivity_main.xml中声明：\n<fragment\n    android:name=\"com.example.myfragment.MyFragment\"\n    android:id=\"@+id/myfragment_1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n/>\n\n动态创建：通过java代码将fragment添加到已存的ViewGroup中\nfragment = new MyFragment();\nfragmentStack.push(fragment);\ntransaction = manager.beginTransaction();\ntransaction.add(R.id.fragments, fragment);\ntransaction.commit();\n\n\n3、FragmentPageAdapter和FragmentPageStateAdapter的区别\nFragmentPageAdapter在每次切换页面的的时候，是将Fragment进行分离，适合页面较少的Fragment使用以保存一些内存，对系统内存不会多大影响\nFragmentPageStateAdapter在每次切换页面的时候，是将Fragment进行回收，适合页面较多的Fragment使用，这样就不会消耗更多的内存\n\n4、Fragment生命周期\nonAttach()\nonCreate()\nonCreateView()\nonActivityCreated()\nonStart()\nonResume()\nonPause()\nonStop()\nonDestroyView()\nonDestroy()\nonDetach()\n\n5、Fragment的通信\nFragment调用Activity中的方法：getActivity\nActivity调用Fragment中的方法：接口回调\nFragment调用Fragment中的方法：FragmentManager.findFragmentById\n\n6、Fragment的replace、add、remove方法\nreplace：替代Fragment的栈顶页面\nadd：添加Fragment到栈顶页面\nremove：移除Fragment栈顶页面\n\n\n### 3、Service面试题\n\n1、Service是什么\nService是四大组件之一，它可以在后台执行长时间运行操作而没有用户界面的应用组件\n\n2、Service和Thread的区别\nService是安卓中系统的组件，它运行在独立进程的主线程中，不可以执行耗时操作，超时会有ANR异常。Thread是程序执行的最小单元，分配CPU的基本单位，可以开启子线程执行耗时操作\nService在不同Activity中可以获取自身实例，可以方便的对Service进行操作。Thread在不同的Activity中难以获取自身实例，如果Activity被销毁，Thread实例就很难再获取得到\n\n3、Service启动方式\nstartService\nbindService\n\n4、Service生命周期\nstartService\nonCreate()\nonStartCommand()\nonDestroy()\nbindService\nonCreate()\nonBind()\nonUnbind()\nonDestroy()\n\n\n### 4、Broadcast Receiver面试题\n\n1、Broadcast Receiver是什么\nBroadcast是四大组件之一，是一种广泛运用在应用程序之间传输信息的机制，通过发送Intent来传送我们的数据\n\n2、Broadcast Receiver的使用场景\n同一App具有多个进程的不同组件之间的消息通信\n不同App之间的组件之间的消息通信\n\n3、Broadcast Receiver的种类\n普通广播\n有序广播 Context.sendOrderedBroadcast\n本地广播 LocalBroadcastManager.getInstance(context).sendBroadcast(intent) 除了能解决BroadcastReceiver进程间安全性问题外，相对Context操作的BroadcastReceiver而言还具有更高的运行效率。\nSticky广播 的sendStickyBroadcast(Intent)接口发送，需要添加权限<uses-permission android:name=\"android.permission.BROADCAST_STICKY\"/>\n也可以通过Context的removeStickyBroadcast(Intent intent)接口移除缓存的粘性广播。\nsticky有序广播 StickyOrderedBroadcast\n\n\n4、Broadcast Receiver的实现\n静态注册：注册后一直运行，尽管Activity、进程、App被杀死还是可以接收到广播\n动态注册：跟随Activity的生命周期\n\n5、Broadcast Receiver实现机制\n自定义广播类继承BroadcastReceiver，复写onReceiver()\n通过Binder机制向AMS进行注册广播\n广播发送者通过Binder机制向AMS发送广播\nAMS查找符合相应条件的广播发送到BroadcastReceiver相应的循环队列中\n消息队列执行拿到广播，回调BroadcastReceiver的onReceiver()\n\n6、LocalBroadcastManager特点\n本地广播只能在自身App内传播，不必担心泄漏隐私数据\n本地广播不允许其他App对你的App发送该广播，不必担心安全漏洞被利用\n本地广播比全局广播更高效\n以上三点都是源于其内部是用Handler实现的\n\n\n### 5、WebView面试题\n\n1、WebView安全漏洞\nAPI16之前存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java反射机制利用该漏洞执行任意Java对象的方法\n\n2、WebView销毁步骤\nWebView在其他容器上时（如：LinearLayout），当销毁Activity时，需要在onDestroy()中先移除容器上的WebView，然后再将WebView.destroy()，这样就不会导致内存泄漏\n\n3、WebView的jsbridge\n客户端和服务端之间可以通过Javascript来互相调用各自的方法\n\n4、WebViewClient的onPageFinished\nWebViewClient的onPageFinished在每次完成页面的时候调用，但是遇到未加载完成的页面跳转其他页面时，就会一直调用，使用WebChromeClient.onProgressChanged可以替代\n\n5、WebView后台耗电\n在WebView加载页面的时候，会自动开启线程去加载，如果不很好的关闭这些线程，就会导致电量消耗加大，可以采用暴力的方法，直接在onDestroy方法中System.exit(0)结束当前正在运行中的java虚拟机\n\n6、WebView硬件加速\nAndroid3.0引入硬件加速，默认会开启，WebView在硬件加速的情况下滑动更加平滑，性能更加好，但是会出现白块或者页面闪烁的副作用，建议WebView暂时关闭硬件加速\n\n7、WebView内存泄漏\n由于WebView是依附于Activity的，Activity的生命周期和WebView启动的线程的生命周期是不一致的，这会导致WebView一直持有对这个Activity的引用而无法释放，解决方案如下\n独立进程，简单暴力，不过可能涉及到进程间通信（推荐）\n动态添加WebView，对传入WebView中使用的Context使用弱引用\n\n\n### 6、Binder面试题\n\n1、Linux内核的基本知识\n\n![](/images/blogimages/2017/binder-01.png)\n进程隔离/虚拟地址空间：进程间是不可以共享数据的，相当于被隔离，每个进程被分配到不同的虚拟地址中\n系统调用：Linux内核对应用有访问权限，用户只能在应用层通过系统调用，调用内核的某些程序\nbinder驱动：它负责各个用户的进程，通过binder通信内核来进行交互的模块\n\n而Binder，就是充当 连接 两个进程（内核空间）的通道。\n\n2、为什么使用Binder\n性能上，相比传统的Socket更加高效\n安全性高，支持协议双方互相校验\n\n3、Binder通信模型\n![](/images/blogimages/2017/binder-02.png)\n> 虚线表示并非直接交互\n\n说明1：Client进程、Server进程 & Service Manager 进程之间的交互都必须通过Binder驱动（使用 open 和 ioctl文件操作函数），而非直接交互\n\n原因：\n1. Client进程、Server进程 & Service Manager进程属于进程空间的用户空间，不可进行进程间交互\n2. Binder驱动 属于 进程空间的 内核空间，可进行进程间 & 进程内交互\n\n说明2： Binder驱动 & Service Manager进程 属于 Android基础架构（即系统已经实现好了）；而Client 进程 和 Server 进程 属于Android应用层（需要开发者自己实现）\n\n所以，在进行跨进程通信时，开发者只需自定义Client & Server 进程 并 显式使用上述3个步骤，最终借助 Android的基本架构功能就可完成进程间通信\n\n详细参考这篇博客：[图文详解 Android Binder 跨进程通信机制原理](http://blog.csdn.net/carson_ho/article/details/73560642)\n\n对比 Linux （Android基于linux）上的其他进程通信方式（管道/消息队列/共享内存/信号量/Socket），Binder 机制的优点有：\n\n- 高效\nBinder数据拷贝只需要一次，而管道、消息队列、Socket都需要2次\n通过驱动在内核空间拷贝数据，不需要额外的同步处理\n- 安全性高\nBinder 机制为每个进程分配了 UID/PID 来作为鉴别身份的标示，并且在 Binder 通信时会根据 UID/PID 进行有效性检测\n传统的进程通信方式对于通信双方的身份并没有做出严格的验证\n如，Socket通信 ip地址是客户端手动填入，容易出现伪造\n- 使用简单\n采用Client/Server 架构\n实现 面向对象 的调用方式，即在使用Binder时就和调用一个本地对象实例一样\n\n\n4、AIDL\n客户端通过aidl文件的Stub.asInterface()方法，拿到Proxy代理类\n通过调用Proxy代理类的方法，将参数进行封包后，调用底层的transact()方法\ntransact()方法会回调onTransact()方法，进行参数的解封\n在onTransact()方法中调用服务端对应的方法，并将结果返回\n\n### 7、Handler面试题\n\n1、Handler是什么\nHandler通过发送和处理Message和Runnable对象来关联相对应线程的MessageQueue\n\n2、Handler使用方法\npost(runnable)\nsendMessage(message)\n\n3、Handler工作原理\n[Android进阶——Android消息机制之Looper、Handler、MessageQueen](http://blog.csdn.net/qq_30379689/article/details/53394061)\n\n4、Handler引起的内存泄漏\n原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放\n解决：\nHandler内部持有外部Activity的弱引用\nHandler改为静态内部类\nHandler.removeCallback()\n\n\n### 8、AsyncTask面试题\n\n1、AsyncTask是什么\n它本质上就是一个封装了线程池和Handler的异步框架\n\n2、AsyncTask使用方法\n三个参数\nParams：表示后台任务执行时的参数类型，该参数会传给AysncTask的 **doInBackground()** 方法\nProgress：表示后台任务的执行进度的参数类型，该参数会作为 **onProgressUpdate()** 方法的参数\nResult：表示后台任务的返回结果的参数类型，该参数会作为 **onPostExecute()** 方法的参数\n五个方法\nonPreExecute()：异步任务开启之前回调，在主线程中执行\ndoInBackground()：执行异步任务，在线程池中执行\nonProgressUpdate()：当doInBackground中调用publishProgress时回调，在主线程中执行\nonPostExecute()：在异步任务执行之后回调，在主线程中执行\nonCancelled()：在异步任务被取消时回调\n\n3、AsyncTask工作原理\nAndroid进阶——多线程系列之异步任务AsyncTask的使用与源码分析\nhttp://blog.csdn.net/qq_30379689/article/details/53203556\n\n4、AsyncTask引起的内存泄漏\n原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放\n解决：\nAsyncTask内部持有外部Activity的弱引用\nAsyncTask改为静态内部类\nAsyncTask.cancel()\n\n5、AsyncTask生命周期\n在Activity销毁之前，取消AsyncTask的运行，以此来保证程序的稳定\n\n6、AsyncTask结果丢失\n由于屏幕旋转、Activity在内存紧张时被回收等情况下，Activity会被重新创建，此时，旧的AsyncTask持有旧的Activity引用，这个时候会导致AsyncTask的 **onPostExecute()对UI更新无效**\n\n7、AsyncTask并行or串行\nAsyncTask在Android 2.3之前默认采用并行执行任务，AsyncTask在Android 2.3之后默认采用串行执行任务\n如果需要在Android 2.3之后采用并行执行任务，可以调用AsyncTask的executeOnExecutor()\n\n\n### 9、HandlerThread面试题\n\n1、HandlerThread产生背景\n当系统有多个耗时任务需要执行时，每个任务都会开启一个新线程去执行耗时任务，这样会导致系统多次创建和销毁线程，从而影响性能。为了解决这一问题，Google提供了HandlerThread，HandlerThread是在线程中创建一个Looper循环器，让Looper轮询消息队列，当有耗时任务进入队列时，则不需要开启新线程，在原有的线程中执行耗时任务即可，否则线程阻塞\n\n2、HanlderThread的特点、\nHandlerThread本质上是一个线程，继承自Thread\nHandlerThread有自己的Looper对象，可以进行Looper循环，可以创建Handler\nHandlerThread可以在Handler的handlerMessage中执行异步方法\nHandlerThread优点是异步不会堵塞，减少对性能的消耗\nHandlerThread缺点是不能同时继续进行多任务处理，需要等待进行处理，处理效率较低\nHandlerThread与线程池不同，HandlerThread是一个串行队列，背后只有一个线程。\n\n\n### 10、IntentService面试题\n\n1、IntentService是什么\nIntentService是继承自Service并处理异步请求的一个类，其内部采用HandlerThread和Handler实现的，在IntentService内有一个工作线程来处理耗时操作，其优先级比普通Service高。当任务完成后，IntentService会自动停止，而不需要手动调用stopSelf()。另外，可以多次启动IntentService，每个耗时操作都会以工作队列的方式在IntentService中 **onHandlerIntent()** 回调方法中执行，并且每次只会执行一个工作线程\n\n2、IntentService使用方法\n创建Service继承自IntentService\n覆写构造方法和onHandlerIntent()方法\n在onHandlerIntent()中执行耗时操作\n\n### 11、视图工作机制面试题\n\n[Android进阶——Android视图工作机制之measure、layout、draw](http://blog.csdn.net/qq_30379689/article/details/54588736)\n\n[Android事件分发机制之dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent](http://blog.csdn.net/qq_30379689/article/details/53967177)\n\n### 12、ListView面试题\n\n1、ListView是什么\nListView是能将一个数据集合以动态滚动的方式展示到用户界面上的View\n\n2、ListView的RecycleBin机制\n\n![](/images/blogimages/2017/listview_recyclebin.png)\n\n3、ListView的优化\n重用convertView\n使用ViewHolder\n图片三级缓存\n监听滑动事件\n少用透明View\n开启硬件加速\n\n\n### 13、Android项目构建面试题\n\n1、android构建流程\n\n![](/images/blogimages/2017/android_build_process.png)\n\n2、jenkins持续集成构建\n这里可参考[蒲公英文档](http://www.pgyer.com/doc/view/jenkins)\n\n3、Git常用命令\ngit init：仓库的初始化\ngit status：查看当前仓库的状态\ngit diff：查看仓库与上次修改的内容\ngit add：将文件放进暂存区\ngit commit：提交代码\ngit clone：克隆代码\ngit bransh：查看当前分支\ngit checkout：切换当前分支\n\n4、git工作流\nfork/clone（主流）\nfork：将别人的仓库代码fork到自己的仓库上\nclone：克隆下自己仓库的代码\nupdate、commit：修改代码并提交到自己的仓库\npush：提交到自己的仓库\npull request：请求添加到别人的仓库\nclone\n\n5、proguard是什么\nProGuard工具是用于压缩、优化和混淆我们的代码，其主作用是移除或混淆代码中无用类、字段、方法和属性\n\n6、proguard技术功能\n压缩\n优化\n混淆\n预检测\n\n7、proguard工作原理\n将无用的字段或方法存入到EntryPoint中，将非EntryPoint的字段和方法进行替换\n\n8、为什么要混淆\n由于Java是一门跨平台的解释性语言，其源代码被编译成class字节码来适应其他平台，而class文件包含了Java源代码信息，很容易被反编译\n\n\n### 14、ANR面试题\n\n1、什么是ANR\nApplication Not Responding，页面无响应的对话框\n\n2、发生ANR的条件\n应用程序的响应性是由ActivityManager和WindowManager系统服务监视的，当ANR发生条件满足时，就会弹出ANR的对话框\nActivity超过5秒无响应\nBroadcastReceiver超过10秒无响应\nService超过20秒无响应\n\n3、造成ANR的主要原因\n主线程被IO操作阻塞\nActivity的所有生命周期回调都是执行在主线程的\nService默认执行在主线程中\nBoardcastReceiver的回调onReceive()执行在主线程中\nAsyncTask的回调除了doInBackground，其他都是在主线程中\n没有使用子线程Looper的Handler的handlerMessage，post(Runnable)都是执行在主线程中\n\n4、如何解决ANR\n使用AsyncTask处理耗时IO操作\n使用Thread或HandlerThread提供优先级\n使用Handler处理工作线程的耗时操作\nActivity的onCreate和onResume回调尽量避免耗时操作\n\n\n### 15、OOM面试题\n\n1、什么是OOM\nOOM指Out of memory（内存溢出），当前占用内存加上我们申请的内存资源超过了Dalvik虚拟机的最大内存限制就会抛出Out of memory异常\n\n2、OOM相关概念\n内存溢出：指程序在申请内存时，没有足够的空间供其使用\n内存泄漏：指程序分配出去的内存不再使用，无法进行回收\n内存抖动：指程序短时间内大量创建对象，然后回收的现象\n\n3、解决OOM\nBitmap相关\n图片压缩\n加载缩略图\n在滚动时不加载图片\n回收Bitmap\n使用inBitmap属性\n捕获异常\n其他相关\nlistview重用convertView、使用LruCache\n避免onDraw方法执行对象的创建\n谨慎使用多进程\n\n\n### 16、Bitmap面试题\n\n1、recycle\n在安卓3.0以前Bitmap是存放在堆中的，我们只要回收堆内存即可\n在安卓3.0以后Bitmap是存放在内存中的，我们需要回收native层和Java层的内存\n官方建议我们3.0以后使用recycle方法进行回收，该方法也可以不主动调用，因为垃圾回收器会自动收集不可用的Bitmap对象进行回收\nrecycle方法会判断Bitmap在不可用的情况下，将发送指令到垃圾回收器，让其回收native层和Java层的内存，则Bitmap进入dead状态\nrecycle方法是不可逆的，如果再次调用getPixels()等方法，则获取不到想要的结果\n\n2、LruCache原理\nLruCache是个泛型类，内部采用LinkedHashMap来实现缓存机制，它提供get方法和put方法来获取缓存和添加缓存，其最重要的方法trimToSize是用来移除最少使用的缓存和使用最久的缓存，并添加最新的缓存到队列中\n\n3、计算inSampleSize\n~~~ Java\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n        if (width > height) {\n            inSampleSize = Math.round((float)height / (float)reqHeight);\n        } else {\n            inSampleSize = Math.round((float)width / (float)reqWidth);\n        }\n    }\n    return inSampleSize;\n}\n~~~\n\n4、缩略图\n~~~ Java\npublic static Bitmap thumbnail(String path,int maxWidth, int maxHeight, boolean autoRotate) {\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    Bitmap bitmap = BitmapFactory.decodeFile(path, options);\n    options.inJustDecodeBounds = false;\n    int sampleSize = calculateInSampleSize(options, maxWidth, maxHeight);\n    options.inSampleSize = sampleSize;\n    options.inPreferredConfig = Bitmap.Config.RGB_565;\n    options.inPurgeable = true;\n    options.inInputShareable = true;\n    if (bitmap != null && !bitmap.isRecycled()) {\n        bitmap.recycle();\n    }\n    bitmap = BitmapFactory.decodeFile(path, options);\n    return bitmap;\n}\n~~~\n\n\n5、保存Bitmap\n~~~ Java\npublic static String save(Bitmap bitmap,Bitmap.CompressFormat format, int quality, File destFile) {\n    try {\n        FileOutputStream out = new FileOutputStream(destFile);\n        if (bitmap.compress(format, quality, out)) {\n            out.flush();\n            out.close();\n        }\n        if (bitmap != null && !bitmap.isRecycled()) {\n            bitmap.recycle();\n        }\n        return destFile.getAbsolutePath();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n~~~\n\n\n6、保存到SD卡\n\n~~~ Java\npublic static String save(Bitmap bitmap,Bitmap.CompressFormat format, int quality, Context context) {\n    if (!Environment.getExternalStorageState()\n            .equals(Environment.MEDIA_MOUNTED)) {\n        return null;\n    }\n    File dir = new File(Environment.getExternalStorageDirectory()\n            + \"/\" + context.getPackageName() + \"/save/\");\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n    File destFile = new File(dir, UUID.randomUUID().toString());\n    return save(bitmap, format, quality, destFile);\n}\n~~~\n\n7、三级缓存\n网络缓存\n本地缓存\n内存缓存\n\n### 17、UI卡顿面试题\n\n1、UI卡顿原理\nView的绘制帧数保持60fps是最佳，这要求每帧的绘制时间不超过16ms（1000/60），如果安卓不能在16ms内完成界面的渲染，那么就会出现卡顿现象\n\n2、UI卡顿的原因分析\n在UI线程中做轻微的耗时操作，导致UI线程卡顿\n布局Layout过于复杂，无法在16ms内完成渲染\n同一时间动画执行的次数过多，导致CPU和GPU负载过重\noverDraw，导致像素在同一帧的时间内被绘制多次，使CPU和GPU负载过重\nView频繁的触发measure、layout，导致measure、layout累计耗时过多和整个View频繁的重新渲染\n频繁的触发GC操作导致线程暂停，会使得安卓系统在16ms内无法完成绘制\n冗余资源及逻辑等导致加载和执行缓慢\nANR\n\n3、UI卡顿的优化\n布局优化\n使用include、ViewStub、merge\n不要出现过于嵌套和冗余的布局\n使用自定义View取代复杂的View\nListView优化\n复用convertView\n滑动不加载\n背景和图片优化\n缩略图\n图片压缩\n避免ANR\n不要在UI线程中做耗时操作\n\n### 18、内存泄漏面试题\n\n1、Java内存泄漏引起的主要原因\n长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏\n\n2、Java内存分配策略\n静态存储区：又称方法区，主要存储全局变量和静态变量，在整个程序运行期间都存在\n栈区：方法体的局部变量会在栈区创建空间，并在方法执行结束后会自动释放变量的空间和内存\n堆区：保存动态产生的数据，如：new出来的对象和数组，在不使用的时候由Java回收器自动回收\n\n3、Android解决内存泄漏的例子\n单例造成的内存泄漏：在单例中，使用context.getApplicationContext()作为单例的context\n匿名内部类造成的内存泄漏：由于非静态内部类持有匿名外部类的引用，必须将内部类设置为static\nHandler造成的内存泄漏：使用static的Handler内部类，同时在实现内部类中持有Context的弱引用\n避免使用static变量：由于static变量会跟Activity生命周期一致，当Activity退出后台被后台回收时，static变量是不安全，所以也要管理好static变量的生命周期\n资源未关闭造成的内存泄漏：比如Socket、Broadcast、Cursor、Bitmap、ListView等，使用完后要关闭\nAsyncTask造成的内存泄漏：由于非静态内部类持有匿名内部类的引用而造成内存泄漏，可以通过AsyncTask内部持有外部Activity的弱引用同时改为静态内部类或在onDestroy()中执行AsyncTask.cancel()进行修复\n\n\n### 19、内存管理面试题\n\n1、Android内存管理机制\n分配机制\n管理机制\n\n2、内存管理机制的特点\n更少的占用内存\n在合适的时候，合理的释放系统资源\n在系统内存紧张的时候，能释放掉大部分不重要的资源\n能合理的在特殊生命周期中，保存或还原重要数据\n\n3、内存优化方法\nService完成任务后应停止它，或用IntentService（因为可以自动停止服务）代替Service\n在UI不可见的时候，释放其UI资源\n在系统内存紧张的时候，尽可能多的释放非重要资源\n避免滥用Bitmap导致内存浪费\n避免使用依赖注入框架\n使用针对内存优化过的数据容器\n使用ZIP对齐的APK\n使用多进程\n\n### 20、冷启动和热启动面试题\n\n1、什么是冷启动和热启动\n冷启动：在启动应用前，系统中没有该应用的任何进程信息\n热启动：在启动应用时，在已有的进程上启动应用（用户使用返回键退出应用，然后马上又重新启动应用）\n\n2、冷启动和热启动的区别\n冷启动：创建Application后再创建和初始化MainActivity\n热启动：创建和初始化MainActivity即可\n\n3、冷启动时间的计算\n这个时间值从应用启动（创建进程）开始计算，到完成视图的第一次绘制为止\n\n4、冷启动流程\nZygote进程中fork创建出一个新的进程\n创建和初始化Application类、创建MainActivity\ninflate布局、当onCreate/onStart/onResume方法都走完\ncontentView的measure/layout/draw显示在界面上\n总结：Application构造方法->attachBaseContext()->onCreate()->Activity构造方法->onCreate()->配置主题中背景等属性->onStart()->onResume()->测量布局绘制显示在界面上\n\n5、冷启动优化\n减少第一个界面onCreate()方法的工作量\n不要让Application参与业务的操作\n不要在Application进行耗时操作\n不要以静态变量的方式在Application中保存数据\n减少布局的复杂性和深度\n不要在mainThread中加载资源\n通过懒加载方式初始化第三方SDK\n\n\n### 21、其他优化面试题\n\n1、Android不用静态变量存储数据\n静态变量等数据由于进程已经被杀死而被初始化\n使用其他数据传输方式：文件/sp/contentProvider\n\n2、SharePreference安全问题\n不能跨进程同步\n文件不宜过大\n\n3、内存对象序列化\nSerializeble：是java的序列化方式，Serializeble在序列化的时候会产生大量的临时对象，从而引起频繁的GC\nParcelable：是Android的序列化方式，且性能比Serializeble高，Parcelable不能使用在要将数据存储在硬盘上的情况\n\n4、避免在UI线程中做繁重的操作\n\n### 22、架构模式面试题\n\nAndroid基础——框架模式MVC在安卓中的实践\nhttp://blog.csdn.net/qq_30379689/article/details/52909656\nAndroid基础——框架模式MVP在安卓中的实践\nhttp://blog.csdn.net/qq_30379689/article/details/52910567\nAndroid基础——框架模式MVVM之DataBinding的实践\nhttp://blog.csdn.net/qq_30379689/article/details/53037430\n\n\n### 23、插件化面试题\n\n1、插件化解决的问题\n动态加载APK（反射、类加载器）\n资源加载（反射、AssetManager、独立资源、分段资源）\n代码加载（反射获取生命周期）\n\n2、类加载器（Java中字节码添加到虚拟机中）\nDexClassLoader：能够加载未安装的jar/apk/dex，主要用于动态加载和代码热更新\nPathClassLoader：只能加载系统中已经安装过的apk\n\n\n### 24、热更新面试题\n\n1、热更新主要流程\n线上检查到Crash\n拉出Bugfix分支修复Crash问题\njenkins构建和补丁生成\napp通过推送或主动拉取补丁文件\n将Bugfix代码合到master上\n\n2、热更新主流框架\nDexposed\nAndFix\nNuwa\nTinker\n\n3、热更新的原理\n在ClassLoader创建一个dexElements数组\n将修复好的dex文件存放在dexElements数组的最前面\nClassLoader会遍历dexElements数组，找到最前面的dex文件优先加载\n\n\n### 25、进程保活面试题\n\n1、进程的优先级\n空进程\n后台进程\n服务进程\n可见进程\n前台进程\n\n2、Android进程回收策略\nLow memory Killer（定时执行）：通过一些比较复杂的评分机制，对进程进行打分，然后将分数高的进程判定为bad进程，杀死并释放内存\nOOM_ODJ：判别进程的优先级\n\n3、Android保活方案\n利用系统广播拉活\n利用系统Service机制拉活\n利用Native进程拉活\n利用JobScheduler机制拉活\n利用账号同步机制拉活\n\n### 26、Lint面试题\n\n1、什么是Android Lint\nAndroid Lint是一个静态代码分析工具，它能够对你的Android项目中潜在的Bug、可优化的代码、安全性、性能、可用性、可访问性、国际化等进行检查\n\n2、Lint工作流程\n![](/images/blogimages/2017/android_lint.png)\n\n3、配置Lint\n创建Lint.xml到根目录下，自定义Lint安全等级等\n在Java文件中可以使用@suppressLint(“NewApi”)来忽视Lint的报错\n在xml文件中可以使用tool:ignore(“UnusedResources”)来忽视Lint的报错\n自定义Lint检查，可以创建类，继承Detector和实现JavaPsiScanner\n\n### 27、Kotlin面试题\n\n1、什么是Kotlin\nKotlin是一种基于JVM的编程语言\n对Java的一种拓展，比Java更简洁\nKotlin支持函数式编程\nKotlin类和Java类可以相互调用\n\n2、Kotlin环境搭建\n直接在Plugin中下载Kotlin插件即可\n系统会自动配置到Kotlin环境\n","slug":"IntervieweeQuestions","published":1,"date":"2017-08-16T16:00:00.000Z","updated":"2017-11-24T03:01:55.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec1j003td6ykynv0l9r3","content":"<h3 id=\"1、Activity面试题\"><a href=\"#1、Activity面试题\" class=\"headerlink\" title=\"1、Activity面试题\"></a>1、Activity面试题</h3><p>1、Activity是什么<br>Activity是四大组件之一，它提供一个界面让用户点击和各种滑动操作，这就是Activity</p>\n<p>2、Activity四种状态<br>runing<br>paused<br>stopped<br>killed</p>\n<p>3、Activity生命周期<br>onCreate()<br>onStart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroy()<br>onRestart()</p>\n<p>4、进程的优先级<br>空进程<br>后台进程<br>服务进程<br>可见进程<br>前台进程</p>\n<p>5、Activity任务栈<br>先进后出<br><a id=\"more\"></a><br>6、Activity启动模式<br>standard<br>singletop<br>singletask: 能够保证Activity A在栈中只有一个实例，这个栈也允许存在其他的实例.</p>\n<blockquote>\n<p>特别需要注意的是使用startActivityForResult方法的时候，根据startActivityForResult的api说明: if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result<br>意思就是使用startActivityForResult方法启动一个singleTask的Activity，该Activity不会启动，会收到一个RESULT_CANCELED结果</p>\n</blockquote>\n<p>singleinstance: singleInstance要求activity的实例不仅只有一个，并且整个task中只有一个activity实例，而singleTask所在的栈中允许存在其他activity的实例。</p>\n<blockquote>\n<p>singleInstance的activity也具有上面的特性，此外，activity设置了singleInstance，那么无论被启动的activity有没有设置singleInstance，都无法获取返回值</p>\n</blockquote>\n<p>7、scheme跳转协议<br>Android中的scheme是一种页面内跳转协议，通过定义自己的scheme协议，可以跳转到app中的各个页面<br>服务器可以定制化告诉app跳转哪个页面<br>App可以通过跳转到另一个App页面<br>可以通过H5页面跳转页面（DeepLink）：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;[scheme]://[host]/[path]?[query]&quot;&gt;启动应用程序&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"http\" /&gt;</div><div class=\"line\">    &lt;!-- or you can use deep linking like  --&gt;</div><div class=\"line\">    &lt;data android:scheme=\"http\" android:host=\"xyz.abc.com\"/&gt;</div><div class=\"line\">    &lt;action android:name=\"android.intent.action.VIEW\"/&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.BROWSABLE\"/&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.DEFAULT\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2、Fragment面试题\"><a href=\"#2、Fragment面试题\" class=\"headerlink\" title=\"2、Fragment面试题\"></a>2、Fragment面试题</h3><p>1、Fragment为什么被称为第五大组件<br>Fragment比Activity更节省内存，其切换模式也更加舒适，使用频率不低于四大组件，且有自己的生命周期，而且必须依附于Activity</p>\n<p>2、Activity创建Fragment的方式<br>静态创建：在activity布局文件里声明fragment，<br>activity_main.xml中声明：</p>\n<fragment android:name=\"com.example.myfragment.MyFragment\" android:id=\"@+id/myfragment_1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\">\n\n<p>动态创建：通过java代码将fragment添加到已存的ViewGroup中<br>fragment = new MyFragment();<br>fragmentStack.push(fragment);<br>transaction = manager.beginTransaction();<br>transaction.add(R.id.fragments, fragment);<br>transaction.commit();</p>\n<p>3、FragmentPageAdapter和FragmentPageStateAdapter的区别<br>FragmentPageAdapter在每次切换页面的的时候，是将Fragment进行分离，适合页面较少的Fragment使用以保存一些内存，对系统内存不会多大影响<br>FragmentPageStateAdapter在每次切换页面的时候，是将Fragment进行回收，适合页面较多的Fragment使用，这样就不会消耗更多的内存</p>\n<p>4、Fragment生命周期<br>onAttach()<br>onCreate()<br>onCreateView()<br>onActivityCreated()<br>onStart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroyView()<br>onDestroy()<br>onDetach()</p>\n<p>5、Fragment的通信<br>Fragment调用Activity中的方法：getActivity<br>Activity调用Fragment中的方法：接口回调<br>Fragment调用Fragment中的方法：FragmentManager.findFragmentById</p>\n<p>6、Fragment的replace、add、remove方法<br>replace：替代Fragment的栈顶页面<br>add：添加Fragment到栈顶页面<br>remove：移除Fragment栈顶页面</p>\n<h3 id=\"3、Service面试题\"><a href=\"#3、Service面试题\" class=\"headerlink\" title=\"3、Service面试题\"></a>3、Service面试题</h3><p>1、Service是什么<br>Service是四大组件之一，它可以在后台执行长时间运行操作而没有用户界面的应用组件</p>\n<p>2、Service和Thread的区别<br>Service是安卓中系统的组件，它运行在独立进程的主线程中，不可以执行耗时操作，超时会有ANR异常。Thread是程序执行的最小单元，分配CPU的基本单位，可以开启子线程执行耗时操作<br>Service在不同Activity中可以获取自身实例，可以方便的对Service进行操作。Thread在不同的Activity中难以获取自身实例，如果Activity被销毁，Thread实例就很难再获取得到</p>\n<p>3、Service启动方式<br>startService<br>bindService</p>\n<p>4、Service生命周期<br>startService<br>onCreate()<br>onStartCommand()<br>onDestroy()<br>bindService<br>onCreate()<br>onBind()<br>onUnbind()<br>onDestroy()</p>\n<h3 id=\"4、Broadcast-Receiver面试题\"><a href=\"#4、Broadcast-Receiver面试题\" class=\"headerlink\" title=\"4、Broadcast Receiver面试题\"></a>4、Broadcast Receiver面试题</h3><p>1、Broadcast Receiver是什么<br>Broadcast是四大组件之一，是一种广泛运用在应用程序之间传输信息的机制，通过发送Intent来传送我们的数据</p>\n<p>2、Broadcast Receiver的使用场景<br>同一App具有多个进程的不同组件之间的消息通信<br>不同App之间的组件之间的消息通信</p>\n<p>3、Broadcast Receiver的种类<br>普通广播<br>有序广播 Context.sendOrderedBroadcast<br>本地广播 LocalBroadcastManager.getInstance(context).sendBroadcast(intent) 除了能解决BroadcastReceiver进程间安全性问题外，相对Context操作的BroadcastReceiver而言还具有更高的运行效率。<br>Sticky广播 的sendStickyBroadcast(Intent)接口发送，需要添加权限<uses-permission android:name=\"android.permission.BROADCAST_STICKY\"><br>也可以通过Context的removeStickyBroadcast(Intent intent)接口移除缓存的粘性广播。<br>sticky有序广播 StickyOrderedBroadcast</uses-permission></p>\n<p>4、Broadcast Receiver的实现<br>静态注册：注册后一直运行，尽管Activity、进程、App被杀死还是可以接收到广播<br>动态注册：跟随Activity的生命周期</p>\n<p>5、Broadcast Receiver实现机制<br>自定义广播类继承BroadcastReceiver，复写onReceiver()<br>通过Binder机制向AMS进行注册广播<br>广播发送者通过Binder机制向AMS发送广播<br>AMS查找符合相应条件的广播发送到BroadcastReceiver相应的循环队列中<br>消息队列执行拿到广播，回调BroadcastReceiver的onReceiver()</p>\n<p>6、LocalBroadcastManager特点<br>本地广播只能在自身App内传播，不必担心泄漏隐私数据<br>本地广播不允许其他App对你的App发送该广播，不必担心安全漏洞被利用<br>本地广播比全局广播更高效<br>以上三点都是源于其内部是用Handler实现的</p>\n<h3 id=\"5、WebView面试题\"><a href=\"#5、WebView面试题\" class=\"headerlink\" title=\"5、WebView面试题\"></a>5、WebView面试题</h3><p>1、WebView安全漏洞<br>API16之前存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java反射机制利用该漏洞执行任意Java对象的方法</p>\n<p>2、WebView销毁步骤<br>WebView在其他容器上时（如：LinearLayout），当销毁Activity时，需要在onDestroy()中先移除容器上的WebView，然后再将WebView.destroy()，这样就不会导致内存泄漏</p>\n<p>3、WebView的jsbridge<br>客户端和服务端之间可以通过Javascript来互相调用各自的方法</p>\n<p>4、WebViewClient的onPageFinished<br>WebViewClient的onPageFinished在每次完成页面的时候调用，但是遇到未加载完成的页面跳转其他页面时，就会一直调用，使用WebChromeClient.onProgressChanged可以替代</p>\n<p>5、WebView后台耗电<br>在WebView加载页面的时候，会自动开启线程去加载，如果不很好的关闭这些线程，就会导致电量消耗加大，可以采用暴力的方法，直接在onDestroy方法中System.exit(0)结束当前正在运行中的java虚拟机</p>\n<p>6、WebView硬件加速<br>Android3.0引入硬件加速，默认会开启，WebView在硬件加速的情况下滑动更加平滑，性能更加好，但是会出现白块或者页面闪烁的副作用，建议WebView暂时关闭硬件加速</p>\n<p>7、WebView内存泄漏<br>由于WebView是依附于Activity的，Activity的生命周期和WebView启动的线程的生命周期是不一致的，这会导致WebView一直持有对这个Activity的引用而无法释放，解决方案如下<br>独立进程，简单暴力，不过可能涉及到进程间通信（推荐）<br>动态添加WebView，对传入WebView中使用的Context使用弱引用</p>\n<h3 id=\"6、Binder面试题\"><a href=\"#6、Binder面试题\" class=\"headerlink\" title=\"6、Binder面试题\"></a>6、Binder面试题</h3><p>1、Linux内核的基本知识</p>\n<p><img src=\"/images/blogimages/2017/binder-01.png\" alt=\"\"><br>进程隔离/虚拟地址空间：进程间是不可以共享数据的，相当于被隔离，每个进程被分配到不同的虚拟地址中<br>系统调用：Linux内核对应用有访问权限，用户只能在应用层通过系统调用，调用内核的某些程序<br>binder驱动：它负责各个用户的进程，通过binder通信内核来进行交互的模块</p>\n<p>而Binder，就是充当 连接 两个进程（内核空间）的通道。</p>\n<p>2、为什么使用Binder<br>性能上，相比传统的Socket更加高效<br>安全性高，支持协议双方互相校验</p>\n<p>3、Binder通信模型<br><img src=\"/images/blogimages/2017/binder-02.png\" alt=\"\"></p>\n<blockquote>\n<p>虚线表示并非直接交互</p>\n</blockquote>\n<p>说明1：Client进程、Server进程 &amp; Service Manager 进程之间的交互都必须通过Binder驱动（使用 open 和 ioctl文件操作函数），而非直接交互</p>\n<p>原因：</p>\n<ol>\n<li>Client进程、Server进程 &amp; Service Manager进程属于进程空间的用户空间，不可进行进程间交互</li>\n<li>Binder驱动 属于 进程空间的 内核空间，可进行进程间 &amp; 进程内交互</li>\n</ol>\n<p>说明2： Binder驱动 &amp; Service Manager进程 属于 Android基础架构（即系统已经实现好了）；而Client 进程 和 Server 进程 属于Android应用层（需要开发者自己实现）</p>\n<p>所以，在进行跨进程通信时，开发者只需自定义Client &amp; Server 进程 并 显式使用上述3个步骤，最终借助 Android的基本架构功能就可完成进程间通信</p>\n<p>详细参考这篇博客：<a href=\"http://blog.csdn.net/carson_ho/article/details/73560642\" target=\"_blank\" rel=\"external\">图文详解 Android Binder 跨进程通信机制原理</a></p>\n<p>对比 Linux （Android基于linux）上的其他进程通信方式（管道/消息队列/共享内存/信号量/Socket），Binder 机制的优点有：</p>\n<ul>\n<li>高效<br>Binder数据拷贝只需要一次，而管道、消息队列、Socket都需要2次<br>通过驱动在内核空间拷贝数据，不需要额外的同步处理</li>\n<li>安全性高<br>Binder 机制为每个进程分配了 UID/PID 来作为鉴别身份的标示，并且在 Binder 通信时会根据 UID/PID 进行有效性检测<br>传统的进程通信方式对于通信双方的身份并没有做出严格的验证<br>如，Socket通信 ip地址是客户端手动填入，容易出现伪造</li>\n<li>使用简单<br>采用Client/Server 架构<br>实现 面向对象 的调用方式，即在使用Binder时就和调用一个本地对象实例一样</li>\n</ul>\n<p>4、AIDL<br>客户端通过aidl文件的Stub.asInterface()方法，拿到Proxy代理类<br>通过调用Proxy代理类的方法，将参数进行封包后，调用底层的transact()方法<br>transact()方法会回调onTransact()方法，进行参数的解封<br>在onTransact()方法中调用服务端对应的方法，并将结果返回</p>\n<h3 id=\"7、Handler面试题\"><a href=\"#7、Handler面试题\" class=\"headerlink\" title=\"7、Handler面试题\"></a>7、Handler面试题</h3><p>1、Handler是什么<br>Handler通过发送和处理Message和Runnable对象来关联相对应线程的MessageQueue</p>\n<p>2、Handler使用方法<br>post(runnable)<br>sendMessage(message)</p>\n<p>3、Handler工作原理<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53394061\" target=\"_blank\" rel=\"external\">Android进阶——Android消息机制之Looper、Handler、MessageQueen</a></p>\n<p>4、Handler引起的内存泄漏<br>原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放<br>解决：<br>Handler内部持有外部Activity的弱引用<br>Handler改为静态内部类<br>Handler.removeCallback()</p>\n<h3 id=\"8、AsyncTask面试题\"><a href=\"#8、AsyncTask面试题\" class=\"headerlink\" title=\"8、AsyncTask面试题\"></a>8、AsyncTask面试题</h3><p>1、AsyncTask是什么<br>它本质上就是一个封装了线程池和Handler的异步框架</p>\n<p>2、AsyncTask使用方法<br>三个参数<br>Params：表示后台任务执行时的参数类型，该参数会传给AysncTask的 <strong>doInBackground()</strong> 方法<br>Progress：表示后台任务的执行进度的参数类型，该参数会作为 <strong>onProgressUpdate()</strong> 方法的参数<br>Result：表示后台任务的返回结果的参数类型，该参数会作为 <strong>onPostExecute()</strong> 方法的参数<br>五个方法<br>onPreExecute()：异步任务开启之前回调，在主线程中执行<br>doInBackground()：执行异步任务，在线程池中执行<br>onProgressUpdate()：当doInBackground中调用publishProgress时回调，在主线程中执行<br>onPostExecute()：在异步任务执行之后回调，在主线程中执行<br>onCancelled()：在异步任务被取消时回调</p>\n<p>3、AsyncTask工作原理<br>Android进阶——多线程系列之异步任务AsyncTask的使用与源码分析<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53203556\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_30379689/article/details/53203556</a></p>\n<p>4、AsyncTask引起的内存泄漏<br>原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放<br>解决：<br>AsyncTask内部持有外部Activity的弱引用<br>AsyncTask改为静态内部类<br>AsyncTask.cancel()</p>\n<p>5、AsyncTask生命周期<br>在Activity销毁之前，取消AsyncTask的运行，以此来保证程序的稳定</p>\n<p>6、AsyncTask结果丢失<br>由于屏幕旋转、Activity在内存紧张时被回收等情况下，Activity会被重新创建，此时，旧的AsyncTask持有旧的Activity引用，这个时候会导致AsyncTask的 <strong>onPostExecute()对UI更新无效</strong></p>\n<p>7、AsyncTask并行or串行<br>AsyncTask在Android 2.3之前默认采用并行执行任务，AsyncTask在Android 2.3之后默认采用串行执行任务<br>如果需要在Android 2.3之后采用并行执行任务，可以调用AsyncTask的executeOnExecutor()</p>\n<h3 id=\"9、HandlerThread面试题\"><a href=\"#9、HandlerThread面试题\" class=\"headerlink\" title=\"9、HandlerThread面试题\"></a>9、HandlerThread面试题</h3><p>1、HandlerThread产生背景<br>当系统有多个耗时任务需要执行时，每个任务都会开启一个新线程去执行耗时任务，这样会导致系统多次创建和销毁线程，从而影响性能。为了解决这一问题，Google提供了HandlerThread，HandlerThread是在线程中创建一个Looper循环器，让Looper轮询消息队列，当有耗时任务进入队列时，则不需要开启新线程，在原有的线程中执行耗时任务即可，否则线程阻塞</p>\n<p>2、HanlderThread的特点、<br>HandlerThread本质上是一个线程，继承自Thread<br>HandlerThread有自己的Looper对象，可以进行Looper循环，可以创建Handler<br>HandlerThread可以在Handler的handlerMessage中执行异步方法<br>HandlerThread优点是异步不会堵塞，减少对性能的消耗<br>HandlerThread缺点是不能同时继续进行多任务处理，需要等待进行处理，处理效率较低<br>HandlerThread与线程池不同，HandlerThread是一个串行队列，背后只有一个线程。</p>\n<h3 id=\"10、IntentService面试题\"><a href=\"#10、IntentService面试题\" class=\"headerlink\" title=\"10、IntentService面试题\"></a>10、IntentService面试题</h3><p>1、IntentService是什么<br>IntentService是继承自Service并处理异步请求的一个类，其内部采用HandlerThread和Handler实现的，在IntentService内有一个工作线程来处理耗时操作，其优先级比普通Service高。当任务完成后，IntentService会自动停止，而不需要手动调用stopSelf()。另外，可以多次启动IntentService，每个耗时操作都会以工作队列的方式在IntentService中 <strong>onHandlerIntent()</strong> 回调方法中执行，并且每次只会执行一个工作线程</p>\n<p>2、IntentService使用方法<br>创建Service继承自IntentService<br>覆写构造方法和onHandlerIntent()方法<br>在onHandlerIntent()中执行耗时操作</p>\n<h3 id=\"11、视图工作机制面试题\"><a href=\"#11、视图工作机制面试题\" class=\"headerlink\" title=\"11、视图工作机制面试题\"></a>11、视图工作机制面试题</h3><p><a href=\"http://blog.csdn.net/qq_30379689/article/details/54588736\" target=\"_blank\" rel=\"external\">Android进阶——Android视图工作机制之measure、layout、draw</a></p>\n<p><a href=\"http://blog.csdn.net/qq_30379689/article/details/53967177\" target=\"_blank\" rel=\"external\">Android事件分发机制之dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent</a></p>\n<h3 id=\"12、ListView面试题\"><a href=\"#12、ListView面试题\" class=\"headerlink\" title=\"12、ListView面试题\"></a>12、ListView面试题</h3><p>1、ListView是什么<br>ListView是能将一个数据集合以动态滚动的方式展示到用户界面上的View</p>\n<p>2、ListView的RecycleBin机制</p>\n<p><img src=\"/images/blogimages/2017/listview_recyclebin.png\" alt=\"\"></p>\n<p>3、ListView的优化<br>重用convertView<br>使用ViewHolder<br>图片三级缓存<br>监听滑动事件<br>少用透明View<br>开启硬件加速</p>\n<h3 id=\"13、Android项目构建面试题\"><a href=\"#13、Android项目构建面试题\" class=\"headerlink\" title=\"13、Android项目构建面试题\"></a>13、Android项目构建面试题</h3><p>1、android构建流程</p>\n<p><img src=\"/images/blogimages/2017/android_build_process.png\" alt=\"\"></p>\n<p>2、jenkins持续集成构建<br>这里可参考<a href=\"http://www.pgyer.com/doc/view/jenkins\" target=\"_blank\" rel=\"external\">蒲公英文档</a></p>\n<p>3、Git常用命令<br>git init：仓库的初始化<br>git status：查看当前仓库的状态<br>git diff：查看仓库与上次修改的内容<br>git add：将文件放进暂存区<br>git commit：提交代码<br>git clone：克隆代码<br>git bransh：查看当前分支<br>git checkout：切换当前分支</p>\n<p>4、git工作流<br>fork/clone（主流）<br>fork：将别人的仓库代码fork到自己的仓库上<br>clone：克隆下自己仓库的代码<br>update、commit：修改代码并提交到自己的仓库<br>push：提交到自己的仓库<br>pull request：请求添加到别人的仓库<br>clone</p>\n<p>5、proguard是什么<br>ProGuard工具是用于压缩、优化和混淆我们的代码，其主作用是移除或混淆代码中无用类、字段、方法和属性</p>\n<p>6、proguard技术功能<br>压缩<br>优化<br>混淆<br>预检测</p>\n<p>7、proguard工作原理<br>将无用的字段或方法存入到EntryPoint中，将非EntryPoint的字段和方法进行替换</p>\n<p>8、为什么要混淆<br>由于Java是一门跨平台的解释性语言，其源代码被编译成class字节码来适应其他平台，而class文件包含了Java源代码信息，很容易被反编译</p>\n<h3 id=\"14、ANR面试题\"><a href=\"#14、ANR面试题\" class=\"headerlink\" title=\"14、ANR面试题\"></a>14、ANR面试题</h3><p>1、什么是ANR<br>Application Not Responding，页面无响应的对话框</p>\n<p>2、发生ANR的条件<br>应用程序的响应性是由ActivityManager和WindowManager系统服务监视的，当ANR发生条件满足时，就会弹出ANR的对话框<br>Activity超过5秒无响应<br>BroadcastReceiver超过10秒无响应<br>Service超过20秒无响应</p>\n<p>3、造成ANR的主要原因<br>主线程被IO操作阻塞<br>Activity的所有生命周期回调都是执行在主线程的<br>Service默认执行在主线程中<br>BoardcastReceiver的回调onReceive()执行在主线程中<br>AsyncTask的回调除了doInBackground，其他都是在主线程中<br>没有使用子线程Looper的Handler的handlerMessage，post(Runnable)都是执行在主线程中</p>\n<p>4、如何解决ANR<br>使用AsyncTask处理耗时IO操作<br>使用Thread或HandlerThread提供优先级<br>使用Handler处理工作线程的耗时操作<br>Activity的onCreate和onResume回调尽量避免耗时操作</p>\n<h3 id=\"15、OOM面试题\"><a href=\"#15、OOM面试题\" class=\"headerlink\" title=\"15、OOM面试题\"></a>15、OOM面试题</h3><p>1、什么是OOM<br>OOM指Out of memory（内存溢出），当前占用内存加上我们申请的内存资源超过了Dalvik虚拟机的最大内存限制就会抛出Out of memory异常</p>\n<p>2、OOM相关概念<br>内存溢出：指程序在申请内存时，没有足够的空间供其使用<br>内存泄漏：指程序分配出去的内存不再使用，无法进行回收<br>内存抖动：指程序短时间内大量创建对象，然后回收的现象</p>\n<p>3、解决OOM<br>Bitmap相关<br>图片压缩<br>加载缩略图<br>在滚动时不加载图片<br>回收Bitmap<br>使用inBitmap属性<br>捕获异常<br>其他相关<br>listview重用convertView、使用LruCache<br>避免onDraw方法执行对象的创建<br>谨慎使用多进程</p>\n<h3 id=\"16、Bitmap面试题\"><a href=\"#16、Bitmap面试题\" class=\"headerlink\" title=\"16、Bitmap面试题\"></a>16、Bitmap面试题</h3><p>1、recycle<br>在安卓3.0以前Bitmap是存放在堆中的，我们只要回收堆内存即可<br>在安卓3.0以后Bitmap是存放在内存中的，我们需要回收native层和Java层的内存<br>官方建议我们3.0以后使用recycle方法进行回收，该方法也可以不主动调用，因为垃圾回收器会自动收集不可用的Bitmap对象进行回收<br>recycle方法会判断Bitmap在不可用的情况下，将发送指令到垃圾回收器，让其回收native层和Java层的内存，则Bitmap进入dead状态<br>recycle方法是不可逆的，如果再次调用getPixels()等方法，则获取不到想要的结果</p>\n<p>2、LruCache原理<br>LruCache是个泛型类，内部采用LinkedHashMap来实现缓存机制，它提供get方法和put方法来获取缓存和添加缓存，其最重要的方法trimToSize是用来移除最少使用的缓存和使用最久的缓存，并添加最新的缓存到队列中</p>\n<p>3、计算inSampleSize<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (width &gt; height) &#123;</div><div class=\"line\">            inSampleSize = Math.round((<span class=\"keyword\">float</span>)height / (<span class=\"keyword\">float</span>)reqHeight);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inSampleSize = Math.round((<span class=\"keyword\">float</span>)width / (<span class=\"keyword\">float</span>)reqWidth);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、缩略图<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">thumbnail</span><span class=\"params\">(String path,<span class=\"keyword\">int</span> maxWidth, <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">boolean</span> autoRotate)</span> </span>&#123;</div><div class=\"line\">    BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">    Bitmap bitmap = BitmapFactory.decodeFile(path, options);</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> sampleSize = calculateInSampleSize(options, maxWidth, maxHeight);</div><div class=\"line\">    options.inSampleSize = sampleSize;</div><div class=\"line\">    options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class=\"line\">    options.inPurgeable = <span class=\"keyword\">true</span>;</div><div class=\"line\">    options.inInputShareable = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class=\"line\">        bitmap.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    bitmap = BitmapFactory.decodeFile(path, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5、保存Bitmap<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">save</span><span class=\"params\">(Bitmap bitmap,Bitmap.CompressFormat format, <span class=\"keyword\">int</span> quality, File destFile)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        FileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(destFile);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap.compress(format, quality, out)) &#123;</div><div class=\"line\">            out.flush();</div><div class=\"line\">            out.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class=\"line\">            bitmap.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> destFile.getAbsolutePath();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6、保存到SD卡</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">save</span><span class=\"params\">(Bitmap bitmap,Bitmap.CompressFormat format, <span class=\"keyword\">int</span> quality, Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Environment.getExternalStorageState()</div><div class=\"line\">            .equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    File dir = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory()</div><div class=\"line\">            + <span class=\"string\">\"/\"</span> + context.getPackageName() + <span class=\"string\">\"/save/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">        dir.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    File destFile = <span class=\"keyword\">new</span> File(dir, UUID.randomUUID().toString());</div><div class=\"line\">    <span class=\"keyword\">return</span> save(bitmap, format, quality, destFile);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>7、三级缓存<br>网络缓存<br>本地缓存<br>内存缓存</p>\n<h3 id=\"17、UI卡顿面试题\"><a href=\"#17、UI卡顿面试题\" class=\"headerlink\" title=\"17、UI卡顿面试题\"></a>17、UI卡顿面试题</h3><p>1、UI卡顿原理<br>View的绘制帧数保持60fps是最佳，这要求每帧的绘制时间不超过16ms（1000/60），如果安卓不能在16ms内完成界面的渲染，那么就会出现卡顿现象</p>\n<p>2、UI卡顿的原因分析<br>在UI线程中做轻微的耗时操作，导致UI线程卡顿<br>布局Layout过于复杂，无法在16ms内完成渲染<br>同一时间动画执行的次数过多，导致CPU和GPU负载过重<br>overDraw，导致像素在同一帧的时间内被绘制多次，使CPU和GPU负载过重<br>View频繁的触发measure、layout，导致measure、layout累计耗时过多和整个View频繁的重新渲染<br>频繁的触发GC操作导致线程暂停，会使得安卓系统在16ms内无法完成绘制<br>冗余资源及逻辑等导致加载和执行缓慢<br>ANR</p>\n<p>3、UI卡顿的优化<br>布局优化<br>使用include、ViewStub、merge<br>不要出现过于嵌套和冗余的布局<br>使用自定义View取代复杂的View<br>ListView优化<br>复用convertView<br>滑动不加载<br>背景和图片优化<br>缩略图<br>图片压缩<br>避免ANR<br>不要在UI线程中做耗时操作</p>\n<h3 id=\"18、内存泄漏面试题\"><a href=\"#18、内存泄漏面试题\" class=\"headerlink\" title=\"18、内存泄漏面试题\"></a>18、内存泄漏面试题</h3><p>1、Java内存泄漏引起的主要原因<br>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏</p>\n<p>2、Java内存分配策略<br>静态存储区：又称方法区，主要存储全局变量和静态变量，在整个程序运行期间都存在<br>栈区：方法体的局部变量会在栈区创建空间，并在方法执行结束后会自动释放变量的空间和内存<br>堆区：保存动态产生的数据，如：new出来的对象和数组，在不使用的时候由Java回收器自动回收</p>\n<p>3、Android解决内存泄漏的例子<br>单例造成的内存泄漏：在单例中，使用context.getApplicationContext()作为单例的context<br>匿名内部类造成的内存泄漏：由于非静态内部类持有匿名外部类的引用，必须将内部类设置为static<br>Handler造成的内存泄漏：使用static的Handler内部类，同时在实现内部类中持有Context的弱引用<br>避免使用static变量：由于static变量会跟Activity生命周期一致，当Activity退出后台被后台回收时，static变量是不安全，所以也要管理好static变量的生命周期<br>资源未关闭造成的内存泄漏：比如Socket、Broadcast、Cursor、Bitmap、ListView等，使用完后要关闭<br>AsyncTask造成的内存泄漏：由于非静态内部类持有匿名内部类的引用而造成内存泄漏，可以通过AsyncTask内部持有外部Activity的弱引用同时改为静态内部类或在onDestroy()中执行AsyncTask.cancel()进行修复</p>\n<h3 id=\"19、内存管理面试题\"><a href=\"#19、内存管理面试题\" class=\"headerlink\" title=\"19、内存管理面试题\"></a>19、内存管理面试题</h3><p>1、Android内存管理机制<br>分配机制<br>管理机制</p>\n<p>2、内存管理机制的特点<br>更少的占用内存<br>在合适的时候，合理的释放系统资源<br>在系统内存紧张的时候，能释放掉大部分不重要的资源<br>能合理的在特殊生命周期中，保存或还原重要数据</p>\n<p>3、内存优化方法<br>Service完成任务后应停止它，或用IntentService（因为可以自动停止服务）代替Service<br>在UI不可见的时候，释放其UI资源<br>在系统内存紧张的时候，尽可能多的释放非重要资源<br>避免滥用Bitmap导致内存浪费<br>避免使用依赖注入框架<br>使用针对内存优化过的数据容器<br>使用ZIP对齐的APK<br>使用多进程</p>\n<h3 id=\"20、冷启动和热启动面试题\"><a href=\"#20、冷启动和热启动面试题\" class=\"headerlink\" title=\"20、冷启动和热启动面试题\"></a>20、冷启动和热启动面试题</h3><p>1、什么是冷启动和热启动<br>冷启动：在启动应用前，系统中没有该应用的任何进程信息<br>热启动：在启动应用时，在已有的进程上启动应用（用户使用返回键退出应用，然后马上又重新启动应用）</p>\n<p>2、冷启动和热启动的区别<br>冷启动：创建Application后再创建和初始化MainActivity<br>热启动：创建和初始化MainActivity即可</p>\n<p>3、冷启动时间的计算<br>这个时间值从应用启动（创建进程）开始计算，到完成视图的第一次绘制为止</p>\n<p>4、冷启动流程<br>Zygote进程中fork创建出一个新的进程<br>创建和初始化Application类、创建MainActivity<br>inflate布局、当onCreate/onStart/onResume方法都走完<br>contentView的measure/layout/draw显示在界面上<br>总结：Application构造方法-&gt;attachBaseContext()-&gt;onCreate()-&gt;Activity构造方法-&gt;onCreate()-&gt;配置主题中背景等属性-&gt;onStart()-&gt;onResume()-&gt;测量布局绘制显示在界面上</p>\n<p>5、冷启动优化<br>减少第一个界面onCreate()方法的工作量<br>不要让Application参与业务的操作<br>不要在Application进行耗时操作<br>不要以静态变量的方式在Application中保存数据<br>减少布局的复杂性和深度<br>不要在mainThread中加载资源<br>通过懒加载方式初始化第三方SDK</p>\n<h3 id=\"21、其他优化面试题\"><a href=\"#21、其他优化面试题\" class=\"headerlink\" title=\"21、其他优化面试题\"></a>21、其他优化面试题</h3><p>1、Android不用静态变量存储数据<br>静态变量等数据由于进程已经被杀死而被初始化<br>使用其他数据传输方式：文件/sp/contentProvider</p>\n<p>2、SharePreference安全问题<br>不能跨进程同步<br>文件不宜过大</p>\n<p>3、内存对象序列化<br>Serializeble：是java的序列化方式，Serializeble在序列化的时候会产生大量的临时对象，从而引起频繁的GC<br>Parcelable：是Android的序列化方式，且性能比Serializeble高，Parcelable不能使用在要将数据存储在硬盘上的情况</p>\n<p>4、避免在UI线程中做繁重的操作</p>\n<h3 id=\"22、架构模式面试题\"><a href=\"#22、架构模式面试题\" class=\"headerlink\" title=\"22、架构模式面试题\"></a>22、架构模式面试题</h3><p>Android基础——框架模式MVC在安卓中的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/52909656\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_30379689/article/details/52909656</a><br>Android基础——框架模式MVP在安卓中的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/52910567\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_30379689/article/details/52910567</a><br>Android基础——框架模式MVVM之DataBinding的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53037430\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_30379689/article/details/53037430</a></p>\n<h3 id=\"23、插件化面试题\"><a href=\"#23、插件化面试题\" class=\"headerlink\" title=\"23、插件化面试题\"></a>23、插件化面试题</h3><p>1、插件化解决的问题<br>动态加载APK（反射、类加载器）<br>资源加载（反射、AssetManager、独立资源、分段资源）<br>代码加载（反射获取生命周期）</p>\n<p>2、类加载器（Java中字节码添加到虚拟机中）<br>DexClassLoader：能够加载未安装的jar/apk/dex，主要用于动态加载和代码热更新<br>PathClassLoader：只能加载系统中已经安装过的apk</p>\n<h3 id=\"24、热更新面试题\"><a href=\"#24、热更新面试题\" class=\"headerlink\" title=\"24、热更新面试题\"></a>24、热更新面试题</h3><p>1、热更新主要流程<br>线上检查到Crash<br>拉出Bugfix分支修复Crash问题<br>jenkins构建和补丁生成<br>app通过推送或主动拉取补丁文件<br>将Bugfix代码合到master上</p>\n<p>2、热更新主流框架<br>Dexposed<br>AndFix<br>Nuwa<br>Tinker</p>\n<p>3、热更新的原理<br>在ClassLoader创建一个dexElements数组<br>将修复好的dex文件存放在dexElements数组的最前面<br>ClassLoader会遍历dexElements数组，找到最前面的dex文件优先加载</p>\n<h3 id=\"25、进程保活面试题\"><a href=\"#25、进程保活面试题\" class=\"headerlink\" title=\"25、进程保活面试题\"></a>25、进程保活面试题</h3><p>1、进程的优先级<br>空进程<br>后台进程<br>服务进程<br>可见进程<br>前台进程</p>\n<p>2、Android进程回收策略<br>Low memory Killer（定时执行）：通过一些比较复杂的评分机制，对进程进行打分，然后将分数高的进程判定为bad进程，杀死并释放内存<br>OOM_ODJ：判别进程的优先级</p>\n<p>3、Android保活方案<br>利用系统广播拉活<br>利用系统Service机制拉活<br>利用Native进程拉活<br>利用JobScheduler机制拉活<br>利用账号同步机制拉活</p>\n<h3 id=\"26、Lint面试题\"><a href=\"#26、Lint面试题\" class=\"headerlink\" title=\"26、Lint面试题\"></a>26、Lint面试题</h3><p>1、什么是Android Lint<br>Android Lint是一个静态代码分析工具，它能够对你的Android项目中潜在的Bug、可优化的代码、安全性、性能、可用性、可访问性、国际化等进行检查</p>\n<p>2、Lint工作流程<br><img src=\"/images/blogimages/2017/android_lint.png\" alt=\"\"></p>\n<p>3、配置Lint<br>创建Lint.xml到根目录下，自定义Lint安全等级等<br>在Java文件中可以使用@suppressLint(“NewApi”)来忽视Lint的报错<br>在xml文件中可以使用tool:ignore(“UnusedResources”)来忽视Lint的报错<br>自定义Lint检查，可以创建类，继承Detector和实现JavaPsiScanner</p>\n<h3 id=\"27、Kotlin面试题\"><a href=\"#27、Kotlin面试题\" class=\"headerlink\" title=\"27、Kotlin面试题\"></a>27、Kotlin面试题</h3><p>1、什么是Kotlin<br>Kotlin是一种基于JVM的编程语言<br>对Java的一种拓展，比Java更简洁<br>Kotlin支持函数式编程<br>Kotlin类和Java类可以相互调用</p>\n<p>2、Kotlin环境搭建<br>直接在Plugin中下载Kotlin插件即可<br>系统会自动配置到Kotlin环境</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/17/IntervieweeQuestions/\">http://agehua.github.io/2017/08/17/IntervieweeQuestions/</a></p>\n</fragment>","readingTime":{"text":"6 min read","minutes":5.38,"time":322800,"words":1076},"excerpt":"<h3 id=\"1、Activity面试题\"><a href=\"#1、Activity面试题\" class=\"headerlink\" title=\"1、Activity面试题\"></a>1、Activity面试题</h3><p>1、Activity是什么<br>Activity是四大组件之一，它提供一个界面让用户点击和各种滑动操作，这就是Activity</p>\n<p>2、Activity四种状态<br>runing<br>paused<br>stopped<br>killed</p>\n<p>3、Activity生命周期<br>onCreate()<br>onStart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroy()<br>onRestart()</p>\n<p>4、进程的优先级<br>空进程<br>后台进程<br>服务进程<br>可见进程<br>前台进程</p>\n<p>5、Activity任务栈<br>先进后出<br>","more":"<br>6、Activity启动模式<br>standard<br>singletop<br>singletask: 能够保证Activity A在栈中只有一个实例，这个栈也允许存在其他的实例.</p>\n<blockquote>\n<p>特别需要注意的是使用startActivityForResult方法的时候，根据startActivityForResult的api说明: if the activity you are launching uses the singleTask launch mode, it will not run in your task and thus you will immediately receive a cancel result<br>意思就是使用startActivityForResult方法启动一个singleTask的Activity，该Activity不会启动，会收到一个RESULT_CANCELED结果</p>\n</blockquote>\n<p>singleinstance: singleInstance要求activity的实例不仅只有一个，并且整个task中只有一个activity实例，而singleTask所在的栈中允许存在其他activity的实例。</p>\n<blockquote>\n<p>singleInstance的activity也具有上面的特性，此外，activity设置了singleInstance，那么无论被启动的activity有没有设置singleInstance，都无法获取返回值</p>\n</blockquote>\n<p>7、scheme跳转协议<br>Android中的scheme是一种页面内跳转协议，通过定义自己的scheme协议，可以跳转到app中的各个页面<br>服务器可以定制化告诉app跳转哪个页面<br>App可以通过跳转到另一个App页面<br>可以通过H5页面跳转页面（DeepLink）：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;a href=&quot;[scheme]://[host]/[path]?[query]&quot;&gt;启动应用程序&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;data android:scheme=\"http\" /&gt;</div><div class=\"line\">    &lt;!-- or you can use deep linking like  --&gt;</div><div class=\"line\">    &lt;data android:scheme=\"http\" android:host=\"xyz.abc.com\"/&gt;</div><div class=\"line\">    &lt;action android:name=\"android.intent.action.VIEW\"/&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.BROWSABLE\"/&gt;</div><div class=\"line\">    &lt;category android:name=\"android.intent.category.DEFAULT\"/&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2、Fragment面试题\"><a href=\"#2、Fragment面试题\" class=\"headerlink\" title=\"2、Fragment面试题\"></a>2、Fragment面试题</h3><p>1、Fragment为什么被称为第五大组件<br>Fragment比Activity更节省内存，其切换模式也更加舒适，使用频率不低于四大组件，且有自己的生命周期，而且必须依附于Activity</p>\n<p>2、Activity创建Fragment的方式<br>静态创建：在activity布局文件里声明fragment，<br>activity_main.xml中声明：</p>\n<fragment\n    android:name=\"com.example.myfragment.MyFragment\"\n    android:id=\"@+id/myfragment_1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n/>\n\n<p>动态创建：通过java代码将fragment添加到已存的ViewGroup中<br>fragment = new MyFragment();<br>fragmentStack.push(fragment);<br>transaction = manager.beginTransaction();<br>transaction.add(R.id.fragments, fragment);<br>transaction.commit();</p>\n<p>3、FragmentPageAdapter和FragmentPageStateAdapter的区别<br>FragmentPageAdapter在每次切换页面的的时候，是将Fragment进行分离，适合页面较少的Fragment使用以保存一些内存，对系统内存不会多大影响<br>FragmentPageStateAdapter在每次切换页面的时候，是将Fragment进行回收，适合页面较多的Fragment使用，这样就不会消耗更多的内存</p>\n<p>4、Fragment生命周期<br>onAttach()<br>onCreate()<br>onCreateView()<br>onActivityCreated()<br>onStart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroyView()<br>onDestroy()<br>onDetach()</p>\n<p>5、Fragment的通信<br>Fragment调用Activity中的方法：getActivity<br>Activity调用Fragment中的方法：接口回调<br>Fragment调用Fragment中的方法：FragmentManager.findFragmentById</p>\n<p>6、Fragment的replace、add、remove方法<br>replace：替代Fragment的栈顶页面<br>add：添加Fragment到栈顶页面<br>remove：移除Fragment栈顶页面</p>\n<h3 id=\"3、Service面试题\"><a href=\"#3、Service面试题\" class=\"headerlink\" title=\"3、Service面试题\"></a>3、Service面试题</h3><p>1、Service是什么<br>Service是四大组件之一，它可以在后台执行长时间运行操作而没有用户界面的应用组件</p>\n<p>2、Service和Thread的区别<br>Service是安卓中系统的组件，它运行在独立进程的主线程中，不可以执行耗时操作，超时会有ANR异常。Thread是程序执行的最小单元，分配CPU的基本单位，可以开启子线程执行耗时操作<br>Service在不同Activity中可以获取自身实例，可以方便的对Service进行操作。Thread在不同的Activity中难以获取自身实例，如果Activity被销毁，Thread实例就很难再获取得到</p>\n<p>3、Service启动方式<br>startService<br>bindService</p>\n<p>4、Service生命周期<br>startService<br>onCreate()<br>onStartCommand()<br>onDestroy()<br>bindService<br>onCreate()<br>onBind()<br>onUnbind()<br>onDestroy()</p>\n<h3 id=\"4、Broadcast-Receiver面试题\"><a href=\"#4、Broadcast-Receiver面试题\" class=\"headerlink\" title=\"4、Broadcast Receiver面试题\"></a>4、Broadcast Receiver面试题</h3><p>1、Broadcast Receiver是什么<br>Broadcast是四大组件之一，是一种广泛运用在应用程序之间传输信息的机制，通过发送Intent来传送我们的数据</p>\n<p>2、Broadcast Receiver的使用场景<br>同一App具有多个进程的不同组件之间的消息通信<br>不同App之间的组件之间的消息通信</p>\n<p>3、Broadcast Receiver的种类<br>普通广播<br>有序广播 Context.sendOrderedBroadcast<br>本地广播 LocalBroadcastManager.getInstance(context).sendBroadcast(intent) 除了能解决BroadcastReceiver进程间安全性问题外，相对Context操作的BroadcastReceiver而言还具有更高的运行效率。<br>Sticky广播 的sendStickyBroadcast(Intent)接口发送，需要添加权限<uses-permission android:name=\"android.permission.BROADCAST_STICKY\"/><br>也可以通过Context的removeStickyBroadcast(Intent intent)接口移除缓存的粘性广播。<br>sticky有序广播 StickyOrderedBroadcast</p>\n<p>4、Broadcast Receiver的实现<br>静态注册：注册后一直运行，尽管Activity、进程、App被杀死还是可以接收到广播<br>动态注册：跟随Activity的生命周期</p>\n<p>5、Broadcast Receiver实现机制<br>自定义广播类继承BroadcastReceiver，复写onReceiver()<br>通过Binder机制向AMS进行注册广播<br>广播发送者通过Binder机制向AMS发送广播<br>AMS查找符合相应条件的广播发送到BroadcastReceiver相应的循环队列中<br>消息队列执行拿到广播，回调BroadcastReceiver的onReceiver()</p>\n<p>6、LocalBroadcastManager特点<br>本地广播只能在自身App内传播，不必担心泄漏隐私数据<br>本地广播不允许其他App对你的App发送该广播，不必担心安全漏洞被利用<br>本地广播比全局广播更高效<br>以上三点都是源于其内部是用Handler实现的</p>\n<h3 id=\"5、WebView面试题\"><a href=\"#5、WebView面试题\" class=\"headerlink\" title=\"5、WebView面试题\"></a>5、WebView面试题</h3><p>1、WebView安全漏洞<br>API16之前存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java反射机制利用该漏洞执行任意Java对象的方法</p>\n<p>2、WebView销毁步骤<br>WebView在其他容器上时（如：LinearLayout），当销毁Activity时，需要在onDestroy()中先移除容器上的WebView，然后再将WebView.destroy()，这样就不会导致内存泄漏</p>\n<p>3、WebView的jsbridge<br>客户端和服务端之间可以通过Javascript来互相调用各自的方法</p>\n<p>4、WebViewClient的onPageFinished<br>WebViewClient的onPageFinished在每次完成页面的时候调用，但是遇到未加载完成的页面跳转其他页面时，就会一直调用，使用WebChromeClient.onProgressChanged可以替代</p>\n<p>5、WebView后台耗电<br>在WebView加载页面的时候，会自动开启线程去加载，如果不很好的关闭这些线程，就会导致电量消耗加大，可以采用暴力的方法，直接在onDestroy方法中System.exit(0)结束当前正在运行中的java虚拟机</p>\n<p>6、WebView硬件加速<br>Android3.0引入硬件加速，默认会开启，WebView在硬件加速的情况下滑动更加平滑，性能更加好，但是会出现白块或者页面闪烁的副作用，建议WebView暂时关闭硬件加速</p>\n<p>7、WebView内存泄漏<br>由于WebView是依附于Activity的，Activity的生命周期和WebView启动的线程的生命周期是不一致的，这会导致WebView一直持有对这个Activity的引用而无法释放，解决方案如下<br>独立进程，简单暴力，不过可能涉及到进程间通信（推荐）<br>动态添加WebView，对传入WebView中使用的Context使用弱引用</p>\n<h3 id=\"6、Binder面试题\"><a href=\"#6、Binder面试题\" class=\"headerlink\" title=\"6、Binder面试题\"></a>6、Binder面试题</h3><p>1、Linux内核的基本知识</p>\n<p><img src=\"/images/blogimages/2017/binder-01.png\" alt=\"\"><br>进程隔离/虚拟地址空间：进程间是不可以共享数据的，相当于被隔离，每个进程被分配到不同的虚拟地址中<br>系统调用：Linux内核对应用有访问权限，用户只能在应用层通过系统调用，调用内核的某些程序<br>binder驱动：它负责各个用户的进程，通过binder通信内核来进行交互的模块</p>\n<p>而Binder，就是充当 连接 两个进程（内核空间）的通道。</p>\n<p>2、为什么使用Binder<br>性能上，相比传统的Socket更加高效<br>安全性高，支持协议双方互相校验</p>\n<p>3、Binder通信模型<br><img src=\"/images/blogimages/2017/binder-02.png\" alt=\"\"></p>\n<blockquote>\n<p>虚线表示并非直接交互</p>\n</blockquote>\n<p>说明1：Client进程、Server进程 &amp; Service Manager 进程之间的交互都必须通过Binder驱动（使用 open 和 ioctl文件操作函数），而非直接交互</p>\n<p>原因：</p>\n<ol>\n<li>Client进程、Server进程 &amp; Service Manager进程属于进程空间的用户空间，不可进行进程间交互</li>\n<li>Binder驱动 属于 进程空间的 内核空间，可进行进程间 &amp; 进程内交互</li>\n</ol>\n<p>说明2： Binder驱动 &amp; Service Manager进程 属于 Android基础架构（即系统已经实现好了）；而Client 进程 和 Server 进程 属于Android应用层（需要开发者自己实现）</p>\n<p>所以，在进行跨进程通信时，开发者只需自定义Client &amp; Server 进程 并 显式使用上述3个步骤，最终借助 Android的基本架构功能就可完成进程间通信</p>\n<p>详细参考这篇博客：<a href=\"http://blog.csdn.net/carson_ho/article/details/73560642\">图文详解 Android Binder 跨进程通信机制原理</a></p>\n<p>对比 Linux （Android基于linux）上的其他进程通信方式（管道/消息队列/共享内存/信号量/Socket），Binder 机制的优点有：</p>\n<ul>\n<li>高效<br>Binder数据拷贝只需要一次，而管道、消息队列、Socket都需要2次<br>通过驱动在内核空间拷贝数据，不需要额外的同步处理</li>\n<li>安全性高<br>Binder 机制为每个进程分配了 UID/PID 来作为鉴别身份的标示，并且在 Binder 通信时会根据 UID/PID 进行有效性检测<br>传统的进程通信方式对于通信双方的身份并没有做出严格的验证<br>如，Socket通信 ip地址是客户端手动填入，容易出现伪造</li>\n<li>使用简单<br>采用Client/Server 架构<br>实现 面向对象 的调用方式，即在使用Binder时就和调用一个本地对象实例一样</li>\n</ul>\n<p>4、AIDL<br>客户端通过aidl文件的Stub.asInterface()方法，拿到Proxy代理类<br>通过调用Proxy代理类的方法，将参数进行封包后，调用底层的transact()方法<br>transact()方法会回调onTransact()方法，进行参数的解封<br>在onTransact()方法中调用服务端对应的方法，并将结果返回</p>\n<h3 id=\"7、Handler面试题\"><a href=\"#7、Handler面试题\" class=\"headerlink\" title=\"7、Handler面试题\"></a>7、Handler面试题</h3><p>1、Handler是什么<br>Handler通过发送和处理Message和Runnable对象来关联相对应线程的MessageQueue</p>\n<p>2、Handler使用方法<br>post(runnable)<br>sendMessage(message)</p>\n<p>3、Handler工作原理<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53394061\">Android进阶——Android消息机制之Looper、Handler、MessageQueen</a></p>\n<p>4、Handler引起的内存泄漏<br>原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放<br>解决：<br>Handler内部持有外部Activity的弱引用<br>Handler改为静态内部类<br>Handler.removeCallback()</p>\n<h3 id=\"8、AsyncTask面试题\"><a href=\"#8、AsyncTask面试题\" class=\"headerlink\" title=\"8、AsyncTask面试题\"></a>8、AsyncTask面试题</h3><p>1、AsyncTask是什么<br>它本质上就是一个封装了线程池和Handler的异步框架</p>\n<p>2、AsyncTask使用方法<br>三个参数<br>Params：表示后台任务执行时的参数类型，该参数会传给AysncTask的 <strong>doInBackground()</strong> 方法<br>Progress：表示后台任务的执行进度的参数类型，该参数会作为 <strong>onProgressUpdate()</strong> 方法的参数<br>Result：表示后台任务的返回结果的参数类型，该参数会作为 <strong>onPostExecute()</strong> 方法的参数<br>五个方法<br>onPreExecute()：异步任务开启之前回调，在主线程中执行<br>doInBackground()：执行异步任务，在线程池中执行<br>onProgressUpdate()：当doInBackground中调用publishProgress时回调，在主线程中执行<br>onPostExecute()：在异步任务执行之后回调，在主线程中执行<br>onCancelled()：在异步任务被取消时回调</p>\n<p>3、AsyncTask工作原理<br>Android进阶——多线程系列之异步任务AsyncTask的使用与源码分析<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53203556\">http://blog.csdn.net/qq_30379689/article/details/53203556</a></p>\n<p>4、AsyncTask引起的内存泄漏<br>原因：非静态内部类持有外部类的匿名引用，导致Activity无法释放<br>解决：<br>AsyncTask内部持有外部Activity的弱引用<br>AsyncTask改为静态内部类<br>AsyncTask.cancel()</p>\n<p>5、AsyncTask生命周期<br>在Activity销毁之前，取消AsyncTask的运行，以此来保证程序的稳定</p>\n<p>6、AsyncTask结果丢失<br>由于屏幕旋转、Activity在内存紧张时被回收等情况下，Activity会被重新创建，此时，旧的AsyncTask持有旧的Activity引用，这个时候会导致AsyncTask的 <strong>onPostExecute()对UI更新无效</strong></p>\n<p>7、AsyncTask并行or串行<br>AsyncTask在Android 2.3之前默认采用并行执行任务，AsyncTask在Android 2.3之后默认采用串行执行任务<br>如果需要在Android 2.3之后采用并行执行任务，可以调用AsyncTask的executeOnExecutor()</p>\n<h3 id=\"9、HandlerThread面试题\"><a href=\"#9、HandlerThread面试题\" class=\"headerlink\" title=\"9、HandlerThread面试题\"></a>9、HandlerThread面试题</h3><p>1、HandlerThread产生背景<br>当系统有多个耗时任务需要执行时，每个任务都会开启一个新线程去执行耗时任务，这样会导致系统多次创建和销毁线程，从而影响性能。为了解决这一问题，Google提供了HandlerThread，HandlerThread是在线程中创建一个Looper循环器，让Looper轮询消息队列，当有耗时任务进入队列时，则不需要开启新线程，在原有的线程中执行耗时任务即可，否则线程阻塞</p>\n<p>2、HanlderThread的特点、<br>HandlerThread本质上是一个线程，继承自Thread<br>HandlerThread有自己的Looper对象，可以进行Looper循环，可以创建Handler<br>HandlerThread可以在Handler的handlerMessage中执行异步方法<br>HandlerThread优点是异步不会堵塞，减少对性能的消耗<br>HandlerThread缺点是不能同时继续进行多任务处理，需要等待进行处理，处理效率较低<br>HandlerThread与线程池不同，HandlerThread是一个串行队列，背后只有一个线程。</p>\n<h3 id=\"10、IntentService面试题\"><a href=\"#10、IntentService面试题\" class=\"headerlink\" title=\"10、IntentService面试题\"></a>10、IntentService面试题</h3><p>1、IntentService是什么<br>IntentService是继承自Service并处理异步请求的一个类，其内部采用HandlerThread和Handler实现的，在IntentService内有一个工作线程来处理耗时操作，其优先级比普通Service高。当任务完成后，IntentService会自动停止，而不需要手动调用stopSelf()。另外，可以多次启动IntentService，每个耗时操作都会以工作队列的方式在IntentService中 <strong>onHandlerIntent()</strong> 回调方法中执行，并且每次只会执行一个工作线程</p>\n<p>2、IntentService使用方法<br>创建Service继承自IntentService<br>覆写构造方法和onHandlerIntent()方法<br>在onHandlerIntent()中执行耗时操作</p>\n<h3 id=\"11、视图工作机制面试题\"><a href=\"#11、视图工作机制面试题\" class=\"headerlink\" title=\"11、视图工作机制面试题\"></a>11、视图工作机制面试题</h3><p><a href=\"http://blog.csdn.net/qq_30379689/article/details/54588736\">Android进阶——Android视图工作机制之measure、layout、draw</a></p>\n<p><a href=\"http://blog.csdn.net/qq_30379689/article/details/53967177\">Android事件分发机制之dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent</a></p>\n<h3 id=\"12、ListView面试题\"><a href=\"#12、ListView面试题\" class=\"headerlink\" title=\"12、ListView面试题\"></a>12、ListView面试题</h3><p>1、ListView是什么<br>ListView是能将一个数据集合以动态滚动的方式展示到用户界面上的View</p>\n<p>2、ListView的RecycleBin机制</p>\n<p><img src=\"/images/blogimages/2017/listview_recyclebin.png\" alt=\"\"></p>\n<p>3、ListView的优化<br>重用convertView<br>使用ViewHolder<br>图片三级缓存<br>监听滑动事件<br>少用透明View<br>开启硬件加速</p>\n<h3 id=\"13、Android项目构建面试题\"><a href=\"#13、Android项目构建面试题\" class=\"headerlink\" title=\"13、Android项目构建面试题\"></a>13、Android项目构建面试题</h3><p>1、android构建流程</p>\n<p><img src=\"/images/blogimages/2017/android_build_process.png\" alt=\"\"></p>\n<p>2、jenkins持续集成构建<br>这里可参考<a href=\"http://www.pgyer.com/doc/view/jenkins\">蒲公英文档</a></p>\n<p>3、Git常用命令<br>git init：仓库的初始化<br>git status：查看当前仓库的状态<br>git diff：查看仓库与上次修改的内容<br>git add：将文件放进暂存区<br>git commit：提交代码<br>git clone：克隆代码<br>git bransh：查看当前分支<br>git checkout：切换当前分支</p>\n<p>4、git工作流<br>fork/clone（主流）<br>fork：将别人的仓库代码fork到自己的仓库上<br>clone：克隆下自己仓库的代码<br>update、commit：修改代码并提交到自己的仓库<br>push：提交到自己的仓库<br>pull request：请求添加到别人的仓库<br>clone</p>\n<p>5、proguard是什么<br>ProGuard工具是用于压缩、优化和混淆我们的代码，其主作用是移除或混淆代码中无用类、字段、方法和属性</p>\n<p>6、proguard技术功能<br>压缩<br>优化<br>混淆<br>预检测</p>\n<p>7、proguard工作原理<br>将无用的字段或方法存入到EntryPoint中，将非EntryPoint的字段和方法进行替换</p>\n<p>8、为什么要混淆<br>由于Java是一门跨平台的解释性语言，其源代码被编译成class字节码来适应其他平台，而class文件包含了Java源代码信息，很容易被反编译</p>\n<h3 id=\"14、ANR面试题\"><a href=\"#14、ANR面试题\" class=\"headerlink\" title=\"14、ANR面试题\"></a>14、ANR面试题</h3><p>1、什么是ANR<br>Application Not Responding，页面无响应的对话框</p>\n<p>2、发生ANR的条件<br>应用程序的响应性是由ActivityManager和WindowManager系统服务监视的，当ANR发生条件满足时，就会弹出ANR的对话框<br>Activity超过5秒无响应<br>BroadcastReceiver超过10秒无响应<br>Service超过20秒无响应</p>\n<p>3、造成ANR的主要原因<br>主线程被IO操作阻塞<br>Activity的所有生命周期回调都是执行在主线程的<br>Service默认执行在主线程中<br>BoardcastReceiver的回调onReceive()执行在主线程中<br>AsyncTask的回调除了doInBackground，其他都是在主线程中<br>没有使用子线程Looper的Handler的handlerMessage，post(Runnable)都是执行在主线程中</p>\n<p>4、如何解决ANR<br>使用AsyncTask处理耗时IO操作<br>使用Thread或HandlerThread提供优先级<br>使用Handler处理工作线程的耗时操作<br>Activity的onCreate和onResume回调尽量避免耗时操作</p>\n<h3 id=\"15、OOM面试题\"><a href=\"#15、OOM面试题\" class=\"headerlink\" title=\"15、OOM面试题\"></a>15、OOM面试题</h3><p>1、什么是OOM<br>OOM指Out of memory（内存溢出），当前占用内存加上我们申请的内存资源超过了Dalvik虚拟机的最大内存限制就会抛出Out of memory异常</p>\n<p>2、OOM相关概念<br>内存溢出：指程序在申请内存时，没有足够的空间供其使用<br>内存泄漏：指程序分配出去的内存不再使用，无法进行回收<br>内存抖动：指程序短时间内大量创建对象，然后回收的现象</p>\n<p>3、解决OOM<br>Bitmap相关<br>图片压缩<br>加载缩略图<br>在滚动时不加载图片<br>回收Bitmap<br>使用inBitmap属性<br>捕获异常<br>其他相关<br>listview重用convertView、使用LruCache<br>避免onDraw方法执行对象的创建<br>谨慎使用多进程</p>\n<h3 id=\"16、Bitmap面试题\"><a href=\"#16、Bitmap面试题\" class=\"headerlink\" title=\"16、Bitmap面试题\"></a>16、Bitmap面试题</h3><p>1、recycle<br>在安卓3.0以前Bitmap是存放在堆中的，我们只要回收堆内存即可<br>在安卓3.0以后Bitmap是存放在内存中的，我们需要回收native层和Java层的内存<br>官方建议我们3.0以后使用recycle方法进行回收，该方法也可以不主动调用，因为垃圾回收器会自动收集不可用的Bitmap对象进行回收<br>recycle方法会判断Bitmap在不可用的情况下，将发送指令到垃圾回收器，让其回收native层和Java层的内存，则Bitmap进入dead状态<br>recycle方法是不可逆的，如果再次调用getPixels()等方法，则获取不到想要的结果</p>\n<p>2、LruCache原理<br>LruCache是个泛型类，内部采用LinkedHashMap来实现缓存机制，它提供get方法和put方法来获取缓存和添加缓存，其最重要的方法trimToSize是用来移除最少使用的缓存和使用最久的缓存，并添加最新的缓存到队列中</p>\n<p>3、计算inSampleSize<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (width &gt; height) &#123;</div><div class=\"line\">            inSampleSize = Math.round((<span class=\"keyword\">float</span>)height / (<span class=\"keyword\">float</span>)reqHeight);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inSampleSize = Math.round((<span class=\"keyword\">float</span>)width / (<span class=\"keyword\">float</span>)reqWidth);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、缩略图<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">thumbnail</span><span class=\"params\">(String path,<span class=\"keyword\">int</span> maxWidth, <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">boolean</span> autoRotate)</span> </span>&#123;</div><div class=\"line\">    BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">    Bitmap bitmap = BitmapFactory.decodeFile(path, options);</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> sampleSize = calculateInSampleSize(options, maxWidth, maxHeight);</div><div class=\"line\">    options.inSampleSize = sampleSize;</div><div class=\"line\">    options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class=\"line\">    options.inPurgeable = <span class=\"keyword\">true</span>;</div><div class=\"line\">    options.inInputShareable = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class=\"line\">        bitmap.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    bitmap = BitmapFactory.decodeFile(path, options);</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5、保存Bitmap<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">save</span><span class=\"params\">(Bitmap bitmap,Bitmap.CompressFormat format, <span class=\"keyword\">int</span> quality, File destFile)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        FileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(destFile);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap.compress(format, quality, out)) &#123;</div><div class=\"line\">            out.flush();</div><div class=\"line\">            out.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class=\"line\">            bitmap.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> destFile.getAbsolutePath();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6、保存到SD卡</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">save</span><span class=\"params\">(Bitmap bitmap,Bitmap.CompressFormat format, <span class=\"keyword\">int</span> quality, Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Environment.getExternalStorageState()</div><div class=\"line\">            .equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    File dir = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory()</div><div class=\"line\">            + <span class=\"string\">\"/\"</span> + context.getPackageName() + <span class=\"string\">\"/save/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">        dir.mkdirs();</div><div class=\"line\">    &#125;</div><div class=\"line\">    File destFile = <span class=\"keyword\">new</span> File(dir, UUID.randomUUID().toString());</div><div class=\"line\">    <span class=\"keyword\">return</span> save(bitmap, format, quality, destFile);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>7、三级缓存<br>网络缓存<br>本地缓存<br>内存缓存</p>\n<h3 id=\"17、UI卡顿面试题\"><a href=\"#17、UI卡顿面试题\" class=\"headerlink\" title=\"17、UI卡顿面试题\"></a>17、UI卡顿面试题</h3><p>1、UI卡顿原理<br>View的绘制帧数保持60fps是最佳，这要求每帧的绘制时间不超过16ms（1000/60），如果安卓不能在16ms内完成界面的渲染，那么就会出现卡顿现象</p>\n<p>2、UI卡顿的原因分析<br>在UI线程中做轻微的耗时操作，导致UI线程卡顿<br>布局Layout过于复杂，无法在16ms内完成渲染<br>同一时间动画执行的次数过多，导致CPU和GPU负载过重<br>overDraw，导致像素在同一帧的时间内被绘制多次，使CPU和GPU负载过重<br>View频繁的触发measure、layout，导致measure、layout累计耗时过多和整个View频繁的重新渲染<br>频繁的触发GC操作导致线程暂停，会使得安卓系统在16ms内无法完成绘制<br>冗余资源及逻辑等导致加载和执行缓慢<br>ANR</p>\n<p>3、UI卡顿的优化<br>布局优化<br>使用include、ViewStub、merge<br>不要出现过于嵌套和冗余的布局<br>使用自定义View取代复杂的View<br>ListView优化<br>复用convertView<br>滑动不加载<br>背景和图片优化<br>缩略图<br>图片压缩<br>避免ANR<br>不要在UI线程中做耗时操作</p>\n<h3 id=\"18、内存泄漏面试题\"><a href=\"#18、内存泄漏面试题\" class=\"headerlink\" title=\"18、内存泄漏面试题\"></a>18、内存泄漏面试题</h3><p>1、Java内存泄漏引起的主要原因<br>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏</p>\n<p>2、Java内存分配策略<br>静态存储区：又称方法区，主要存储全局变量和静态变量，在整个程序运行期间都存在<br>栈区：方法体的局部变量会在栈区创建空间，并在方法执行结束后会自动释放变量的空间和内存<br>堆区：保存动态产生的数据，如：new出来的对象和数组，在不使用的时候由Java回收器自动回收</p>\n<p>3、Android解决内存泄漏的例子<br>单例造成的内存泄漏：在单例中，使用context.getApplicationContext()作为单例的context<br>匿名内部类造成的内存泄漏：由于非静态内部类持有匿名外部类的引用，必须将内部类设置为static<br>Handler造成的内存泄漏：使用static的Handler内部类，同时在实现内部类中持有Context的弱引用<br>避免使用static变量：由于static变量会跟Activity生命周期一致，当Activity退出后台被后台回收时，static变量是不安全，所以也要管理好static变量的生命周期<br>资源未关闭造成的内存泄漏：比如Socket、Broadcast、Cursor、Bitmap、ListView等，使用完后要关闭<br>AsyncTask造成的内存泄漏：由于非静态内部类持有匿名内部类的引用而造成内存泄漏，可以通过AsyncTask内部持有外部Activity的弱引用同时改为静态内部类或在onDestroy()中执行AsyncTask.cancel()进行修复</p>\n<h3 id=\"19、内存管理面试题\"><a href=\"#19、内存管理面试题\" class=\"headerlink\" title=\"19、内存管理面试题\"></a>19、内存管理面试题</h3><p>1、Android内存管理机制<br>分配机制<br>管理机制</p>\n<p>2、内存管理机制的特点<br>更少的占用内存<br>在合适的时候，合理的释放系统资源<br>在系统内存紧张的时候，能释放掉大部分不重要的资源<br>能合理的在特殊生命周期中，保存或还原重要数据</p>\n<p>3、内存优化方法<br>Service完成任务后应停止它，或用IntentService（因为可以自动停止服务）代替Service<br>在UI不可见的时候，释放其UI资源<br>在系统内存紧张的时候，尽可能多的释放非重要资源<br>避免滥用Bitmap导致内存浪费<br>避免使用依赖注入框架<br>使用针对内存优化过的数据容器<br>使用ZIP对齐的APK<br>使用多进程</p>\n<h3 id=\"20、冷启动和热启动面试题\"><a href=\"#20、冷启动和热启动面试题\" class=\"headerlink\" title=\"20、冷启动和热启动面试题\"></a>20、冷启动和热启动面试题</h3><p>1、什么是冷启动和热启动<br>冷启动：在启动应用前，系统中没有该应用的任何进程信息<br>热启动：在启动应用时，在已有的进程上启动应用（用户使用返回键退出应用，然后马上又重新启动应用）</p>\n<p>2、冷启动和热启动的区别<br>冷启动：创建Application后再创建和初始化MainActivity<br>热启动：创建和初始化MainActivity即可</p>\n<p>3、冷启动时间的计算<br>这个时间值从应用启动（创建进程）开始计算，到完成视图的第一次绘制为止</p>\n<p>4、冷启动流程<br>Zygote进程中fork创建出一个新的进程<br>创建和初始化Application类、创建MainActivity<br>inflate布局、当onCreate/onStart/onResume方法都走完<br>contentView的measure/layout/draw显示在界面上<br>总结：Application构造方法-&gt;attachBaseContext()-&gt;onCreate()-&gt;Activity构造方法-&gt;onCreate()-&gt;配置主题中背景等属性-&gt;onStart()-&gt;onResume()-&gt;测量布局绘制显示在界面上</p>\n<p>5、冷启动优化<br>减少第一个界面onCreate()方法的工作量<br>不要让Application参与业务的操作<br>不要在Application进行耗时操作<br>不要以静态变量的方式在Application中保存数据<br>减少布局的复杂性和深度<br>不要在mainThread中加载资源<br>通过懒加载方式初始化第三方SDK</p>\n<h3 id=\"21、其他优化面试题\"><a href=\"#21、其他优化面试题\" class=\"headerlink\" title=\"21、其他优化面试题\"></a>21、其他优化面试题</h3><p>1、Android不用静态变量存储数据<br>静态变量等数据由于进程已经被杀死而被初始化<br>使用其他数据传输方式：文件/sp/contentProvider</p>\n<p>2、SharePreference安全问题<br>不能跨进程同步<br>文件不宜过大</p>\n<p>3、内存对象序列化<br>Serializeble：是java的序列化方式，Serializeble在序列化的时候会产生大量的临时对象，从而引起频繁的GC<br>Parcelable：是Android的序列化方式，且性能比Serializeble高，Parcelable不能使用在要将数据存储在硬盘上的情况</p>\n<p>4、避免在UI线程中做繁重的操作</p>\n<h3 id=\"22、架构模式面试题\"><a href=\"#22、架构模式面试题\" class=\"headerlink\" title=\"22、架构模式面试题\"></a>22、架构模式面试题</h3><p>Android基础——框架模式MVC在安卓中的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/52909656\">http://blog.csdn.net/qq_30379689/article/details/52909656</a><br>Android基础——框架模式MVP在安卓中的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/52910567\">http://blog.csdn.net/qq_30379689/article/details/52910567</a><br>Android基础——框架模式MVVM之DataBinding的实践<br><a href=\"http://blog.csdn.net/qq_30379689/article/details/53037430\">http://blog.csdn.net/qq_30379689/article/details/53037430</a></p>\n<h3 id=\"23、插件化面试题\"><a href=\"#23、插件化面试题\" class=\"headerlink\" title=\"23、插件化面试题\"></a>23、插件化面试题</h3><p>1、插件化解决的问题<br>动态加载APK（反射、类加载器）<br>资源加载（反射、AssetManager、独立资源、分段资源）<br>代码加载（反射获取生命周期）</p>\n<p>2、类加载器（Java中字节码添加到虚拟机中）<br>DexClassLoader：能够加载未安装的jar/apk/dex，主要用于动态加载和代码热更新<br>PathClassLoader：只能加载系统中已经安装过的apk</p>\n<h3 id=\"24、热更新面试题\"><a href=\"#24、热更新面试题\" class=\"headerlink\" title=\"24、热更新面试题\"></a>24、热更新面试题</h3><p>1、热更新主要流程<br>线上检查到Crash<br>拉出Bugfix分支修复Crash问题<br>jenkins构建和补丁生成<br>app通过推送或主动拉取补丁文件<br>将Bugfix代码合到master上</p>\n<p>2、热更新主流框架<br>Dexposed<br>AndFix<br>Nuwa<br>Tinker</p>\n<p>3、热更新的原理<br>在ClassLoader创建一个dexElements数组<br>将修复好的dex文件存放在dexElements数组的最前面<br>ClassLoader会遍历dexElements数组，找到最前面的dex文件优先加载</p>\n<h3 id=\"25、进程保活面试题\"><a href=\"#25、进程保活面试题\" class=\"headerlink\" title=\"25、进程保活面试题\"></a>25、进程保活面试题</h3><p>1、进程的优先级<br>空进程<br>后台进程<br>服务进程<br>可见进程<br>前台进程</p>\n<p>2、Android进程回收策略<br>Low memory Killer（定时执行）：通过一些比较复杂的评分机制，对进程进行打分，然后将分数高的进程判定为bad进程，杀死并释放内存<br>OOM_ODJ：判别进程的优先级</p>\n<p>3、Android保活方案<br>利用系统广播拉活<br>利用系统Service机制拉活<br>利用Native进程拉活<br>利用JobScheduler机制拉活<br>利用账号同步机制拉活</p>\n<h3 id=\"26、Lint面试题\"><a href=\"#26、Lint面试题\" class=\"headerlink\" title=\"26、Lint面试题\"></a>26、Lint面试题</h3><p>1、什么是Android Lint<br>Android Lint是一个静态代码分析工具，它能够对你的Android项目中潜在的Bug、可优化的代码、安全性、性能、可用性、可访问性、国际化等进行检查</p>\n<p>2、Lint工作流程<br><img src=\"/images/blogimages/2017/android_lint.png\" alt=\"\"></p>\n<p>3、配置Lint<br>创建Lint.xml到根目录下，自定义Lint安全等级等<br>在Java文件中可以使用@suppressLint(“NewApi”)来忽视Lint的报错<br>在xml文件中可以使用tool:ignore(“UnusedResources”)来忽视Lint的报错<br>自定义Lint检查，可以创建类，继承Detector和实现JavaPsiScanner</p>\n<h3 id=\"27、Kotlin面试题\"><a href=\"#27、Kotlin面试题\" class=\"headerlink\" title=\"27、Kotlin面试题\"></a>27、Kotlin面试题</h3><p>1、什么是Kotlin<br>Kotlin是一种基于JVM的编程语言<br>对Java的一种拓展，比Java更简洁<br>Kotlin支持函数式编程<br>Kotlin类和Java类可以相互调用</p>\n<p>2、Kotlin环境搭建<br>直接在Plugin中下载Kotlin插件即可<br>系统会自动配置到Kotlin环境</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/08/17/IntervieweeQuestions/\">http://agehua.github.io/2017/08/17/IntervieweeQuestions/</a></p>"},{"layout":"post","title":"PBOC知识收集（干货）","keywords":"pboc, pboc2.0","banner":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden.jpg","toc":true,"_content":"\n## PBOC规范基础知识（干货）\n摘自：《中国集成电路（IC）卡规范第2部分：电子钱包电子存折应用规范》\n### 消费交易\n消费交易允许持卡人使用电子存折或电子钱包的余额进行购物或获取服务。此交易可以在销售点终端(POS)上脱机进行。使用电子存折进行的消费交易必须提交个人识别码(PIN)，使用电子钱包则不需要。\n\n#### 发出初始化消费(INITIALIZE FOR PURCHASE)命令\n指令字节：\n\n<!--more-->\n~~~ Java\n      命令                         CLA  INS   P1   P2\n消费初始化(INITIALIZE FOR PURCHASE) ‘80’ ‘50’ ‘01’ ‘0X’\n~~~\n> 上面的指令字节，其实就是APDU（Application Protocol data unit), 是智能卡与智能卡读卡器之间传送的信息单元\n\nAPDU的格式为：**CLA    INS  P1  P2  Lc  Data  Le**\n其中CLA为指令类别；INS为指令码；P1、P2为参数；Lc为Data的长度；Le为希望响应时回答的数据字节数，0表最大可能长度。\n\nCOS命令由具体应用分为4种命令报文结构如下：\n① 情形1：CLA INS P1 P2 00\n② 情形2：CLA INS P1 P2 Le\n③ 情形3：CLA INS P1 P2 Lc Data\n④ 情形4：CLA INS P1 P2 Lc Data Le\n\n而消费交易初始化的具体命令如下：\n\n![](/images/blogimages/2017/Initialize_for_purchase.png)\n![](/images/blogimages/2017/Initialize_for_purchase_data.png)\n\n\n响应报文结构：\n~~~ Java\n响应数据  响应状态码\nData      SW1 SW1\n~~~\nDATA： 返回给用户的数据，即命令的执行结果。\nSW1、SW2： 返回命令处理的状态。\n> 如果命令执行不成功，则只在响应报文中回送SW1和SW2。命令执行成功的状态字一般是“9000”，但个别卡商在执行成功后，返回61 xx，这里表示还有xx字节需要返回，需要再使用卡商提供的GET REPONSE命令接收从IC卡中传递向读卡设备的数据。\n\n消费交易初始化执行成功，返回的响应报文，总长度是（Le 0F）15个字节：\n\n![](/images/blogimages/2017/Initialize_for_purchase_responce.png)\n\n> 一个字节是8bit，4个bit用一个16进制表示（0-9 A-F）。所以一个字节可以由两个16进制表示\n\n#### VERIFY 命令\n定义和范围\nVERIFY命令用于校验命令数据域中的个人识别码的正确性。\n如PIN文件位于某一应用下，当此应用被锁定时，禁止校验PIN;如PIN文件位于MF下，当应用被锁 定后可以执行校验PIN命令。\n\n命令报文\n\n|*代码*|*值*|\n|:--------:|:-------:|\n|CLA|‘00’|\n|INS|‘20’|\n|P1|‘00’|\n|P2|‘00’|\n|Lc|可变|\n|Data|外部输入的个人识别码|\n|Le|不存在|\n\nP2=’00’表示无特殊限定符被使用。在IC卡上，VERIFY命令在处理过程中应明确知道如何去寻找个人识别码。\n> 这里外部输入的PIN码长度是，4到12位（2-6字节），响应报文数据域不存在。\n\n此命令执行成功的状态字是“9000”。\n当前的应用选择中，命令数据域中外部输入的个人识别码与卡中存放的个人识别码校验失败时，IC 卡将回送SW2=’Cx’，其中’x’表示个人识别码允许重试的次数;当卡回送’C0’时，表示不能重试个人识别 码。此时再使用VERIFY命令时，将回送失败状态字SW1 SW2=“6983”。\n\nIC卡可能回送的警告状态字见表48。\n![](/images/blogimages/2017/pin_verify.png)\n\n### 工具代码\n下面贴一些转换工具代码：\n~~~ Java\n/**\n  * 把16进制字符串转换成字节数组\n  *\n  * @param hex\n  * @return\n  */\npublic static byte[] hexStringToByte(String hex) {\n    int len = (hex.length() / 2);\n    byte[] result = new byte[len];\n    char[] achar = hex.toCharArray();\n    for (int i = 0; i < len; i++) {\n        int pos = i * 2;\n        result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));\n    }\n    return result;\n}\n\nprivate static byte toByte(char c) {\n    byte b = (byte) \"0123456789ABCDEF\".indexOf(c);\n    return b;\n}\n\n/**\n * 把字节数组转换成16进制字符串\n *\n * @param bArray\n * @return\n */\npublic static final String bytesToHexString(byte[] bArray) {\n    if(bArray == null )\n    {\n        return \"\";\n    }\n    StringBuffer sb = new StringBuffer(bArray.length);\n    String sTemp;\n    for (int i = 0; i < bArray.length; i++) {\n        sTemp = Integer.toHexString(0xFF & bArray[i]);\n        if (sTemp.length() < 2)\n            sb.append(0);\n        sb.append(sTemp.toUpperCase());\n    }\n    return sb.toString();\n}\n~~~\n\nIC卡**交易金额转换**（以分为单位，输出byte[]）\n~~~ Java\npublic static String IntToHex(int n){\n  char[] ch = new char[20];\n  int nIndex = 0;\n    while ( true ){\n        int m = n/16;\n        int k = n%16;\n        if ( k == 15 )\n            ch[nIndex] = 'F';\n        else if ( k == 14 )\n            ch[nIndex] = 'E';\n        else if ( k == 13 )\n            ch[nIndex] = 'D';\n        else if ( k == 12 )\n            ch[nIndex] = 'C';\n        else if ( k == 11 )\n            ch[nIndex] = 'B';\n        else if ( k == 10 )\n            ch[nIndex] = 'A';\n        else\n            ch[nIndex] = (char)('0' + k);\n        nIndex++;\n        if ( m == 0 )\n            break;\n        n = m;\n    }\n    StringBuffer sb = new StringBuffer();\n    sb.append(ch, 0, nIndex);\n    sb.reverse();\n    String strHex = new String(\"\");\n    strHex += sb.toString();\n    return strHex;\n}\n\npublic static byte[] hexStringToByteArray(String s) {\n    if (TextUtils.isEmpty(s))\n        return null;\n    int len = s.length();\n    String append= \"\";\n    switch (len){\n        case 1:\n            s = \"0000000\"+s;\n            break;\n        case 2:\n            s = \"000000\"+s;\n            break;\n        case 3:\n            s = \"00000\"+s;\n            break;\n        case 4:\n            s = \"0000\"+s;\n            break;\n        case 5:\n            s = \"000\"+s;\n            break;\n        case 6:\n            s = \"00\"+s;\n            break;\n        case 7:\n            s = \"0\"+s;\n            break;\n        case 8:\n            break;\n    }\n    len = s.length();\n    byte[] b = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        // 两位一组，表示一个字节,把这样表示的16进制字符串，还原成一个字节\n        b[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character\n                .digit(s.charAt(i + 1), 16));\n    }\n    return b;\n}\n\n/**\n * 交易金额转换\n */\npublic static byte[] intTo4HexByte(int num){\n    return hexStringToByteArray(IntToHex(num));\n}\n~~~\n\nHex字符串转换为GBK\n~~~ Java\npublic static String decode(String hexStr) throws UnsupportedEncodingException {\n    if (null == hexStr || \"\".equals(hexStr) || (hexStr.length()) % 2 != 0) {\n        return null;\n    }\n\n    int byteLength = hexStr.length() / 2;\n    byte[] bytes = new byte[byteLength];\n\n    int temp = 0;\n    for (int i = 0; i < byteLength; i++) {\n        temp = hex2Dec(hexStr.charAt(2 * i)) * 16 + hex2Dec(hexStr.charAt(2 * i + 1));\n        bytes[i] = (byte) (temp < 128 ? temp : temp - 256);\n    }\n    return new String(bytes,\"GBK\");\n}\n\nprivate static int hex2Dec(char ch) {\n    if (ch == '0')\n        return 0;\n    if (ch == '1')\n        return 1;\n    if (ch == '2')\n        return 2;\n    if (ch == '3')\n        return 3;\n    if (ch == '4')\n        return 4;\n    if (ch == '5')\n        return 5;\n    if (ch == '6')\n        return 6;\n    if (ch == '7')\n        return 7;\n    if (ch == '8')\n        return 8;\n    if (ch == '9')\n        return 9;\n    if (ch == 'a')\n        return 10;\n    if (ch == 'A')\n        return 10;\n    if (ch == 'B')\n        return 11;\n    if (ch == 'b')\n        return 11;\n    if (ch == 'C')\n        return 12;\n    if (ch == 'c')\n        return 12;\n    if (ch == 'D')\n        return 13;\n    if (ch == 'd')\n        return 13;\n    if (ch == 'E')\n        return 14;\n    if (ch == 'e')\n        return 14;\n    if (ch == 'F')\n        return 15;\n    if (ch == 'f')\n        return 15;\n    else\n        return -1;\n\n}\n~~~\n","source":"_posts/2017-09-21-PBOCKonwledgeCode.md","raw":"---\nlayout: post\ntitle:  PBOC知识收集（干货）\ncategory: accumulation\ntags:\n    - PBOC\n    - PBOC 2.0\n    - Basic Knowledge\nkeywords: pboc, pboc2.0\nbanner: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden.jpg\ntoc: true\n---\n\n## PBOC规范基础知识（干货）\n摘自：《中国集成电路（IC）卡规范第2部分：电子钱包电子存折应用规范》\n### 消费交易\n消费交易允许持卡人使用电子存折或电子钱包的余额进行购物或获取服务。此交易可以在销售点终端(POS)上脱机进行。使用电子存折进行的消费交易必须提交个人识别码(PIN)，使用电子钱包则不需要。\n\n#### 发出初始化消费(INITIALIZE FOR PURCHASE)命令\n指令字节：\n\n<!--more-->\n~~~ Java\n      命令                         CLA  INS   P1   P2\n消费初始化(INITIALIZE FOR PURCHASE) ‘80’ ‘50’ ‘01’ ‘0X’\n~~~\n> 上面的指令字节，其实就是APDU（Application Protocol data unit), 是智能卡与智能卡读卡器之间传送的信息单元\n\nAPDU的格式为：**CLA    INS  P1  P2  Lc  Data  Le**\n其中CLA为指令类别；INS为指令码；P1、P2为参数；Lc为Data的长度；Le为希望响应时回答的数据字节数，0表最大可能长度。\n\nCOS命令由具体应用分为4种命令报文结构如下：\n① 情形1：CLA INS P1 P2 00\n② 情形2：CLA INS P1 P2 Le\n③ 情形3：CLA INS P1 P2 Lc Data\n④ 情形4：CLA INS P1 P2 Lc Data Le\n\n而消费交易初始化的具体命令如下：\n\n![](/images/blogimages/2017/Initialize_for_purchase.png)\n![](/images/blogimages/2017/Initialize_for_purchase_data.png)\n\n\n响应报文结构：\n~~~ Java\n响应数据  响应状态码\nData      SW1 SW1\n~~~\nDATA： 返回给用户的数据，即命令的执行结果。\nSW1、SW2： 返回命令处理的状态。\n> 如果命令执行不成功，则只在响应报文中回送SW1和SW2。命令执行成功的状态字一般是“9000”，但个别卡商在执行成功后，返回61 xx，这里表示还有xx字节需要返回，需要再使用卡商提供的GET REPONSE命令接收从IC卡中传递向读卡设备的数据。\n\n消费交易初始化执行成功，返回的响应报文，总长度是（Le 0F）15个字节：\n\n![](/images/blogimages/2017/Initialize_for_purchase_responce.png)\n\n> 一个字节是8bit，4个bit用一个16进制表示（0-9 A-F）。所以一个字节可以由两个16进制表示\n\n#### VERIFY 命令\n定义和范围\nVERIFY命令用于校验命令数据域中的个人识别码的正确性。\n如PIN文件位于某一应用下，当此应用被锁定时，禁止校验PIN;如PIN文件位于MF下，当应用被锁 定后可以执行校验PIN命令。\n\n命令报文\n\n|*代码*|*值*|\n|:--------:|:-------:|\n|CLA|‘00’|\n|INS|‘20’|\n|P1|‘00’|\n|P2|‘00’|\n|Lc|可变|\n|Data|外部输入的个人识别码|\n|Le|不存在|\n\nP2=’00’表示无特殊限定符被使用。在IC卡上，VERIFY命令在处理过程中应明确知道如何去寻找个人识别码。\n> 这里外部输入的PIN码长度是，4到12位（2-6字节），响应报文数据域不存在。\n\n此命令执行成功的状态字是“9000”。\n当前的应用选择中，命令数据域中外部输入的个人识别码与卡中存放的个人识别码校验失败时，IC 卡将回送SW2=’Cx’，其中’x’表示个人识别码允许重试的次数;当卡回送’C0’时，表示不能重试个人识别 码。此时再使用VERIFY命令时，将回送失败状态字SW1 SW2=“6983”。\n\nIC卡可能回送的警告状态字见表48。\n![](/images/blogimages/2017/pin_verify.png)\n\n### 工具代码\n下面贴一些转换工具代码：\n~~~ Java\n/**\n  * 把16进制字符串转换成字节数组\n  *\n  * @param hex\n  * @return\n  */\npublic static byte[] hexStringToByte(String hex) {\n    int len = (hex.length() / 2);\n    byte[] result = new byte[len];\n    char[] achar = hex.toCharArray();\n    for (int i = 0; i < len; i++) {\n        int pos = i * 2;\n        result[i] = (byte) (toByte(achar[pos]) << 4 | toByte(achar[pos + 1]));\n    }\n    return result;\n}\n\nprivate static byte toByte(char c) {\n    byte b = (byte) \"0123456789ABCDEF\".indexOf(c);\n    return b;\n}\n\n/**\n * 把字节数组转换成16进制字符串\n *\n * @param bArray\n * @return\n */\npublic static final String bytesToHexString(byte[] bArray) {\n    if(bArray == null )\n    {\n        return \"\";\n    }\n    StringBuffer sb = new StringBuffer(bArray.length);\n    String sTemp;\n    for (int i = 0; i < bArray.length; i++) {\n        sTemp = Integer.toHexString(0xFF & bArray[i]);\n        if (sTemp.length() < 2)\n            sb.append(0);\n        sb.append(sTemp.toUpperCase());\n    }\n    return sb.toString();\n}\n~~~\n\nIC卡**交易金额转换**（以分为单位，输出byte[]）\n~~~ Java\npublic static String IntToHex(int n){\n  char[] ch = new char[20];\n  int nIndex = 0;\n    while ( true ){\n        int m = n/16;\n        int k = n%16;\n        if ( k == 15 )\n            ch[nIndex] = 'F';\n        else if ( k == 14 )\n            ch[nIndex] = 'E';\n        else if ( k == 13 )\n            ch[nIndex] = 'D';\n        else if ( k == 12 )\n            ch[nIndex] = 'C';\n        else if ( k == 11 )\n            ch[nIndex] = 'B';\n        else if ( k == 10 )\n            ch[nIndex] = 'A';\n        else\n            ch[nIndex] = (char)('0' + k);\n        nIndex++;\n        if ( m == 0 )\n            break;\n        n = m;\n    }\n    StringBuffer sb = new StringBuffer();\n    sb.append(ch, 0, nIndex);\n    sb.reverse();\n    String strHex = new String(\"\");\n    strHex += sb.toString();\n    return strHex;\n}\n\npublic static byte[] hexStringToByteArray(String s) {\n    if (TextUtils.isEmpty(s))\n        return null;\n    int len = s.length();\n    String append= \"\";\n    switch (len){\n        case 1:\n            s = \"0000000\"+s;\n            break;\n        case 2:\n            s = \"000000\"+s;\n            break;\n        case 3:\n            s = \"00000\"+s;\n            break;\n        case 4:\n            s = \"0000\"+s;\n            break;\n        case 5:\n            s = \"000\"+s;\n            break;\n        case 6:\n            s = \"00\"+s;\n            break;\n        case 7:\n            s = \"0\"+s;\n            break;\n        case 8:\n            break;\n    }\n    len = s.length();\n    byte[] b = new byte[len / 2];\n    for (int i = 0; i < len; i += 2) {\n        // 两位一组，表示一个字节,把这样表示的16进制字符串，还原成一个字节\n        b[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character\n                .digit(s.charAt(i + 1), 16));\n    }\n    return b;\n}\n\n/**\n * 交易金额转换\n */\npublic static byte[] intTo4HexByte(int num){\n    return hexStringToByteArray(IntToHex(num));\n}\n~~~\n\nHex字符串转换为GBK\n~~~ Java\npublic static String decode(String hexStr) throws UnsupportedEncodingException {\n    if (null == hexStr || \"\".equals(hexStr) || (hexStr.length()) % 2 != 0) {\n        return null;\n    }\n\n    int byteLength = hexStr.length() / 2;\n    byte[] bytes = new byte[byteLength];\n\n    int temp = 0;\n    for (int i = 0; i < byteLength; i++) {\n        temp = hex2Dec(hexStr.charAt(2 * i)) * 16 + hex2Dec(hexStr.charAt(2 * i + 1));\n        bytes[i] = (byte) (temp < 128 ? temp : temp - 256);\n    }\n    return new String(bytes,\"GBK\");\n}\n\nprivate static int hex2Dec(char ch) {\n    if (ch == '0')\n        return 0;\n    if (ch == '1')\n        return 1;\n    if (ch == '2')\n        return 2;\n    if (ch == '3')\n        return 3;\n    if (ch == '4')\n        return 4;\n    if (ch == '5')\n        return 5;\n    if (ch == '6')\n        return 6;\n    if (ch == '7')\n        return 7;\n    if (ch == '8')\n        return 8;\n    if (ch == '9')\n        return 9;\n    if (ch == 'a')\n        return 10;\n    if (ch == 'A')\n        return 10;\n    if (ch == 'B')\n        return 11;\n    if (ch == 'b')\n        return 11;\n    if (ch == 'C')\n        return 12;\n    if (ch == 'c')\n        return 12;\n    if (ch == 'D')\n        return 13;\n    if (ch == 'd')\n        return 13;\n    if (ch == 'E')\n        return 14;\n    if (ch == 'e')\n        return 14;\n    if (ch == 'F')\n        return 15;\n    if (ch == 'f')\n        return 15;\n    else\n        return -1;\n\n}\n~~~\n","slug":"PBOCKonwledgeCode","published":1,"date":"2017-09-20T16:00:00.000Z","updated":"2017-12-07T06:34:43.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec1m003wd6ykyl2lev0o","content":"<h2 id=\"PBOC规范基础知识（干货）\"><a href=\"#PBOC规范基础知识（干货）\" class=\"headerlink\" title=\"PBOC规范基础知识（干货）\"></a>PBOC规范基础知识（干货）</h2><p>摘自：《中国集成电路（IC）卡规范第2部分：电子钱包电子存折应用规范》</p>\n<h3 id=\"消费交易\"><a href=\"#消费交易\" class=\"headerlink\" title=\"消费交易\"></a>消费交易</h3><p>消费交易允许持卡人使用电子存折或电子钱包的余额进行购物或获取服务。此交易可以在销售点终端(POS)上脱机进行。使用电子存折进行的消费交易必须提交个人识别码(PIN)，使用电子钱包则不需要。</p>\n<h4 id=\"发出初始化消费-INITIALIZE-FOR-PURCHASE-命令\"><a href=\"#发出初始化消费-INITIALIZE-FOR-PURCHASE-命令\" class=\"headerlink\" title=\"发出初始化消费(INITIALIZE FOR PURCHASE)命令\"></a>发出初始化消费(INITIALIZE FOR PURCHASE)命令</h4><p>指令字节：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">      命令                         CLA  INS   P1   P2</div><div class=\"line\">消费初始化(INITIALIZE FOR PURCHASE) ‘<span class=\"number\">80</span>’ ‘<span class=\"number\">50</span>’ ‘<span class=\"number\">01</span>’ ‘<span class=\"number\">0</span>X’</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的指令字节，其实就是APDU（Application Protocol data unit), 是智能卡与智能卡读卡器之间传送的信息单元</p>\n</blockquote>\n<p>APDU的格式为：<strong>CLA    INS  P1  P2  Lc  Data  Le</strong><br>其中CLA为指令类别；INS为指令码；P1、P2为参数；Lc为Data的长度；Le为希望响应时回答的数据字节数，0表最大可能长度。</p>\n<p>COS命令由具体应用分为4种命令报文结构如下：<br>① 情形1：CLA INS P1 P2 00<br>② 情形2：CLA INS P1 P2 Le<br>③ 情形3：CLA INS P1 P2 Lc Data<br>④ 情形4：CLA INS P1 P2 Lc Data Le</p>\n<p>而消费交易初始化的具体命令如下：</p>\n<p><img src=\"/images/blogimages/2017/Initialize_for_purchase.png\" alt=\"\"><br><img src=\"/images/blogimages/2017/Initialize_for_purchase_data.png\" alt=\"\"></p>\n<p>响应报文结构：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">响应数据  响应状态码</div><div class=\"line\">Data      SW1 SW1</div></pre></td></tr></table></figure></p>\n<p>DATA： 返回给用户的数据，即命令的执行结果。<br>SW1、SW2： 返回命令处理的状态。</p>\n<blockquote>\n<p>如果命令执行不成功，则只在响应报文中回送SW1和SW2。命令执行成功的状态字一般是“9000”，但个别卡商在执行成功后，返回61 xx，这里表示还有xx字节需要返回，需要再使用卡商提供的GET REPONSE命令接收从IC卡中传递向读卡设备的数据。</p>\n</blockquote>\n<p>消费交易初始化执行成功，返回的响应报文，总长度是（Le 0F）15个字节：</p>\n<p><img src=\"/images/blogimages/2017/Initialize_for_purchase_responce.png\" alt=\"\"></p>\n<blockquote>\n<p>一个字节是8bit，4个bit用一个16进制表示（0-9 A-F）。所以一个字节可以由两个16进制表示</p>\n</blockquote>\n<h4 id=\"VERIFY-命令\"><a href=\"#VERIFY-命令\" class=\"headerlink\" title=\"VERIFY 命令\"></a>VERIFY 命令</h4><p>定义和范围<br>VERIFY命令用于校验命令数据域中的个人识别码的正确性。<br>如PIN文件位于某一应用下，当此应用被锁定时，禁止校验PIN;如PIN文件位于MF下，当应用被锁 定后可以执行校验PIN命令。</p>\n<p>命令报文</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>代码</em></th>\n<th style=\"text-align:center\"><em>值</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CLA</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INS</td>\n<td style=\"text-align:center\">‘20’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P1</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P2</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lc</td>\n<td style=\"text-align:center\">可变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data</td>\n<td style=\"text-align:center\">外部输入的个人识别码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Le</td>\n<td style=\"text-align:center\">不存在</td>\n</tr>\n</tbody>\n</table>\n<p>P2=’00’表示无特殊限定符被使用。在IC卡上，VERIFY命令在处理过程中应明确知道如何去寻找个人识别码。</p>\n<blockquote>\n<p>这里外部输入的PIN码长度是，4到12位（2-6字节），响应报文数据域不存在。</p>\n</blockquote>\n<p>此命令执行成功的状态字是“9000”。<br>当前的应用选择中，命令数据域中外部输入的个人识别码与卡中存放的个人识别码校验失败时，IC 卡将回送SW2=’Cx’，其中’x’表示个人识别码允许重试的次数;当卡回送’C0’时，表示不能重试个人识别 码。此时再使用VERIFY命令时，将回送失败状态字SW1 SW2=“6983”。</p>\n<p>IC卡可能回送的警告状态字见表48。<br><img src=\"/images/blogimages/2017/pin_verify.png\" alt=\"\"></p>\n<h3 id=\"工具代码\"><a href=\"#工具代码\" class=\"headerlink\" title=\"工具代码\"></a>工具代码</h3><p>下面贴一些转换工具代码：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * 把16进制字符串转换成字节数组</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hex</div><div class=\"line\">  * <span class=\"doctag\">@return</span></div><div class=\"line\">  */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByte(String hex) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = (hex.length() / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</div><div class=\"line\">    <span class=\"keyword\">char</span>[] achar = hex.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = i * <span class=\"number\">2</span>;</div><div class=\"line\">        result[i] = (<span class=\"keyword\">byte</span>) (toByte(achar[pos]) &lt;&lt; <span class=\"number\">4</span> | toByte(achar[pos + <span class=\"number\">1</span>]));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> <span class=\"title\">toByte</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>) <span class=\"string\">\"0123456789ABCDEF\"</span>.indexOf(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 把字节数组转换成16进制字符串</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> bArray</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArray)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bArray == <span class=\"keyword\">null</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(bArray.length);</div><div class=\"line\">    String sTemp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bArray.length; i++) &#123;</div><div class=\"line\">        sTemp = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; bArray[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sTemp.length() &lt; <span class=\"number\">2</span>)</div><div class=\"line\">            sb.append(<span class=\"number\">0</span>);</div><div class=\"line\">        sb.append(sTemp.toUpperCase());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>IC卡<strong>交易金额转换</strong>（以分为单位，输出byte[]）<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">IntToHex</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span>[] ch = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">20</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> nIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"keyword\">true</span> )&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = n/<span class=\"number\">16</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> k = n%<span class=\"number\">16</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( k == <span class=\"number\">15</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'F'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">14</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'E'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">13</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'D'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">12</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'C'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">11</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'B'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">10</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'A'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            ch[nIndex] = (<span class=\"keyword\">char</span>)(<span class=\"string\">'0'</span> + k);</div><div class=\"line\">        nIndex++;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( m == <span class=\"number\">0</span> )</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        n = m;</div><div class=\"line\">    &#125;</div><div class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">    sb.append(ch, <span class=\"number\">0</span>, nIndex);</div><div class=\"line\">    sb.reverse();</div><div class=\"line\">    String strHex = <span class=\"keyword\">new</span> String(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    strHex += sb.toString();</div><div class=\"line\">    <span class=\"keyword\">return</span> strHex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByteArray(String s) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(s))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</div><div class=\"line\">    String append= <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (len)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0000000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            s = <span class=\"string\">\"000000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            s = <span class=\"string\">\"00000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">            s = <span class=\"string\">\"000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">            s = <span class=\"string\">\"00\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    len = s.length();</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 两位一组，表示一个字节,把这样表示的16进制字符串，还原成一个字节</span></div><div class=\"line\">        b[i / <span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) ((Character.digit(s.charAt(i), <span class=\"number\">16</span>) &lt;&lt; <span class=\"number\">4</span>) + Character</div><div class=\"line\">                .digit(s.charAt(i + <span class=\"number\">1</span>), <span class=\"number\">16</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 交易金额转换</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] intTo4HexByte(<span class=\"keyword\">int</span> num)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> hexStringToByteArray(IntToHex(num));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Hex字符串转换为GBK<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String hexStr)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == hexStr || <span class=\"string\">\"\"</span>.equals(hexStr) || (hexStr.length()) % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> byteLength = hexStr.length() / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteLength];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; byteLength; i++) &#123;</div><div class=\"line\">        temp = hex2Dec(hexStr.charAt(<span class=\"number\">2</span> * i)) * <span class=\"number\">16</span> + hex2Dec(hexStr.charAt(<span class=\"number\">2</span> * i + <span class=\"number\">1</span>));</div><div class=\"line\">        bytes[i] = (<span class=\"keyword\">byte</span>) (temp &lt; <span class=\"number\">128</span> ? temp : temp - <span class=\"number\">256</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(bytes,<span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hex2Dec</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'0'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'1'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'2'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'3'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'4'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'5'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'6'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'7'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">7</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'8'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'9'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'a'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'A'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'B'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'b'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'C'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'c'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'d'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'E'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'e'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'F'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">15</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'f'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">15</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/09/21/PBOCKonwledgeCode/\">http://agehua.github.io/2017/09/21/PBOCKonwledgeCode/</a></p>\n","readingTime":{"text":"7 min read","minutes":6.135,"time":368099.99999999994,"words":1227},"excerpt":"<h2 id=\"PBOC规范基础知识（干货）\"><a href=\"#PBOC规范基础知识（干货）\" class=\"headerlink\" title=\"PBOC规范基础知识（干货）\"></a>PBOC规范基础知识（干货）</h2><p>摘自：《中国集成电路（IC）卡规范第2部分：电子钱包电子存折应用规范》</p>\n<h3 id=\"消费交易\"><a href=\"#消费交易\" class=\"headerlink\" title=\"消费交易\"></a>消费交易</h3><p>消费交易允许持卡人使用电子存折或电子钱包的余额进行购物或获取服务。此交易可以在销售点终端(POS)上脱机进行。使用电子存折进行的消费交易必须提交个人识别码(PIN)，使用电子钱包则不需要。</p>\n<h4 id=\"发出初始化消费-INITIALIZE-FOR-PURCHASE-命令\"><a href=\"#发出初始化消费-INITIALIZE-FOR-PURCHASE-命令\" class=\"headerlink\" title=\"发出初始化消费(INITIALIZE FOR PURCHASE)命令\"></a>发出初始化消费(INITIALIZE FOR PURCHASE)命令</h4><p>指令字节：</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">      命令                         CLA  INS   P1   P2</div><div class=\"line\">消费初始化(INITIALIZE FOR PURCHASE) ‘<span class=\"number\">80</span>’ ‘<span class=\"number\">50</span>’ ‘<span class=\"number\">01</span>’ ‘<span class=\"number\">0</span>X’</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的指令字节，其实就是APDU（Application Protocol data unit), 是智能卡与智能卡读卡器之间传送的信息单元</p>\n</blockquote>\n<p>APDU的格式为：<strong>CLA    INS  P1  P2  Lc  Data  Le</strong><br>其中CLA为指令类别；INS为指令码；P1、P2为参数；Lc为Data的长度；Le为希望响应时回答的数据字节数，0表最大可能长度。</p>\n<p>COS命令由具体应用分为4种命令报文结构如下：<br>① 情形1：CLA INS P1 P2 00<br>② 情形2：CLA INS P1 P2 Le<br>③ 情形3：CLA INS P1 P2 Lc Data<br>④ 情形4：CLA INS P1 P2 Lc Data Le</p>\n<p>而消费交易初始化的具体命令如下：</p>\n<p><img src=\"/images/blogimages/2017/Initialize_for_purchase.png\" alt=\"\"><br><img src=\"/images/blogimages/2017/Initialize_for_purchase_data.png\" alt=\"\"></p>\n<p>响应报文结构：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">响应数据  响应状态码</div><div class=\"line\">Data      SW1 SW1</div></pre></td></tr></table></figure></p>\n<p>DATA： 返回给用户的数据，即命令的执行结果。<br>SW1、SW2： 返回命令处理的状态。</p>\n<blockquote>\n<p>如果命令执行不成功，则只在响应报文中回送SW1和SW2。命令执行成功的状态字一般是“9000”，但个别卡商在执行成功后，返回61 xx，这里表示还有xx字节需要返回，需要再使用卡商提供的GET REPONSE命令接收从IC卡中传递向读卡设备的数据。</p>\n</blockquote>\n<p>消费交易初始化执行成功，返回的响应报文，总长度是（Le 0F）15个字节：</p>\n<p><img src=\"/images/blogimages/2017/Initialize_for_purchase_responce.png\" alt=\"\"></p>\n<blockquote>\n<p>一个字节是8bit，4个bit用一个16进制表示（0-9 A-F）。所以一个字节可以由两个16进制表示</p>\n</blockquote>\n<h4 id=\"VERIFY-命令\"><a href=\"#VERIFY-命令\" class=\"headerlink\" title=\"VERIFY 命令\"></a>VERIFY 命令</h4><p>定义和范围<br>VERIFY命令用于校验命令数据域中的个人识别码的正确性。<br>如PIN文件位于某一应用下，当此应用被锁定时，禁止校验PIN;如PIN文件位于MF下，当应用被锁 定后可以执行校验PIN命令。</p>\n<p>命令报文</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><em>代码</em></th>\n<th style=\"text-align:center\"><em>值</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CLA</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INS</td>\n<td style=\"text-align:center\">‘20’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P1</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P2</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Lc</td>\n<td style=\"text-align:center\">可变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data</td>\n<td style=\"text-align:center\">外部输入的个人识别码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Le</td>\n<td style=\"text-align:center\">不存在</td>\n</tr>\n</tbody>\n</table>\n<p>P2=’00’表示无特殊限定符被使用。在IC卡上，VERIFY命令在处理过程中应明确知道如何去寻找个人识别码。</p>\n<blockquote>\n<p>这里外部输入的PIN码长度是，4到12位（2-6字节），响应报文数据域不存在。</p>\n</blockquote>\n<p>此命令执行成功的状态字是“9000”。<br>当前的应用选择中，命令数据域中外部输入的个人识别码与卡中存放的个人识别码校验失败时，IC 卡将回送SW2=’Cx’，其中’x’表示个人识别码允许重试的次数;当卡回送’C0’时，表示不能重试个人识别 码。此时再使用VERIFY命令时，将回送失败状态字SW1 SW2=“6983”。</p>\n<p>IC卡可能回送的警告状态字见表48。<br><img src=\"/images/blogimages/2017/pin_verify.png\" alt=\"\"></p>\n<h3 id=\"工具代码\"><a href=\"#工具代码\" class=\"headerlink\" title=\"工具代码\"></a>工具代码</h3><p>下面贴一些转换工具代码：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * 把16进制字符串转换成字节数组</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hex</div><div class=\"line\">  * <span class=\"doctag\">@return</span></div><div class=\"line\">  */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByte(String hex) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = (hex.length() / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</div><div class=\"line\">    <span class=\"keyword\">char</span>[] achar = hex.toCharArray();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pos = i * <span class=\"number\">2</span>;</div><div class=\"line\">        result[i] = (<span class=\"keyword\">byte</span>) (toByte(achar[pos]) &lt;&lt; <span class=\"number\">4</span> | toByte(achar[pos + <span class=\"number\">1</span>]));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> <span class=\"title\">toByte</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span> b = (<span class=\"keyword\">byte</span>) <span class=\"string\">\"0123456789ABCDEF\"</span>.indexOf(c);</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 把字节数组转换成16进制字符串</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> bArray</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArray)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bArray == <span class=\"keyword\">null</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(bArray.length);</div><div class=\"line\">    String sTemp;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bArray.length; i++) &#123;</div><div class=\"line\">        sTemp = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; bArray[i]);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sTemp.length() &lt; <span class=\"number\">2</span>)</div><div class=\"line\">            sb.append(<span class=\"number\">0</span>);</div><div class=\"line\">        sb.append(sTemp.toUpperCase());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>IC卡<strong>交易金额转换</strong>（以分为单位，输出byte[]）<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">IntToHex</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span>[] ch = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">20</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> nIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"keyword\">true</span> )&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = n/<span class=\"number\">16</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> k = n%<span class=\"number\">16</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( k == <span class=\"number\">15</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'F'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">14</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'E'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">13</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'D'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">12</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'C'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">11</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'B'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( k == <span class=\"number\">10</span> )</div><div class=\"line\">            ch[nIndex] = <span class=\"string\">'A'</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            ch[nIndex] = (<span class=\"keyword\">char</span>)(<span class=\"string\">'0'</span> + k);</div><div class=\"line\">        nIndex++;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( m == <span class=\"number\">0</span> )</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        n = m;</div><div class=\"line\">    &#125;</div><div class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">    sb.append(ch, <span class=\"number\">0</span>, nIndex);</div><div class=\"line\">    sb.reverse();</div><div class=\"line\">    String strHex = <span class=\"keyword\">new</span> String(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    strHex += sb.toString();</div><div class=\"line\">    <span class=\"keyword\">return</span> strHex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexStringToByteArray(String s) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(s))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</div><div class=\"line\">    String append= <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (len)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0000000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            s = <span class=\"string\">\"000000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            s = <span class=\"string\">\"00000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">            s = <span class=\"string\">\"000\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">            s = <span class=\"string\">\"00\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">            s = <span class=\"string\">\"0\"</span>+s;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    len = s.length();</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len / <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i += <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 两位一组，表示一个字节,把这样表示的16进制字符串，还原成一个字节</span></div><div class=\"line\">        b[i / <span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) ((Character.digit(s.charAt(i), <span class=\"number\">16</span>) &lt;&lt; <span class=\"number\">4</span>) + Character</div><div class=\"line\">                .digit(s.charAt(i + <span class=\"number\">1</span>), <span class=\"number\">16</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 交易金额转换</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] intTo4HexByte(<span class=\"keyword\">int</span> num)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> hexStringToByteArray(IntToHex(num));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Hex字符串转换为GBK<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decode</span><span class=\"params\">(String hexStr)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == hexStr || <span class=\"string\">\"\"</span>.equals(hexStr) || (hexStr.length()) % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> byteLength = hexStr.length() / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[byteLength];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; byteLength; i++) &#123;</div><div class=\"line\">        temp = hex2Dec(hexStr.charAt(<span class=\"number\">2</span> * i)) * <span class=\"number\">16</span> + hex2Dec(hexStr.charAt(<span class=\"number\">2</span> * i + <span class=\"number\">1</span>));</div><div class=\"line\">        bytes[i] = (<span class=\"keyword\">byte</span>) (temp &lt; <span class=\"number\">128</span> ? temp : temp - <span class=\"number\">256</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(bytes,<span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hex2Dec</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'0'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'1'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'2'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'3'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'4'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'5'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'6'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'7'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">7</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'8'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'9'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'a'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'A'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'B'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'b'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">11</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'C'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'c'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">12</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'d'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">13</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'E'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'e'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">14</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'F'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">15</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'f'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">15</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/09/21/PBOCKonwledgeCode/\">http://agehua.github.io/2017/09/21/PBOCKonwledgeCode/</a></p>"},{"layout":"post","title":"PBOC知识收集","keywords":"pboc, pboc2.0","banner":"http://obxk8w81b.bkt.clouddn.com/Cottages%20in%20Saintes-Maries.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Cottages%20in%20Saintes-Maries.jpg","toc":true,"_content":"\n\n## PBOC规范基础知识\n\n### 术语和定义\n- 集成电路 integrated circuit (IC) 具有处理和/或存储功能的电子器件。\n- 集成电路卡(IC 卡) integrated circuit(s) card (ICC) 内部封装一个或多个集成电路用于执行处理和存储功能的卡片。\n- 电子存折 electronic deposit 一种为持卡人进行消费、取现等交易而设计的支持个人识别码(PIN)保护的金融IC卡应用。它支持圈存、圈提、消费和取现等交易。\n- 电子钱包 electronic purse 一种为方便持卡人小额消费而设计的金融IC卡应用。它支持圈存、消费等交易。消费不支持个人识别码(PIN)保护。\n<!--more-->\n- 圈存 load\n  持卡人将其在银行相应账户上的资金划转到电子存折或电子钱包中。圈存交易必须在金融终端上联机进行。\n一般情况下，圈存到电子存折中的资金仍计付活期利息，圈存到电子钱包中的资金不计付利息。但 具体作法由发卡方自行决定。\n- 圈提 unload\n  持卡人将电子存折中的部分或全部资金划回到其在银行的相应账户上。圈提交易必须在金融终端上 联机进行2。\n\n### 符号和缩略语\n下列符号和缩略语适用于 JR/T 0025 的本部分。\n- AID 应用标识符(Application Identifier)\n- an 字母数字型(Alphanumeric)\n- ans 字母数字及特殊字符型(Alphanumeric Special)\n- ATI 应用类型标识(Application Type Identifier)，卡上有两种应用时，用来区分是电子存折和电子钱包\n- b 二进制(Binary)\n- CLA 命令报文的类别字节(Class Byte of the Command Message)\n- cn 压缩数字型(Compressed Numeric)\n- DEA 数据加密算法(Data Encryption Algorithm)\n- DF 专用文件(Dedicated File)\n- ED 电子存折(Electronic Deposit)\n- EF 基本文件(Elementary File)\n- EP 电子钱包(Electronic Purse)\n- FCI 文件控制信息(File Control Information)\n- INS 命令报文的指令字节(Instruction Byte of Command Message)\n- ISO 国际标准化组织(International Organization for Standardization)\n- Lc 终端发出的命令数据的实际长度(Exact Length of Data Sent)\n- Le 响应数据中的最大期望长度(Maximum Length of Data Expected)\n- MAC 报文鉴别码(Message Authentication Code)\n- MF 主文件(Master File)\n- n 数字型(Numeric)\n- P1 参数 1(Parameter 1)\n- P2 参数 2(Parameter 2)\n- PIN 个人识别码(Personal Identification Number)\n- POS 销售点终端(Point of Service)\n- PSAM 销售点终端安全存取模块(Purchase Secure Access Module)\n- PSE 支付系统环境(Payment System Environment)\n- PVN PIN 校验值(PIN Verification Number)\n- SFI 短文件标识符(Short File Identifier)\n- SW1 状态字 1(Status Word One)\n- SW2 状态字 2(Status Word Two)\n- TAC 交易验证码(Transaction Authorization Crypogram)\n- TTI 交易类型标识(Transaction Type Identifier)\n- YYYYMMDD 年、月、日(Year, Month, Day)\n\n智能卡又称为IC卡(Integrated circuit Card),即集成电路卡。根据卡中使用的集成电路的不同可以分为存储器卡、逻辑加密卡和CPU卡。由于CPU卡中集成了中央处理器CPU、存储器和芯片操作系统(Chip Operating System, COS) ,构成一个完整的计算机系统, 具有独立的数据处理能力, 因此安全性大大增强,从而得到了广泛的应用,成为IC卡中的主流产品。\n\n### 文件操作\n#### 2.1 基本文件结构\n文件系统是COS的基础模块,它负责组织、管理、维护IC卡内存储的所有数据。根据ISO7816-4,COS 支持的文件类型为: 主文件(Master File, MF) 、目录文件(Dedicated File, DF)和基本文件(Elementary File,EF) 。主文件MF为文件系统的根，下面可以有多个目录文件DF和基本文件EF。目录文件DF分为DDF和ADF两种。DDF可以含有下级目录ADF, 而ADF不能含有下级目录文件。\n\n主文件MF在IC卡中唯一且必须存在。DDF是指包含多个应用的DF, 一个ADF则代表一个应用, 任何一个DF在物理上和逻辑上都保持独立。基本文件EF用于存放密钥或用户数据, 分为密钥文件和工作基本文件。\n\n三种专用文件(DF)类型:\nMF: 根目录，是整个文件系统的根，同属应用环境类。MF 下可以有 EF(基本文件)、SF (安全文件)、DDF(目录文件)、ADF(应用文件);\nDDF: 目录文件，用于定义一个应用环境，它是应用的集合。DDF下可以有ADF、子DDF、 EF和SF等结构。\nADF: 应用文件，用于定义具体应用。ADF下可以有EF和SF。\n\n#### 2.2 文件的访问控制\n文件的访问控制可采取鉴别寄存器方式和状态机方式,这里以鉴别寄存器方式为例。用两个四位寄存器来表示安全状态: 一个寄存器称为MF的安全状态寄存器,另一个寄存器为当前DF的安全状态寄存器。每个寄存器的初始值是0,取值安全状态员安全状态圆执行命令符合命令要求的安全属性钥命令拒绝安全机制再晕图员智能卡安全体系范围是0～F之间的某一个值。文件有两种不同的访问控制权限AC0,AC1。AC0 是使用权限,AC1 是修改权限,分别用一个字节表示。当前安全状态寄存器的值大于AC字节的低半字节小于其高半字节时, 该文件的相应读、写权限在该安全状态下被满足,则能进行相关操作。COS在建立文件时指定其AC0和AC1的值来对文件的访问权限进行设定,通过口令校验和外部认证两条命令可以改变安全状态寄存器的值,从而利用安全机制实现对文件的访问控制。\n\n### 命令的类别字节和指令字节\n|*命令*|* CLA*|* INS *|*P1*|* P2*|\n|:--------|:-------:|:--------:|:--------:|:--------:|\n|修改个人识别码(CHANGE PIN)|‘80’|‘5E’|‘01’|‘00’|\n|圈存(CREDIT FOR LOAD)|‘80’|‘52’|‘00’|‘00’|\n|消费/取现(DEBIT FOR PURCHASE/CASH WITHDRAW)|‘80’|‘54’|‘01’|‘00’|\n|圈提(DEBIT FOR UNLOAD)|‘80’|‘54’|‘03’|‘00’|\n|读余额(GET BALANCE)|‘80’|‘5C’|‘00’|‘0X’|\n|取交易认证(GET TRANSACTION PROVE)|‘80’|‘5A’|‘00’|‘XX’|\n|取现初始化(INITIALIZE FOR CASH WITHDRAW)|‘80’|‘50’|‘02’|‘01’|\n|圈存初始化(INITIALIZE FOR LOAD)|‘80|‘50’|‘00’|‘0X’|\n|消费初始化(INITIALIZE FOR PURCHASE)|‘80’|‘50’|‘01’|‘0X’|\n|圈提初始化(INITIALIZE FOR UNLOAD)|‘80’|‘50’|‘05’|‘01’|\n|修改初始化(INITIALIZE FOR UPDATE)|‘80’|‘50’|‘04’|‘01’|\n|重装个人识别码(RELOAD PIN)|‘80’|‘5E’|‘00’|‘00’|\n|修改透支限额(UPDATE OVERDRAW LIMIT)|‘80’|‘58’|‘00’| ‘00’|\n\n### IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\n- 一、 技术方面（非接触式IC卡）\n  - 1、 逻辑加密卡又叫存储卡，卡内的集成电路具有加密逻辑和EEPROM（电可擦除可编程只读存储器）。\n  - 2、 CPU卡又叫智能卡，卡内的集成电路包括中央处理器（CPU）、EEPROM、随机存储器(ROM)、以及固化在只读存储器（ROM）中的片内操作系统(COS)，有的卡内芯片还集成了加密运算协处理器以提高安全性和工作速度，使其技术指标远远高于逻辑加密卡。\n  - 3、 CPU卡由于具有微处理功能，使得在交易速度以及数据干扰方面远远高于逻辑加密卡，且允许多张卡片同时操作，具有防冲突机制。\n  - 4、 两者在技术方面的最大区别在于：CPU卡是一种具有微处理芯片的IC卡，可执行加密运算和其它操作，存储容量较大，能应用于不同的系统；逻辑加密卡是一种单一的存储卡，主要特点是内部有只读存储器，但存储容量较CPU卡小，使其在用途方面没有扩展性。\n\n- 二、 保密方面（非接触式IC卡）\n  - 1、 逻辑加密卡具有防止对卡中信息随意改写功能的存储IC卡，当对加密卡进行操作时必须首先核对卡中密码，只有核对正确，卡中送出一串正确的应答信号时，才能对卡进行正确的操作，但由于只进行一次认证，且无其它的安全保护措施，容易导致密码的泄露和伪卡的产生，其安全性能很低。\n  - 2、 由于CPU卡中有微处理机和IC卡操作系统（COS），当CPU卡进行操作时，可进行加密和解密算法（算法和密码都不易破解），用户和IC卡系统之间需要进行多次的相互密码认证（且速度极快），提高了系统的安全性能，对于防止伪卡的产生有很好的效果。 综上所述，对于逻辑加密卡和CPU卡来说，CPU卡不仅具有逻辑加密卡的所有功能，更具有逻辑加密卡所不具备的高安全性、灵活性以及支持与应用扩展等优良性能，也是今后IC卡发展的主要趋势和方向。\n\n#### CPU卡安全系统与逻辑加密系统的比较\n\n　　众所周知，密钥管理系统（Key Management System），也简称KMS，是IC项目安全的核心。如何进行密钥的安全管理，贯穿着IC卡应用的整个生命周期。\n\n　　1、 非接触逻辑加密卡的安全认证，依赖于每个扇区独立的KEYA和KEYB的校验，可以通过扇区控制字对KEYA和KEYB的不同安全组合，实现扇区数据的读写安全控制。非接触逻辑加密卡的个人化也比较简单，主要包括数据和各扇区KEYA、KEYB的更新，在期间所有敏感数据包括KEYA和KEYB都是直接以明文的形式更新。由于KEYA和KEYB的校验机制，只能解决卡片对终端的认证，而无法解决终端对卡片的认证，即我们俗称的“伪卡”的风险。接触逻辑加密卡，即密钥就是一个预先设定的确定数，无论用什么方法计算密钥，最后就一定要和原先写入的数一致，就可以对被保护的数据进行读写操作。因此无论是一卡一密的系统还是统一密码的系统，经过破解就可以实现对非接触逻辑加密卡的解密。很多人认为只要是采用了一卡一密、实时在线系统或非接触逻辑加密卡的ID号就能避免密钥被解密，其实，非接触逻辑加密卡被解密就意味着M1卡可以被复制，使用在线系统尽可以避免被非法充值，但是不能保证非法消费，即复制一张一样ID号的M1卡，就可以进行非法消费。现在的技术使用FPGA就可以完全复制。基于这个原理，M1的门禁卡也是不安全的。目前国内80%的门禁产品均是采用原始IC卡的ID号或ID卡的ID号去做门禁卡，根本没有去进行加密认证或开发专用的密钥，其安全隐患远远比Mifare卡的破解更危险，非法破解的人士只需采用的是专业的技术手段就可以完成破解过程，导致目前国内大多数门禁产品都不具备安全性原因之一，是因为早期门禁产品的设计理论是从国外引进过来的，国内大部分厂家长期以来延用国外做法，采用ID和IC卡的只读特性进行身份识别使用，很少关注卡与机具间的加密认证，缺少钥匙体系的设计；而ID卡是很容易可复制的载体，导致所有的门禁很容易几乎可以在瞬间被破解复制；这才是我们国内安防市场最大的灾难。\n\n　　2、 非接触CPU卡智能卡与非接触逻辑加密卡相比，拥有独立的CPU处理器和芯片操作系统，所以可以更灵活的支持各种不同的应用需求，更安全的设计交易流程。但同时，与非接触逻辑加密卡系统相比，非接触CPU卡智能卡的系统显得更为复杂，需要进行更多的系统改造，比如密钥管理、交易流程、PSAM卡以及卡片个人化等。密钥通常分为充值密钥（ISAM卡），减值密钥（PSAM卡），外部认证密钥（SAM卡）和全能密钥（ASAM卡）。非接触CPU卡智能卡可以通过内外部认证的机制，例如像建设部定义的电子钱包的交易流程，高可靠的满足不同的业务流程对安全和密钥管理的需求。对电子钱包圈存可以使用圈存密钥，消费可以使用消费密钥，清算可以使用TAC密钥，更新数据可以使用卡片应用维护密钥，卡片个人化过程中可以使用卡片传输密钥、卡片主控密钥、应用主控密钥等，真正做到一钥一用。\n\n### SAM(Secure Access Module)安全存取模块介绍\n#### 为什么要用SAM？\n究竟谁最开始使用SAM这个词，已经无从考证，能够确认的是：这个世界上先有了PSAM，然后才有了SAM。由于网络状况的原因，或者是应用环境的要求，使用IC卡作为支付介质的系统里面，消费环境不能在每次交易的时候，都做到实时与后台相连接认证IC卡的合法性以及交易完全性。因此，一种我们目前已经认可的交易模式——“电子钱包脱机消费”产生了。即便目前通讯技术发展到已经不存在技术障碍，在权衡风险、代价、方便性等等，我们还是要继续使用并发扬光大脱机消费这样一个模式。由此，就需要对发生交易的终端有所要求，一是能够鉴别IC卡的真伪，再者需要能够保证交易的合法性与安全性，本着不把终端制造商拉下水的目的，于是，坚持一个原则：终端设备与系统安全机制分离，即所有有关安全性的因素，都放置到一个叫PSAM卡里面，由系统发行方来发行管理。没有 PSAM卡的消费终端，相当于没有SIM卡的手机，安装PSAM卡以后，该消费终端就获得了系统运营商的许可，有权鉴别卡片的真伪，有权从卡上的钱包扣款。因此，PSAM的解释为：销售点终端安全存取模块（Purchase Secure Access Module）。\n\n上述最初起源自金融领域 IC卡电子钱包支付系统中的消费应用。在迅猛发展，并极具想象力的IC卡行业，PSAM的应用模式很快得到了延伸，去掉了P（Purchase）的限制之后的SAM（Secure Access Module），被用于很多模式中，变成了“各种终端内嵌入的、认证及存储所有安全数据与敏感信息的设备”。SAM是一个统称，SAM可以是一张标准尺寸的IC卡大小，更多的时候还是符合ISO/IEC 7810里面ID-000标准的小卡形状，也可以是一个DIP8或者SOP8/16封装的IC集成电路形状。如同印章一样，放一个SAM到一个通用的设备里面，表明运营商获得这个设备的控制权和所有权，才能完成该终端赋予的各种功能。\n\nCPU卡加密算法和随机数发生器与安装在读写设备中的密钥认证卡(SAM卡)相互发送认证的随机数，可以实现以下功能：\n- 1）通过终端设备上SAM卡实现对卡的认证\n- 2）CPU卡与终端设备上的SAM卡的相互认证，实现对卡终端的认证\n- 3）通过ISAM卡对CPU卡进行充值操作，实现安全的储值\n- 4）通过PSAM卡对CPU卡进行减值操作，实现安全的扣款\n- 5）在终端设备与CPU卡中传输的数据是加密传输\n- 6）通过对CPU卡发送给SAM卡的MAC1，SAM卡发送给CPU的MAC2和由CPU卡返回的TAC，可以实现数据传输验证的计算。而MAC1、MAC2和TAC就是同一张CPU卡每次传输的过程中都是不同的，因此无法使用空中接收的办法来破解CPU卡的密钥。\n\n#### 有几种SAM？\n- PSAM：放在脱机消费终端内，用来控制电子钱包脱机消费交易的SAM卡，通常是铳成ID-000的小卡形状，存放消费主密钥，能够验证用户卡上消费子密钥是否符合约定的对应关系，并且保证扣款过程的安全性。\n\n- ISAM：ISAM的出现并不具有典型意义，其中的I，可解释为Input，也可解释为Increase，放置在充值终端设备内，脱机充值交易中控制充值交易安全。说它不具有典型意义的原因是，脱机充值的模式是小额支付系统早期的模式，基于安全、风险、政策、技术发展等考虑，脱机充值应用在未来不会有生命力，因此， ISAM作为一个过渡产品，慢慢会成为历史。\n\n- ESAM，ESAM属于企业创造的新名词，其中的“E”代表一种形态，特指采用SOP或者DIP封装形式的SAM，作为设备原始设计的一部分，生产的时候焊接在设备的电路板上，不像是其他的SAM是在卡座内，可以灵活拆卸。ESAM的名字与功能无关，比如ESAM形式的PSAM或者ISAM，比如ESAM形式的电子钱包应用。都是符合逻辑的说法。ESAM有几种典型的应用：作为电子计数文件，在预付费表具内控制表具的运行。作为安全数据的存储与认证，实现硬件设备的版权保护与安全使用。\n\n- USAM： 是一个新产品，是基于已有SAM概念的基础上，进行的10%左右的创新而来，其中的“U”，大家一定比较容易猜到，即“USB”，是一个采用USB接口和通讯方式的SAM，在这里补充一下，前面所说的各种SAM的通讯方式都是符合ISO/IEC 7816中规定的接口和通讯协议。USAM是两种成熟技术结合，一种全新形态的产品。能大幅度提高SAM的效率与性能，减少设备开发工作量，使SAM的应用趋于标准化、开放性，也扩展了SAM的应用领域。\n\n#### SAM的技术要求\n\nSAM是与终端设备配套使用的安全设备，它具备这样的几个基本要求：\n- 1、是带有COS的CPU卡（模块）；\n- 2、密钥安全的存储在卡内，在某种认可的权限下，能被用于运算，但是不能被直接读出；\n- 3、高安全等级芯片，低功耗、宽电压、宽温度范围；\n- 4、SAM最核心的要求是安全性；\n- 5、SAM最重要的两个参数是运算速度和通讯速率；\n\n　　对IC卡操作时，耗费时间最多的环节是通讯所占用的时间，而在IC卡应用系统中，尤其是非接触式的应用中，每一个毫秒的时间都是非常宝贵的，都会极大地影响用户感受，在高速公路不停车收费系统中，每增加一个毫秒，都意味着通行速度的大幅降低。\n\n而采用USAM的最大特点在于：1、减少数据流通环节；2、提高数据通讯速度。\n\nUSAM直接插入标准USB接口即可使用，不用外接IC卡读写器或者需要SAM卡座；便于安装、使用；\n\nUSAM比较适合用于：城市通卡、高速公路收费、金融领域、加油领域、预付费水电气表。\n\n### 参考资料\nPSAM SAM：\nhttps://www.bbsmax.com/A/lk5aGpwPz1/\n\nIC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别:\nhttps://www.bbsmax.com/A/8Bz8BRpx5x/\n","source":"_posts/2017-09-12-PBOCKonwledge.md","raw":"---\nlayout: post\ntitle:  PBOC知识收集\ncategory: accumulation\ntags:\n  - PBOC\n  - PBOC 2.0\n  - Basic Knowledge\nkeywords: pboc, pboc2.0\nbanner: http://obxk8w81b.bkt.clouddn.com/Cottages%20in%20Saintes-Maries.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Cottages%20in%20Saintes-Maries.jpg\ntoc: true\n---\n\n\n## PBOC规范基础知识\n\n### 术语和定义\n- 集成电路 integrated circuit (IC) 具有处理和/或存储功能的电子器件。\n- 集成电路卡(IC 卡) integrated circuit(s) card (ICC) 内部封装一个或多个集成电路用于执行处理和存储功能的卡片。\n- 电子存折 electronic deposit 一种为持卡人进行消费、取现等交易而设计的支持个人识别码(PIN)保护的金融IC卡应用。它支持圈存、圈提、消费和取现等交易。\n- 电子钱包 electronic purse 一种为方便持卡人小额消费而设计的金融IC卡应用。它支持圈存、消费等交易。消费不支持个人识别码(PIN)保护。\n<!--more-->\n- 圈存 load\n  持卡人将其在银行相应账户上的资金划转到电子存折或电子钱包中。圈存交易必须在金融终端上联机进行。\n一般情况下，圈存到电子存折中的资金仍计付活期利息，圈存到电子钱包中的资金不计付利息。但 具体作法由发卡方自行决定。\n- 圈提 unload\n  持卡人将电子存折中的部分或全部资金划回到其在银行的相应账户上。圈提交易必须在金融终端上 联机进行2。\n\n### 符号和缩略语\n下列符号和缩略语适用于 JR/T 0025 的本部分。\n- AID 应用标识符(Application Identifier)\n- an 字母数字型(Alphanumeric)\n- ans 字母数字及特殊字符型(Alphanumeric Special)\n- ATI 应用类型标识(Application Type Identifier)，卡上有两种应用时，用来区分是电子存折和电子钱包\n- b 二进制(Binary)\n- CLA 命令报文的类别字节(Class Byte of the Command Message)\n- cn 压缩数字型(Compressed Numeric)\n- DEA 数据加密算法(Data Encryption Algorithm)\n- DF 专用文件(Dedicated File)\n- ED 电子存折(Electronic Deposit)\n- EF 基本文件(Elementary File)\n- EP 电子钱包(Electronic Purse)\n- FCI 文件控制信息(File Control Information)\n- INS 命令报文的指令字节(Instruction Byte of Command Message)\n- ISO 国际标准化组织(International Organization for Standardization)\n- Lc 终端发出的命令数据的实际长度(Exact Length of Data Sent)\n- Le 响应数据中的最大期望长度(Maximum Length of Data Expected)\n- MAC 报文鉴别码(Message Authentication Code)\n- MF 主文件(Master File)\n- n 数字型(Numeric)\n- P1 参数 1(Parameter 1)\n- P2 参数 2(Parameter 2)\n- PIN 个人识别码(Personal Identification Number)\n- POS 销售点终端(Point of Service)\n- PSAM 销售点终端安全存取模块(Purchase Secure Access Module)\n- PSE 支付系统环境(Payment System Environment)\n- PVN PIN 校验值(PIN Verification Number)\n- SFI 短文件标识符(Short File Identifier)\n- SW1 状态字 1(Status Word One)\n- SW2 状态字 2(Status Word Two)\n- TAC 交易验证码(Transaction Authorization Crypogram)\n- TTI 交易类型标识(Transaction Type Identifier)\n- YYYYMMDD 年、月、日(Year, Month, Day)\n\n智能卡又称为IC卡(Integrated circuit Card),即集成电路卡。根据卡中使用的集成电路的不同可以分为存储器卡、逻辑加密卡和CPU卡。由于CPU卡中集成了中央处理器CPU、存储器和芯片操作系统(Chip Operating System, COS) ,构成一个完整的计算机系统, 具有独立的数据处理能力, 因此安全性大大增强,从而得到了广泛的应用,成为IC卡中的主流产品。\n\n### 文件操作\n#### 2.1 基本文件结构\n文件系统是COS的基础模块,它负责组织、管理、维护IC卡内存储的所有数据。根据ISO7816-4,COS 支持的文件类型为: 主文件(Master File, MF) 、目录文件(Dedicated File, DF)和基本文件(Elementary File,EF) 。主文件MF为文件系统的根，下面可以有多个目录文件DF和基本文件EF。目录文件DF分为DDF和ADF两种。DDF可以含有下级目录ADF, 而ADF不能含有下级目录文件。\n\n主文件MF在IC卡中唯一且必须存在。DDF是指包含多个应用的DF, 一个ADF则代表一个应用, 任何一个DF在物理上和逻辑上都保持独立。基本文件EF用于存放密钥或用户数据, 分为密钥文件和工作基本文件。\n\n三种专用文件(DF)类型:\nMF: 根目录，是整个文件系统的根，同属应用环境类。MF 下可以有 EF(基本文件)、SF (安全文件)、DDF(目录文件)、ADF(应用文件);\nDDF: 目录文件，用于定义一个应用环境，它是应用的集合。DDF下可以有ADF、子DDF、 EF和SF等结构。\nADF: 应用文件，用于定义具体应用。ADF下可以有EF和SF。\n\n#### 2.2 文件的访问控制\n文件的访问控制可采取鉴别寄存器方式和状态机方式,这里以鉴别寄存器方式为例。用两个四位寄存器来表示安全状态: 一个寄存器称为MF的安全状态寄存器,另一个寄存器为当前DF的安全状态寄存器。每个寄存器的初始值是0,取值安全状态员安全状态圆执行命令符合命令要求的安全属性钥命令拒绝安全机制再晕图员智能卡安全体系范围是0～F之间的某一个值。文件有两种不同的访问控制权限AC0,AC1。AC0 是使用权限,AC1 是修改权限,分别用一个字节表示。当前安全状态寄存器的值大于AC字节的低半字节小于其高半字节时, 该文件的相应读、写权限在该安全状态下被满足,则能进行相关操作。COS在建立文件时指定其AC0和AC1的值来对文件的访问权限进行设定,通过口令校验和外部认证两条命令可以改变安全状态寄存器的值,从而利用安全机制实现对文件的访问控制。\n\n### 命令的类别字节和指令字节\n|*命令*|* CLA*|* INS *|*P1*|* P2*|\n|:--------|:-------:|:--------:|:--------:|:--------:|\n|修改个人识别码(CHANGE PIN)|‘80’|‘5E’|‘01’|‘00’|\n|圈存(CREDIT FOR LOAD)|‘80’|‘52’|‘00’|‘00’|\n|消费/取现(DEBIT FOR PURCHASE/CASH WITHDRAW)|‘80’|‘54’|‘01’|‘00’|\n|圈提(DEBIT FOR UNLOAD)|‘80’|‘54’|‘03’|‘00’|\n|读余额(GET BALANCE)|‘80’|‘5C’|‘00’|‘0X’|\n|取交易认证(GET TRANSACTION PROVE)|‘80’|‘5A’|‘00’|‘XX’|\n|取现初始化(INITIALIZE FOR CASH WITHDRAW)|‘80’|‘50’|‘02’|‘01’|\n|圈存初始化(INITIALIZE FOR LOAD)|‘80|‘50’|‘00’|‘0X’|\n|消费初始化(INITIALIZE FOR PURCHASE)|‘80’|‘50’|‘01’|‘0X’|\n|圈提初始化(INITIALIZE FOR UNLOAD)|‘80’|‘50’|‘05’|‘01’|\n|修改初始化(INITIALIZE FOR UPDATE)|‘80’|‘50’|‘04’|‘01’|\n|重装个人识别码(RELOAD PIN)|‘80’|‘5E’|‘00’|‘00’|\n|修改透支限额(UPDATE OVERDRAW LIMIT)|‘80’|‘58’|‘00’| ‘00’|\n\n### IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\n- 一、 技术方面（非接触式IC卡）\n  - 1、 逻辑加密卡又叫存储卡，卡内的集成电路具有加密逻辑和EEPROM（电可擦除可编程只读存储器）。\n  - 2、 CPU卡又叫智能卡，卡内的集成电路包括中央处理器（CPU）、EEPROM、随机存储器(ROM)、以及固化在只读存储器（ROM）中的片内操作系统(COS)，有的卡内芯片还集成了加密运算协处理器以提高安全性和工作速度，使其技术指标远远高于逻辑加密卡。\n  - 3、 CPU卡由于具有微处理功能，使得在交易速度以及数据干扰方面远远高于逻辑加密卡，且允许多张卡片同时操作，具有防冲突机制。\n  - 4、 两者在技术方面的最大区别在于：CPU卡是一种具有微处理芯片的IC卡，可执行加密运算和其它操作，存储容量较大，能应用于不同的系统；逻辑加密卡是一种单一的存储卡，主要特点是内部有只读存储器，但存储容量较CPU卡小，使其在用途方面没有扩展性。\n\n- 二、 保密方面（非接触式IC卡）\n  - 1、 逻辑加密卡具有防止对卡中信息随意改写功能的存储IC卡，当对加密卡进行操作时必须首先核对卡中密码，只有核对正确，卡中送出一串正确的应答信号时，才能对卡进行正确的操作，但由于只进行一次认证，且无其它的安全保护措施，容易导致密码的泄露和伪卡的产生，其安全性能很低。\n  - 2、 由于CPU卡中有微处理机和IC卡操作系统（COS），当CPU卡进行操作时，可进行加密和解密算法（算法和密码都不易破解），用户和IC卡系统之间需要进行多次的相互密码认证（且速度极快），提高了系统的安全性能，对于防止伪卡的产生有很好的效果。 综上所述，对于逻辑加密卡和CPU卡来说，CPU卡不仅具有逻辑加密卡的所有功能，更具有逻辑加密卡所不具备的高安全性、灵活性以及支持与应用扩展等优良性能，也是今后IC卡发展的主要趋势和方向。\n\n#### CPU卡安全系统与逻辑加密系统的比较\n\n　　众所周知，密钥管理系统（Key Management System），也简称KMS，是IC项目安全的核心。如何进行密钥的安全管理，贯穿着IC卡应用的整个生命周期。\n\n　　1、 非接触逻辑加密卡的安全认证，依赖于每个扇区独立的KEYA和KEYB的校验，可以通过扇区控制字对KEYA和KEYB的不同安全组合，实现扇区数据的读写安全控制。非接触逻辑加密卡的个人化也比较简单，主要包括数据和各扇区KEYA、KEYB的更新，在期间所有敏感数据包括KEYA和KEYB都是直接以明文的形式更新。由于KEYA和KEYB的校验机制，只能解决卡片对终端的认证，而无法解决终端对卡片的认证，即我们俗称的“伪卡”的风险。接触逻辑加密卡，即密钥就是一个预先设定的确定数，无论用什么方法计算密钥，最后就一定要和原先写入的数一致，就可以对被保护的数据进行读写操作。因此无论是一卡一密的系统还是统一密码的系统，经过破解就可以实现对非接触逻辑加密卡的解密。很多人认为只要是采用了一卡一密、实时在线系统或非接触逻辑加密卡的ID号就能避免密钥被解密，其实，非接触逻辑加密卡被解密就意味着M1卡可以被复制，使用在线系统尽可以避免被非法充值，但是不能保证非法消费，即复制一张一样ID号的M1卡，就可以进行非法消费。现在的技术使用FPGA就可以完全复制。基于这个原理，M1的门禁卡也是不安全的。目前国内80%的门禁产品均是采用原始IC卡的ID号或ID卡的ID号去做门禁卡，根本没有去进行加密认证或开发专用的密钥，其安全隐患远远比Mifare卡的破解更危险，非法破解的人士只需采用的是专业的技术手段就可以完成破解过程，导致目前国内大多数门禁产品都不具备安全性原因之一，是因为早期门禁产品的设计理论是从国外引进过来的，国内大部分厂家长期以来延用国外做法，采用ID和IC卡的只读特性进行身份识别使用，很少关注卡与机具间的加密认证，缺少钥匙体系的设计；而ID卡是很容易可复制的载体，导致所有的门禁很容易几乎可以在瞬间被破解复制；这才是我们国内安防市场最大的灾难。\n\n　　2、 非接触CPU卡智能卡与非接触逻辑加密卡相比，拥有独立的CPU处理器和芯片操作系统，所以可以更灵活的支持各种不同的应用需求，更安全的设计交易流程。但同时，与非接触逻辑加密卡系统相比，非接触CPU卡智能卡的系统显得更为复杂，需要进行更多的系统改造，比如密钥管理、交易流程、PSAM卡以及卡片个人化等。密钥通常分为充值密钥（ISAM卡），减值密钥（PSAM卡），外部认证密钥（SAM卡）和全能密钥（ASAM卡）。非接触CPU卡智能卡可以通过内外部认证的机制，例如像建设部定义的电子钱包的交易流程，高可靠的满足不同的业务流程对安全和密钥管理的需求。对电子钱包圈存可以使用圈存密钥，消费可以使用消费密钥，清算可以使用TAC密钥，更新数据可以使用卡片应用维护密钥，卡片个人化过程中可以使用卡片传输密钥、卡片主控密钥、应用主控密钥等，真正做到一钥一用。\n\n### SAM(Secure Access Module)安全存取模块介绍\n#### 为什么要用SAM？\n究竟谁最开始使用SAM这个词，已经无从考证，能够确认的是：这个世界上先有了PSAM，然后才有了SAM。由于网络状况的原因，或者是应用环境的要求，使用IC卡作为支付介质的系统里面，消费环境不能在每次交易的时候，都做到实时与后台相连接认证IC卡的合法性以及交易完全性。因此，一种我们目前已经认可的交易模式——“电子钱包脱机消费”产生了。即便目前通讯技术发展到已经不存在技术障碍，在权衡风险、代价、方便性等等，我们还是要继续使用并发扬光大脱机消费这样一个模式。由此，就需要对发生交易的终端有所要求，一是能够鉴别IC卡的真伪，再者需要能够保证交易的合法性与安全性，本着不把终端制造商拉下水的目的，于是，坚持一个原则：终端设备与系统安全机制分离，即所有有关安全性的因素，都放置到一个叫PSAM卡里面，由系统发行方来发行管理。没有 PSAM卡的消费终端，相当于没有SIM卡的手机，安装PSAM卡以后，该消费终端就获得了系统运营商的许可，有权鉴别卡片的真伪，有权从卡上的钱包扣款。因此，PSAM的解释为：销售点终端安全存取模块（Purchase Secure Access Module）。\n\n上述最初起源自金融领域 IC卡电子钱包支付系统中的消费应用。在迅猛发展，并极具想象力的IC卡行业，PSAM的应用模式很快得到了延伸，去掉了P（Purchase）的限制之后的SAM（Secure Access Module），被用于很多模式中，变成了“各种终端内嵌入的、认证及存储所有安全数据与敏感信息的设备”。SAM是一个统称，SAM可以是一张标准尺寸的IC卡大小，更多的时候还是符合ISO/IEC 7810里面ID-000标准的小卡形状，也可以是一个DIP8或者SOP8/16封装的IC集成电路形状。如同印章一样，放一个SAM到一个通用的设备里面，表明运营商获得这个设备的控制权和所有权，才能完成该终端赋予的各种功能。\n\nCPU卡加密算法和随机数发生器与安装在读写设备中的密钥认证卡(SAM卡)相互发送认证的随机数，可以实现以下功能：\n- 1）通过终端设备上SAM卡实现对卡的认证\n- 2）CPU卡与终端设备上的SAM卡的相互认证，实现对卡终端的认证\n- 3）通过ISAM卡对CPU卡进行充值操作，实现安全的储值\n- 4）通过PSAM卡对CPU卡进行减值操作，实现安全的扣款\n- 5）在终端设备与CPU卡中传输的数据是加密传输\n- 6）通过对CPU卡发送给SAM卡的MAC1，SAM卡发送给CPU的MAC2和由CPU卡返回的TAC，可以实现数据传输验证的计算。而MAC1、MAC2和TAC就是同一张CPU卡每次传输的过程中都是不同的，因此无法使用空中接收的办法来破解CPU卡的密钥。\n\n#### 有几种SAM？\n- PSAM：放在脱机消费终端内，用来控制电子钱包脱机消费交易的SAM卡，通常是铳成ID-000的小卡形状，存放消费主密钥，能够验证用户卡上消费子密钥是否符合约定的对应关系，并且保证扣款过程的安全性。\n\n- ISAM：ISAM的出现并不具有典型意义，其中的I，可解释为Input，也可解释为Increase，放置在充值终端设备内，脱机充值交易中控制充值交易安全。说它不具有典型意义的原因是，脱机充值的模式是小额支付系统早期的模式，基于安全、风险、政策、技术发展等考虑，脱机充值应用在未来不会有生命力，因此， ISAM作为一个过渡产品，慢慢会成为历史。\n\n- ESAM，ESAM属于企业创造的新名词，其中的“E”代表一种形态，特指采用SOP或者DIP封装形式的SAM，作为设备原始设计的一部分，生产的时候焊接在设备的电路板上，不像是其他的SAM是在卡座内，可以灵活拆卸。ESAM的名字与功能无关，比如ESAM形式的PSAM或者ISAM，比如ESAM形式的电子钱包应用。都是符合逻辑的说法。ESAM有几种典型的应用：作为电子计数文件，在预付费表具内控制表具的运行。作为安全数据的存储与认证，实现硬件设备的版权保护与安全使用。\n\n- USAM： 是一个新产品，是基于已有SAM概念的基础上，进行的10%左右的创新而来，其中的“U”，大家一定比较容易猜到，即“USB”，是一个采用USB接口和通讯方式的SAM，在这里补充一下，前面所说的各种SAM的通讯方式都是符合ISO/IEC 7816中规定的接口和通讯协议。USAM是两种成熟技术结合，一种全新形态的产品。能大幅度提高SAM的效率与性能，减少设备开发工作量，使SAM的应用趋于标准化、开放性，也扩展了SAM的应用领域。\n\n#### SAM的技术要求\n\nSAM是与终端设备配套使用的安全设备，它具备这样的几个基本要求：\n- 1、是带有COS的CPU卡（模块）；\n- 2、密钥安全的存储在卡内，在某种认可的权限下，能被用于运算，但是不能被直接读出；\n- 3、高安全等级芯片，低功耗、宽电压、宽温度范围；\n- 4、SAM最核心的要求是安全性；\n- 5、SAM最重要的两个参数是运算速度和通讯速率；\n\n　　对IC卡操作时，耗费时间最多的环节是通讯所占用的时间，而在IC卡应用系统中，尤其是非接触式的应用中，每一个毫秒的时间都是非常宝贵的，都会极大地影响用户感受，在高速公路不停车收费系统中，每增加一个毫秒，都意味着通行速度的大幅降低。\n\n而采用USAM的最大特点在于：1、减少数据流通环节；2、提高数据通讯速度。\n\nUSAM直接插入标准USB接口即可使用，不用外接IC卡读写器或者需要SAM卡座；便于安装、使用；\n\nUSAM比较适合用于：城市通卡、高速公路收费、金融领域、加油领域、预付费水电气表。\n\n### 参考资料\nPSAM SAM：\nhttps://www.bbsmax.com/A/lk5aGpwPz1/\n\nIC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别:\nhttps://www.bbsmax.com/A/8Bz8BRpx5x/\n","slug":"PBOCKonwledge","published":1,"date":"2017-09-11T16:00:00.000Z","updated":"2017-12-07T06:35:03.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec1o003zd6ykp21mdh1s","content":"<h2 id=\"PBOC规范基础知识\"><a href=\"#PBOC规范基础知识\" class=\"headerlink\" title=\"PBOC规范基础知识\"></a>PBOC规范基础知识</h2><h3 id=\"术语和定义\"><a href=\"#术语和定义\" class=\"headerlink\" title=\"术语和定义\"></a>术语和定义</h3><ul>\n<li>集成电路 integrated circuit (IC) 具有处理和/或存储功能的电子器件。</li>\n<li>集成电路卡(IC 卡) integrated circuit(s) card (ICC) 内部封装一个或多个集成电路用于执行处理和存储功能的卡片。</li>\n<li>电子存折 electronic deposit 一种为持卡人进行消费、取现等交易而设计的支持个人识别码(PIN)保护的金融IC卡应用。它支持圈存、圈提、消费和取现等交易。</li>\n<li>电子钱包 electronic purse 一种为方便持卡人小额消费而设计的金融IC卡应用。它支持圈存、消费等交易。消费不支持个人识别码(PIN)保护。<a id=\"more\"></a></li>\n<li>圈存 load<br>持卡人将其在银行相应账户上的资金划转到电子存折或电子钱包中。圈存交易必须在金融终端上联机进行。<br>一般情况下，圈存到电子存折中的资金仍计付活期利息，圈存到电子钱包中的资金不计付利息。但 具体作法由发卡方自行决定。</li>\n<li>圈提 unload<br>持卡人将电子存折中的部分或全部资金划回到其在银行的相应账户上。圈提交易必须在金融终端上 联机进行2。</li>\n</ul>\n<h3 id=\"符号和缩略语\"><a href=\"#符号和缩略语\" class=\"headerlink\" title=\"符号和缩略语\"></a>符号和缩略语</h3><p>下列符号和缩略语适用于 JR/T 0025 的本部分。</p>\n<ul>\n<li>AID 应用标识符(Application Identifier)</li>\n<li>an 字母数字型(Alphanumeric)</li>\n<li>ans 字母数字及特殊字符型(Alphanumeric Special)</li>\n<li>ATI 应用类型标识(Application Type Identifier)，卡上有两种应用时，用来区分是电子存折和电子钱包</li>\n<li>b 二进制(Binary)</li>\n<li>CLA 命令报文的类别字节(Class Byte of the Command Message)</li>\n<li>cn 压缩数字型(Compressed Numeric)</li>\n<li>DEA 数据加密算法(Data Encryption Algorithm)</li>\n<li>DF 专用文件(Dedicated File)</li>\n<li>ED 电子存折(Electronic Deposit)</li>\n<li>EF 基本文件(Elementary File)</li>\n<li>EP 电子钱包(Electronic Purse)</li>\n<li>FCI 文件控制信息(File Control Information)</li>\n<li>INS 命令报文的指令字节(Instruction Byte of Command Message)</li>\n<li>ISO 国际标准化组织(International Organization for Standardization)</li>\n<li>Lc 终端发出的命令数据的实际长度(Exact Length of Data Sent)</li>\n<li>Le 响应数据中的最大期望长度(Maximum Length of Data Expected)</li>\n<li>MAC 报文鉴别码(Message Authentication Code)</li>\n<li>MF 主文件(Master File)</li>\n<li>n 数字型(Numeric)</li>\n<li>P1 参数 1(Parameter 1)</li>\n<li>P2 参数 2(Parameter 2)</li>\n<li>PIN 个人识别码(Personal Identification Number)</li>\n<li>POS 销售点终端(Point of Service)</li>\n<li>PSAM 销售点终端安全存取模块(Purchase Secure Access Module)</li>\n<li>PSE 支付系统环境(Payment System Environment)</li>\n<li>PVN PIN 校验值(PIN Verification Number)</li>\n<li>SFI 短文件标识符(Short File Identifier)</li>\n<li>SW1 状态字 1(Status Word One)</li>\n<li>SW2 状态字 2(Status Word Two)</li>\n<li>TAC 交易验证码(Transaction Authorization Crypogram)</li>\n<li>TTI 交易类型标识(Transaction Type Identifier)</li>\n<li>YYYYMMDD 年、月、日(Year, Month, Day)</li>\n</ul>\n<p>智能卡又称为IC卡(Integrated circuit Card),即集成电路卡。根据卡中使用的集成电路的不同可以分为存储器卡、逻辑加密卡和CPU卡。由于CPU卡中集成了中央处理器CPU、存储器和芯片操作系统(Chip Operating System, COS) ,构成一个完整的计算机系统, 具有独立的数据处理能力, 因此安全性大大增强,从而得到了广泛的应用,成为IC卡中的主流产品。</p>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"2-1-基本文件结构\"><a href=\"#2-1-基本文件结构\" class=\"headerlink\" title=\"2.1 基本文件结构\"></a>2.1 基本文件结构</h4><p>文件系统是COS的基础模块,它负责组织、管理、维护IC卡内存储的所有数据。根据ISO7816-4,COS 支持的文件类型为: 主文件(Master File, MF) 、目录文件(Dedicated File, DF)和基本文件(Elementary File,EF) 。主文件MF为文件系统的根，下面可以有多个目录文件DF和基本文件EF。目录文件DF分为DDF和ADF两种。DDF可以含有下级目录ADF, 而ADF不能含有下级目录文件。</p>\n<p>主文件MF在IC卡中唯一且必须存在。DDF是指包含多个应用的DF, 一个ADF则代表一个应用, 任何一个DF在物理上和逻辑上都保持独立。基本文件EF用于存放密钥或用户数据, 分为密钥文件和工作基本文件。</p>\n<p>三种专用文件(DF)类型:<br>MF: 根目录，是整个文件系统的根，同属应用环境类。MF 下可以有 EF(基本文件)、SF (安全文件)、DDF(目录文件)、ADF(应用文件);<br>DDF: 目录文件，用于定义一个应用环境，它是应用的集合。DDF下可以有ADF、子DDF、 EF和SF等结构。<br>ADF: 应用文件，用于定义具体应用。ADF下可以有EF和SF。</p>\n<h4 id=\"2-2-文件的访问控制\"><a href=\"#2-2-文件的访问控制\" class=\"headerlink\" title=\"2.2 文件的访问控制\"></a>2.2 文件的访问控制</h4><p>文件的访问控制可采取鉴别寄存器方式和状态机方式,这里以鉴别寄存器方式为例。用两个四位寄存器来表示安全状态: 一个寄存器称为MF的安全状态寄存器,另一个寄存器为当前DF的安全状态寄存器。每个寄存器的初始值是0,取值安全状态员安全状态圆执行命令符合命令要求的安全属性钥命令拒绝安全机制再晕图员智能卡安全体系范围是0～F之间的某一个值。文件有两种不同的访问控制权限AC0,AC1。AC0 是使用权限,AC1 是修改权限,分别用一个字节表示。当前安全状态寄存器的值大于AC字节的低半字节小于其高半字节时, 该文件的相应读、写权限在该安全状态下被满足,则能进行相关操作。COS在建立文件时指定其AC0和AC1的值来对文件的访问权限进行设定,通过口令校验和外部认证两条命令可以改变安全状态寄存器的值,从而利用安全机制实现对文件的访问控制。</p>\n<h3 id=\"命令的类别字节和指令字节\"><a href=\"#命令的类别字节和指令字节\" class=\"headerlink\" title=\"命令的类别字节和指令字节\"></a>命令的类别字节和指令字节</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><em>命令</em></th>\n<th style=\"text-align:center\"><em> CLA</em></th>\n<th style=\"text-align:center\"><em> INS </em></th>\n<th style=\"text-align:center\"><em>P1</em></th>\n<th style=\"text-align:center\"><em> P2</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">修改个人识别码(CHANGE PIN)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5E’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈存(CREDIT FOR LOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘52’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费/取现(DEBIT FOR PURCHASE/CASH WITHDRAW)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘54’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈提(DEBIT FOR UNLOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘54’</td>\n<td style=\"text-align:center\">‘03’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">读余额(GET BALANCE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5C’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取交易认证(GET TRANSACTION PROVE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5A’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘XX’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取现初始化(INITIALIZE FOR CASH WITHDRAW)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘02’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈存初始化(INITIALIZE FOR LOAD)</td>\n<td style=\"text-align:center\">‘80</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费初始化(INITIALIZE FOR PURCHASE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈提初始化(INITIALIZE FOR UNLOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘05’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改初始化(INITIALIZE FOR UPDATE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘04’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重装个人识别码(RELOAD PIN)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5E’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改透支限额(UPDATE OVERDRAW LIMIT)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘58’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\"><a href=\"#IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\" class=\"headerlink\" title=\"IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\"></a>IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别</h3><ul>\n<li><p>一、 技术方面（非接触式IC卡）</p>\n<ul>\n<li>1、 逻辑加密卡又叫存储卡，卡内的集成电路具有加密逻辑和EEPROM（电可擦除可编程只读存储器）。</li>\n<li>2、 CPU卡又叫智能卡，卡内的集成电路包括中央处理器（CPU）、EEPROM、随机存储器(ROM)、以及固化在只读存储器（ROM）中的片内操作系统(COS)，有的卡内芯片还集成了加密运算协处理器以提高安全性和工作速度，使其技术指标远远高于逻辑加密卡。</li>\n<li>3、 CPU卡由于具有微处理功能，使得在交易速度以及数据干扰方面远远高于逻辑加密卡，且允许多张卡片同时操作，具有防冲突机制。</li>\n<li>4、 两者在技术方面的最大区别在于：CPU卡是一种具有微处理芯片的IC卡，可执行加密运算和其它操作，存储容量较大，能应用于不同的系统；逻辑加密卡是一种单一的存储卡，主要特点是内部有只读存储器，但存储容量较CPU卡小，使其在用途方面没有扩展性。</li>\n</ul>\n</li>\n<li><p>二、 保密方面（非接触式IC卡）</p>\n<ul>\n<li>1、 逻辑加密卡具有防止对卡中信息随意改写功能的存储IC卡，当对加密卡进行操作时必须首先核对卡中密码，只有核对正确，卡中送出一串正确的应答信号时，才能对卡进行正确的操作，但由于只进行一次认证，且无其它的安全保护措施，容易导致密码的泄露和伪卡的产生，其安全性能很低。</li>\n<li>2、 由于CPU卡中有微处理机和IC卡操作系统（COS），当CPU卡进行操作时，可进行加密和解密算法（算法和密码都不易破解），用户和IC卡系统之间需要进行多次的相互密码认证（且速度极快），提高了系统的安全性能，对于防止伪卡的产生有很好的效果。 综上所述，对于逻辑加密卡和CPU卡来说，CPU卡不仅具有逻辑加密卡的所有功能，更具有逻辑加密卡所不具备的高安全性、灵活性以及支持与应用扩展等优良性能，也是今后IC卡发展的主要趋势和方向。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CPU卡安全系统与逻辑加密系统的比较\"><a href=\"#CPU卡安全系统与逻辑加密系统的比较\" class=\"headerlink\" title=\"CPU卡安全系统与逻辑加密系统的比较\"></a>CPU卡安全系统与逻辑加密系统的比较</h4><p>　　众所周知，密钥管理系统（Key Management System），也简称KMS，是IC项目安全的核心。如何进行密钥的安全管理，贯穿着IC卡应用的整个生命周期。</p>\n<p>　　1、 非接触逻辑加密卡的安全认证，依赖于每个扇区独立的KEYA和KEYB的校验，可以通过扇区控制字对KEYA和KEYB的不同安全组合，实现扇区数据的读写安全控制。非接触逻辑加密卡的个人化也比较简单，主要包括数据和各扇区KEYA、KEYB的更新，在期间所有敏感数据包括KEYA和KEYB都是直接以明文的形式更新。由于KEYA和KEYB的校验机制，只能解决卡片对终端的认证，而无法解决终端对卡片的认证，即我们俗称的“伪卡”的风险。接触逻辑加密卡，即密钥就是一个预先设定的确定数，无论用什么方法计算密钥，最后就一定要和原先写入的数一致，就可以对被保护的数据进行读写操作。因此无论是一卡一密的系统还是统一密码的系统，经过破解就可以实现对非接触逻辑加密卡的解密。很多人认为只要是采用了一卡一密、实时在线系统或非接触逻辑加密卡的ID号就能避免密钥被解密，其实，非接触逻辑加密卡被解密就意味着M1卡可以被复制，使用在线系统尽可以避免被非法充值，但是不能保证非法消费，即复制一张一样ID号的M1卡，就可以进行非法消费。现在的技术使用FPGA就可以完全复制。基于这个原理，M1的门禁卡也是不安全的。目前国内80%的门禁产品均是采用原始IC卡的ID号或ID卡的ID号去做门禁卡，根本没有去进行加密认证或开发专用的密钥，其安全隐患远远比Mifare卡的破解更危险，非法破解的人士只需采用的是专业的技术手段就可以完成破解过程，导致目前国内大多数门禁产品都不具备安全性原因之一，是因为早期门禁产品的设计理论是从国外引进过来的，国内大部分厂家长期以来延用国外做法，采用ID和IC卡的只读特性进行身份识别使用，很少关注卡与机具间的加密认证，缺少钥匙体系的设计；而ID卡是很容易可复制的载体，导致所有的门禁很容易几乎可以在瞬间被破解复制；这才是我们国内安防市场最大的灾难。</p>\n<p>　　2、 非接触CPU卡智能卡与非接触逻辑加密卡相比，拥有独立的CPU处理器和芯片操作系统，所以可以更灵活的支持各种不同的应用需求，更安全的设计交易流程。但同时，与非接触逻辑加密卡系统相比，非接触CPU卡智能卡的系统显得更为复杂，需要进行更多的系统改造，比如密钥管理、交易流程、PSAM卡以及卡片个人化等。密钥通常分为充值密钥（ISAM卡），减值密钥（PSAM卡），外部认证密钥（SAM卡）和全能密钥（ASAM卡）。非接触CPU卡智能卡可以通过内外部认证的机制，例如像建设部定义的电子钱包的交易流程，高可靠的满足不同的业务流程对安全和密钥管理的需求。对电子钱包圈存可以使用圈存密钥，消费可以使用消费密钥，清算可以使用TAC密钥，更新数据可以使用卡片应用维护密钥，卡片个人化过程中可以使用卡片传输密钥、卡片主控密钥、应用主控密钥等，真正做到一钥一用。</p>\n<h3 id=\"SAM-Secure-Access-Module-安全存取模块介绍\"><a href=\"#SAM-Secure-Access-Module-安全存取模块介绍\" class=\"headerlink\" title=\"SAM(Secure Access Module)安全存取模块介绍\"></a>SAM(Secure Access Module)安全存取模块介绍</h3><h4 id=\"为什么要用SAM？\"><a href=\"#为什么要用SAM？\" class=\"headerlink\" title=\"为什么要用SAM？\"></a>为什么要用SAM？</h4><p>究竟谁最开始使用SAM这个词，已经无从考证，能够确认的是：这个世界上先有了PSAM，然后才有了SAM。由于网络状况的原因，或者是应用环境的要求，使用IC卡作为支付介质的系统里面，消费环境不能在每次交易的时候，都做到实时与后台相连接认证IC卡的合法性以及交易完全性。因此，一种我们目前已经认可的交易模式——“电子钱包脱机消费”产生了。即便目前通讯技术发展到已经不存在技术障碍，在权衡风险、代价、方便性等等，我们还是要继续使用并发扬光大脱机消费这样一个模式。由此，就需要对发生交易的终端有所要求，一是能够鉴别IC卡的真伪，再者需要能够保证交易的合法性与安全性，本着不把终端制造商拉下水的目的，于是，坚持一个原则：终端设备与系统安全机制分离，即所有有关安全性的因素，都放置到一个叫PSAM卡里面，由系统发行方来发行管理。没有 PSAM卡的消费终端，相当于没有SIM卡的手机，安装PSAM卡以后，该消费终端就获得了系统运营商的许可，有权鉴别卡片的真伪，有权从卡上的钱包扣款。因此，PSAM的解释为：销售点终端安全存取模块（Purchase Secure Access Module）。</p>\n<p>上述最初起源自金融领域 IC卡电子钱包支付系统中的消费应用。在迅猛发展，并极具想象力的IC卡行业，PSAM的应用模式很快得到了延伸，去掉了P（Purchase）的限制之后的SAM（Secure Access Module），被用于很多模式中，变成了“各种终端内嵌入的、认证及存储所有安全数据与敏感信息的设备”。SAM是一个统称，SAM可以是一张标准尺寸的IC卡大小，更多的时候还是符合ISO/IEC 7810里面ID-000标准的小卡形状，也可以是一个DIP8或者SOP8/16封装的IC集成电路形状。如同印章一样，放一个SAM到一个通用的设备里面，表明运营商获得这个设备的控制权和所有权，才能完成该终端赋予的各种功能。</p>\n<p>CPU卡加密算法和随机数发生器与安装在读写设备中的密钥认证卡(SAM卡)相互发送认证的随机数，可以实现以下功能：</p>\n<ul>\n<li>1）通过终端设备上SAM卡实现对卡的认证</li>\n<li>2）CPU卡与终端设备上的SAM卡的相互认证，实现对卡终端的认证</li>\n<li>3）通过ISAM卡对CPU卡进行充值操作，实现安全的储值</li>\n<li>4）通过PSAM卡对CPU卡进行减值操作，实现安全的扣款</li>\n<li>5）在终端设备与CPU卡中传输的数据是加密传输</li>\n<li>6）通过对CPU卡发送给SAM卡的MAC1，SAM卡发送给CPU的MAC2和由CPU卡返回的TAC，可以实现数据传输验证的计算。而MAC1、MAC2和TAC就是同一张CPU卡每次传输的过程中都是不同的，因此无法使用空中接收的办法来破解CPU卡的密钥。</li>\n</ul>\n<h4 id=\"有几种SAM？\"><a href=\"#有几种SAM？\" class=\"headerlink\" title=\"有几种SAM？\"></a>有几种SAM？</h4><ul>\n<li><p>PSAM：放在脱机消费终端内，用来控制电子钱包脱机消费交易的SAM卡，通常是铳成ID-000的小卡形状，存放消费主密钥，能够验证用户卡上消费子密钥是否符合约定的对应关系，并且保证扣款过程的安全性。</p>\n</li>\n<li><p>ISAM：ISAM的出现并不具有典型意义，其中的I，可解释为Input，也可解释为Increase，放置在充值终端设备内，脱机充值交易中控制充值交易安全。说它不具有典型意义的原因是，脱机充值的模式是小额支付系统早期的模式，基于安全、风险、政策、技术发展等考虑，脱机充值应用在未来不会有生命力，因此， ISAM作为一个过渡产品，慢慢会成为历史。</p>\n</li>\n<li><p>ESAM，ESAM属于企业创造的新名词，其中的“E”代表一种形态，特指采用SOP或者DIP封装形式的SAM，作为设备原始设计的一部分，生产的时候焊接在设备的电路板上，不像是其他的SAM是在卡座内，可以灵活拆卸。ESAM的名字与功能无关，比如ESAM形式的PSAM或者ISAM，比如ESAM形式的电子钱包应用。都是符合逻辑的说法。ESAM有几种典型的应用：作为电子计数文件，在预付费表具内控制表具的运行。作为安全数据的存储与认证，实现硬件设备的版权保护与安全使用。</p>\n</li>\n<li><p>USAM： 是一个新产品，是基于已有SAM概念的基础上，进行的10%左右的创新而来，其中的“U”，大家一定比较容易猜到，即“USB”，是一个采用USB接口和通讯方式的SAM，在这里补充一下，前面所说的各种SAM的通讯方式都是符合ISO/IEC 7816中规定的接口和通讯协议。USAM是两种成熟技术结合，一种全新形态的产品。能大幅度提高SAM的效率与性能，减少设备开发工作量，使SAM的应用趋于标准化、开放性，也扩展了SAM的应用领域。</p>\n</li>\n</ul>\n<h4 id=\"SAM的技术要求\"><a href=\"#SAM的技术要求\" class=\"headerlink\" title=\"SAM的技术要求\"></a>SAM的技术要求</h4><p>SAM是与终端设备配套使用的安全设备，它具备这样的几个基本要求：</p>\n<ul>\n<li>1、是带有COS的CPU卡（模块）；</li>\n<li>2、密钥安全的存储在卡内，在某种认可的权限下，能被用于运算，但是不能被直接读出；</li>\n<li>3、高安全等级芯片，低功耗、宽电压、宽温度范围；</li>\n<li>4、SAM最核心的要求是安全性；</li>\n<li>5、SAM最重要的两个参数是运算速度和通讯速率；</li>\n</ul>\n<p>　　对IC卡操作时，耗费时间最多的环节是通讯所占用的时间，而在IC卡应用系统中，尤其是非接触式的应用中，每一个毫秒的时间都是非常宝贵的，都会极大地影响用户感受，在高速公路不停车收费系统中，每增加一个毫秒，都意味着通行速度的大幅降低。</p>\n<p>而采用USAM的最大特点在于：1、减少数据流通环节；2、提高数据通讯速度。</p>\n<p>USAM直接插入标准USB接口即可使用，不用外接IC卡读写器或者需要SAM卡座；便于安装、使用；</p>\n<p>USAM比较适合用于：城市通卡、高速公路收费、金融领域、加油领域、预付费水电气表。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>PSAM SAM：<br><a href=\"https://www.bbsmax.com/A/lk5aGpwPz1/\" target=\"_blank\" rel=\"external\">https://www.bbsmax.com/A/lk5aGpwPz1/</a></p>\n<p>IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别:<br><a href=\"https://www.bbsmax.com/A/8Bz8BRpx5x/\" target=\"_blank\" rel=\"external\">https://www.bbsmax.com/A/8Bz8BRpx5x/</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/09/12/PBOCKonwledge/\">http://agehua.github.io/2017/09/12/PBOCKonwledge/</a></p>\n","readingTime":{"text":"3 min read","minutes":2.125,"time":127500,"words":425},"excerpt":"<h2 id=\"PBOC规范基础知识\"><a href=\"#PBOC规范基础知识\" class=\"headerlink\" title=\"PBOC规范基础知识\"></a>PBOC规范基础知识</h2><h3 id=\"术语和定义\"><a href=\"#术语和定义\" class=\"headerlink\" title=\"术语和定义\"></a>术语和定义</h3><ul>\n<li>集成电路 integrated circuit (IC) 具有处理和/或存储功能的电子器件。</li>\n<li>集成电路卡(IC 卡) integrated circuit(s) card (ICC) 内部封装一个或多个集成电路用于执行处理和存储功能的卡片。</li>\n<li>电子存折 electronic deposit 一种为持卡人进行消费、取现等交易而设计的支持个人识别码(PIN)保护的金融IC卡应用。它支持圈存、圈提、消费和取现等交易。</li>\n<li>电子钱包 electronic purse 一种为方便持卡人小额消费而设计的金融IC卡应用。它支持圈存、消费等交易。消费不支持个人识别码(PIN)保护。","more":"</li>\n<li>圈存 load<br>持卡人将其在银行相应账户上的资金划转到电子存折或电子钱包中。圈存交易必须在金融终端上联机进行。<br>一般情况下，圈存到电子存折中的资金仍计付活期利息，圈存到电子钱包中的资金不计付利息。但 具体作法由发卡方自行决定。</li>\n<li>圈提 unload<br>持卡人将电子存折中的部分或全部资金划回到其在银行的相应账户上。圈提交易必须在金融终端上 联机进行2。</li>\n</ul>\n<h3 id=\"符号和缩略语\"><a href=\"#符号和缩略语\" class=\"headerlink\" title=\"符号和缩略语\"></a>符号和缩略语</h3><p>下列符号和缩略语适用于 JR/T 0025 的本部分。</p>\n<ul>\n<li>AID 应用标识符(Application Identifier)</li>\n<li>an 字母数字型(Alphanumeric)</li>\n<li>ans 字母数字及特殊字符型(Alphanumeric Special)</li>\n<li>ATI 应用类型标识(Application Type Identifier)，卡上有两种应用时，用来区分是电子存折和电子钱包</li>\n<li>b 二进制(Binary)</li>\n<li>CLA 命令报文的类别字节(Class Byte of the Command Message)</li>\n<li>cn 压缩数字型(Compressed Numeric)</li>\n<li>DEA 数据加密算法(Data Encryption Algorithm)</li>\n<li>DF 专用文件(Dedicated File)</li>\n<li>ED 电子存折(Electronic Deposit)</li>\n<li>EF 基本文件(Elementary File)</li>\n<li>EP 电子钱包(Electronic Purse)</li>\n<li>FCI 文件控制信息(File Control Information)</li>\n<li>INS 命令报文的指令字节(Instruction Byte of Command Message)</li>\n<li>ISO 国际标准化组织(International Organization for Standardization)</li>\n<li>Lc 终端发出的命令数据的实际长度(Exact Length of Data Sent)</li>\n<li>Le 响应数据中的最大期望长度(Maximum Length of Data Expected)</li>\n<li>MAC 报文鉴别码(Message Authentication Code)</li>\n<li>MF 主文件(Master File)</li>\n<li>n 数字型(Numeric)</li>\n<li>P1 参数 1(Parameter 1)</li>\n<li>P2 参数 2(Parameter 2)</li>\n<li>PIN 个人识别码(Personal Identification Number)</li>\n<li>POS 销售点终端(Point of Service)</li>\n<li>PSAM 销售点终端安全存取模块(Purchase Secure Access Module)</li>\n<li>PSE 支付系统环境(Payment System Environment)</li>\n<li>PVN PIN 校验值(PIN Verification Number)</li>\n<li>SFI 短文件标识符(Short File Identifier)</li>\n<li>SW1 状态字 1(Status Word One)</li>\n<li>SW2 状态字 2(Status Word Two)</li>\n<li>TAC 交易验证码(Transaction Authorization Crypogram)</li>\n<li>TTI 交易类型标识(Transaction Type Identifier)</li>\n<li>YYYYMMDD 年、月、日(Year, Month, Day)</li>\n</ul>\n<p>智能卡又称为IC卡(Integrated circuit Card),即集成电路卡。根据卡中使用的集成电路的不同可以分为存储器卡、逻辑加密卡和CPU卡。由于CPU卡中集成了中央处理器CPU、存储器和芯片操作系统(Chip Operating System, COS) ,构成一个完整的计算机系统, 具有独立的数据处理能力, 因此安全性大大增强,从而得到了广泛的应用,成为IC卡中的主流产品。</p>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"2-1-基本文件结构\"><a href=\"#2-1-基本文件结构\" class=\"headerlink\" title=\"2.1 基本文件结构\"></a>2.1 基本文件结构</h4><p>文件系统是COS的基础模块,它负责组织、管理、维护IC卡内存储的所有数据。根据ISO7816-4,COS 支持的文件类型为: 主文件(Master File, MF) 、目录文件(Dedicated File, DF)和基本文件(Elementary File,EF) 。主文件MF为文件系统的根，下面可以有多个目录文件DF和基本文件EF。目录文件DF分为DDF和ADF两种。DDF可以含有下级目录ADF, 而ADF不能含有下级目录文件。</p>\n<p>主文件MF在IC卡中唯一且必须存在。DDF是指包含多个应用的DF, 一个ADF则代表一个应用, 任何一个DF在物理上和逻辑上都保持独立。基本文件EF用于存放密钥或用户数据, 分为密钥文件和工作基本文件。</p>\n<p>三种专用文件(DF)类型:<br>MF: 根目录，是整个文件系统的根，同属应用环境类。MF 下可以有 EF(基本文件)、SF (安全文件)、DDF(目录文件)、ADF(应用文件);<br>DDF: 目录文件，用于定义一个应用环境，它是应用的集合。DDF下可以有ADF、子DDF、 EF和SF等结构。<br>ADF: 应用文件，用于定义具体应用。ADF下可以有EF和SF。</p>\n<h4 id=\"2-2-文件的访问控制\"><a href=\"#2-2-文件的访问控制\" class=\"headerlink\" title=\"2.2 文件的访问控制\"></a>2.2 文件的访问控制</h4><p>文件的访问控制可采取鉴别寄存器方式和状态机方式,这里以鉴别寄存器方式为例。用两个四位寄存器来表示安全状态: 一个寄存器称为MF的安全状态寄存器,另一个寄存器为当前DF的安全状态寄存器。每个寄存器的初始值是0,取值安全状态员安全状态圆执行命令符合命令要求的安全属性钥命令拒绝安全机制再晕图员智能卡安全体系范围是0～F之间的某一个值。文件有两种不同的访问控制权限AC0,AC1。AC0 是使用权限,AC1 是修改权限,分别用一个字节表示。当前安全状态寄存器的值大于AC字节的低半字节小于其高半字节时, 该文件的相应读、写权限在该安全状态下被满足,则能进行相关操作。COS在建立文件时指定其AC0和AC1的值来对文件的访问权限进行设定,通过口令校验和外部认证两条命令可以改变安全状态寄存器的值,从而利用安全机制实现对文件的访问控制。</p>\n<h3 id=\"命令的类别字节和指令字节\"><a href=\"#命令的类别字节和指令字节\" class=\"headerlink\" title=\"命令的类别字节和指令字节\"></a>命令的类别字节和指令字节</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><em>命令</em></th>\n<th style=\"text-align:center\"><em> CLA</em></th>\n<th style=\"text-align:center\"><em> INS </em></th>\n<th style=\"text-align:center\"><em>P1</em></th>\n<th style=\"text-align:center\"><em> P2</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">修改个人识别码(CHANGE PIN)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5E’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈存(CREDIT FOR LOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘52’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费/取现(DEBIT FOR PURCHASE/CASH WITHDRAW)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘54’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈提(DEBIT FOR UNLOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘54’</td>\n<td style=\"text-align:center\">‘03’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">读余额(GET BALANCE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5C’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取交易认证(GET TRANSACTION PROVE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5A’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘XX’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取现初始化(INITIALIZE FOR CASH WITHDRAW)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘02’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈存初始化(INITIALIZE FOR LOAD)</td>\n<td style=\"text-align:center\">‘80</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费初始化(INITIALIZE FOR PURCHASE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘01’</td>\n<td style=\"text-align:center\">‘0X’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">圈提初始化(INITIALIZE FOR UNLOAD)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘05’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改初始化(INITIALIZE FOR UPDATE)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘50’</td>\n<td style=\"text-align:center\">‘04’</td>\n<td style=\"text-align:center\">‘01’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重装个人识别码(RELOAD PIN)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘5E’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改透支限额(UPDATE OVERDRAW LIMIT)</td>\n<td style=\"text-align:center\">‘80’</td>\n<td style=\"text-align:center\">‘58’</td>\n<td style=\"text-align:center\">‘00’</td>\n<td style=\"text-align:center\">‘00’</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\"><a href=\"#IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\" class=\"headerlink\" title=\"IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别\"></a>IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别</h3><ul>\n<li><p>一、 技术方面（非接触式IC卡）</p>\n<ul>\n<li>1、 逻辑加密卡又叫存储卡，卡内的集成电路具有加密逻辑和EEPROM（电可擦除可编程只读存储器）。</li>\n<li>2、 CPU卡又叫智能卡，卡内的集成电路包括中央处理器（CPU）、EEPROM、随机存储器(ROM)、以及固化在只读存储器（ROM）中的片内操作系统(COS)，有的卡内芯片还集成了加密运算协处理器以提高安全性和工作速度，使其技术指标远远高于逻辑加密卡。</li>\n<li>3、 CPU卡由于具有微处理功能，使得在交易速度以及数据干扰方面远远高于逻辑加密卡，且允许多张卡片同时操作，具有防冲突机制。</li>\n<li>4、 两者在技术方面的最大区别在于：CPU卡是一种具有微处理芯片的IC卡，可执行加密运算和其它操作，存储容量较大，能应用于不同的系统；逻辑加密卡是一种单一的存储卡，主要特点是内部有只读存储器，但存储容量较CPU卡小，使其在用途方面没有扩展性。</li>\n</ul>\n</li>\n<li><p>二、 保密方面（非接触式IC卡）</p>\n<ul>\n<li>1、 逻辑加密卡具有防止对卡中信息随意改写功能的存储IC卡，当对加密卡进行操作时必须首先核对卡中密码，只有核对正确，卡中送出一串正确的应答信号时，才能对卡进行正确的操作，但由于只进行一次认证，且无其它的安全保护措施，容易导致密码的泄露和伪卡的产生，其安全性能很低。</li>\n<li>2、 由于CPU卡中有微处理机和IC卡操作系统（COS），当CPU卡进行操作时，可进行加密和解密算法（算法和密码都不易破解），用户和IC卡系统之间需要进行多次的相互密码认证（且速度极快），提高了系统的安全性能，对于防止伪卡的产生有很好的效果。 综上所述，对于逻辑加密卡和CPU卡来说，CPU卡不仅具有逻辑加密卡的所有功能，更具有逻辑加密卡所不具备的高安全性、灵活性以及支持与应用扩展等优良性能，也是今后IC卡发展的主要趋势和方向。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CPU卡安全系统与逻辑加密系统的比较\"><a href=\"#CPU卡安全系统与逻辑加密系统的比较\" class=\"headerlink\" title=\"CPU卡安全系统与逻辑加密系统的比较\"></a>CPU卡安全系统与逻辑加密系统的比较</h4><p>　　众所周知，密钥管理系统（Key Management System），也简称KMS，是IC项目安全的核心。如何进行密钥的安全管理，贯穿着IC卡应用的整个生命周期。</p>\n<p>　　1、 非接触逻辑加密卡的安全认证，依赖于每个扇区独立的KEYA和KEYB的校验，可以通过扇区控制字对KEYA和KEYB的不同安全组合，实现扇区数据的读写安全控制。非接触逻辑加密卡的个人化也比较简单，主要包括数据和各扇区KEYA、KEYB的更新，在期间所有敏感数据包括KEYA和KEYB都是直接以明文的形式更新。由于KEYA和KEYB的校验机制，只能解决卡片对终端的认证，而无法解决终端对卡片的认证，即我们俗称的“伪卡”的风险。接触逻辑加密卡，即密钥就是一个预先设定的确定数，无论用什么方法计算密钥，最后就一定要和原先写入的数一致，就可以对被保护的数据进行读写操作。因此无论是一卡一密的系统还是统一密码的系统，经过破解就可以实现对非接触逻辑加密卡的解密。很多人认为只要是采用了一卡一密、实时在线系统或非接触逻辑加密卡的ID号就能避免密钥被解密，其实，非接触逻辑加密卡被解密就意味着M1卡可以被复制，使用在线系统尽可以避免被非法充值，但是不能保证非法消费，即复制一张一样ID号的M1卡，就可以进行非法消费。现在的技术使用FPGA就可以完全复制。基于这个原理，M1的门禁卡也是不安全的。目前国内80%的门禁产品均是采用原始IC卡的ID号或ID卡的ID号去做门禁卡，根本没有去进行加密认证或开发专用的密钥，其安全隐患远远比Mifare卡的破解更危险，非法破解的人士只需采用的是专业的技术手段就可以完成破解过程，导致目前国内大多数门禁产品都不具备安全性原因之一，是因为早期门禁产品的设计理论是从国外引进过来的，国内大部分厂家长期以来延用国外做法，采用ID和IC卡的只读特性进行身份识别使用，很少关注卡与机具间的加密认证，缺少钥匙体系的设计；而ID卡是很容易可复制的载体，导致所有的门禁很容易几乎可以在瞬间被破解复制；这才是我们国内安防市场最大的灾难。</p>\n<p>　　2、 非接触CPU卡智能卡与非接触逻辑加密卡相比，拥有独立的CPU处理器和芯片操作系统，所以可以更灵活的支持各种不同的应用需求，更安全的设计交易流程。但同时，与非接触逻辑加密卡系统相比，非接触CPU卡智能卡的系统显得更为复杂，需要进行更多的系统改造，比如密钥管理、交易流程、PSAM卡以及卡片个人化等。密钥通常分为充值密钥（ISAM卡），减值密钥（PSAM卡），外部认证密钥（SAM卡）和全能密钥（ASAM卡）。非接触CPU卡智能卡可以通过内外部认证的机制，例如像建设部定义的电子钱包的交易流程，高可靠的满足不同的业务流程对安全和密钥管理的需求。对电子钱包圈存可以使用圈存密钥，消费可以使用消费密钥，清算可以使用TAC密钥，更新数据可以使用卡片应用维护密钥，卡片个人化过程中可以使用卡片传输密钥、卡片主控密钥、应用主控密钥等，真正做到一钥一用。</p>\n<h3 id=\"SAM-Secure-Access-Module-安全存取模块介绍\"><a href=\"#SAM-Secure-Access-Module-安全存取模块介绍\" class=\"headerlink\" title=\"SAM(Secure Access Module)安全存取模块介绍\"></a>SAM(Secure Access Module)安全存取模块介绍</h3><h4 id=\"为什么要用SAM？\"><a href=\"#为什么要用SAM？\" class=\"headerlink\" title=\"为什么要用SAM？\"></a>为什么要用SAM？</h4><p>究竟谁最开始使用SAM这个词，已经无从考证，能够确认的是：这个世界上先有了PSAM，然后才有了SAM。由于网络状况的原因，或者是应用环境的要求，使用IC卡作为支付介质的系统里面，消费环境不能在每次交易的时候，都做到实时与后台相连接认证IC卡的合法性以及交易完全性。因此，一种我们目前已经认可的交易模式——“电子钱包脱机消费”产生了。即便目前通讯技术发展到已经不存在技术障碍，在权衡风险、代价、方便性等等，我们还是要继续使用并发扬光大脱机消费这样一个模式。由此，就需要对发生交易的终端有所要求，一是能够鉴别IC卡的真伪，再者需要能够保证交易的合法性与安全性，本着不把终端制造商拉下水的目的，于是，坚持一个原则：终端设备与系统安全机制分离，即所有有关安全性的因素，都放置到一个叫PSAM卡里面，由系统发行方来发行管理。没有 PSAM卡的消费终端，相当于没有SIM卡的手机，安装PSAM卡以后，该消费终端就获得了系统运营商的许可，有权鉴别卡片的真伪，有权从卡上的钱包扣款。因此，PSAM的解释为：销售点终端安全存取模块（Purchase Secure Access Module）。</p>\n<p>上述最初起源自金融领域 IC卡电子钱包支付系统中的消费应用。在迅猛发展，并极具想象力的IC卡行业，PSAM的应用模式很快得到了延伸，去掉了P（Purchase）的限制之后的SAM（Secure Access Module），被用于很多模式中，变成了“各种终端内嵌入的、认证及存储所有安全数据与敏感信息的设备”。SAM是一个统称，SAM可以是一张标准尺寸的IC卡大小，更多的时候还是符合ISO/IEC 7810里面ID-000标准的小卡形状，也可以是一个DIP8或者SOP8/16封装的IC集成电路形状。如同印章一样，放一个SAM到一个通用的设备里面，表明运营商获得这个设备的控制权和所有权，才能完成该终端赋予的各种功能。</p>\n<p>CPU卡加密算法和随机数发生器与安装在读写设备中的密钥认证卡(SAM卡)相互发送认证的随机数，可以实现以下功能：</p>\n<ul>\n<li>1）通过终端设备上SAM卡实现对卡的认证</li>\n<li>2）CPU卡与终端设备上的SAM卡的相互认证，实现对卡终端的认证</li>\n<li>3）通过ISAM卡对CPU卡进行充值操作，实现安全的储值</li>\n<li>4）通过PSAM卡对CPU卡进行减值操作，实现安全的扣款</li>\n<li>5）在终端设备与CPU卡中传输的数据是加密传输</li>\n<li>6）通过对CPU卡发送给SAM卡的MAC1，SAM卡发送给CPU的MAC2和由CPU卡返回的TAC，可以实现数据传输验证的计算。而MAC1、MAC2和TAC就是同一张CPU卡每次传输的过程中都是不同的，因此无法使用空中接收的办法来破解CPU卡的密钥。</li>\n</ul>\n<h4 id=\"有几种SAM？\"><a href=\"#有几种SAM？\" class=\"headerlink\" title=\"有几种SAM？\"></a>有几种SAM？</h4><ul>\n<li><p>PSAM：放在脱机消费终端内，用来控制电子钱包脱机消费交易的SAM卡，通常是铳成ID-000的小卡形状，存放消费主密钥，能够验证用户卡上消费子密钥是否符合约定的对应关系，并且保证扣款过程的安全性。</p>\n</li>\n<li><p>ISAM：ISAM的出现并不具有典型意义，其中的I，可解释为Input，也可解释为Increase，放置在充值终端设备内，脱机充值交易中控制充值交易安全。说它不具有典型意义的原因是，脱机充值的模式是小额支付系统早期的模式，基于安全、风险、政策、技术发展等考虑，脱机充值应用在未来不会有生命力，因此， ISAM作为一个过渡产品，慢慢会成为历史。</p>\n</li>\n<li><p>ESAM，ESAM属于企业创造的新名词，其中的“E”代表一种形态，特指采用SOP或者DIP封装形式的SAM，作为设备原始设计的一部分，生产的时候焊接在设备的电路板上，不像是其他的SAM是在卡座内，可以灵活拆卸。ESAM的名字与功能无关，比如ESAM形式的PSAM或者ISAM，比如ESAM形式的电子钱包应用。都是符合逻辑的说法。ESAM有几种典型的应用：作为电子计数文件，在预付费表具内控制表具的运行。作为安全数据的存储与认证，实现硬件设备的版权保护与安全使用。</p>\n</li>\n<li><p>USAM： 是一个新产品，是基于已有SAM概念的基础上，进行的10%左右的创新而来，其中的“U”，大家一定比较容易猜到，即“USB”，是一个采用USB接口和通讯方式的SAM，在这里补充一下，前面所说的各种SAM的通讯方式都是符合ISO/IEC 7816中规定的接口和通讯协议。USAM是两种成熟技术结合，一种全新形态的产品。能大幅度提高SAM的效率与性能，减少设备开发工作量，使SAM的应用趋于标准化、开放性，也扩展了SAM的应用领域。</p>\n</li>\n</ul>\n<h4 id=\"SAM的技术要求\"><a href=\"#SAM的技术要求\" class=\"headerlink\" title=\"SAM的技术要求\"></a>SAM的技术要求</h4><p>SAM是与终端设备配套使用的安全设备，它具备这样的几个基本要求：</p>\n<ul>\n<li>1、是带有COS的CPU卡（模块）；</li>\n<li>2、密钥安全的存储在卡内，在某种认可的权限下，能被用于运算，但是不能被直接读出；</li>\n<li>3、高安全等级芯片，低功耗、宽电压、宽温度范围；</li>\n<li>4、SAM最核心的要求是安全性；</li>\n<li>5、SAM最重要的两个参数是运算速度和通讯速率；</li>\n</ul>\n<p>　　对IC卡操作时，耗费时间最多的环节是通讯所占用的时间，而在IC卡应用系统中，尤其是非接触式的应用中，每一个毫秒的时间都是非常宝贵的，都会极大地影响用户感受，在高速公路不停车收费系统中，每增加一个毫秒，都意味着通行速度的大幅降低。</p>\n<p>而采用USAM的最大特点在于：1、减少数据流通环节；2、提高数据通讯速度。</p>\n<p>USAM直接插入标准USB接口即可使用，不用外接IC卡读写器或者需要SAM卡座；便于安装、使用；</p>\n<p>USAM比较适合用于：城市通卡、高速公路收费、金融领域、加油领域、预付费水电气表。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>PSAM SAM：<br><a href=\"https://www.bbsmax.com/A/lk5aGpwPz1/\">https://www.bbsmax.com/A/lk5aGpwPz1/</a></p>\n<p>IC卡、M1卡、CPU卡、SAM卡、PSAM卡的联系与区别:<br><a href=\"https://www.bbsmax.com/A/8Bz8BRpx5x/\">https://www.bbsmax.com/A/8Bz8BRpx5x/</a></p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/09/12/PBOCKonwledge/\">http://agehua.github.io/2017/09/12/PBOCKonwledge/</a></p>"},{"layout":"post","title":"跨平台桌面程序开发","keywords":"Electron, JavaScript","banner":"http://obxk8w81b.bkt.clouddn.com/Digger%203.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Digger%203.jpg","toc":true,"_content":"\n## 跨平台桌面程序开发\n\n今天搜索Alfred 英文词典应用时发现了这个工具：\n[Youdao Alfred Workflow](https://github.com/kaiye/workflows-youdao/)\n\n\u001d作者在这篇文章：[学英语和写工具](https://github.com/kaiye/kaiye.github.com/issues/5)，里面介绍了Alfred插件开发，同时也介绍了一下跨平台插件开发的方式：\n\n<!--more-->\n下面这段摘自这篇文章：\n> 从趋势上来看，基于 HTML5 API 和 Node.js 的跨平台插件开发是未来的主流方向。  \n   - Chrome App 。从 Github 上下载一些 chrome app sample 示例，简单浏览一下教程（墙内的、墙外的）和官方 API 文档 ，不出半天时间就能开发出一款插件。\n   - npm 命令行工具。npm 模块除了在 node 环境下作为依赖模块被引用以外，还可以直接作为命令行工具使用。通过 package.json bin 字段定义，在全局安装时即可自动注册为全局命令行。例如，这款用于生成字体的 makefont 命令行模块。\n   - [NW.js](https://nwjs.io/) 。将 webkit 和 node 集成打包使用的跨平台方案。当前 Mac 版的「夺命追魂钉」用的就是这个方案。node + webkit 方案最终将会取代 Adobe AIR ，这是 HTML5 对 Flash 的胜利。\n   - [Electron](http://electron.atom.io/) 。微软新出的 Visual Studio Code 编辑器和 Github 的 Atom 编辑器使用的内核引擎，与 NW.js 的区别参看这里 。\n   \n     对于程序员来说，这是一个非常好的全栈实践之路。\n\n\n[Visual Studio Code 配置指南](https://github.com/kaiye/kaiye.github.com/issues/14)\n\nVisual Studio Code和Atom竟然是用Electron开发出来的，顿时觉得这种技术好强大，下决心要学习一下这个技术。\n\n### 关于 Electron\n\nElectron的官方网址是：https://electronjs.org/\n> 如果你可以建一个网站，你就可以建一个桌面应用程序。 Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。\n\nElectron（最初名为Atom Shell[3]）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。\n\n入门教程有：\n[Electron W3C中文文档](https://www.w3cschool.cn/electronmanual/)\n[Github: electron-cn-docs](https://github.com/amhoho/electron-cn-docs)\n\n由于Electron基于Node.js，所以入门第一关应当稍微熟悉Node.js的文档.\n\n### Electron\n\n**主进程**\n\n在 Electron 里，运行 package.json 里 main 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。\n**渲染进程**\n\n由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。\n在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 io.js 的 APIs 的能力，可以与底层操作系统直接交互。\n\n**主进程与渲染进程的区别**\n\n主进程使用 BrowserWindow 实例创建网页。每个 BrowserWindow 实例都在自己的渲染进程里运行着一个网页。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的网页。\n由于在网页里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在网页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n在 Electron，我们提供用于在主进程与渲染进程之间通讯的 ipc 模块。并且也有一个远程进程调用风格的通讯模块 remote。\n\n\n","source":"_posts/2017-10-22-Buildcross-platform-desktop-apps.md","raw":"---\nlayout: post\ntitle:  跨平台桌面程序开发\ncategory: accumulation\ntags:\n    - Alfred Workflow\n    - Electron\n    - JavaScript\nkeywords: Electron, JavaScript\nbanner: http://obxk8w81b.bkt.clouddn.com/Digger%203.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Digger%203.jpg\ntoc: true\n---\n\n## 跨平台桌面程序开发\n\n今天搜索Alfred 英文词典应用时发现了这个工具：\n[Youdao Alfred Workflow](https://github.com/kaiye/workflows-youdao/)\n\n\u001d作者在这篇文章：[学英语和写工具](https://github.com/kaiye/kaiye.github.com/issues/5)，里面介绍了Alfred插件开发，同时也介绍了一下跨平台插件开发的方式：\n\n<!--more-->\n下面这段摘自这篇文章：\n> 从趋势上来看，基于 HTML5 API 和 Node.js 的跨平台插件开发是未来的主流方向。  \n   - Chrome App 。从 Github 上下载一些 chrome app sample 示例，简单浏览一下教程（墙内的、墙外的）和官方 API 文档 ，不出半天时间就能开发出一款插件。\n   - npm 命令行工具。npm 模块除了在 node 环境下作为依赖模块被引用以外，还可以直接作为命令行工具使用。通过 package.json bin 字段定义，在全局安装时即可自动注册为全局命令行。例如，这款用于生成字体的 makefont 命令行模块。\n   - [NW.js](https://nwjs.io/) 。将 webkit 和 node 集成打包使用的跨平台方案。当前 Mac 版的「夺命追魂钉」用的就是这个方案。node + webkit 方案最终将会取代 Adobe AIR ，这是 HTML5 对 Flash 的胜利。\n   - [Electron](http://electron.atom.io/) 。微软新出的 Visual Studio Code 编辑器和 Github 的 Atom 编辑器使用的内核引擎，与 NW.js 的区别参看这里 。\n   \n     对于程序员来说，这是一个非常好的全栈实践之路。\n\n\n[Visual Studio Code 配置指南](https://github.com/kaiye/kaiye.github.com/issues/14)\n\nVisual Studio Code和Atom竟然是用Electron开发出来的，顿时觉得这种技术好强大，下决心要学习一下这个技术。\n\n### 关于 Electron\n\nElectron的官方网址是：https://electronjs.org/\n> 如果你可以建一个网站，你就可以建一个桌面应用程序。 Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。\n\nElectron（最初名为Atom Shell[3]）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。\n\n入门教程有：\n[Electron W3C中文文档](https://www.w3cschool.cn/electronmanual/)\n[Github: electron-cn-docs](https://github.com/amhoho/electron-cn-docs)\n\n由于Electron基于Node.js，所以入门第一关应当稍微熟悉Node.js的文档.\n\n### Electron\n\n**主进程**\n\n在 Electron 里，运行 package.json 里 main 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。\n**渲染进程**\n\n由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。\n在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 io.js 的 APIs 的能力，可以与底层操作系统直接交互。\n\n**主进程与渲染进程的区别**\n\n主进程使用 BrowserWindow 实例创建网页。每个 BrowserWindow 实例都在自己的渲染进程里运行着一个网页。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的网页。\n由于在网页里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在网页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n在 Electron，我们提供用于在主进程与渲染进程之间通讯的 ipc 模块。并且也有一个远程进程调用风格的通讯模块 remote。\n\n\n","slug":"Buildcross-platform-desktop-apps","published":1,"date":"2017-10-21T16:00:00.000Z","updated":"2017-12-07T06:46:19.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec1s0043d6ykty4o8w4q","content":"<h2 id=\"跨平台桌面程序开发\"><a href=\"#跨平台桌面程序开发\" class=\"headerlink\" title=\"跨平台桌面程序开发\"></a>跨平台桌面程序开发</h2><p>今天搜索Alfred 英文词典应用时发现了这个工具：<br><a href=\"https://github.com/kaiye/workflows-youdao/\" target=\"_blank\" rel=\"external\">Youdao Alfred Workflow</a></p>\n<p>\u001d作者在这篇文章：<a href=\"https://github.com/kaiye/kaiye.github.com/issues/5\" target=\"_blank\" rel=\"external\">学英语和写工具</a>，里面介绍了Alfred插件开发，同时也介绍了一下跨平台插件开发的方式：</p>\n<a id=\"more\"></a>\n<p>下面这段摘自这篇文章：</p>\n<blockquote>\n<p>从趋势上来看，基于 HTML5 API 和 Node.js 的跨平台插件开发是未来的主流方向。  </p>\n<ul>\n<li>Chrome App 。从 Github 上下载一些 chrome app sample 示例，简单浏览一下教程（墙内的、墙外的）和官方 API 文档 ，不出半天时间就能开发出一款插件。</li>\n<li>npm 命令行工具。npm 模块除了在 node 环境下作为依赖模块被引用以外，还可以直接作为命令行工具使用。通过 package.json bin 字段定义，在全局安装时即可自动注册为全局命令行。例如，这款用于生成字体的 makefont 命令行模块。</li>\n<li><a href=\"https://nwjs.io/\" target=\"_blank\" rel=\"external\">NW.js</a> 。将 webkit 和 node 集成打包使用的跨平台方案。当前 Mac 版的「夺命追魂钉」用的就是这个方案。node + webkit 方案最终将会取代 Adobe AIR ，这是 HTML5 对 Flash 的胜利。</li>\n<li><a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron</a> 。微软新出的 Visual Studio Code 编辑器和 Github 的 Atom 编辑器使用的内核引擎，与 NW.js 的区别参看这里 。</li>\n</ul>\n</blockquote>\n<pre><code>对于程序员来说，这是一个非常好的全栈实践之路。\n</code></pre><p><a href=\"https://github.com/kaiye/kaiye.github.com/issues/14\" target=\"_blank\" rel=\"external\">Visual Studio Code 配置指南</a></p>\n<p>Visual Studio Code和Atom竟然是用Electron开发出来的，顿时觉得这种技术好强大，下决心要学习一下这个技术。</p>\n<h3 id=\"关于-Electron\"><a href=\"#关于-Electron\" class=\"headerlink\" title=\"关于 Electron\"></a>关于 Electron</h3><p>Electron的官方网址是：<a href=\"https://electronjs.org/\" target=\"_blank\" rel=\"external\">https://electronjs.org/</a></p>\n<blockquote>\n<p>如果你可以建一个网站，你就可以建一个桌面应用程序。 Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。</p>\n</blockquote>\n<p>Electron（最初名为Atom Shell[3]）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。</p>\n<p>入门教程有：<br><a href=\"https://www.w3cschool.cn/electronmanual/\" target=\"_blank\" rel=\"external\">Electron W3C中文文档</a><br><a href=\"https://github.com/amhoho/electron-cn-docs\" target=\"_blank\" rel=\"external\">Github: electron-cn-docs</a></p>\n<p>由于Electron基于Node.js，所以入门第一关应当稍微熟悉Node.js的文档.</p>\n<h3 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h3><p><strong>主进程</strong></p>\n<p>在 Electron 里，运行 package.json 里 main 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。<br><strong>渲染进程</strong></p>\n<p>由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。<br>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 io.js 的 APIs 的能力，可以与底层操作系统直接交互。</p>\n<p><strong>主进程与渲染进程的区别</strong></p>\n<p>主进程使用 BrowserWindow 实例创建网页。每个 BrowserWindow 实例都在自己的渲染进程里运行着一个网页。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的网页。<br>由于在网页里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在网页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。<br>在 Electron，我们提供用于在主进程与渲染进程之间通讯的 ipc 模块。并且也有一个远程进程调用风格的通讯模块 remote。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/10/22/Buildcross-platform-desktop-apps/\">http://agehua.github.io/2017/10/22/Buildcross-platform-desktop-apps/</a></p>\n","readingTime":{"text":"1 min read","minutes":0.89,"time":53400,"words":178},"excerpt":"<h2 id=\"跨平台桌面程序开发\"><a href=\"#跨平台桌面程序开发\" class=\"headerlink\" title=\"跨平台桌面程序开发\"></a>跨平台桌面程序开发</h2><p>今天搜索Alfred 英文词典应用时发现了这个工具：<br><a href=\"https://github.com/kaiye/workflows-youdao/\">Youdao Alfred Workflow</a></p>\n<p>\u001d作者在这篇文章：<a href=\"https://github.com/kaiye/kaiye.github.com/issues/5\">学英语和写工具</a>，里面介绍了Alfred插件开发，同时也介绍了一下跨平台插件开发的方式：</p>","more":"<p>下面这段摘自这篇文章：</p>\n<blockquote>\n<p>从趋势上来看，基于 HTML5 API 和 Node.js 的跨平台插件开发是未来的主流方向。  </p>\n<ul>\n<li>Chrome App 。从 Github 上下载一些 chrome app sample 示例，简单浏览一下教程（墙内的、墙外的）和官方 API 文档 ，不出半天时间就能开发出一款插件。</li>\n<li>npm 命令行工具。npm 模块除了在 node 环境下作为依赖模块被引用以外，还可以直接作为命令行工具使用。通过 package.json bin 字段定义，在全局安装时即可自动注册为全局命令行。例如，这款用于生成字体的 makefont 命令行模块。</li>\n<li><a href=\"https://nwjs.io/\">NW.js</a> 。将 webkit 和 node 集成打包使用的跨平台方案。当前 Mac 版的「夺命追魂钉」用的就是这个方案。node + webkit 方案最终将会取代 Adobe AIR ，这是 HTML5 对 Flash 的胜利。</li>\n<li><a href=\"http://electron.atom.io/\">Electron</a> 。微软新出的 Visual Studio Code 编辑器和 Github 的 Atom 编辑器使用的内核引擎，与 NW.js 的区别参看这里 。</li>\n</ul>\n</blockquote>\n<pre><code>对于程序员来说，这是一个非常好的全栈实践之路。\n</code></pre><p><a href=\"https://github.com/kaiye/kaiye.github.com/issues/14\">Visual Studio Code 配置指南</a></p>\n<p>Visual Studio Code和Atom竟然是用Electron开发出来的，顿时觉得这种技术好强大，下决心要学习一下这个技术。</p>\n<h3 id=\"关于-Electron\"><a href=\"#关于-Electron\" class=\"headerlink\" title=\"关于 Electron\"></a>关于 Electron</h3><p>Electron的官方网址是：<a href=\"https://electronjs.org/\">https://electronjs.org/</a></p>\n<blockquote>\n<p>如果你可以建一个网站，你就可以建一个桌面应用程序。 Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，它负责比较难搞的部分，你只需把精力放在你的应用的核心上即可。</p>\n</blockquote>\n<p>Electron（最初名为Atom Shell[3]）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。</p>\n<p>入门教程有：<br><a href=\"https://www.w3cschool.cn/electronmanual/\">Electron W3C中文文档</a><br><a href=\"https://github.com/amhoho/electron-cn-docs\">Github: electron-cn-docs</a></p>\n<p>由于Electron基于Node.js，所以入门第一关应当稍微熟悉Node.js的文档.</p>\n<h3 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h3><p><strong>主进程</strong></p>\n<p>在 Electron 里，运行 package.json 里 main 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。<br><strong>渲染进程</strong></p>\n<p>由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。<br>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 io.js 的 APIs 的能力，可以与底层操作系统直接交互。</p>\n<p><strong>主进程与渲染进程的区别</strong></p>\n<p>主进程使用 BrowserWindow 实例创建网页。每个 BrowserWindow 实例都在自己的渲染进程里运行着一个网页。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的网页。<br>由于在网页里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在网页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。<br>在 Electron，我们提供用于在主进程与渲染进程之间通讯的 ipc 模块。并且也有一个远程进程调用风格的通讯模块 remote。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/10/22/Buildcross-platform-desktop-apps/\">http://agehua.github.io/2017/10/22/Buildcross-platform-desktop-apps/</a></p>"},{"layout":"post","title":"JavaScript知识点积累","keywords":"JavaScript","banner":"http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg","toc":true,"_content":"\n## JavaScript积累\n\n> 本文大部分内容来自: [廖雪峰--JavaScript教程](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n\n### for ... of循环介绍\nES6引入了for ... of循环遍历集合，你可能会有疑问，for ... of循环和for ... in循环有何区别？\n\nfor ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。\n\n<!--more-->\n当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\nfor (var x in a) {\n    console.log(x); // '0', '1', '2', 'name'\n}\n~~~\nfor ... in循环将把name包括在内，但Array的length属性却不包括在内。\n\nfor ... of循环则完全修复了这些问题，它只循环集合本身的元素：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\nfor (var x of a) {\n    console.log(x); // 'A', 'B', 'C'\n}\n~~~\n这就是为什么要引入新的for ... of循环。\n\n然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：\n\n~~~ JavaScript\n'use strict';\nvar a = ['A', 'B', 'C'];\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(element + ', index = ' + index);\n});\n~~~\n> 注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。\n\nSet与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：\n~~~ JavaScript\nvar s = new Set(['A', 'B', 'C']);\ns.forEach(function (element, sameElement, set) {\n    console.log(element);\n});\n~~~\nMap的回调函数参数依次为value、key和map本身：\n~~~ JavaScript\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nm.forEach(function (value, key, map) {\n    console.log(value);\n});\n~~~\n如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.forEach(function (element) {\n    console.log(element);\n});\n~~~\n\n### rest参数\nJavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array.\n由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：\n~~~ JavaScript\nfunction foo(a, b) {\n    var i, rest = [];\n    if (arguments.length > 2) {\n        for (i = 2; i<arguments.length; i++) {\n            rest.push(arguments[i]);\n        }\n    }\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n~~~\n\n为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？\n\nES6标准引入了rest参数，上面的函数可以改写为：\n~~~ JavaScript\nfunction foo(a, b, ...rest) {\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfoo(1, 2, 3, 4, 5);\n// 结果:\n// a = 1\n// b = 2\n// Array [ 3, 4, 5 ]\n\nfoo(1);\n// 结果:\n// a = 1\n// b = undefined\n// Array []\n~~~\nrest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。\n\n如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。\n\n### 全局作用域\n不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性\n\n你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    alert('foo');\n}\n\nfoo(); // 直接调用foo()\nwindow.foo(); // 通过window.foo()调用\n~~~\n\n### 名字空间\n\n全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。\n\n减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：\n~~~ JavaScript\n// 唯一的全局变量MYAPP:\nvar MYAPP = {};\n\n// 其他变量:\nMYAPP.name = 'myapp';\nMYAPP.version = 1.0;\n\n// 其他函数:\nMYAPP.foo = function () {\n    return 'foo';\n};\n~~~\n把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。\n\n许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。\n### 局部作用域\n\n由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    for (var i=0; i<100; i++) {\n        //\n    }\n    i += 100; // 仍然可以引用变量i\n}\n~~~\n为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    var sum = 0;\n    for (let i=0; i<100; i++) {\n        sum += i;\n    }\n    // SyntaxError:\n    i += 1;\n}\n~~~\nES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域.\n\n### 解构赋值\n\n从ES6开始，JavaScript引入了**解构赋值**，可以同时对一组变量进行赋值\n如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：\n~~~ JavaScript\nlet [x, [y, z]] = ['hello', ['JavaScript', 'ES6']];\nx; // 'hello'\ny; // 'JavaScript'\nz; // 'ES6'\n~~~\n解构赋值还可以忽略某些元素：\n~~~ JavaScript\nlet [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素\nz; // 'ES6'\n~~~\n对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678',\n    school: 'No.4 middle school',\n    address: {\n        city: 'Beijing',\n        street: 'No.1 Road',\n        zipcode: '100001'\n    }\n};\nvar {name, address: {city, zip}} = person;\nname; // '小明'\ncity; // 'Beijing'\nzip; // undefined, 因为属性名是zipcode而不是zip\n// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:\naddress; // Uncaught ReferenceError: address is not defined\n~~~\n使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678',\n    school: 'No.4 middle school'\n};\n\n// 把passport属性赋值给变量id:\nlet {name, passport:id} = person;\nname; // '小明'\nid; // 'G-12345678'\n// 注意: passport不是变量，而是为了让变量id获得passport属性:\npassport; // Uncaught ReferenceError: passport is not defined\n~~~\n解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678'\n};\n~~~\n// 如果person对象没有single属性，默认赋值为true:\n~~~ JavaScript\nvar {name, single=true} = person;\nname; // '小明'\nsingle; // true\n~~~\n有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：\n~~~ JavaScript\n// 声明变量:\nvar x, y;\n// 解构赋值:\n{x, y} = { name: '小明', x: 100, y: 200};\n// 语法错误: Uncaught SyntaxError: Unexpected token =\n~~~\n这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：\n~~~ JavaScript\n({x, y} = { name: '小明', x: 100, y: 200});\n~~~\n**使用场景**\n\n解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：\n~~~ JavaScript\nvar x=1, y=2;\n[x, y] = [y, x]\n~~~\n快速获取当前页面的域名和路径：\n~~~ JavaScript\nvar {hostname:domain, pathname:path} = location;\n~~~\n如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：\n~~~ JavaScript\nfunction buildDate({year, month, day, hour=0, minute=0, second=0}) {\n    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);\n}\n~~~\n它的方便之处在于传入的对象只需要year、month和day这三个属性：\n~~~ JavaScript\nbuildDate({ year: 2017, month: 1, day: 1 });\n// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)\n~~~\n也可以传入hour、minute和second属性：\n~~~ JavaScript\nbuildDate({ year: 2017, month: 1, day: 1, hour: 20, minute: 15 });\n// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)\n~~~\n使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。\n\n### 方法this、apply和call\n在一个方法内部，this是一个特殊变量，它始终指向当前对象\n~~~ JavaScript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var y = new Date().getFullYear();\n        return y - this.birth;\n    }\n};\n\nvar fn = xiaoming.age;\nfn(); // Uncaught TypeError: Cannot read property 'birth' of undefined\n~~~\nthis指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）\n\n~~~ JavaScript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\n~~~\n用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。\n\n虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！\n\n要指定函数的this指向哪个对象，可以用**函数**本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。\n\n用apply修复getAge()调用：\n~~~ JavaScript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n~~~\n另一个与apply()类似的方法是call()，唯一区别是：\n\n- apply()把参数打包成Array再传入；\n- call()把参数按顺序传入。\n\n比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：\n~~~ JavaScript\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n~~~\n对普通函数调用，我们通常把this绑定为null。\n\n### 装饰器\n\n利用apply()，我们还可以动态改变函数的行为。\n\nJavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。\n\n现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：\n~~~ JavaScript\n'use strict';\n\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n~~~\n\n### 高阶函数\nJavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。\n\n**map**\nmap()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果\n~~~ JavaScript\n'use strict';\n\nfunction pow(x) {\n    return x * x;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\nconsole.log(results);\n~~~\n> 注意：map()传入的参数是pow，即函数对象本身。\n\n把Array的所有数字转为字符串：\n~~~ JavaScript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n~~~\n只需要一行代码。\n\n**reduce**\nArray的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：\n~~~ JavaScript\n[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)\n~~~\n\n要把[1, 3, 5, 7, 9]变换成整数13579，reduce()也能派上用场：\n~~~ JavaScript\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n    return x * 10 + y;\n}); // 13579\n~~~\n**filter**\nfilter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。\n\n和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。\n\n把一个Array中的空字符串删掉，可以这么写：\n~~~ JavaScript\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\nr; // ['A', 'B', 'C']\n~~~\n\nfilter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：\n~~~ JavaScript\nvar arr = ['A', 'B', 'C'];\nvar r = arr.filter(function (element, index, self) {\n    console.log(element); // 依次打印'A', 'B', 'C'\n    console.log(index); // 依次打印0, 1, 2\n    console.log(self); // self就是变量arr\n    return true;\n});\n~~~\n利用filter，可以巧妙地去除Array的重复元素：\n~~~ JavaScript\n'use strict';\n\nvar\n    r,\n    arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];\n\nr = arr.filter(function (element, index, self) {\n    return self.indexOf(element) === index;\n});\nconsole.log(r.toString());\n~~~\n> 去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。\n\n**sort()**\nsort()方法会直接对Array进行修改，它返回的结果仍是当前Array：\n~~~ JavaScript\nvar a1 = ['B', 'A', 'C'];\nvar a2 = a1.sort();\na1; // ['A', 'B', 'C']\na2; // ['A', 'B', 'C']\na1 === a2; // true, a1和a2是同一对象\n~~~\n\n### 闭包\n高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。\n\n返回闭包时牢记的一点就是：**返回函数不要引用任何循环变量，或者后续会发生变化的变量**\n如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：\n~~~ JavaScript\nfunction count() {\n    var arr = [];\n    for (var i=1; i<=3; i++) {\n        arr.push((function (n) {\n            return function () {\n                return n * n;\n            }\n        })(i));\n    }\n    return arr;\n}\n\nvar results = count();\nvar f1 = results[0];\nvar f2 = results[1];\nvar f3 = results[2];\n\nf1(); // 1\nf2(); // 4\nf3(); // 9\n~~~\n\n注意这里用了一个“创建一个匿名函数并立刻执行”的语法：\n~~~ JavaScript\n(function (x) {\n    return x * x;\n})(3); // 9\n~~~\n理论上讲，创建一个匿名函数并立刻执行可以这么写：\n~~~ JavaScript\nfunction (x) { return x * x } (3);\n~~~\n但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：\n~~~ JavaScript\n(function (x) { return x * x }) (3);\n~~~\n通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：\n~~~ JavaScript\n(function (x) {\n    return x * x;\n})(3)\n~~~\n\n闭包有非常强大的功能。举个栗子：\n\n在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。\n\n在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：\n~~~ JavaScript\n'use strict';\n\nfunction create_counter(initial) {\n    var x = initial || 0;\n    return {\n        inc: function () {\n            x += 1;\n            return x;\n        }\n    }\n}\n~~~\n它用起来像这样：\n~~~ JavaScript\nvar c1 = create_counter();\nc1.inc(); // 1\nc1.inc(); // 2\nc1.inc(); // 3\n\nvar c2 = create_counter(10);\nc2.inc(); // 11\nc2.inc(); // 12\nc2.inc(); // 13\n~~~\n在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。\n\n闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：\n~~~ JavaScript\n'use strict';\n\nfunction make_pow(n) {\n    return function (x) {\n        return Math.pow(x, n);\n    }\n}\n\n// 创建两个新函数:\nvar pow2 = make_pow(2);\nvar pow3 = make_pow(3);\n\nconsole.log(pow2(5)); // 25\nconsole.log(pow3(7)); // 343\n~~~\n**使用闭包的注意点：**\n- 1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n- 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n### 闭包的思考\n关于闭包的总结也可以再看下这篇文章：[学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n上面提到的这篇文章的最后，列出了一道思考题：\n如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。\n代码片段一。\n~~~ JavaScript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　return function(){\n　　　　　　return this.name;\n　　　　};\n　　}\n};\nalert(object.getNameFunc()());\n~~~\n代码片段二。\n~~~ JavaScript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　var that = this;\n　　　　return function(){\n　　　　　　return that.name;\n　　　　};\n　　}\n};\nalert(object.getNameFunc()());\n~~~\n\n\n我先说结果，代码段一的结果是：The Window；而代码段二的结果是：My Object。\n\n关于this关键字，前面已经介绍过了，它代表的实例会根据环境不同而变化的. \n> In JavaScript this always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of. \n\n上面这段话，摘自：[The this keyword](http://www.quirksmode.org/js/this.html)。\n\n我理解的意思是，**this永远指向我们要执行的方法的“owner”，或者更确切的说，是指向function作为某个object的一个方法（method）的那个object**。\n\n在代码片段一里，object.getNameFunc()返回的是function，假设是f，那么:\n**alert(object.getNameFunc()());  等价于===》 alert(f());**\nf()的执行已经和object没有关系了，this这里应该指向的是window对象，所以name值应该是：\"The Window\"。\n\n在代码片段二里，在object.getNameFunc()执行的时候，this代表object对象，**用that变量（that不是关键字）**保存了起来，而最里面的这个function是可以访问that变量的，那么\n**alert(object.getNameFunc()());  应该等价于===》 alert(f(that));**\n所以name的值应该是：“My Object”。\n\n#### 箭头函数\nES6标准新增了一种新的函数：Arrow Function（箭头函数）。\n箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ ... }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ ... }和return：。如果参数不是一个，就需要用括号()括起来：\n~~~ JavaScript\n// 两个参数:\n(x, y) => x * x + y * y\n\n// 无参数:\n() => 3.14\n\n// 可变参数:\n(x, y, ...rest) => {\n    var i, sum = x + y;\n    for (i=0; i<rest.length; i++) {\n        sum += rest[i];\n    }\n    return sum;\n}\n~~~\n如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n~~~ JavaScript\n// SyntaxError:\nx => { foo: x }\n~~~\n因为和函数体的{ ... }有语法冲突，所以要改为：\n~~~ JavaScript\n// ok:\nx => ({ foo: x })\n~~~\n\n**this**\n\n箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：**箭头函数内部的this是词法作用域，由上下文确定**。\n\n回顾前面的例子，由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\n~~~\n现在，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 25\n~~~\n如果使用箭头函数，以前的那种hack写法：\n~~~ JavaScript\nvar that = this;\n~~~\n就不再需要了。\n由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function (year) {\n        var b = this.birth; // 1990\n        var fn = (y) => y - this.birth; // this.birth仍是1990\n        return fn.call({birth:2000}, year);\n    }\n};\nobj.getAge(2015); // 25\n~~~\n\n关于箭头函数中this的解释，可以看这篇文章：[箭头函数中this的用法](https://github.com/zhengweikeng/blog/blob/master/posts/2016/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E7%94%A8%E6%B3%95.md)\n和[深入浅出ES6（七）：箭头函数 Arrow Functions](http://www.infoq.com/cn/articles/es6-in-depth-arrow-functions)这篇\n\n### 标准对象\n\n总结一下，有这么几条规则需要遵守：\n\n- 不要使用new Number()、new Boolean()、new String()创建包装对象；\n- 用parseInt()或parseFloat()来转换任意类型到number；\n- 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；\n- 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；\n- typeof操作符可以判断出number、boolean、string、function和undefined；\n- 判断Array要使用Array.isArray(arr)；\n- 判断null请使用myVar === null；\n- 判断某个全局变量是否存在用typeof window.myVar === 'undefined'；\n- 函数内部判断某个变量是否存在用typeof myVar === 'undefined'。\n\n任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。\n\n更细心的同学指出，number对象调用toString()报SyntaxError：\n~~~ JavaScript\n123.toString(); // SyntaxError\n~~~\n遇到这种情况，要特殊处理一下：\n~~~ JavaScript\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n~~~\n\n**Date对象**\n\n如果要创建一个指定日期和时间的Date对象，可以用：\n~~~ JavaScript\nvar d = new Date(2015, 5, 19, 20, 15, 30, 123);\n~~~\n> JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。\n\n~~~ JavaScript\nvar d = Date.parse('2015-06-24T19:49:22.875+08:00');\nd; // 1435146562875\n~~~\n~~~ JavaScript\nvar d = new Date(1435146562875);\nd; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)\nd.getMonth(); // 5\n~~~\n> 使用Date.parse()时传入的字符串使用实际月份01~12，转换为Date对象后getMonth()获取的月份值为0~11。\n\n要获取当前时间戳，可以用：\n~~~ JavaScript\n'use strict';\n\nif (Date.now) {\n    console.log(Date.now()); // 老版本IE没有now()方法\n} else {\n    console.log(new Date().getTime());\n}\n~~~\n\n**RegExp**，\n\n正则表达式的内容参考：[标准对象-RegExp](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000)\n\n\n### 构造函数\n除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：\n~~~ JavaScript\nfunction Student(name) {\n    this.name = name;\n    this.hello = function () {\n        alert('Hello, ' + this.name + '!');\n    }\n}\n~~~\n你会问，咦，这不是一个普通函数吗？\n\n这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：\n~~~ JavaScript\nvar xiaoming = new Student('小明');\nxiaoming.name; // '小明'\nxiaoming.hello(); // Hello, 小明!\n~~~\n> 注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。\n\n新创建的xiaoming的原型链是：\n~~~ JavaScript\nxiaoming ----> Student.prototype ----> Object.prototype ----> null\n~~~\n\nxiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：\n~~~ JavaScript\nxiaoming ↘\nxiaohong -→ Student.prototype ----> Object.prototype ----> null\nxiaojun  ↗\n~~~\n\n用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：\n~~~ JavaScript\nxiaoming.constructor === Student.prototype.constructor; // true\nStudent.prototype.constructor === Student; // true\nObject.getPrototypeOf(xiaoming) === Student.prototype; // true\nxiaoming instanceof Student; // true\n~~~\n看晕了吧？用一张图来表示这些乱七八糟的关系就是：\n\n![](/images/blogimages/2017/js/js_function_construction.png)\n\n不过还有一个小问题，注意观察：\n~~~ JavaScript\nxiaoming.name; // '小明'\nxiaohong.name; // '小红'\nxiaoming.hello; // function: Student.hello()\nxiaohong.hello; // function: Student.hello()\nxiaoming.hello === xiaohong.hello; // false\n~~~\nxiaoming和xiaohong各自的name不同，这是对的，否则我们无法区分谁是谁了。\n\nxiaoming和xiaohong各自的hello是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！\n\n如果我们通过new Student()创建了很多对象，这些对象的hello函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。\n\n要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype：\n\n![](/images/blogimages/2017/js/js_function_construction_1.png)\n\n修改代码如下：\n~~~ JavaScript\nfunction Student(name) {\n    this.name = name;\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n};\n~~~\n\n**忘记写new怎么办**\n\n如果一个函数被定义为用于创建对象的构造函数，但是调用时忘记了写new怎么办？\n\n在strict模式下，this.name = name将报错，因为this绑定为undefined，在非strict模式下，this.name = name不报错，因为this绑定为window，于是无意间创建了全局变量name，并且返回undefined，这个结果更糟糕。\n\n所以，调用构造函数千万不要忘记写new。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new。\n\n最后，我们还可以编写一个createStudent()函数，在内部封装所有的new操作。一个常用的编程模式像这样：\n~~~ JavaScript\nfunction Student(props) {\n    this.name = props.name || '匿名'; // 默认值为'匿名'\n    this.grade = props.grade || 1; // 默认值为1\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n};\n\nfunction createStudent(props) {\n    return new Student(props || {})\n}\n~~~\n这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：\n~~~ JavaScript\nvar xiaoming = createStudent({\n    name: '小明'\n});\n\nxiaoming.grade; // 1\n~~~\n如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming。\n\n**原型继承**\n在传统的基于Class的语言如Java、C++中，继承的本质是扩展一个已有的Class，并生成新的Subclass。\nJavaScript由于采用原型继承，我们无法直接扩展一个Class，因为根本不存在Class这种类型。但是办法还是有的。\n\n我们还是用上面的Student函数，现在，我们要基于Student扩展出PrimaryStudent，可以先定义出PrimaryStudent：\n~~~ JavaScript\nfunction PrimaryStudent(props) {\n    // 调用Student构造函数，绑定this变量:\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n~~~\n但是，调用了Student构造函数不等于继承了Student，PrimaryStudent创建的对象的原型是：\n~~~ JavaScript\nnew PrimaryStudent() ----> PrimaryStudent.prototype ----> Object.prototype ----> null\n~~~\n必须想办法把原型链修改为：\n~~~ JavaScript\nnew PrimaryStudent() ----> PrimaryStudent.prototype ----> Student.prototype ----> Object.prototype ----> null\n~~~\n\n我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Student.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：\n~~~ JavaScript\n// PrimaryStudent构造函数:\nfunction PrimaryStudent(props) {\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n\n// 空函数F:\nfunction F() {\n}\n\n// 把F的原型指向Student.prototype:\nF.prototype = Student.prototype;\n\n// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:\nPrimaryStudent.prototype = new F();\n\n// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:\nPrimaryStudent.prototype.constructor = PrimaryStudent;\n\n// 继续在PrimaryStudent原型（就是new F()对象）上定义方法：\nPrimaryStudent.prototype.getGrade = function () {\n    return this.grade;\n};\n\n// 创建xiaoming:\nvar xiaoming = new PrimaryStudent({\n    name: '小明',\n    grade: 2\n});\nxiaoming.name; // '小明'\nxiaoming.grade; // 2\n\n// 验证原型:\nxiaoming.__proto__ === PrimaryStudent.prototype; // true\nxiaoming.__proto__.__proto__ === Student.prototype; // true\n\n// 验证继承关系:\nxiaoming instanceof PrimaryStudent; // true\nxiaoming instanceof Student; // true\n~~~\n用一张图来表示新的原型链：\n\n![](/images/blogimages/2017/js/js_function_construction_2.png)\n\n> 注意，函数F仅用于桥接，我们仅创建了一个new F()实例，而且，没有改变原有的Student定义的原型链。\n\n如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：\n~~~ JavaScript\nfunction inherits(Child, Parent) {\n    var F = function () {};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n~~~\n这个inherits()函数可以复用：\n~~~ JavaScript\nfunction Student(props) {\n    this.name = props.name || 'Unnamed';\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n}\n\nfunction PrimaryStudent(props) {\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n\n// 实现原型继承链:\ninherits(PrimaryStudent, Student);\n\n// 绑定其他方法到PrimaryStudent原型:\nPrimaryStudent.prototype.getGrade = function () {\n    return this.grade;\n};\n~~~\n\n总结JavaScript的原型继承实现方式就是：\n\n- 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；\n- 借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；\n- 继续在新的构造函数的原型上定义新方法。\n\n### class继承\n上面的我们看到了JavaScript的对象模型是基于原型实现的，特点是简单，缺点是理解起来比传统的类－实例模型要困难，最大的缺点是继承的实现需要编写大量代码，并且需要正确实现原型链。\n\n新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。\n\n如果用新的class关键字来编写Student，可以这样写：\n~~~ JavaScript\nclass Student {\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('Hello, ' + this.name + '!');\n    }\n}\n~~~\n比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {...}这样分散的代码。\n\n最后，创建一个Student对象代码和前面章节完全一样：\n~~~ JavaScript\nvar xiaoming = new Student('小明');\nxiaoming.hello();\n~~~\n\n**class继承**\n原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：\n~~~ JavaScript\nclass PrimaryStudent extends Student {\n    constructor(name, grade) {\n        super(name); // 记得用super调用父类的构造方法!\n        this.grade = grade;\n    }\n\n    myGrade() {\n        alert('I am at grade ' + this.grade);\n    }\n}\n~~~\n注意PrimaryStudent的定义也是class关键字实现的，而extends则表示原型链对象来自Student。子类的构造函数可能会与父类不太相同，例如，PrimaryStudent需要name和grade两个参数，并且需要通过**super(name)**来调用父类的构造函数，否则父类的name属性无法正常初始化。\n\nPrimaryStudent已经自动获得了父类Student的hello方法，我们又在子类中定义了新的myGrade方法。\n\nES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。\n\n你一定会问，class这么好用，能不能现在就用上？\n\n现在用还早了点，因为不是所有的主流浏览器都支持ES6的class。如果一定要现在就用上，就需要一个工具把class代码转换为传统的prototype代码，可以试试[Babel](https://babeljs.io/)这个工具。\n\n### 操作DOM\n由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。\n\n始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：\n- 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；\n- 遍历：遍历该DOM节点下的子节点，以便进行进一步操作；\n- 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；\n- 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。\n\n在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是**document.getElementById()**和**document.getElementsByTagName()**，以及CSS选择器**document.getElementsByClassName()**。\n\n由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点。document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。\n\n例如：\n~~~ JavaScript\n// 返回ID为'test'的节点：\nvar test = document.getElementById('test');\n\n// 先定位ID为'test-table'的节点，再返回其内部所有tr节点：\nvar trs = document.getElementById('test-table').getElementsByTagName('tr');\n\n// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点：\nvar reds = document.getElementById('test-div').getElementsByClassName('red');\n\n// 获取节点test下的所有直属子节点:\nvar cs = test.children;\n\n// 获取节点test下第一个、最后一个子节点：\nvar first = test.firstElementChild;\nvar last = test.lastElementChild;\n~~~\n第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便：\n~~~ JavaScript\n// 通过querySelector获取ID为q1的节点：\nvar q1 = document.querySelector('#q1');\n\n// 通过querySelectorAll获取q1节点内的符合条件的所有节点：\nvar ps = q1.querySelectorAll('div.highlighted > p');\n~~~\n> 注意：低版本的IE<8不支持querySelector和querySelectorAll。IE8仅有限支持\n\n严格地讲，我们这里的DOM节点是指Element，但是DOM节点实际上是Node，在HTML中，Node包括Element、Comment、CDATA_SECTION等很多种，以及根节点Document类型，但是，绝大多数时候我们只关心Element，也就是实际控制页面结构的Node，其他类型的Node忽略即可。根节点Document已经自动绑定为全局变量document。\n\n","source":"_posts/2017-10-22-JavaScript-knowledge.md","raw":"---\nlayout: post\ntitle:  JavaScript知识点积累\ncategory: accumulation\ntags:\n    - JavaScript\n    - Basic Knowledge\nkeywords: JavaScript\nbanner: http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Bridge%20and%20Houses%20on%20the%20Corner%20of%20Herengracht-Prinsessegracht,%20The%20Hague.jpg\ntoc: true\n---\n\n## JavaScript积累\n\n> 本文大部分内容来自: [廖雪峰--JavaScript教程](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n\n### for ... of循环介绍\nES6引入了for ... of循环遍历集合，你可能会有疑问，for ... of循环和for ... in循环有何区别？\n\nfor ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。\n\n<!--more-->\n当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\nfor (var x in a) {\n    console.log(x); // '0', '1', '2', 'name'\n}\n~~~\nfor ... in循环将把name包括在内，但Array的length属性却不包括在内。\n\nfor ... of循环则完全修复了这些问题，它只循环集合本身的元素：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\nfor (var x of a) {\n    console.log(x); // 'A', 'B', 'C'\n}\n~~~\n这就是为什么要引入新的for ... of循环。\n\n然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：\n\n~~~ JavaScript\n'use strict';\nvar a = ['A', 'B', 'C'];\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(element + ', index = ' + index);\n});\n~~~\n> 注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。\n\nSet与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：\n~~~ JavaScript\nvar s = new Set(['A', 'B', 'C']);\ns.forEach(function (element, sameElement, set) {\n    console.log(element);\n});\n~~~\nMap的回调函数参数依次为value、key和map本身：\n~~~ JavaScript\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nm.forEach(function (value, key, map) {\n    console.log(value);\n});\n~~~\n如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：\n~~~ JavaScript\nvar a = ['A', 'B', 'C'];\na.forEach(function (element) {\n    console.log(element);\n});\n~~~\n\n### rest参数\nJavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array.\n由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：\n~~~ JavaScript\nfunction foo(a, b) {\n    var i, rest = [];\n    if (arguments.length > 2) {\n        for (i = 2; i<arguments.length; i++) {\n            rest.push(arguments[i]);\n        }\n    }\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n~~~\n\n为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？\n\nES6标准引入了rest参数，上面的函数可以改写为：\n~~~ JavaScript\nfunction foo(a, b, ...rest) {\n    console.log('a = ' + a);\n    console.log('b = ' + b);\n    console.log(rest);\n}\n\nfoo(1, 2, 3, 4, 5);\n// 结果:\n// a = 1\n// b = 2\n// Array [ 3, 4, 5 ]\n\nfoo(1);\n// 结果:\n// a = 1\n// b = undefined\n// Array []\n~~~\nrest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。\n\n如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。\n\n### 全局作用域\n不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性\n\n你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    alert('foo');\n}\n\nfoo(); // 直接调用foo()\nwindow.foo(); // 通过window.foo()调用\n~~~\n\n### 名字空间\n\n全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。\n\n减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：\n~~~ JavaScript\n// 唯一的全局变量MYAPP:\nvar MYAPP = {};\n\n// 其他变量:\nMYAPP.name = 'myapp';\nMYAPP.version = 1.0;\n\n// 其他函数:\nMYAPP.foo = function () {\n    return 'foo';\n};\n~~~\n把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。\n\n许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。\n### 局部作用域\n\n由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    for (var i=0; i<100; i++) {\n        //\n    }\n    i += 100; // 仍然可以引用变量i\n}\n~~~\n为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：\n~~~ JavaScript\n'use strict';\n\nfunction foo() {\n    var sum = 0;\n    for (let i=0; i<100; i++) {\n        sum += i;\n    }\n    // SyntaxError:\n    i += 1;\n}\n~~~\nES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域.\n\n### 解构赋值\n\n从ES6开始，JavaScript引入了**解构赋值**，可以同时对一组变量进行赋值\n如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：\n~~~ JavaScript\nlet [x, [y, z]] = ['hello', ['JavaScript', 'ES6']];\nx; // 'hello'\ny; // 'JavaScript'\nz; // 'ES6'\n~~~\n解构赋值还可以忽略某些元素：\n~~~ JavaScript\nlet [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素\nz; // 'ES6'\n~~~\n对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678',\n    school: 'No.4 middle school',\n    address: {\n        city: 'Beijing',\n        street: 'No.1 Road',\n        zipcode: '100001'\n    }\n};\nvar {name, address: {city, zip}} = person;\nname; // '小明'\ncity; // 'Beijing'\nzip; // undefined, 因为属性名是zipcode而不是zip\n// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:\naddress; // Uncaught ReferenceError: address is not defined\n~~~\n使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678',\n    school: 'No.4 middle school'\n};\n\n// 把passport属性赋值给变量id:\nlet {name, passport:id} = person;\nname; // '小明'\nid; // 'G-12345678'\n// 注意: passport不是变量，而是为了让变量id获得passport属性:\npassport; // Uncaught ReferenceError: passport is not defined\n~~~\n解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：\n~~~ JavaScript\nvar person = {\n    name: '小明',\n    age: 20,\n    gender: 'male',\n    passport: 'G-12345678'\n};\n~~~\n// 如果person对象没有single属性，默认赋值为true:\n~~~ JavaScript\nvar {name, single=true} = person;\nname; // '小明'\nsingle; // true\n~~~\n有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：\n~~~ JavaScript\n// 声明变量:\nvar x, y;\n// 解构赋值:\n{x, y} = { name: '小明', x: 100, y: 200};\n// 语法错误: Uncaught SyntaxError: Unexpected token =\n~~~\n这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：\n~~~ JavaScript\n({x, y} = { name: '小明', x: 100, y: 200});\n~~~\n**使用场景**\n\n解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：\n~~~ JavaScript\nvar x=1, y=2;\n[x, y] = [y, x]\n~~~\n快速获取当前页面的域名和路径：\n~~~ JavaScript\nvar {hostname:domain, pathname:path} = location;\n~~~\n如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：\n~~~ JavaScript\nfunction buildDate({year, month, day, hour=0, minute=0, second=0}) {\n    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);\n}\n~~~\n它的方便之处在于传入的对象只需要year、month和day这三个属性：\n~~~ JavaScript\nbuildDate({ year: 2017, month: 1, day: 1 });\n// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)\n~~~\n也可以传入hour、minute和second属性：\n~~~ JavaScript\nbuildDate({ year: 2017, month: 1, day: 1, hour: 20, minute: 15 });\n// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)\n~~~\n使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。\n\n### 方法this、apply和call\n在一个方法内部，this是一个特殊变量，它始终指向当前对象\n~~~ JavaScript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var y = new Date().getFullYear();\n        return y - this.birth;\n    }\n};\n\nvar fn = xiaoming.age;\nfn(); // Uncaught TypeError: Cannot read property 'birth' of undefined\n~~~\nthis指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）\n\n~~~ JavaScript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\n~~~\n用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。\n\n虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！\n\n要指定函数的this指向哪个对象，可以用**函数**本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。\n\n用apply修复getAge()调用：\n~~~ JavaScript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n~~~\n另一个与apply()类似的方法是call()，唯一区别是：\n\n- apply()把参数打包成Array再传入；\n- call()把参数按顺序传入。\n\n比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：\n~~~ JavaScript\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n~~~\n对普通函数调用，我们通常把this绑定为null。\n\n### 装饰器\n\n利用apply()，我们还可以动态改变函数的行为。\n\nJavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。\n\n现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：\n~~~ JavaScript\n'use strict';\n\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n~~~\n\n### 高阶函数\nJavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。\n\n**map**\nmap()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果\n~~~ JavaScript\n'use strict';\n\nfunction pow(x) {\n    return x * x;\n}\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\nconsole.log(results);\n~~~\n> 注意：map()传入的参数是pow，即函数对象本身。\n\n把Array的所有数字转为字符串：\n~~~ JavaScript\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n~~~\n只需要一行代码。\n\n**reduce**\nArray的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：\n~~~ JavaScript\n[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)\n~~~\n\n要把[1, 3, 5, 7, 9]变换成整数13579，reduce()也能派上用场：\n~~~ JavaScript\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n    return x * 10 + y;\n}); // 13579\n~~~\n**filter**\nfilter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。\n\n和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。\n\n把一个Array中的空字符串删掉，可以这么写：\n~~~ JavaScript\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\nr; // ['A', 'B', 'C']\n~~~\n\nfilter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：\n~~~ JavaScript\nvar arr = ['A', 'B', 'C'];\nvar r = arr.filter(function (element, index, self) {\n    console.log(element); // 依次打印'A', 'B', 'C'\n    console.log(index); // 依次打印0, 1, 2\n    console.log(self); // self就是变量arr\n    return true;\n});\n~~~\n利用filter，可以巧妙地去除Array的重复元素：\n~~~ JavaScript\n'use strict';\n\nvar\n    r,\n    arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];\n\nr = arr.filter(function (element, index, self) {\n    return self.indexOf(element) === index;\n});\nconsole.log(r.toString());\n~~~\n> 去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。\n\n**sort()**\nsort()方法会直接对Array进行修改，它返回的结果仍是当前Array：\n~~~ JavaScript\nvar a1 = ['B', 'A', 'C'];\nvar a2 = a1.sort();\na1; // ['A', 'B', 'C']\na2; // ['A', 'B', 'C']\na1 === a2; // true, a1和a2是同一对象\n~~~\n\n### 闭包\n高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。\n\n返回闭包时牢记的一点就是：**返回函数不要引用任何循环变量，或者后续会发生变化的变量**\n如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：\n~~~ JavaScript\nfunction count() {\n    var arr = [];\n    for (var i=1; i<=3; i++) {\n        arr.push((function (n) {\n            return function () {\n                return n * n;\n            }\n        })(i));\n    }\n    return arr;\n}\n\nvar results = count();\nvar f1 = results[0];\nvar f2 = results[1];\nvar f3 = results[2];\n\nf1(); // 1\nf2(); // 4\nf3(); // 9\n~~~\n\n注意这里用了一个“创建一个匿名函数并立刻执行”的语法：\n~~~ JavaScript\n(function (x) {\n    return x * x;\n})(3); // 9\n~~~\n理论上讲，创建一个匿名函数并立刻执行可以这么写：\n~~~ JavaScript\nfunction (x) { return x * x } (3);\n~~~\n但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：\n~~~ JavaScript\n(function (x) { return x * x }) (3);\n~~~\n通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：\n~~~ JavaScript\n(function (x) {\n    return x * x;\n})(3)\n~~~\n\n闭包有非常强大的功能。举个栗子：\n\n在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。\n\n在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：\n~~~ JavaScript\n'use strict';\n\nfunction create_counter(initial) {\n    var x = initial || 0;\n    return {\n        inc: function () {\n            x += 1;\n            return x;\n        }\n    }\n}\n~~~\n它用起来像这样：\n~~~ JavaScript\nvar c1 = create_counter();\nc1.inc(); // 1\nc1.inc(); // 2\nc1.inc(); // 3\n\nvar c2 = create_counter(10);\nc2.inc(); // 11\nc2.inc(); // 12\nc2.inc(); // 13\n~~~\n在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。\n\n闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：\n~~~ JavaScript\n'use strict';\n\nfunction make_pow(n) {\n    return function (x) {\n        return Math.pow(x, n);\n    }\n}\n\n// 创建两个新函数:\nvar pow2 = make_pow(2);\nvar pow3 = make_pow(3);\n\nconsole.log(pow2(5)); // 25\nconsole.log(pow3(7)); // 343\n~~~\n**使用闭包的注意点：**\n- 1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n- 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n### 闭包的思考\n关于闭包的总结也可以再看下这篇文章：[学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n上面提到的这篇文章的最后，列出了一道思考题：\n如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。\n代码片段一。\n~~~ JavaScript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　return function(){\n　　　　　　return this.name;\n　　　　};\n　　}\n};\nalert(object.getNameFunc()());\n~~~\n代码片段二。\n~~~ JavaScript\nvar name = \"The Window\";\nvar object = {\n　　name : \"My Object\",\n　　getNameFunc : function(){\n　　　　var that = this;\n　　　　return function(){\n　　　　　　return that.name;\n　　　　};\n　　}\n};\nalert(object.getNameFunc()());\n~~~\n\n\n我先说结果，代码段一的结果是：The Window；而代码段二的结果是：My Object。\n\n关于this关键字，前面已经介绍过了，它代表的实例会根据环境不同而变化的. \n> In JavaScript this always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of. \n\n上面这段话，摘自：[The this keyword](http://www.quirksmode.org/js/this.html)。\n\n我理解的意思是，**this永远指向我们要执行的方法的“owner”，或者更确切的说，是指向function作为某个object的一个方法（method）的那个object**。\n\n在代码片段一里，object.getNameFunc()返回的是function，假设是f，那么:\n**alert(object.getNameFunc()());  等价于===》 alert(f());**\nf()的执行已经和object没有关系了，this这里应该指向的是window对象，所以name值应该是：\"The Window\"。\n\n在代码片段二里，在object.getNameFunc()执行的时候，this代表object对象，**用that变量（that不是关键字）**保存了起来，而最里面的这个function是可以访问that变量的，那么\n**alert(object.getNameFunc()());  应该等价于===》 alert(f(that));**\n所以name的值应该是：“My Object”。\n\n#### 箭头函数\nES6标准新增了一种新的函数：Arrow Function（箭头函数）。\n箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ ... }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ ... }和return：。如果参数不是一个，就需要用括号()括起来：\n~~~ JavaScript\n// 两个参数:\n(x, y) => x * x + y * y\n\n// 无参数:\n() => 3.14\n\n// 可变参数:\n(x, y, ...rest) => {\n    var i, sum = x + y;\n    for (i=0; i<rest.length; i++) {\n        sum += rest[i];\n    }\n    return sum;\n}\n~~~\n如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：\n~~~ JavaScript\n// SyntaxError:\nx => { foo: x }\n~~~\n因为和函数体的{ ... }有语法冲突，所以要改为：\n~~~ JavaScript\n// ok:\nx => ({ foo: x })\n~~~\n\n**this**\n\n箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：**箭头函数内部的this是词法作用域，由上下文确定**。\n\n回顾前面的例子，由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = function () {\n            return new Date().getFullYear() - this.birth; // this指向window或undefined\n        };\n        return fn();\n    }\n};\n~~~\n现在，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 25\n~~~\n如果使用箭头函数，以前的那种hack写法：\n~~~ JavaScript\nvar that = this;\n~~~\n就不再需要了。\n由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：\n~~~ JavaScript\nvar obj = {\n    birth: 1990,\n    getAge: function (year) {\n        var b = this.birth; // 1990\n        var fn = (y) => y - this.birth; // this.birth仍是1990\n        return fn.call({birth:2000}, year);\n    }\n};\nobj.getAge(2015); // 25\n~~~\n\n关于箭头函数中this的解释，可以看这篇文章：[箭头函数中this的用法](https://github.com/zhengweikeng/blog/blob/master/posts/2016/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E7%94%A8%E6%B3%95.md)\n和[深入浅出ES6（七）：箭头函数 Arrow Functions](http://www.infoq.com/cn/articles/es6-in-depth-arrow-functions)这篇\n\n### 标准对象\n\n总结一下，有这么几条规则需要遵守：\n\n- 不要使用new Number()、new Boolean()、new String()创建包装对象；\n- 用parseInt()或parseFloat()来转换任意类型到number；\n- 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；\n- 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；\n- typeof操作符可以判断出number、boolean、string、function和undefined；\n- 判断Array要使用Array.isArray(arr)；\n- 判断null请使用myVar === null；\n- 判断某个全局变量是否存在用typeof window.myVar === 'undefined'；\n- 函数内部判断某个变量是否存在用typeof myVar === 'undefined'。\n\n任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。\n\n更细心的同学指出，number对象调用toString()报SyntaxError：\n~~~ JavaScript\n123.toString(); // SyntaxError\n~~~\n遇到这种情况，要特殊处理一下：\n~~~ JavaScript\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n~~~\n\n**Date对象**\n\n如果要创建一个指定日期和时间的Date对象，可以用：\n~~~ JavaScript\nvar d = new Date(2015, 5, 19, 20, 15, 30, 123);\n~~~\n> JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。\n\n~~~ JavaScript\nvar d = Date.parse('2015-06-24T19:49:22.875+08:00');\nd; // 1435146562875\n~~~\n~~~ JavaScript\nvar d = new Date(1435146562875);\nd; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)\nd.getMonth(); // 5\n~~~\n> 使用Date.parse()时传入的字符串使用实际月份01~12，转换为Date对象后getMonth()获取的月份值为0~11。\n\n要获取当前时间戳，可以用：\n~~~ JavaScript\n'use strict';\n\nif (Date.now) {\n    console.log(Date.now()); // 老版本IE没有now()方法\n} else {\n    console.log(new Date().getTime());\n}\n~~~\n\n**RegExp**，\n\n正则表达式的内容参考：[标准对象-RegExp](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000)\n\n\n### 构造函数\n除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：\n~~~ JavaScript\nfunction Student(name) {\n    this.name = name;\n    this.hello = function () {\n        alert('Hello, ' + this.name + '!');\n    }\n}\n~~~\n你会问，咦，这不是一个普通函数吗？\n\n这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：\n~~~ JavaScript\nvar xiaoming = new Student('小明');\nxiaoming.name; // '小明'\nxiaoming.hello(); // Hello, 小明!\n~~~\n> 注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。\n\n新创建的xiaoming的原型链是：\n~~~ JavaScript\nxiaoming ----> Student.prototype ----> Object.prototype ----> null\n~~~\n\nxiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：\n~~~ JavaScript\nxiaoming ↘\nxiaohong -→ Student.prototype ----> Object.prototype ----> null\nxiaojun  ↗\n~~~\n\n用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：\n~~~ JavaScript\nxiaoming.constructor === Student.prototype.constructor; // true\nStudent.prototype.constructor === Student; // true\nObject.getPrototypeOf(xiaoming) === Student.prototype; // true\nxiaoming instanceof Student; // true\n~~~\n看晕了吧？用一张图来表示这些乱七八糟的关系就是：\n\n![](/images/blogimages/2017/js/js_function_construction.png)\n\n不过还有一个小问题，注意观察：\n~~~ JavaScript\nxiaoming.name; // '小明'\nxiaohong.name; // '小红'\nxiaoming.hello; // function: Student.hello()\nxiaohong.hello; // function: Student.hello()\nxiaoming.hello === xiaohong.hello; // false\n~~~\nxiaoming和xiaohong各自的name不同，这是对的，否则我们无法区分谁是谁了。\n\nxiaoming和xiaohong各自的hello是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！\n\n如果我们通过new Student()创建了很多对象，这些对象的hello函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。\n\n要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype：\n\n![](/images/blogimages/2017/js/js_function_construction_1.png)\n\n修改代码如下：\n~~~ JavaScript\nfunction Student(name) {\n    this.name = name;\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n};\n~~~\n\n**忘记写new怎么办**\n\n如果一个函数被定义为用于创建对象的构造函数，但是调用时忘记了写new怎么办？\n\n在strict模式下，this.name = name将报错，因为this绑定为undefined，在非strict模式下，this.name = name不报错，因为this绑定为window，于是无意间创建了全局变量name，并且返回undefined，这个结果更糟糕。\n\n所以，调用构造函数千万不要忘记写new。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new。\n\n最后，我们还可以编写一个createStudent()函数，在内部封装所有的new操作。一个常用的编程模式像这样：\n~~~ JavaScript\nfunction Student(props) {\n    this.name = props.name || '匿名'; // 默认值为'匿名'\n    this.grade = props.grade || 1; // 默认值为1\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n};\n\nfunction createStudent(props) {\n    return new Student(props || {})\n}\n~~~\n这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：\n~~~ JavaScript\nvar xiaoming = createStudent({\n    name: '小明'\n});\n\nxiaoming.grade; // 1\n~~~\n如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming。\n\n**原型继承**\n在传统的基于Class的语言如Java、C++中，继承的本质是扩展一个已有的Class，并生成新的Subclass。\nJavaScript由于采用原型继承，我们无法直接扩展一个Class，因为根本不存在Class这种类型。但是办法还是有的。\n\n我们还是用上面的Student函数，现在，我们要基于Student扩展出PrimaryStudent，可以先定义出PrimaryStudent：\n~~~ JavaScript\nfunction PrimaryStudent(props) {\n    // 调用Student构造函数，绑定this变量:\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n~~~\n但是，调用了Student构造函数不等于继承了Student，PrimaryStudent创建的对象的原型是：\n~~~ JavaScript\nnew PrimaryStudent() ----> PrimaryStudent.prototype ----> Object.prototype ----> null\n~~~\n必须想办法把原型链修改为：\n~~~ JavaScript\nnew PrimaryStudent() ----> PrimaryStudent.prototype ----> Student.prototype ----> Object.prototype ----> null\n~~~\n\n我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Student.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：\n~~~ JavaScript\n// PrimaryStudent构造函数:\nfunction PrimaryStudent(props) {\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n\n// 空函数F:\nfunction F() {\n}\n\n// 把F的原型指向Student.prototype:\nF.prototype = Student.prototype;\n\n// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:\nPrimaryStudent.prototype = new F();\n\n// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:\nPrimaryStudent.prototype.constructor = PrimaryStudent;\n\n// 继续在PrimaryStudent原型（就是new F()对象）上定义方法：\nPrimaryStudent.prototype.getGrade = function () {\n    return this.grade;\n};\n\n// 创建xiaoming:\nvar xiaoming = new PrimaryStudent({\n    name: '小明',\n    grade: 2\n});\nxiaoming.name; // '小明'\nxiaoming.grade; // 2\n\n// 验证原型:\nxiaoming.__proto__ === PrimaryStudent.prototype; // true\nxiaoming.__proto__.__proto__ === Student.prototype; // true\n\n// 验证继承关系:\nxiaoming instanceof PrimaryStudent; // true\nxiaoming instanceof Student; // true\n~~~\n用一张图来表示新的原型链：\n\n![](/images/blogimages/2017/js/js_function_construction_2.png)\n\n> 注意，函数F仅用于桥接，我们仅创建了一个new F()实例，而且，没有改变原有的Student定义的原型链。\n\n如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：\n~~~ JavaScript\nfunction inherits(Child, Parent) {\n    var F = function () {};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n~~~\n这个inherits()函数可以复用：\n~~~ JavaScript\nfunction Student(props) {\n    this.name = props.name || 'Unnamed';\n}\n\nStudent.prototype.hello = function () {\n    alert('Hello, ' + this.name + '!');\n}\n\nfunction PrimaryStudent(props) {\n    Student.call(this, props);\n    this.grade = props.grade || 1;\n}\n\n// 实现原型继承链:\ninherits(PrimaryStudent, Student);\n\n// 绑定其他方法到PrimaryStudent原型:\nPrimaryStudent.prototype.getGrade = function () {\n    return this.grade;\n};\n~~~\n\n总结JavaScript的原型继承实现方式就是：\n\n- 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；\n- 借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；\n- 继续在新的构造函数的原型上定义新方法。\n\n### class继承\n上面的我们看到了JavaScript的对象模型是基于原型实现的，特点是简单，缺点是理解起来比传统的类－实例模型要困难，最大的缺点是继承的实现需要编写大量代码，并且需要正确实现原型链。\n\n新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。\n\n如果用新的class关键字来编写Student，可以这样写：\n~~~ JavaScript\nclass Student {\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('Hello, ' + this.name + '!');\n    }\n}\n~~~\n比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {...}这样分散的代码。\n\n最后，创建一个Student对象代码和前面章节完全一样：\n~~~ JavaScript\nvar xiaoming = new Student('小明');\nxiaoming.hello();\n~~~\n\n**class继承**\n原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：\n~~~ JavaScript\nclass PrimaryStudent extends Student {\n    constructor(name, grade) {\n        super(name); // 记得用super调用父类的构造方法!\n        this.grade = grade;\n    }\n\n    myGrade() {\n        alert('I am at grade ' + this.grade);\n    }\n}\n~~~\n注意PrimaryStudent的定义也是class关键字实现的，而extends则表示原型链对象来自Student。子类的构造函数可能会与父类不太相同，例如，PrimaryStudent需要name和grade两个参数，并且需要通过**super(name)**来调用父类的构造函数，否则父类的name属性无法正常初始化。\n\nPrimaryStudent已经自动获得了父类Student的hello方法，我们又在子类中定义了新的myGrade方法。\n\nES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。\n\n你一定会问，class这么好用，能不能现在就用上？\n\n现在用还早了点，因为不是所有的主流浏览器都支持ES6的class。如果一定要现在就用上，就需要一个工具把class代码转换为传统的prototype代码，可以试试[Babel](https://babeljs.io/)这个工具。\n\n### 操作DOM\n由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。\n\n始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：\n- 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；\n- 遍历：遍历该DOM节点下的子节点，以便进行进一步操作；\n- 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；\n- 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。\n\n在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是**document.getElementById()**和**document.getElementsByTagName()**，以及CSS选择器**document.getElementsByClassName()**。\n\n由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点。document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。\n\n例如：\n~~~ JavaScript\n// 返回ID为'test'的节点：\nvar test = document.getElementById('test');\n\n// 先定位ID为'test-table'的节点，再返回其内部所有tr节点：\nvar trs = document.getElementById('test-table').getElementsByTagName('tr');\n\n// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点：\nvar reds = document.getElementById('test-div').getElementsByClassName('red');\n\n// 获取节点test下的所有直属子节点:\nvar cs = test.children;\n\n// 获取节点test下第一个、最后一个子节点：\nvar first = test.firstElementChild;\nvar last = test.lastElementChild;\n~~~\n第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便：\n~~~ JavaScript\n// 通过querySelector获取ID为q1的节点：\nvar q1 = document.querySelector('#q1');\n\n// 通过querySelectorAll获取q1节点内的符合条件的所有节点：\nvar ps = q1.querySelectorAll('div.highlighted > p');\n~~~\n> 注意：低版本的IE<8不支持querySelector和querySelectorAll。IE8仅有限支持\n\n严格地讲，我们这里的DOM节点是指Element，但是DOM节点实际上是Node，在HTML中，Node包括Element、Comment、CDATA_SECTION等很多种，以及根节点Document类型，但是，绝大多数时候我们只关心Element，也就是实际控制页面结构的Node，其他类型的Node忽略即可。根节点Document已经自动绑定为全局变量document。\n\n","slug":"JavaScript-knowledge","published":1,"date":"2017-10-21T16:00:00.000Z","updated":"2017-12-07T07:06:00.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec220046d6yklxnf7lh1","content":"<h2 id=\"JavaScript积累\"><a href=\"#JavaScript积累\" class=\"headerlink\" title=\"JavaScript积累\"></a>JavaScript积累</h2><blockquote>\n<p>本文大部分内容来自: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"external\">廖雪峰–JavaScript教程</a></p>\n</blockquote>\n<h3 id=\"for-…-of循环介绍\"><a href=\"#for-…-of循环介绍\" class=\"headerlink\" title=\"for … of循环介绍\"></a>for … of循环介绍</h3><p>ES6引入了for … of循环遍历集合，你可能会有疑问，for … of循环和for … in循环有何区别？</p>\n<p>for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>\n<a id=\"more\"></a>\n<p>当我们手动给Array对象添加了额外的属性后，for … in循环将带来意想不到的意外效果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// '0', '1', '2', 'name'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for … in循环将把name包括在内，但Array的length属性却不包括在内。</p>\n<p>for … of循环则完全修复了这些问题，它只循环集合本身的元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 'A', 'B', 'C'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就是为什么要引入新的for … of循环。</p>\n<p>然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element + <span class=\"string\">', index = '</span> + index);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p>\n</blockquote>\n<p>Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\">s.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, sameElement, set</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Map的回调函数参数依次为value、key和map本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\">m.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key, map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h3><p>JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array.<br>由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, rest = [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i&lt;<span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">            rest.push(<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？</p>\n<p>ES6标准引入了rest参数，上面的函数可以改写为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, ...rest</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 结果:</span></div><div class=\"line\"><span class=\"comment\">// a = 1</span></div><div class=\"line\"><span class=\"comment\">// b = 2</span></div><div class=\"line\"><span class=\"comment\">// Array [ 3, 4, 5 ]</span></div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// 结果:</span></div><div class=\"line\"><span class=\"comment\">// a = 1</span></div><div class=\"line\"><span class=\"comment\">// b = undefined</span></div><div class=\"line\"><span class=\"comment\">// Array []</span></div></pre></td></tr></table></figure></p>\n<p>rest参数只能写在最后，前面用…标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。</p>\n<p>如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p>\n<p>你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(); <span class=\"comment\">// 直接调用foo()</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo(); <span class=\"comment\">// 通过window.foo()调用</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"名字空间\"><a href=\"#名字空间\" class=\"headerlink\" title=\"名字空间\"></a>名字空间</h3><p>全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p>\n<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 唯一的全局变量MYAPP:</span></div><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他变量:</span></div><div class=\"line\">MYAPP.name = <span class=\"string\">'myapp'</span>;</div><div class=\"line\">MYAPP.version = <span class=\"number\">1.0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他函数:</span></div><div class=\"line\">MYAPP.foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。</p>\n<p>许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。</p>\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><p>由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    i += <span class=\"number\">100</span>; <span class=\"comment\">// 仍然可以引用变量i</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        sum += i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError:</span></div><div class=\"line\">    i += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域.</p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><p>从ES6开始，JavaScript引入了<strong>解构赋值</strong>，可以同时对一组变量进行赋值<br>如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x, [y, z]] = [<span class=\"string\">'hello'</span>, [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'ES6'</span>]];</div><div class=\"line\">x; <span class=\"comment\">// 'hello'</span></div><div class=\"line\">y; <span class=\"comment\">// 'JavaScript'</span></div><div class=\"line\">z; <span class=\"comment\">// 'ES6'</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值还可以忽略某些元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [, , z] = [<span class=\"string\">'hello'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'ES6'</span>]; <span class=\"comment\">// 忽略前两个元素，只对z赋值第三个元素</span></div><div class=\"line\">z; <span class=\"comment\">// 'ES6'</span></div></pre></td></tr></table></figure></p>\n<p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span>,</div><div class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">'No.4 middle school'</span>,</div><div class=\"line\">    <span class=\"attr\">address</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">'Beijing'</span>,</div><div class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">'No.1 Road'</span>,</div><div class=\"line\">        <span class=\"attr\">zipcode</span>: <span class=\"string\">'100001'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name, <span class=\"attr\">address</span>: &#123;city, zip&#125;&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">city; <span class=\"comment\">// 'Beijing'</span></div><div class=\"line\">zip; <span class=\"comment\">// undefined, 因为属性名是zipcode而不是zip</span></div><div class=\"line\"><span class=\"comment\">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span></div><div class=\"line\">address; <span class=\"comment\">// Uncaught ReferenceError: address is not defined</span></div></pre></td></tr></table></figure></p>\n<p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span>,</div><div class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">'No.4 middle school'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把passport属性赋值给变量id:</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name, <span class=\"attr\">passport</span>:id&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">id; <span class=\"comment\">// 'G-12345678'</span></div><div class=\"line\"><span class=\"comment\">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span></div><div class=\"line\">passport; <span class=\"comment\">// Uncaught ReferenceError: passport is not defined</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>// 如果person对象没有single属性，默认赋值为true:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;name, single=<span class=\"literal\">true</span>&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">single; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明变量:</span></div><div class=\"line\"><span class=\"keyword\">var</span> x, y;</div><div class=\"line\"><span class=\"comment\">// 解构赋值:</span></div><div class=\"line\">&#123;x, y&#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>, <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></div></pre></td></tr></table></figure></p>\n<p>这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(&#123;x, y&#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>, <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>使用场景</strong></p>\n<p>解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>, y=<span class=\"number\">2</span>;</div><div class=\"line\">[x, y] = [y, x]</div></pre></td></tr></table></figure></p>\n<p>快速获取当前页面的域名和路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">hostname</span>:domain, <span class=\"attr\">pathname</span>:path&#125; = location;</div></pre></td></tr></table></figure></p>\n<p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildDate</span>(<span class=\"params\">&#123;year, month, day, hour=<span class=\"number\">0</span>, minute=<span class=\"number\">0</span>, second=<span class=\"number\">0</span>&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minute + <span class=\"string\">':'</span> + second);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它的方便之处在于传入的对象只需要year、month和day这三个属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildDate(&#123; <span class=\"attr\">year</span>: <span class=\"number\">2017</span>, <span class=\"attr\">month</span>: <span class=\"number\">1</span>, <span class=\"attr\">day</span>: <span class=\"number\">1</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure></p>\n<p>也可以传入hour、minute和second属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildDate(&#123; <span class=\"attr\">year</span>: <span class=\"number\">2017</span>, <span class=\"attr\">month</span>: <span class=\"number\">1</span>, <span class=\"attr\">day</span>: <span class=\"number\">1</span>, <span class=\"attr\">hour</span>: <span class=\"number\">20</span>, <span class=\"attr\">minute</span>: <span class=\"number\">15</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure></p>\n<p>使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。</p>\n<h3 id=\"方法this、apply和call\"><a href=\"#方法this、apply和call\" class=\"headerlink\" title=\"方法this、apply和call\"></a>方法this、apply和call</h3><p>在一个方法内部，this是一个特殊变量，它始终指向当前对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">        <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fn = xiaoming.age;</div><div class=\"line\">fn(); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'birth' of undefined</span></div></pre></td></tr></table></figure></p>\n<p>this指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 在方法内部一开始就捕获this</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">            <span class=\"keyword\">return</span> y - that.birth; <span class=\"comment\">// 用that而不是this</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> getAgeFromBirth();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<p>用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。</p>\n<p>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p>\n<p>要指定函数的this指向哪个对象，可以用<strong>函数</strong>本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>\n<p>用apply修复getAge()调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: getAge</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div><div class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure></p>\n<p>另一个与apply()类似的方法是call()，唯一区别是：</p>\n<ul>\n<li>apply()把参数打包成Array再传入；</li>\n<li>call()把参数按顺序传入。</li>\n</ul>\n<p>比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure></p>\n<p>对普通函数调用，我们通常把this绑定为null。</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>利用apply()，我们还可以动态改变函数的行为。</p>\n<p>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>\n<p>现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<p><strong>map</strong><br>map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> results = arr.map(pow); <span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(results);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：map()传入的参数是pow，即函数对象本身。</p>\n</blockquote>\n<p>把Array的所有数字转为字符串：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>); <span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div></pre></td></tr></table></figure></p>\n<p>只需要一行代码。</p>\n<p><strong>reduce</strong><br>Array的reduce()把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>\n<p>要把[1, 3, 5, 7, 9]变换成整数13579，reduce()也能派上用场：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y;</div><div class=\"line\">&#125;); <span class=\"comment\">// 13579</span></div></pre></td></tr></table></figure></p>\n<p><strong>filter</strong><br>filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。</p>\n<p>和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。</p>\n<p>把一个Array中的空字符串删掉，可以这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></div><div class=\"line\">&#125;);</div><div class=\"line\">r; <span class=\"comment\">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure></p>\n<p>filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element); <span class=\"comment\">// 依次打印'A', 'B', 'C'</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 依次打印0, 1, 2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(self); <span class=\"comment\">// self就是变量arr</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>利用filter，可以巧妙地去除Array的重复元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span></div><div class=\"line\">    r,</div><div class=\"line\">    arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'strawberry'</span>];</div><div class=\"line\"></div><div class=\"line\">r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.indexOf(element) === index;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(r.toString());</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</p>\n</blockquote>\n<p><strong>sort()</strong><br>sort()方法会直接对Array进行修改，它返回的结果仍是当前Array：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"string\">'B'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = a1.sort();</div><div class=\"line\">a1; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\">a2; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\">a1 === a2; <span class=\"comment\">// true, a1和a2是同一对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>\n<p>返回闭包时牢记的一点就是：<strong>返回函数不要引用任何循环变量，或者后续会发生变化的变量</strong><br>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        arr.push((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> n * n;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)(i));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> results = count();</div><div class=\"line\"><span class=\"keyword\">var</span> f1 = results[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2 = results[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3 = results[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1(); <span class=\"comment\">// 1</span></div><div class=\"line\">f2(); <span class=\"comment\">// 4</span></div><div class=\"line\">f3(); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>注意这里用了一个“创建一个匿名函数并立刻执行”的语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>理论上讲，创建一个匿名函数并立刻执行可以这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x &#125; (<span class=\"number\">3</span>);</div></pre></td></tr></table></figure></p>\n<p>但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x &#125;) (<span class=\"number\">3</span>);</div></pre></td></tr></table></figure></p>\n<p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>闭包有非常强大的功能。举个栗子：</p>\n<p>在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。</p>\n<p>在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_counter</span>(<span class=\"params\">initial</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = initial || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">inc</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            x += <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它用起来像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c1 = create_counter();</div><div class=\"line\">c1.inc(); <span class=\"comment\">// 1</span></div><div class=\"line\">c1.inc(); <span class=\"comment\">// 2</span></div><div class=\"line\">c1.inc(); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c2 = create_counter(<span class=\"number\">10</span>);</div><div class=\"line\">c2.inc(); <span class=\"comment\">// 11</span></div><div class=\"line\">c2.inc(); <span class=\"comment\">// 12</span></div><div class=\"line\">c2.inc(); <span class=\"comment\">// 13</span></div></pre></td></tr></table></figure></p>\n<p>在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p>\n<p>闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_pow</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建两个新函数:</span></div><div class=\"line\"><span class=\"keyword\">var</span> pow2 = make_pow(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pow3 = make_pow(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(pow2(<span class=\"number\">5</span>)); <span class=\"comment\">// 25</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(pow3(<span class=\"number\">7</span>)); <span class=\"comment\">// 343</span></div></pre></td></tr></table></figure></p>\n<p><strong>使用闭包的注意点：</strong></p>\n<ul>\n<li>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>\n<li>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n<h3 id=\"闭包的思考\"><a href=\"#闭包的思考\" class=\"headerlink\" title=\"闭包的思考\"></a>闭包的思考</h3><p>关于闭包的总结也可以再看下这篇文章：<a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"external\">学习Javascript闭包（Closure）</a></p>\n<p>上面提到的这篇文章的最后，列出了一道思考题：<br>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。<br>代码片段一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>\n<p>代码片段二。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>\n<p>我先说结果，代码段一的结果是：The Window；而代码段二的结果是：My Object。</p>\n<p>关于this关键字，前面已经介绍过了，它代表的实例会根据环境不同而变化的. </p>\n<blockquote>\n<p>In JavaScript this always refers to the “owner” of the function we’re executing, or rather, to the object that a function is a method of. </p>\n</blockquote>\n<p>上面这段话，摘自：<a href=\"http://www.quirksmode.org/js/this.html\" target=\"_blank\" rel=\"external\">The this keyword</a>。</p>\n<p>我理解的意思是，<strong>this永远指向我们要执行的方法的“owner”，或者更确切的说，是指向function作为某个object的一个方法（method）的那个object</strong>。</p>\n<p>在代码片段一里，object.getNameFunc()返回的是function，假设是f，那么:<br><strong>alert(object.getNameFunc()());  等价于===》 alert(f());</strong><br>f()的执行已经和object没有关系了，this这里应该指向的是window对象，所以name值应该是：”The Window”。</p>\n<p>在代码片段二里，在object.getNameFunc()执行的时候，this代表object对象，<strong>用that变量（that不是关键字）</strong>保存了起来，而最里面的这个function是可以访问that变量的，那么<br><strong>alert(object.getNameFunc()());  应该等价于===》 alert(f(that));</strong><br>所以name的值应该是：“My Object”。</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。<br>箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return：。如果参数不是一个，就需要用括号()括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 两个参数:</span></div><div class=\"line\">(x, y) =&gt; x * x + y * y</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无参数:</span></div><div class=\"line\">() =&gt; <span class=\"number\">3.14</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可变参数:</span></div><div class=\"line\">(x, y, ...rest) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, sum = x + y;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;rest.length; i++) &#123;</div><div class=\"line\">        sum += rest[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// SyntaxError:</span></div><div class=\"line\">x =&gt; &#123; <span class=\"attr\">foo</span>: x &#125;</div></pre></td></tr></table></figure></p>\n<p>因为和函数体的{ … }有语法冲突，所以要改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ok:</span></div><div class=\"line\">x =&gt; (&#123; <span class=\"attr\">foo</span>: x &#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>this</strong></p>\n<p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：<strong>箭头函数内部的this是词法作用域，由上下文确定</strong>。</p>\n<p>回顾前面的例子，由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向window或undefined</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向obj对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure></p>\n<p>如果使用箭头函数，以前的那种hack写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div></pre></td></tr></table></figure></p>\n<p>就不再需要了。<br>由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">year</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\">(<span class=\"params\">y</span>) =&gt;</span> y - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this.birth仍是1990</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn.call(&#123;<span class=\"attr\">birth</span>:<span class=\"number\">2000</span>&#125;, year);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(<span class=\"number\">2015</span>); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure></p>\n<p>关于箭头函数中this的解释，可以看这篇文章：<a href=\"https://github.com/zhengweikeng/blog/blob/master/posts/2016/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E7%94%A8%E6%B3%95.md\" target=\"_blank\" rel=\"external\">箭头函数中this的用法</a><br>和<a href=\"http://www.infoq.com/cn/articles/es6-in-depth-arrow-functions\" target=\"_blank\" rel=\"external\">深入浅出ES6（七）：箭头函数 Arrow Functions</a>这篇</p>\n<h3 id=\"标准对象\"><a href=\"#标准对象\" class=\"headerlink\" title=\"标准对象\"></a>标准对象</h3><p>总结一下，有这么几条规则需要遵守：</p>\n<ul>\n<li>不要使用new Number()、new Boolean()、new String()创建包装对象；</li>\n<li>用parseInt()或parseFloat()来转换任意类型到number；</li>\n<li>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</li>\n<li>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}；</li>\n<li>typeof操作符可以判断出number、boolean、string、function和undefined；</li>\n<li>判断Array要使用Array.isArray(arr)；</li>\n<li>判断null请使用myVar === null；</li>\n<li>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’；</li>\n<li>函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。</li>\n</ul>\n<p>任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。</p>\n<p>更细心的同学指出，number对象调用toString()报SyntaxError：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>toString(); <span class=\"comment\">// SyntaxError</span></div></pre></td></tr></table></figure></p>\n<p>遇到这种情况，要特殊处理一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure></p>\n<p><strong>Date对象</strong></p>\n<p>如果要创建一个指定日期和时间的Date对象，可以用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">123</span>);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Date</span>.parse(<span class=\"string\">'2015-06-24T19:49:22.875+08:00'</span>);</div><div class=\"line\">d; <span class=\"comment\">// 1435146562875</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1435146562875</span>);</div><div class=\"line\">d; <span class=\"comment\">// Wed Jun 24 2015 19:49:22 GMT+0800 (CST)</span></div><div class=\"line\">d.getMonth(); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用Date.parse()时传入的字符串使用实际月份01~12，转换为Date对象后getMonth()获取的月份值为0~11。</p>\n</blockquote>\n<p>要获取当前时间戳，可以用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now()); <span class=\"comment\">// 老版本IE没有now()方法</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>RegExp</strong>，</p>\n<p>正则表达式的内容参考：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000\" target=\"_blank\" rel=\"external\">标准对象-RegExp</a></p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>除了直接用{ … }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你会问，咦，这不是一个普通函数吗？</p>\n<p>这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(<span class=\"string\">'小明'</span>);</div><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaoming.hello(); <span class=\"comment\">// Hello, 小明!</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。</p>\n</blockquote>\n<p>新创建的xiaoming的原型链是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming ----&gt; Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>xiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming ↘</div><div class=\"line\">xiaohong -→ Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div><div class=\"line\">xiaojun  ↗</div></pre></td></tr></table></figure></p>\n<p>用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming.constructor === Student.prototype.constructor; <span class=\"comment\">// true</span></div><div class=\"line\">Student.prototype.constructor === Student; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(xiaoming) === Student.prototype; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> Student; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>看晕了吧？用一张图来表示这些乱七八糟的关系就是：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction.png\" alt=\"\"></p>\n<p>不过还有一个小问题，注意观察：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaohong.name; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaoming.hello; <span class=\"comment\">// function: Student.hello()</span></div><div class=\"line\">xiaohong.hello; <span class=\"comment\">// function: Student.hello()</span></div><div class=\"line\">xiaoming.hello === xiaohong.hello; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>xiaoming和xiaohong各自的name不同，这是对的，否则我们无法区分谁是谁了。</p>\n<p>xiaoming和xiaohong各自的hello是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！</p>\n<p>如果我们通过new Student()创建了很多对象，这些对象的hello函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。</p>\n<p>要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction_1.png\" alt=\"\"></p>\n<p>修改代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>忘记写new怎么办</strong></p>\n<p>如果一个函数被定义为用于创建对象的构造函数，但是调用时忘记了写new怎么办？</p>\n<p>在strict模式下，this.name = name将报错，因为this绑定为undefined，在非strict模式下，this.name = name不报错，因为this绑定为window，于是无意间创建了全局变量name，并且返回undefined，这个结果更糟糕。</p>\n<p>所以，调用构造函数千万不要忘记写new。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new。</p>\n<p>最后，我们还可以编写一个createStudent()函数，在内部封装所有的new操作。一个常用的编程模式像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'匿名'</span>; <span class=\"comment\">// 默认值为'匿名'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>; <span class=\"comment\">// 默认值为1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(props || &#123;&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = createStudent(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">xiaoming.grade; <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming。</p>\n<p><strong>原型继承</strong><br>在传统的基于Class的语言如Java、C++中，继承的本质是扩展一个已有的Class，并生成新的Subclass。<br>JavaScript由于采用原型继承，我们无法直接扩展一个Class，因为根本不存在Class这种类型。但是办法还是有的。</p>\n<p>我们还是用上面的Student函数，现在，我们要基于Student扩展出PrimaryStudent，可以先定义出PrimaryStudent：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调用Student构造函数，绑定this变量:</span></div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是，调用了Student构造函数不等于继承了Student，PrimaryStudent创建的对象的原型是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>必须想办法把原型链修改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Student.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// PrimaryStudent构造函数:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 空函数F:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把F的原型指向Student.prototype:</span></div><div class=\"line\">F.prototype = Student.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span></div><div class=\"line\">PrimaryStudent.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span></div><div class=\"line\">PrimaryStudent.prototype.constructor = PrimaryStudent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 继续在PrimaryStudent原型（就是new F()对象）上定义方法：</span></div><div class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建xiaoming:</span></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> PrimaryStudent(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;);</div><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaoming.grade; <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证原型:</span></div><div class=\"line\">xiaoming.__proto__ === PrimaryStudent.prototype; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.__proto__.__proto__ === Student.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证继承关系:</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> PrimaryStudent; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> Student; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>用一张图来表示新的原型链：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction_2.png\" alt=\"\"></p>\n<blockquote>\n<p>注意，函数F仅用于桥接，我们仅创建了一个new F()实例，而且，没有改变原有的Student定义的原型链。</p>\n</blockquote>\n<p>如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Parent.prototype;</div><div class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    Child.prototype.constructor = Child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个inherits()函数可以复用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unnamed'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现原型继承链:</span></div><div class=\"line\">inherits(PrimaryStudent, Student);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绑定其他方法到PrimaryStudent原型:</span></div><div class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总结JavaScript的原型继承实现方式就是：</p>\n<ul>\n<li>定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；</li>\n<li>借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；</li>\n<li>继续在新的构造函数的原型上定义新方法。</li>\n</ul>\n<h3 id=\"class继承\"><a href=\"#class继承\" class=\"headerlink\" title=\"class继承\"></a>class继承</h3><p>上面的我们看到了JavaScript的对象模型是基于原型实现的，特点是简单，缺点是理解起来比传统的类－实例模型要困难，最大的缺点是继承的实现需要编写大量代码，并且需要正确实现原型链。</p>\n<p>新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。</p>\n<p>如果用新的class关键字来编写Student，可以这样写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    hello() &#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {…}这样分散的代码。</p>\n<p>最后，创建一个Student对象代码和前面章节完全一样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(<span class=\"string\">'小明'</span>);</div><div class=\"line\">xiaoming.hello();</div></pre></td></tr></table></figure></p>\n<p><strong>class继承</strong><br>原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name, grade) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name); <span class=\"comment\">// 记得用super调用父类的构造方法!</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    myGrade() &#123;</div><div class=\"line\">        alert(<span class=\"string\">'I am at grade '</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意PrimaryStudent的定义也是class关键字实现的，而extends则表示原型链对象来自Student。子类的构造函数可能会与父类不太相同，例如，PrimaryStudent需要name和grade两个参数，并且需要通过<strong>super(name)</strong>来调用父类的构造函数，否则父类的name属性无法正常初始化。</p>\n<p>PrimaryStudent已经自动获得了父类Student的hello方法，我们又在子类中定义了新的myGrade方法。</p>\n<p>ES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。</p>\n<p>你一定会问，class这么好用，能不能现在就用上？</p>\n<p>现在用还早了点，因为不是所有的主流浏览器都支持ES6的class。如果一定要现在就用上，就需要一个工具把class代码转换为传统的prototype代码，可以试试<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a>这个工具。</p>\n<h3 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h3><p>由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。</p>\n<p>始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：</p>\n<ul>\n<li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；</li>\n<li>遍历：遍历该DOM节点下的子节点，以便进行进一步操作；</li>\n<li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；</li>\n<li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li>\n</ul>\n<p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是<strong>document.getElementById()</strong>和<strong>document.getElementsByTagName()</strong>，以及CSS选择器<strong>document.getElementsByClassName()</strong>。</p>\n<p>由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点。document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。</p>\n<p>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回ID为'test'的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先定位ID为'test-table'的节点，再返回其内部所有tr节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> trs = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-table'</span>).getElementsByTagName(<span class=\"string\">'tr'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> reds = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-div'</span>).getElementsByClassName(<span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取节点test下的所有直属子节点:</span></div><div class=\"line\"><span class=\"keyword\">var</span> cs = test.children;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取节点test下第一个、最后一个子节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> first = test.firstElementChild;</div><div class=\"line\"><span class=\"keyword\">var</span> last = test.lastElementChild;</div></pre></td></tr></table></figure></p>\n<p>第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过querySelector获取ID为q1的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> q1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#q1'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过querySelectorAll获取q1节点内的符合条件的所有节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> ps = q1.querySelectorAll(<span class=\"string\">'div.highlighted &gt; p'</span>);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：低版本的IE&lt;8不支持querySelector和querySelectorAll。IE8仅有限支持</p>\n</blockquote>\n<p>严格地讲，我们这里的DOM节点是指Element，但是DOM节点实际上是Node，在HTML中，Node包括Element、Comment、CDATA_SECTION等很多种，以及根节点Document类型，但是，绝大多数时候我们只关心Element，也就是实际控制页面结构的Node，其他类型的Node忽略即可。根节点Document已经自动绑定为全局变量document。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/10/22/JavaScript-knowledge/\">http://agehua.github.io/2017/10/22/JavaScript-knowledge/</a></p>\n","readingTime":{"text":"19 min read","minutes":18.19,"time":1091400,"words":3638},"excerpt":"<h2 id=\"JavaScript积累\"><a href=\"#JavaScript积累\" class=\"headerlink\" title=\"JavaScript积累\"></a>JavaScript积累</h2><blockquote>\n<p>本文大部分内容来自: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\">廖雪峰–JavaScript教程</a></p>\n</blockquote>\n<h3 id=\"for-…-of循环介绍\"><a href=\"#for-…-of循环介绍\" class=\"headerlink\" title=\"for … of循环介绍\"></a>for … of循环介绍</h3><p>ES6引入了for … of循环遍历集合，你可能会有疑问，for … of循环和for … in循环有何区别？</p>\n<p>for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>","more":"<p>当我们手动给Array对象添加了额外的属性后，for … in循环将带来意想不到的意外效果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// '0', '1', '2', 'name'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for … in循环将把name包括在内，但Array的length属性却不包括在内。</p>\n<p>for … of循环则完全修复了这些问题，它只循环集合本身的元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 'A', 'B', 'C'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这就是为什么要引入新的for … of循环。</p>\n<p>然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element + <span class=\"string\">', index = '</span> + index);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p>\n</blockquote>\n<p>Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\">s.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, sameElement, set</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Map的回调函数参数依次为value、key和map本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\">m.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key, map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h3><p>JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array.<br>由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, rest = [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i&lt;<span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">            rest.push(<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？</p>\n<p>ES6标准引入了rest参数，上面的函数可以改写为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, ...rest</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 结果:</span></div><div class=\"line\"><span class=\"comment\">// a = 1</span></div><div class=\"line\"><span class=\"comment\">// b = 2</span></div><div class=\"line\"><span class=\"comment\">// Array [ 3, 4, 5 ]</span></div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// 结果:</span></div><div class=\"line\"><span class=\"comment\">// a = 1</span></div><div class=\"line\"><span class=\"comment\">// b = undefined</span></div><div class=\"line\"><span class=\"comment\">// Array []</span></div></pre></td></tr></table></figure></p>\n<p>rest参数只能写在最后，前面用…标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。</p>\n<p>如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。</p>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性</p>\n<p>你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(); <span class=\"comment\">// 直接调用foo()</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo(); <span class=\"comment\">// 通过window.foo()调用</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"名字空间\"><a href=\"#名字空间\" class=\"headerlink\" title=\"名字空间\"></a>名字空间</h3><p>全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p>\n<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 唯一的全局变量MYAPP:</span></div><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他变量:</span></div><div class=\"line\">MYAPP.name = <span class=\"string\">'myapp'</span>;</div><div class=\"line\">MYAPP.version = <span class=\"number\">1.0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他函数:</span></div><div class=\"line\">MYAPP.foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。</p>\n<p>许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。</p>\n<h3 id=\"局部作用域\"><a href=\"#局部作用域\" class=\"headerlink\" title=\"局部作用域\"></a>局部作用域</h3><p>由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    i += <span class=\"number\">100</span>; <span class=\"comment\">// 仍然可以引用变量i</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">        sum += i;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError:</span></div><div class=\"line\">    i += <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域.</p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><p>从ES6开始，JavaScript引入了<strong>解构赋值</strong>，可以同时对一组变量进行赋值<br>如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x, [y, z]] = [<span class=\"string\">'hello'</span>, [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'ES6'</span>]];</div><div class=\"line\">x; <span class=\"comment\">// 'hello'</span></div><div class=\"line\">y; <span class=\"comment\">// 'JavaScript'</span></div><div class=\"line\">z; <span class=\"comment\">// 'ES6'</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值还可以忽略某些元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [, , z] = [<span class=\"string\">'hello'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'ES6'</span>]; <span class=\"comment\">// 忽略前两个元素，只对z赋值第三个元素</span></div><div class=\"line\">z; <span class=\"comment\">// 'ES6'</span></div></pre></td></tr></table></figure></p>\n<p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span>,</div><div class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">'No.4 middle school'</span>,</div><div class=\"line\">    <span class=\"attr\">address</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">city</span>: <span class=\"string\">'Beijing'</span>,</div><div class=\"line\">        <span class=\"attr\">street</span>: <span class=\"string\">'No.1 Road'</span>,</div><div class=\"line\">        <span class=\"attr\">zipcode</span>: <span class=\"string\">'100001'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name, <span class=\"attr\">address</span>: &#123;city, zip&#125;&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">city; <span class=\"comment\">// 'Beijing'</span></div><div class=\"line\">zip; <span class=\"comment\">// undefined, 因为属性名是zipcode而不是zip</span></div><div class=\"line\"><span class=\"comment\">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span></div><div class=\"line\">address; <span class=\"comment\">// Uncaught ReferenceError: address is not defined</span></div></pre></td></tr></table></figure></p>\n<p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span>,</div><div class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">'No.4 middle school'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把passport属性赋值给变量id:</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name, <span class=\"attr\">passport</span>:id&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">id; <span class=\"comment\">// 'G-12345678'</span></div><div class=\"line\"><span class=\"comment\">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span></div><div class=\"line\">passport; <span class=\"comment\">// Uncaught ReferenceError: passport is not defined</span></div></pre></td></tr></table></figure></p>\n<p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">'male'</span>,</div><div class=\"line\">    <span class=\"attr\">passport</span>: <span class=\"string\">'G-12345678'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>// 如果person对象没有single属性，默认赋值为true:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;name, single=<span class=\"literal\">true</span>&#125; = person;</div><div class=\"line\">name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">single; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明变量:</span></div><div class=\"line\"><span class=\"keyword\">var</span> x, y;</div><div class=\"line\"><span class=\"comment\">// 解构赋值:</span></div><div class=\"line\">&#123;x, y&#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>, <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></div></pre></td></tr></table></figure></p>\n<p>这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(&#123;x, y&#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>, <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>使用场景</strong></p>\n<p>解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>, y=<span class=\"number\">2</span>;</div><div class=\"line\">[x, y] = [y, x]</div></pre></td></tr></table></figure></p>\n<p>快速获取当前页面的域名和路径：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">hostname</span>:domain, <span class=\"attr\">pathname</span>:path&#125; = location;</div></pre></td></tr></table></figure></p>\n<p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildDate</span>(<span class=\"params\">&#123;year, month, day, hour=<span class=\"number\">0</span>, minute=<span class=\"number\">0</span>, second=<span class=\"number\">0</span>&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + day + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minute + <span class=\"string\">':'</span> + second);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它的方便之处在于传入的对象只需要year、month和day这三个属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildDate(&#123; <span class=\"attr\">year</span>: <span class=\"number\">2017</span>, <span class=\"attr\">month</span>: <span class=\"number\">1</span>, <span class=\"attr\">day</span>: <span class=\"number\">1</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure></p>\n<p>也可以传入hour、minute和second属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">buildDate(&#123; <span class=\"attr\">year</span>: <span class=\"number\">2017</span>, <span class=\"attr\">month</span>: <span class=\"number\">1</span>, <span class=\"attr\">day</span>: <span class=\"number\">1</span>, <span class=\"attr\">hour</span>: <span class=\"number\">20</span>, <span class=\"attr\">minute</span>: <span class=\"number\">15</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Sun Jan 01 2017 20:15:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure></p>\n<p>使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等。</p>\n<h3 id=\"方法this、apply和call\"><a href=\"#方法this、apply和call\" class=\"headerlink\" title=\"方法this、apply和call\"></a>方法this、apply和call</h3><p>在一个方法内部，this是一个特殊变量，它始终指向当前对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">        <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fn = xiaoming.age;</div><div class=\"line\">fn(); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'birth' of undefined</span></div></pre></td></tr></table></figure></p>\n<p>this指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 在方法内部一开始就捕获this</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">            <span class=\"keyword\">return</span> y - that.birth; <span class=\"comment\">// 用that而不是this</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> getAgeFromBirth();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<p>用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。</p>\n<p>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p>\n<p>要指定函数的this指向哪个对象，可以用<strong>函数</strong>本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>\n<p>用apply修复getAge()调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: getAge</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div><div class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure></p>\n<p>另一个与apply()类似的方法是call()，唯一区别是：</p>\n<ul>\n<li>apply()把参数打包成Array再传入；</li>\n<li>call()把参数按顺序传入。</li>\n</ul>\n<p>比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure></p>\n<p>对普通函数调用，我们通常把this绑定为null。</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>利用apply()，我们还可以动态改变函数的行为。</p>\n<p>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>\n<p>现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>\n<p><strong>map</strong><br>map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> results = arr.map(pow); <span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(results);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：map()传入的参数是pow，即函数对象本身。</p>\n</blockquote>\n<p>把Array的所有数字转为字符串：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>); <span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div></pre></td></tr></table></figure></p>\n<p>只需要一行代码。</p>\n<p><strong>reduce</strong><br>Array的reduce()把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>\n<p>要把[1, 3, 5, 7, 9]变换成整数13579，reduce()也能派上用场：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y;</div><div class=\"line\">&#125;); <span class=\"comment\">// 13579</span></div></pre></td></tr></table></figure></p>\n<p><strong>filter</strong><br>filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。</p>\n<p>和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。</p>\n<p>把一个Array中的空字符串删掉，可以这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></div><div class=\"line\">&#125;);</div><div class=\"line\">r; <span class=\"comment\">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure></p>\n<p>filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element); <span class=\"comment\">// 依次打印'A', 'B', 'C'</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 依次打印0, 1, 2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(self); <span class=\"comment\">// self就是变量arr</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>利用filter，可以巧妙地去除Array的重复元素：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span></div><div class=\"line\">    r,</div><div class=\"line\">    arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'strawberry'</span>];</div><div class=\"line\"></div><div class=\"line\">r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> self.indexOf(element) === index;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(r.toString());</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</p>\n</blockquote>\n<p><strong>sort()</strong><br>sort()方法会直接对Array进行修改，它返回的结果仍是当前Array：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"string\">'B'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = a1.sort();</div><div class=\"line\">a1; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\">a2; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\">a1 === a2; <span class=\"comment\">// true, a1和a2是同一对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>\n<p>返回闭包时牢记的一点就是：<strong>返回函数不要引用任何循环变量，或者后续会发生变化的变量</strong><br>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        arr.push((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> n * n;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)(i));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> results = count();</div><div class=\"line\"><span class=\"keyword\">var</span> f1 = results[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2 = results[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3 = results[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1(); <span class=\"comment\">// 1</span></div><div class=\"line\">f2(); <span class=\"comment\">// 4</span></div><div class=\"line\">f3(); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>注意这里用了一个“创建一个匿名函数并立刻执行”的语法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>理论上讲，创建一个匿名函数并立刻执行可以这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x &#125; (<span class=\"number\">3</span>);</div></pre></td></tr></table></figure></p>\n<p>但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x &#125;) (<span class=\"number\">3</span>);</div></pre></td></tr></table></figure></p>\n<p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>闭包有非常强大的功能。举个栗子：</p>\n<p>在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。</p>\n<p>在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_counter</span>(<span class=\"params\">initial</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = initial || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">inc</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            x += <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它用起来像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c1 = create_counter();</div><div class=\"line\">c1.inc(); <span class=\"comment\">// 1</span></div><div class=\"line\">c1.inc(); <span class=\"comment\">// 2</span></div><div class=\"line\">c1.inc(); <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c2 = create_counter(<span class=\"number\">10</span>);</div><div class=\"line\">c2.inc(); <span class=\"comment\">// 11</span></div><div class=\"line\">c2.inc(); <span class=\"comment\">// 12</span></div><div class=\"line\">c2.inc(); <span class=\"comment\">// 13</span></div></pre></td></tr></table></figure></p>\n<p>在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p>\n<p>闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_pow</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建两个新函数:</span></div><div class=\"line\"><span class=\"keyword\">var</span> pow2 = make_pow(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pow3 = make_pow(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(pow2(<span class=\"number\">5</span>)); <span class=\"comment\">// 25</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(pow3(<span class=\"number\">7</span>)); <span class=\"comment\">// 343</span></div></pre></td></tr></table></figure></p>\n<p><strong>使用闭包的注意点：</strong></p>\n<ul>\n<li>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>\n<li>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n<h3 id=\"闭包的思考\"><a href=\"#闭包的思考\" class=\"headerlink\" title=\"闭包的思考\"></a>闭包的思考</h3><p>关于闭包的总结也可以再看下这篇文章：<a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">学习Javascript闭包（Closure）</a></p>\n<p>上面提到的这篇文章的最后，列出了一道思考题：<br>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。<br>代码片段一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>\n<p>代码片段二。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>\n<p>我先说结果，代码段一的结果是：The Window；而代码段二的结果是：My Object。</p>\n<p>关于this关键字，前面已经介绍过了，它代表的实例会根据环境不同而变化的. </p>\n<blockquote>\n<p>In JavaScript this always refers to the “owner” of the function we’re executing, or rather, to the object that a function is a method of. </p>\n</blockquote>\n<p>上面这段话，摘自：<a href=\"http://www.quirksmode.org/js/this.html\">The this keyword</a>。</p>\n<p>我理解的意思是，<strong>this永远指向我们要执行的方法的“owner”，或者更确切的说，是指向function作为某个object的一个方法（method）的那个object</strong>。</p>\n<p>在代码片段一里，object.getNameFunc()返回的是function，假设是f，那么:<br><strong>alert(object.getNameFunc()());  等价于===》 alert(f());</strong><br>f()的执行已经和object没有关系了，this这里应该指向的是window对象，所以name值应该是：”The Window”。</p>\n<p>在代码片段二里，在object.getNameFunc()执行的时候，this代表object对象，<strong>用that变量（that不是关键字）</strong>保存了起来，而最里面的这个function是可以访问that变量的，那么<br><strong>alert(object.getNameFunc()());  应该等价于===》 alert(f(that));</strong><br>所以name的值应该是：“My Object”。</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。<br>箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return：。如果参数不是一个，就需要用括号()括起来：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 两个参数:</span></div><div class=\"line\">(x, y) =&gt; x * x + y * y</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无参数:</span></div><div class=\"line\">() =&gt; <span class=\"number\">3.14</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可变参数:</span></div><div class=\"line\">(x, y, ...rest) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, sum = x + y;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;rest.length; i++) &#123;</div><div class=\"line\">        sum += rest[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// SyntaxError:</span></div><div class=\"line\">x =&gt; &#123; <span class=\"attr\">foo</span>: x &#125;</div></pre></td></tr></table></figure></p>\n<p>因为和函数体的{ … }有语法冲突，所以要改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ok:</span></div><div class=\"line\">x =&gt; (&#123; <span class=\"attr\">foo</span>: x &#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>this</strong></p>\n<p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：<strong>箭头函数内部的this是词法作用域，由上下文确定</strong>。</p>\n<p>回顾前面的例子，由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向window或undefined</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在，箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向obj对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure></p>\n<p>如果使用箭头函数，以前的那种hack写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div></pre></td></tr></table></figure></p>\n<p>就不再需要了。<br>由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">    <span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">year</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\">(<span class=\"params\">y</span>) =&gt;</span> y - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this.birth仍是1990</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn.call(&#123;<span class=\"attr\">birth</span>:<span class=\"number\">2000</span>&#125;, year);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(<span class=\"number\">2015</span>); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure></p>\n<p>关于箭头函数中this的解释，可以看这篇文章：<a href=\"https://github.com/zhengweikeng/blog/blob/master/posts/2016/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E7%94%A8%E6%B3%95.md\">箭头函数中this的用法</a><br>和<a href=\"http://www.infoq.com/cn/articles/es6-in-depth-arrow-functions\">深入浅出ES6（七）：箭头函数 Arrow Functions</a>这篇</p>\n<h3 id=\"标准对象\"><a href=\"#标准对象\" class=\"headerlink\" title=\"标准对象\"></a>标准对象</h3><p>总结一下，有这么几条规则需要遵守：</p>\n<ul>\n<li>不要使用new Number()、new Boolean()、new String()创建包装对象；</li>\n<li>用parseInt()或parseFloat()来转换任意类型到number；</li>\n<li>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</li>\n<li>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}；</li>\n<li>typeof操作符可以判断出number、boolean、string、function和undefined；</li>\n<li>判断Array要使用Array.isArray(arr)；</li>\n<li>判断null请使用myVar === null；</li>\n<li>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’；</li>\n<li>函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。</li>\n</ul>\n<p>任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。</p>\n<p>更细心的同学指出，number对象调用toString()报SyntaxError：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>toString(); <span class=\"comment\">// SyntaxError</span></div></pre></td></tr></table></figure></p>\n<p>遇到这种情况，要特殊处理一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure></p>\n<p><strong>Date对象</strong></p>\n<p>如果要创建一个指定日期和时间的Date对象，可以用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">123</span>);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Date</span>.parse(<span class=\"string\">'2015-06-24T19:49:22.875+08:00'</span>);</div><div class=\"line\">d; <span class=\"comment\">// 1435146562875</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1435146562875</span>);</div><div class=\"line\">d; <span class=\"comment\">// Wed Jun 24 2015 19:49:22 GMT+0800 (CST)</span></div><div class=\"line\">d.getMonth(); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用Date.parse()时传入的字符串使用实际月份01~12，转换为Date对象后getMonth()获取的月份值为0~11。</p>\n</blockquote>\n<p>要获取当前时间戳，可以用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now()); <span class=\"comment\">// 老版本IE没有now()方法</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>RegExp</strong>，</p>\n<p>正则表达式的内容参考：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000\">标准对象-RegExp</a></p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>除了直接用{ … }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你会问，咦，这不是一个普通函数吗？</p>\n<p>这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(<span class=\"string\">'小明'</span>);</div><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaoming.hello(); <span class=\"comment\">// Hello, 小明!</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。</p>\n</blockquote>\n<p>新创建的xiaoming的原型链是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming ----&gt; Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>xiaoming的原型指向函数Student的原型。如果你又创建了xiaohong、xiaojun，那么这些对象的原型与xiaoming是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming ↘</div><div class=\"line\">xiaohong -→ Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div><div class=\"line\">xiaojun  ↗</div></pre></td></tr></table></figure></p>\n<p>用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming.constructor === Student.prototype.constructor; <span class=\"comment\">// true</span></div><div class=\"line\">Student.prototype.constructor === Student; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(xiaoming) === Student.prototype; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> Student; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>看晕了吧？用一张图来表示这些乱七八糟的关系就是：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction.png\" alt=\"\"></p>\n<p>不过还有一个小问题，注意观察：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaohong.name; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaoming.hello; <span class=\"comment\">// function: Student.hello()</span></div><div class=\"line\">xiaohong.hello; <span class=\"comment\">// function: Student.hello()</span></div><div class=\"line\">xiaoming.hello === xiaohong.hello; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>xiaoming和xiaohong各自的name不同，这是对的，否则我们无法区分谁是谁了。</p>\n<p>xiaoming和xiaohong各自的hello是一个函数，但它们是两个不同的函数，虽然函数名称和代码都是相同的！</p>\n<p>如果我们通过new Student()创建了很多对象，这些对象的hello函数实际上只需要共享同一个函数就可以了，这样可以节省很多内存。</p>\n<p>要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction_1.png\" alt=\"\"></p>\n<p>修改代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>忘记写new怎么办</strong></p>\n<p>如果一个函数被定义为用于创建对象的构造函数，但是调用时忘记了写new怎么办？</p>\n<p>在strict模式下，this.name = name将报错，因为this绑定为undefined，在非strict模式下，this.name = name不报错，因为this绑定为window，于是无意间创建了全局变量name，并且返回undefined，这个结果更糟糕。</p>\n<p>所以，调用构造函数千万不要忘记写new。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new。</p>\n<p>最后，我们还可以编写一个createStudent()函数，在内部封装所有的new操作。一个常用的编程模式像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'匿名'</span>; <span class=\"comment\">// 默认值为'匿名'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>; <span class=\"comment\">// 默认值为1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(props || &#123;&#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个createStudent()函数有几个巨大的优点：一是不需要new来调用，二是参数非常灵活，可以不传，也可以这么传：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = createStudent(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">xiaoming.grade; <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>如果创建的对象有很多属性，我们只需要传递需要的某些属性，剩下的属性可以用默认值。由于参数是一个Object，我们无需记忆参数的顺序。如果恰好从JSON拿到了一个对象，就可以直接创建出xiaoming。</p>\n<p><strong>原型继承</strong><br>在传统的基于Class的语言如Java、C++中，继承的本质是扩展一个已有的Class，并生成新的Subclass。<br>JavaScript由于采用原型继承，我们无法直接扩展一个Class，因为根本不存在Class这种类型。但是办法还是有的。</p>\n<p>我们还是用上面的Student函数，现在，我们要基于Student扩展出PrimaryStudent，可以先定义出PrimaryStudent：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调用Student构造函数，绑定this变量:</span></div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是，调用了Student构造函数不等于继承了Student，PrimaryStudent创建的对象的原型是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>必须想办法把原型链修改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></div></pre></td></tr></table></figure></p>\n<p>我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Student.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// PrimaryStudent构造函数:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 空函数F:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把F的原型指向Student.prototype:</span></div><div class=\"line\">F.prototype = Student.prototype;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span></div><div class=\"line\">PrimaryStudent.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span></div><div class=\"line\">PrimaryStudent.prototype.constructor = PrimaryStudent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 继续在PrimaryStudent原型（就是new F()对象）上定义方法：</span></div><div class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建xiaoming:</span></div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> PrimaryStudent(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;);</div><div class=\"line\">xiaoming.name; <span class=\"comment\">// '小明'</span></div><div class=\"line\">xiaoming.grade; <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证原型:</span></div><div class=\"line\">xiaoming.__proto__ === PrimaryStudent.prototype; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.__proto__.__proto__ === Student.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证继承关系:</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> PrimaryStudent; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming <span class=\"keyword\">instanceof</span> Student; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>用一张图来表示新的原型链：</p>\n<p><img src=\"/images/blogimages/2017/js/js_function_construction_2.png\" alt=\"\"></p>\n<blockquote>\n<p>注意，函数F仅用于桥接，我们仅创建了一个new F()实例，而且，没有改变原有的Student定义的原型链。</p>\n</blockquote>\n<p>如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Parent.prototype;</div><div class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    Child.prototype.constructor = Child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个inherits()函数可以复用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unnamed'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现原型继承链:</span></div><div class=\"line\">inherits(PrimaryStudent, Student);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绑定其他方法到PrimaryStudent原型:</span></div><div class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总结JavaScript的原型继承实现方式就是：</p>\n<ul>\n<li>定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；</li>\n<li>借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；</li>\n<li>继续在新的构造函数的原型上定义新方法。</li>\n</ul>\n<h3 id=\"class继承\"><a href=\"#class继承\" class=\"headerlink\" title=\"class继承\"></a>class继承</h3><p>上面的我们看到了JavaScript的对象模型是基于原型实现的，特点是简单，缺点是理解起来比传统的类－实例模型要困难，最大的缺点是继承的实现需要编写大量代码，并且需要正确实现原型链。</p>\n<p>新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。</p>\n<p>如果用新的class关键字来编写Student，可以这样写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    hello() &#123;</div><div class=\"line\">        alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {…}这样分散的代码。</p>\n<p>最后，创建一个Student对象代码和前面章节完全一样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(<span class=\"string\">'小明'</span>);</div><div class=\"line\">xiaoming.hello();</div></pre></td></tr></table></figure></p>\n<p><strong>class继承</strong><br>原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name, grade) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name); <span class=\"comment\">// 记得用super调用父类的构造方法!</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    myGrade() &#123;</div><div class=\"line\">        alert(<span class=\"string\">'I am at grade '</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意PrimaryStudent的定义也是class关键字实现的，而extends则表示原型链对象来自Student。子类的构造函数可能会与父类不太相同，例如，PrimaryStudent需要name和grade两个参数，并且需要通过<strong>super(name)</strong>来调用父类的构造函数，否则父类的name属性无法正常初始化。</p>\n<p>PrimaryStudent已经自动获得了父类Student的hello方法，我们又在子类中定义了新的myGrade方法。</p>\n<p>ES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。</p>\n<p>你一定会问，class这么好用，能不能现在就用上？</p>\n<p>现在用还早了点，因为不是所有的主流浏览器都支持ES6的class。如果一定要现在就用上，就需要一个工具把class代码转换为传统的prototype代码，可以试试<a href=\"https://babeljs.io/\">Babel</a>这个工具。</p>\n<h3 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h3><p>由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。</p>\n<p>始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：</p>\n<ul>\n<li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；</li>\n<li>遍历：遍历该DOM节点下的子节点，以便进行进一步操作；</li>\n<li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；</li>\n<li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li>\n</ul>\n<p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是<strong>document.getElementById()</strong>和<strong>document.getElementsByTagName()</strong>，以及CSS选择器<strong>document.getElementsByClassName()</strong>。</p>\n<p>由于ID在HTML文档中是唯一的，所以document.getElementById()可以直接定位唯一的一个DOM节点。document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。</p>\n<p>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回ID为'test'的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先定位ID为'test-table'的节点，再返回其内部所有tr节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> trs = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-table'</span>).getElementsByTagName(<span class=\"string\">'tr'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> reds = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-div'</span>).getElementsByClassName(<span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取节点test下的所有直属子节点:</span></div><div class=\"line\"><span class=\"keyword\">var</span> cs = test.children;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取节点test下第一个、最后一个子节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> first = test.firstElementChild;</div><div class=\"line\"><span class=\"keyword\">var</span> last = test.lastElementChild;</div></pre></td></tr></table></figure></p>\n<p>第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过querySelector获取ID为q1的节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> q1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#q1'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过querySelectorAll获取q1节点内的符合条件的所有节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> ps = q1.querySelectorAll(<span class=\"string\">'div.highlighted &gt; p'</span>);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：低版本的IE&lt;8不支持querySelector和querySelectorAll。IE8仅有限支持</p>\n</blockquote>\n<p>严格地讲，我们这里的DOM节点是指Element，但是DOM节点实际上是Node，在HTML中，Node包括Element、Comment、CDATA_SECTION等很多种，以及根节点Document类型，但是，绝大多数时候我们只关心Element，也就是实际控制页面结构的Node，其他类型的Node忽略即可。根节点Document已经自动绑定为全局变量document。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2017/10/22/JavaScript-knowledge/\">http://agehua.github.io/2017/10/22/JavaScript-knowledge/</a></p>"},{"layout":"post","title":"nodejs入门","keywords":"nodejs","banner":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg","thumbnail":"http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg","_content":"\n> 本文是我自己的学习笔记，整理自[《Node入门》](http://www.nodebeginner.org/index-zh-cn.html)\n\n## Node入门\n\n作者： Manuel Kiessling\n翻译： goddyzhao & GrayZhang & MondayChen\n\n\n本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。\n\n\n### 服务端JavaScript\n\nJavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。\n\nNode.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。\n\n<!--more-->\n\n要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。\n\n除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。\n\n因此，Node.js事实上既是一个运行时环境，同时又是一个库。\n\n要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考[官方的安装指南](https://github.com/joyent/node/wiki/Installation)。安装完成后，继续回来阅读本书下面的内容。\n\n#### “Hello World”\n\n好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。\n\n打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：\n\n~~~ JavaScript\nconsole.log(\"Hello World\");\n~~~\n保存该文件，并通过Node.js来执行：\n~~~ JavaScript\nnode helloworld.js\n~~~\n正常的话，就会在终端输出Hello World 。\n\n好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。\n\n### **一个完整的基于Node.js的web应用**\n\n### 用例\n\n我们来把目标设定得简单点，不过也要够实际才行：\n\n用户可以通过浏览器使用我们的应用。\n当用户请求http://domain/start 时，可以看到一个欢迎页面，页面上有一个文件上传的表单。\n用户可以选择一个图片并提交表单，随后文件将被上传到http://domain/upload  ，该页面完成上传后会把图片显示在页面上。\n差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。\n\n更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。\n\n### 应用不同模块分析\n\n我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？\n\n我们需要提供Web页面，因此需要一个HTTP服务器\n对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）\n当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序\n路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能\n我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器\n最后，用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节\n我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。\n从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。\n\n不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。\n\n听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。\n\n现在我们就来开始实现之路，先从第一个部分--HTTP服务器着手。\n\n### 构建应用的模块\n\n#### 一个基础的HTTP服务器\n\n当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。\n我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？\n\n实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。\n\n这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。\n\n那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。\n\n在我的印象里，把主文件叫做index.js或多或少是个标准格式。把服务器模块放进叫server.js的文件里则很好理解。\n\n让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(8888);\n~~~\n搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：\n\n~~~ JavaScript\nnode server.js\n~~~\n接下来，打开浏览器访问http://localhost:8888/ ，你会看到一个写着“Hello World”的网页。\n\n这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。\n\n#### 分析HTTP服务器\n\n那么接下来，让我们分析一下这个HTTP服务器的构成。\n\n第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。\n\n接下来我们调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。\n\n咱们暂时先不管 http.createServer 的括号里的那个函数定义。\n\n我们本来可以用这样的代码来启动服务器并侦听8888端口：\n~~~ JavaScript\nvar http = require(\"http\");\n\nvar server = http.createServer();\nserver.listen(8888);\n~~~\n这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。\n\n最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 createServer() 的第一个参数，一个函数定义。\n\n实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。\n\n#### 进行函数传递\n\n举例来说，你可以这样做：\n\n~~~ JavaScript\nfunction say(word) {\n  console.log(word);\n}\n\nfunction execute(someFunction, value) {\n  someFunction(value);\n}\n\nexecute(say, \"Hello\");\n~~~\n请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！\n\n这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。\n\n当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。\n\n我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：\n\n~~~ JavaScript\nfunction execute(someFunction, value) {\n  someFunction(value);\n}\n\n\nexecute(function(word){ console.log(word) }, \"Hello\");\n~~~\n我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。\n\n用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 匿名函数 。\n\n这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。\n\n#### 函数传递是如何让HTTP服务器工作的\n\n带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(8888);\n~~~\n现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。\n\n用这样的代码也可以达到同样的目的：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction onRequest(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n~~~\n也许现在我们该问这个问题了：我们为什么要用这种方式呢？\n\n#### 基于事件驱动的回调\n\n这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。\n\n你也许会想花点时间读一下Felix Geisendörfer的大作[Understanding node.js](http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb)，它介绍了一些背景知识。\n\n这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。\n\n当我们使用 http.createServer 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。\n\n问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。\n\n写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。\n\n那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？\n\n嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。\n\n我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。\n\n我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。\n\n这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 回调 。\n\n至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。\n\n让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction onRequest(request, response) {\n  console.log(\"Request received.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n\nconsole.log(\"Server has started.\");\n~~~\n\n> 注意：在 onRequest （我们的回调函数）触发的地方，我用 console.log 输出了一段文本。在HTTP服务器开始工作之后，也输出一段文本。\n\n当我们与往常一样，运行它node server.js时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问http://localhost:8888/ ），“Request received.”这条消息就会在命令行中出现。\n\n这就是事件驱动的异步服务器端JavaScript和它的回调啦！\n\n> （请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分浏览器都会在你访问 http://localhost:8888/ 时尝试读取 http://localhost:8888/favicon.ico )\n\n#### 服务器是如何处理请求的\n\n好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 onRequest() 的主体部分。\n\n当回调启动，我们的 onRequest() 函数被触发的时候，有两个参数被传入： request 和 response 。\n\n它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。\n\n所以我们的代码就是：当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World\"。\n\n最后，我们调用 response.end() 完成响应。\n\n目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。\n\n服务端的模块放在哪里\n\nOK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 server.js 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 index.js 的文件去调用应用的其他模块（比如 server.js 中的HTTP服务器模块）来引导和启动应用。\n\n我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 index.js 主文件使用。\n\n也许你已经注意到，我们已经在代码中使用了模块了。像这样：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\n...\n\nhttp.createServer(...);\n~~~\nNode.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。\n\n这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。\n\n给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：\n\n~~~ JavaScript\nvar foo = require(\"http\");\n\n...\n\nfoo.createServer(...);\n~~~\n很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？\n\n等我们把 server.js 变成一个真正的模块，你就能搞明白了。\n\n事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 导出 到请求这个模块的脚本。\n\n目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。\n\n我们把我们的服务器脚本放到一个叫做 start 的函数里，然后我们会导出这个函数。\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction start() {\n  function onRequest(request, response) {\n    console.log(\"Request received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n这样，我们现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。\n\n创建 index.js 文件并写入以下内容：\n\n~~~ JavaScript\nvar server = require(\"./server\");\n\nserver.start();\n~~~\n正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。\n\n好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：\n\n~~~ JavaScript\nnode index.js\n~~~\n非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。\n\n我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。\n\n对于一个非常简单的应用来说，你可以直接在回调函数 onRequest() 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。\n\n处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做**路由**的模块吧。\n\n#### 如何来进行请求的“路由”\n\n我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。\n\n因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。\n\n我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是**url**和**querystring**模块。\n\n~~~ JavaScript\n                               url.parse(string).query\n                                           |\n           url.parse(string).pathname      |\n                       |                   |\n                       |                   |\n                     ------ -------------------\nhttp://localhost:8888/start?foo=bar&hello=world\n                                ---       -----\n                                 |          |\n                                 |          |\n              querystring(string)[\"foo\"]    |\n                                            |\n                         querystring(string)[\"hello\"]\n~~~\n\n当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。\n\n现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start() {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n好了，我们的应用现在可以通过请求的URL路径来区别不同请求了--这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。\n\n在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。\n\n现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：\n\n~~~ JavaScript\nfunction route(pathname) {\n  console.log(\"About to route a request for \" + pathname);\n}\n\nexports.route = route;\n~~~\n如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。\n\n我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读[Martin Fowlers关于依赖注入的大作](http://martinfowler.com/articles/injection.html)来作为背景知识）。\n\n首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\n\nserver.start(router.route);\n~~~\n在这里，我们传递的函数依旧什么也没做。\n\n如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n\n~~~ JavaScript\nbash$ node index.js\nRequest for /foo received.\nAbout to route a request for /foo\n~~~\n（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。\n\n#### 行为驱动执行\n\n请允许我再次脱离主题，在这里谈一谈函数式编程。\n\n将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。\n\n就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。\n\n    嗨那个叫路由的东西，能帮我把这个路由一下吗？\n\n但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要名词，你需要动词。\n\n理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。\n\n我是在读了Steve Yegge的大作[名词王国中的死刑](http://steve-yegge.blogspot.jp/2006/03/execution-in-kingdom-of-nouns.html)之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。\n\n#### 路由给真正的请求处理程序\n\n回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。\n\n当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理/start的“业务逻辑”就应该和处理/upload的不同。\n\n在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。\n\n我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。\n\n应用程序需要新的部件，因此加入新的模块 -- 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。\n\n在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。\n\n这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。\n\n那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆if request == x then call handler y也使得系统丑陋不堪。\n\n仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎**关联数组（associative array）** 能完美胜任。\n\n不过结果有点令人失望，JavaScript没提供关联数组 -- 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。\n\n在这方面，http://msdn.microsoft.com/en-us/magazine/cc163419.aspx 有一个不错的介绍，我在此摘录一段：\n\n> 在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 -- 你可以把JavaScript的对象想象成一个键为字符串类型的字典。\n\n但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！\n\n好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。\n\n我们先将这个对象引入到主文件index.js中：\n\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {}\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\n\nserver.start(router.route, handle);\n~~~\n虽然handle并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。\n\n正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为\"/\"的属性，对应requestHandlers.start即可，这样我们就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。\n\n在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(handle, pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。\n\n然后我们相应地在route.js文件中修改route()函数：\n\n~~~ JavaScript\nfunction route(handle, pathname) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname]();\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n  }\n}\n\nexports.route = route;\n~~~\n通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如handle[pathname]();的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。\n\n有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：\n\n~~~ JavaScript\nServer has started.\nRequest for /start received.\nAbout to route a request for /start\nRequest handler 'start' was called.\n~~~\n并且在浏览器中打开http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：\n\n~~~ JavaScript\nRequest for / received.\nAbout to route a request for /\nRequest handler 'start' was called.\n~~~\n\n#### 让请求处理程序作出响应\n\n很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。\n\n这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们server.js文件中的onRequest函数。\n\n其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。\n\n#### 不好的实现方式\n\n对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。\n\n这里我指的“直截了当的实现方式”意思是：让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。\n\n我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。\n\n让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n  return \"Hello Start\";\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：\n\n~~~ JavaScript\nfunction route(handle, pathname) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    return handle[pathname]();\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    return \"404 Not found\";\n  }\n}\n\nexports.route = route;\n~~~\n正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。\n\n最后，我们需要对我们的server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    var content = route(handle, pathname)\n    response.write(content);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n如果我们运行重构后的应用，一切都会工作的很好：请求http://localhost:8888/start, 浏览器会输出“Hello Start”，请求http://localhost:8888/upload 会输出“Hello Upload”,而请求http://localhost:8888/foo 会输出“404 Not found”。\n\n好，那么问题在哪里呢？简单的说就是： **当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了**。\n\n没理解？没关系，下面就来详细解释下。\n\n#### 阻塞与非阻塞\n\n正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。\n\n我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。\n\n这里，我们来修改下start请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。\n\n让我们将requestHandlers.js修改成如下形式：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n\n  function sleep(milliSeconds) {\n    var startTime = new Date().getTime();\n    while (new Date().getTime() < startTime + milliSeconds);\n  }\n\n  sleep(10000);\n  return \"Hello Start\";\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。\n\n> （当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）\n\n接下来就让我们来看看，我们的改动带来了哪些变化。\n\n如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入http://localhost:8888/start， 但是先不要打开它！\n\n在第二个浏览器窗口的地址栏中输入http://localhost:8888/upload， 同样的，先不要打开它！\n\n接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。\n\n注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！\n\n这到底是为什么呢？原因就是start()包含了阻塞操作。形象的说就是“**它阻塞了所有其他的处理工作**”。\n\n这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。\n\n这句话的意思是说，**Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理** —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。\n\n然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。\n\n对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”\n\n（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——[理解node.js的事件轮询](http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/)。）\n\n接下来，我们会介绍一种**错误**的使用非阻塞操作的方式。\n\n和上次一样，我们通过修改我们的应用来暴露问题。\n\n这次我们还是拿start请求处理程序来“开刀”。将其修改成如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n  var content = \"empty\";\n\n  exec(\"ls -lah\", function (error, stdout, stderr) {\n    content = stdout;\n  });\n\n  return content;\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n上述代码中，我们引入了一个新的Node.js模块，**child_process**。之所以用它，是为了实现一个既简单又实用的非阻塞操作：**exec()**。\n\nexec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。\n\n上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。\n\n和往常一样，我们启动服务器，然后访问“http://localhost:8888/start” 。\n\n之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？\n\n这个时候，你可能大致已经猜到了，exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。\n\n> （如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。\n\n然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？\n\n好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。\n\n问题就在于，为了进行非阻塞工作，exec()使用了回调函数。\n\n在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：\n\n~~~ JavaScript\nfunction (error, stdout, stderr) {\n  content = stdout;\n}\n~~~\n现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行 return content ；在这个时候，content仍然是“empty”，因为传递给exec()的回调函数还未执行到——因为exec()的操作是异步的。\n\n我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。\n\n为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。\n\n那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？\n\n好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。\n\n#### 以非阻塞操作进行请求响应\n\n我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。\n\n不过，用Node.js就有这样一种实现方案： **函数传递**。下面就让我们来具体看看如何实现。\n\n到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -> 请求路由 -> 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。\n\n现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用**将服务器“传递”给内容**的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。\n\n原理就是如此，接下来让我们来一步步实现这种方案。\n\n先从server.js开始：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(handle, pathname, response);\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n相对此前从route()函数获取返回值的做法，这次我们将response对象作为第三个参数传递给route()函数，并且，我们将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。\n\n下面就来看看我们的router.js:\n\n~~~ JavaScript\nfunction route(handle, pathname, response) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/plain\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。\n\n如果没有对应的请求处理器处理，我们就直接返回“404”错误。\n\n最后，我们将requestHandler.js修改为如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  exec(\"ls -lah\", function (error, stdout, stderr) {\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(stdout);\n    response.end();\n  });\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。\n\nstart处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。\n\n这时再次我们启动应用（node index.js），一切都会工作的很好。\n\n如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  exec(\"find /\",\n    { timeout: 10000, maxBuffer: 20000*1024 },\n    function (error, stdout, stderr) {\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(stdout);\n      response.end();\n    });\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n这样一来，当请求http://localhost:8888/start 的时候，会花10秒钟的时间才载入，而当请求http://localhost:8888/upload 的时候，会立即响应，纵然这个时候/start响应还在处理中。\n\n#### 更有用的场景\n\n到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。\n\n服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。\n\n好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。\n\n要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。\n\n第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。\n第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它不在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。\n\n#### 处理POST请求\n\n考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。\n\n/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问http://localhost:8888/start 就可以看到简单的表单了，要记得重启服务器哦！\n\n你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。\n\n余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。\n\n现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。\n\n这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。\n\n为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有**data事件（表示新的小数据块到达了）**以及**end事件（表示所有的数据都已经接收完毕）**。\n\n我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上**注册监听器（listener）** 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。\n\n如下所示：\n\n~~~ JavaScript\nrequest.addListener(\"data\", function(chunk) {\n  // called when a new chunk of data was received\n});\n\nrequest.addListener(\"end\", function() {\n  // called when all chunks of data have been received\n});\n~~~\n问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。\n\n在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。\n\n因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。\n\n还等什么，马上来实现。先从server.js开始：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var postData = \"\";\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    request.setEncoding(\"utf8\");\n\n    request.addListener(\"data\", function(postDataChunk) {\n      postData += postDataChunk;\n      console.log(\"Received POST data chunk '\"+\n      postDataChunk + \"'.\");\n    });\n\n    request.addListener(\"end\", function() {\n      route(handle, pathname, response, postData);\n    });\n\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给postData 变量，最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会**当所有数据接收完毕后才触发，并且只触发一次**。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。\n\n上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。\n\n我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。\n\n再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：\n\n~~~ JavaScript\nfunction route(handle, pathname, response, postData) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response, postData);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/plain\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：\n\n~~~ JavaScript\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent: \" + postData);\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。\n\n我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。\n\n我们可以使用此前介绍过的querystring模块来实现：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，以上就是关于处理POST数据的全部内容。\n\n#### 处理文件上传\n\n最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。\n\n回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。\n\n这里我们要用到的外部模块是Felix Geisendörfer开发的**node-formidable模块**。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。\n\n使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：\n\n~~~ JavaScript\nnpm install formidable\n~~~\n如果终端输出如下内容：\n\n~~~ JavaScript\nnpm info build Success: formidable@1.0.9\nnpm ok\n~~~\n就说明模块已经安装成功了。\n\n现在我们就可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：\n\n~~~ JavaScript\nvar formidable = require(\"formidable\");\n~~~\n这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。\n\nnode-formidable官方的例子展示了这两部分是如何融合在一起工作的：\n\n~~~ JavaScript\nvar formidable = require('formidable'),\n    http = require('http'),\n    util = require('util');\n\nhttp.createServer(function(req, res) {\n  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {'content-type': 'text/plain'});\n      res.write('received upload:\\n\\n');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {'content-type': 'text/html'});\n  res.end(\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"text\" name=\"title\"><br>'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n    '<input type=\"submit\" value=\"Upload\">'+\n    '</form>'\n  );\n}).listen(8888);\n~~~\n如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：\n\n~~~ JavaScript\nreceived upload:\n\n{ fields: { title: 'Hello World' },\n  files:\n   { upload:\n      { size: 1558,\n        path: '/tmp/1c747974a27a6292743669e91f29350b',\n        name: 'us-flag.png',\n        type: 'image/png',\n        lastModifiedDate: Tue, 21 Jun 2011 07:02:41 GMT,\n        _writeStream: [Object],\n        length: [Getter],\n        filename: [Getter],\n        mime: [Getter] } } }\n~~~\n为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。\n\n我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？\n\n显然，我们需要将该文件读取到我们的服务器中，使用一个叫**fs**的模块。\n\n我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。\n\n将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" '+\n    'content=\"text/html; charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nfunction show(response, postData) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：\n\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {}\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\nhandle[\"/show\"] = requestHandlers.show;\n\nserver.start(router.route, handle);\n~~~\n重启服务器之后，通过访问http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。\n\n好，最后我们要的就是：\n\n- 在/start表单中添加一个文件上传元素\n- 将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png\n- 将上传的图片内嵌到/uploadURL输出的HTML中\n\n第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" '+\n    'content=\"text/html; charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"file\" name=\"upload\">'+\n    '<input type=\"submit\" value=\"Upload file\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nfunction show(response, postData) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。\n\n但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。\n\n到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）\n\n我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    route(handle, pathname, response, request);\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：\n\n~~~ JavaScript\nfunction route(handle, pathname, response, request) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response, request);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/html\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。\n\n这里采用**fs.renameSync(path1,path2)来实现**。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。\n\n接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\"),\n    formidable = require(\"formidable\");\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\">'+\n    '<input type=\"submit\" value=\"Upload file\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, request) {\n  console.log(\"Request handler 'upload' was called.\");\n\n  var form = new formidable.IncomingForm();\n  console.log(\"about to parse\");\n  form.parse(request, function(error, fields, files) {\n    console.log(\"parsing done\");\n    fs.renameSync(files.upload.path, \"/tmp/test.png\");\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(\"received image:<br/>\");\n    response.write(\"<img src='/show' />\");\n    response.end();\n  });\n}\n\nfunction show(response) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。\n\n### 总结与展望\n\n恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。\n\n当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。\n\n但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。\n","source":"_posts/2016-12-03-nodejs-learning-getting-started.md","raw":"---\nlayout: post\ntitle:  nodejs入门\ncategory: read\ntags:\n  - read\n  - nodejs\nkeywords: nodejs\nbanner: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg\nthumbnail: http://obxk8w81b.bkt.clouddn.com/Daubigny%20s%20Garden%202.jpg\n---\n\n> 本文是我自己的学习笔记，整理自[《Node入门》](http://www.nodebeginner.org/index-zh-cn.html)\n\n## Node入门\n\n作者： Manuel Kiessling\n翻译： goddyzhao & GrayZhang & MondayChen\n\n\n本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。\n\n\n### 服务端JavaScript\n\nJavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。\n\nNode.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。\n\n<!--more-->\n\n要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。\n\n除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。\n\n因此，Node.js事实上既是一个运行时环境，同时又是一个库。\n\n要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考[官方的安装指南](https://github.com/joyent/node/wiki/Installation)。安装完成后，继续回来阅读本书下面的内容。\n\n#### “Hello World”\n\n好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。\n\n打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：\n\n~~~ JavaScript\nconsole.log(\"Hello World\");\n~~~\n保存该文件，并通过Node.js来执行：\n~~~ JavaScript\nnode helloworld.js\n~~~\n正常的话，就会在终端输出Hello World 。\n\n好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。\n\n### **一个完整的基于Node.js的web应用**\n\n### 用例\n\n我们来把目标设定得简单点，不过也要够实际才行：\n\n用户可以通过浏览器使用我们的应用。\n当用户请求http://domain/start 时，可以看到一个欢迎页面，页面上有一个文件上传的表单。\n用户可以选择一个图片并提交表单，随后文件将被上传到http://domain/upload  ，该页面完成上传后会把图片显示在页面上。\n差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。\n\n更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。\n\n### 应用不同模块分析\n\n我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？\n\n我们需要提供Web页面，因此需要一个HTTP服务器\n对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）\n当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序\n路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能\n我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器\n最后，用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节\n我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。\n从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。\n\n不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。\n\n听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。\n\n现在我们就来开始实现之路，先从第一个部分--HTTP服务器着手。\n\n### 构建应用的模块\n\n#### 一个基础的HTTP服务器\n\n当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。\n我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？\n\n实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。\n\n这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。\n\n那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。\n\n在我的印象里，把主文件叫做index.js或多或少是个标准格式。把服务器模块放进叫server.js的文件里则很好理解。\n\n让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(8888);\n~~~\n搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：\n\n~~~ JavaScript\nnode server.js\n~~~\n接下来，打开浏览器访问http://localhost:8888/ ，你会看到一个写着“Hello World”的网页。\n\n这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。\n\n#### 分析HTTP服务器\n\n那么接下来，让我们分析一下这个HTTP服务器的构成。\n\n第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。\n\n接下来我们调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。\n\n咱们暂时先不管 http.createServer 的括号里的那个函数定义。\n\n我们本来可以用这样的代码来启动服务器并侦听8888端口：\n~~~ JavaScript\nvar http = require(\"http\");\n\nvar server = http.createServer();\nserver.listen(8888);\n~~~\n这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。\n\n最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 createServer() 的第一个参数，一个函数定义。\n\n实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。\n\n#### 进行函数传递\n\n举例来说，你可以这样做：\n\n~~~ JavaScript\nfunction say(word) {\n  console.log(word);\n}\n\nfunction execute(someFunction, value) {\n  someFunction(value);\n}\n\nexecute(say, \"Hello\");\n~~~\n请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！\n\n这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。\n\n当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。\n\n我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：\n\n~~~ JavaScript\nfunction execute(someFunction, value) {\n  someFunction(value);\n}\n\n\nexecute(function(word){ console.log(word) }, \"Hello\");\n~~~\n我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。\n\n用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 匿名函数 。\n\n这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。\n\n#### 函数传递是如何让HTTP服务器工作的\n\n带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(8888);\n~~~\n现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。\n\n用这样的代码也可以达到同样的目的：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction onRequest(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n~~~\n也许现在我们该问这个问题了：我们为什么要用这种方式呢？\n\n#### 基于事件驱动的回调\n\n这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。\n\n你也许会想花点时间读一下Felix Geisendörfer的大作[Understanding node.js](http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb)，它介绍了一些背景知识。\n\n这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。\n\n当我们使用 http.createServer 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。\n\n问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。\n\n写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。\n\n那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？\n\n嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。\n\n我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。\n\n我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。\n\n这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 回调 。\n\n至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。\n\n让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction onRequest(request, response) {\n  console.log(\"Request received.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n\nconsole.log(\"Server has started.\");\n~~~\n\n> 注意：在 onRequest （我们的回调函数）触发的地方，我用 console.log 输出了一段文本。在HTTP服务器开始工作之后，也输出一段文本。\n\n当我们与往常一样，运行它node server.js时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问http://localhost:8888/ ），“Request received.”这条消息就会在命令行中出现。\n\n这就是事件驱动的异步服务器端JavaScript和它的回调啦！\n\n> （请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分浏览器都会在你访问 http://localhost:8888/ 时尝试读取 http://localhost:8888/favicon.ico )\n\n#### 服务器是如何处理请求的\n\n好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 onRequest() 的主体部分。\n\n当回调启动，我们的 onRequest() 函数被触发的时候，有两个参数被传入： request 和 response 。\n\n它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。\n\n所以我们的代码就是：当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World\"。\n\n最后，我们调用 response.end() 完成响应。\n\n目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。\n\n服务端的模块放在哪里\n\nOK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 server.js 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 index.js 的文件去调用应用的其他模块（比如 server.js 中的HTTP服务器模块）来引导和启动应用。\n\n我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 index.js 主文件使用。\n\n也许你已经注意到，我们已经在代码中使用了模块了。像这样：\n\n~~~ JavaScript\nvar http = require(\"http\");\n\n...\n\nhttp.createServer(...);\n~~~\nNode.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。\n\n这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。\n\n给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：\n\n~~~ JavaScript\nvar foo = require(\"http\");\n\n...\n\nfoo.createServer(...);\n~~~\n很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？\n\n等我们把 server.js 变成一个真正的模块，你就能搞明白了。\n\n事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 导出 到请求这个模块的脚本。\n\n目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。\n\n我们把我们的服务器脚本放到一个叫做 start 的函数里，然后我们会导出这个函数。\n\n~~~ JavaScript\nvar http = require(\"http\");\n\nfunction start() {\n  function onRequest(request, response) {\n    console.log(\"Request received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n这样，我们现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。\n\n创建 index.js 文件并写入以下内容：\n\n~~~ JavaScript\nvar server = require(\"./server\");\n\nserver.start();\n~~~\n正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。\n\n好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：\n\n~~~ JavaScript\nnode index.js\n~~~\n非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。\n\n我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。\n\n对于一个非常简单的应用来说，你可以直接在回调函数 onRequest() 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。\n\n处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做**路由**的模块吧。\n\n#### 如何来进行请求的“路由”\n\n我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。\n\n因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。\n\n我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是**url**和**querystring**模块。\n\n~~~ JavaScript\n                               url.parse(string).query\n                                           |\n           url.parse(string).pathname      |\n                       |                   |\n                       |                   |\n                     ------ -------------------\nhttp://localhost:8888/start?foo=bar&hello=world\n                                ---       -----\n                                 |          |\n                                 |          |\n              querystring(string)[\"foo\"]    |\n                                            |\n                         querystring(string)[\"hello\"]\n~~~\n\n当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。\n\n现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start() {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n好了，我们的应用现在可以通过请求的URL路径来区别不同请求了--这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。\n\n在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。\n\n现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：\n\n~~~ JavaScript\nfunction route(pathname) {\n  console.log(\"About to route a request for \" + pathname);\n}\n\nexports.route = route;\n~~~\n如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。\n\n我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读[Martin Fowlers关于依赖注入的大作](http://martinfowler.com/articles/injection.html)来作为背景知识）。\n\n首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\n\nserver.start(router.route);\n~~~\n在这里，我们传递的函数依旧什么也没做。\n\n如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n\n~~~ JavaScript\nbash$ node index.js\nRequest for /foo received.\nAbout to route a request for /foo\n~~~\n（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。\n\n#### 行为驱动执行\n\n请允许我再次脱离主题，在这里谈一谈函数式编程。\n\n将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。\n\n就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。\n\n    嗨那个叫路由的东西，能帮我把这个路由一下吗？\n\n但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要名词，你需要动词。\n\n理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。\n\n我是在读了Steve Yegge的大作[名词王国中的死刑](http://steve-yegge.blogspot.jp/2006/03/execution-in-kingdom-of-nouns.html)之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。\n\n#### 路由给真正的请求处理程序\n\n回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。\n\n当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理/start的“业务逻辑”就应该和处理/upload的不同。\n\n在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。\n\n我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。\n\n应用程序需要新的部件，因此加入新的模块 -- 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。\n\n在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。\n\n这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。\n\n那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆if request == x then call handler y也使得系统丑陋不堪。\n\n仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎**关联数组（associative array）** 能完美胜任。\n\n不过结果有点令人失望，JavaScript没提供关联数组 -- 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。\n\n在这方面，http://msdn.microsoft.com/en-us/magazine/cc163419.aspx 有一个不错的介绍，我在此摘录一段：\n\n> 在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 -- 你可以把JavaScript的对象想象成一个键为字符串类型的字典。\n\n但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！\n\n好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。\n\n我们先将这个对象引入到主文件index.js中：\n\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {}\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\n\nserver.start(router.route, handle);\n~~~\n虽然handle并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。\n\n正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为\"/\"的属性，对应requestHandlers.start即可，这样我们就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。\n\n在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(handle, pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。\n\n然后我们相应地在route.js文件中修改route()函数：\n\n~~~ JavaScript\nfunction route(handle, pathname) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname]();\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n  }\n}\n\nexports.route = route;\n~~~\n通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如handle[pathname]();的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。\n\n有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：\n\n~~~ JavaScript\nServer has started.\nRequest for /start received.\nAbout to route a request for /start\nRequest handler 'start' was called.\n~~~\n并且在浏览器中打开http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：\n\n~~~ JavaScript\nRequest for / received.\nAbout to route a request for /\nRequest handler 'start' was called.\n~~~\n\n#### 让请求处理程序作出响应\n\n很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。\n\n这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们server.js文件中的onRequest函数。\n\n其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。\n\n#### 不好的实现方式\n\n对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。\n\n这里我指的“直截了当的实现方式”意思是：让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。\n\n我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。\n\n让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n  return \"Hello Start\";\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：\n\n~~~ JavaScript\nfunction route(handle, pathname) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    return handle[pathname]();\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    return \"404 Not found\";\n  }\n}\n\nexports.route = route;\n~~~\n正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。\n\n最后，我们需要对我们的server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    var content = route(handle, pathname)\n    response.write(content);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n如果我们运行重构后的应用，一切都会工作的很好：请求http://localhost:8888/start, 浏览器会输出“Hello Start”，请求http://localhost:8888/upload 会输出“Hello Upload”,而请求http://localhost:8888/foo 会输出“404 Not found”。\n\n好，那么问题在哪里呢？简单的说就是： **当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了**。\n\n没理解？没关系，下面就来详细解释下。\n\n#### 阻塞与非阻塞\n\n正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。\n\n我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。\n\n这里，我们来修改下start请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。\n\n让我们将requestHandlers.js修改成如下形式：\n\n~~~ JavaScript\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n\n  function sleep(milliSeconds) {\n    var startTime = new Date().getTime();\n    while (new Date().getTime() < startTime + milliSeconds);\n  }\n\n  sleep(10000);\n  return \"Hello Start\";\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。\n\n> （当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）\n\n接下来就让我们来看看，我们的改动带来了哪些变化。\n\n如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入http://localhost:8888/start， 但是先不要打开它！\n\n在第二个浏览器窗口的地址栏中输入http://localhost:8888/upload， 同样的，先不要打开它！\n\n接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。\n\n注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！\n\n这到底是为什么呢？原因就是start()包含了阻塞操作。形象的说就是“**它阻塞了所有其他的处理工作**”。\n\n这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。\n\n这句话的意思是说，**Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理** —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。\n\n然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。\n\n对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”\n\n（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——[理解node.js的事件轮询](http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/)。）\n\n接下来，我们会介绍一种**错误**的使用非阻塞操作的方式。\n\n和上次一样，我们通过修改我们的应用来暴露问题。\n\n这次我们还是拿start请求处理程序来“开刀”。将其修改成如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start() {\n  console.log(\"Request handler 'start' was called.\");\n  var content = \"empty\";\n\n  exec(\"ls -lah\", function (error, stdout, stderr) {\n    content = stdout;\n  });\n\n  return content;\n}\n\nfunction upload() {\n  console.log(\"Request handler 'upload' was called.\");\n  return \"Hello Upload\";\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n上述代码中，我们引入了一个新的Node.js模块，**child_process**。之所以用它，是为了实现一个既简单又实用的非阻塞操作：**exec()**。\n\nexec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。\n\n上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。\n\n和往常一样，我们启动服务器，然后访问“http://localhost:8888/start” 。\n\n之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？\n\n这个时候，你可能大致已经猜到了，exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。\n\n> （如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。\n\n然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？\n\n好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。\n\n问题就在于，为了进行非阻塞工作，exec()使用了回调函数。\n\n在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：\n\n~~~ JavaScript\nfunction (error, stdout, stderr) {\n  content = stdout;\n}\n~~~\n现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行 return content ；在这个时候，content仍然是“empty”，因为传递给exec()的回调函数还未执行到——因为exec()的操作是异步的。\n\n我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。\n\n为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。\n\n那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？\n\n好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。\n\n#### 以非阻塞操作进行请求响应\n\n我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。\n\n不过，用Node.js就有这样一种实现方案： **函数传递**。下面就让我们来具体看看如何实现。\n\n到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -> 请求路由 -> 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。\n\n现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用**将服务器“传递”给内容**的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。\n\n原理就是如此，接下来让我们来一步步实现这种方案。\n\n先从server.js开始：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(handle, pathname, response);\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n相对此前从route()函数获取返回值的做法，这次我们将response对象作为第三个参数传递给route()函数，并且，我们将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。\n\n下面就来看看我们的router.js:\n\n~~~ JavaScript\nfunction route(handle, pathname, response) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/plain\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。\n\n如果没有对应的请求处理器处理，我们就直接返回“404”错误。\n\n最后，我们将requestHandler.js修改为如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  exec(\"ls -lah\", function (error, stdout, stderr) {\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(stdout);\n    response.end();\n  });\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。\n\nstart处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。\n\n这时再次我们启动应用（node index.js），一切都会工作的很好。\n\n如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nvar exec = require(\"child_process\").exec;\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  exec(\"find /\",\n    { timeout: 10000, maxBuffer: 20000*1024 },\n    function (error, stdout, stderr) {\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.write(stdout);\n      response.end();\n    });\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n这样一来，当请求http://localhost:8888/start 的时候，会花10秒钟的时间才载入，而当请求http://localhost:8888/upload 的时候，会立即响应，纵然这个时候/start响应还在处理中。\n\n#### 更有用的场景\n\n到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。\n\n服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。\n\n好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。\n\n要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。\n\n第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。\n第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它不在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。\n\n#### 处理POST请求\n\n考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。\n\n/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Upload\");\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问http://localhost:8888/start 就可以看到简单的表单了，要记得重启服务器哦！\n\n你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。\n\n余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。\n\n现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。\n\n这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。\n\n为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有**data事件（表示新的小数据块到达了）**以及**end事件（表示所有的数据都已经接收完毕）**。\n\n我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上**注册监听器（listener）** 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。\n\n如下所示：\n\n~~~ JavaScript\nrequest.addListener(\"data\", function(chunk) {\n  // called when a new chunk of data was received\n});\n\nrequest.addListener(\"end\", function() {\n  // called when all chunks of data have been received\n});\n~~~\n问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。\n\n在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。\n\n因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。\n\n还等什么，马上来实现。先从server.js开始：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var postData = \"\";\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    request.setEncoding(\"utf8\");\n\n    request.addListener(\"data\", function(postDataChunk) {\n      postData += postDataChunk;\n      console.log(\"Received POST data chunk '\"+\n      postDataChunk + \"'.\");\n    });\n\n    request.addListener(\"end\", function() {\n      route(handle, pathname, response, postData);\n    });\n\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给postData 变量，最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会**当所有数据接收完毕后才触发，并且只触发一次**。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。\n\n上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。\n\n我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。\n\n再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：\n\n~~~ JavaScript\nfunction route(handle, pathname, response, postData) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response, postData);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/plain\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：\n\n~~~ JavaScript\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent: \" + postData);\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。\n\n我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。\n\n我们可以使用此前介绍过的querystring模块来实现：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n~~~\n好了，以上就是关于处理POST数据的全部内容。\n\n#### 处理文件上传\n\n最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。\n\n回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。\n\n这里我们要用到的外部模块是Felix Geisendörfer开发的**node-formidable模块**。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。\n\n使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：\n\n~~~ JavaScript\nnpm install formidable\n~~~\n如果终端输出如下内容：\n\n~~~ JavaScript\nnpm info build Success: formidable@1.0.9\nnpm ok\n~~~\n就说明模块已经安装成功了。\n\n现在我们就可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：\n\n~~~ JavaScript\nvar formidable = require(\"formidable\");\n~~~\n这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。\n\nnode-formidable官方的例子展示了这两部分是如何融合在一起工作的：\n\n~~~ JavaScript\nvar formidable = require('formidable'),\n    http = require('http'),\n    util = require('util');\n\nhttp.createServer(function(req, res) {\n  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {'content-type': 'text/plain'});\n      res.write('received upload:\\n\\n');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {'content-type': 'text/html'});\n  res.end(\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"text\" name=\"title\"><br>'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n    '<input type=\"submit\" value=\"Upload\">'+\n    '</form>'\n  );\n}).listen(8888);\n~~~\n如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：\n\n~~~ JavaScript\nreceived upload:\n\n{ fields: { title: 'Hello World' },\n  files:\n   { upload:\n      { size: 1558,\n        path: '/tmp/1c747974a27a6292743669e91f29350b',\n        name: 'us-flag.png',\n        type: 'image/png',\n        lastModifiedDate: Tue, 21 Jun 2011 07:02:41 GMT,\n        _writeStream: [Object],\n        length: [Getter],\n        filename: [Getter],\n        mime: [Getter] } } }\n~~~\n为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。\n\n我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？\n\n显然，我们需要将该文件读取到我们的服务器中，使用一个叫**fs**的模块。\n\n我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。\n\n将requestHandlers.js修改为如下形式：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" '+\n    'content=\"text/html; charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" method=\"post\">'+\n    '<textarea name=\"text\" rows=\"20\" cols=\"60\"></textarea>'+\n    '<input type=\"submit\" value=\"Submit text\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nfunction show(response, postData) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：\n\n~~~ JavaScript\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nvar requestHandlers = require(\"./requestHandlers\");\n\nvar handle = {}\nhandle[\"/\"] = requestHandlers.start;\nhandle[\"/start\"] = requestHandlers.start;\nhandle[\"/upload\"] = requestHandlers.upload;\nhandle[\"/show\"] = requestHandlers.show;\n\nserver.start(router.route, handle);\n~~~\n重启服务器之后，通过访问http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。\n\n好，最后我们要的就是：\n\n- 在/start表单中添加一个文件上传元素\n- 将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png\n- 将上传的图片内嵌到/uploadURL输出的HTML中\n\n第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\");\n\nfunction start(response, postData) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" '+\n    'content=\"text/html; charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"file\" name=\"upload\">'+\n    '<input type=\"submit\" value=\"Upload file\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, postData) {\n  console.log(\"Request handler 'upload' was called.\");\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"You've sent the text: \"+\n  querystring.parse(postData).text);\n  response.end();\n}\n\nfunction show(response, postData) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。\n\n但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。\n\n到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）\n\n我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：\n\n~~~ JavaScript\nvar http = require(\"http\");\nvar url = require(\"url\");\n\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    route(handle, pathname, response, request);\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n~~~\n接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：\n\n~~~ JavaScript\nfunction route(handle, pathname, response, request) {\n  console.log(\"About to route a request for \" + pathname);\n  if (typeof handle[pathname] === 'function') {\n    handle[pathname](response, request);\n  } else {\n    console.log(\"No request handler found for \" + pathname);\n    response.writeHead(404, {\"Content-Type\": \"text/html\"});\n    response.write(\"404 Not found\");\n    response.end();\n  }\n}\n\nexports.route = route;\n~~~\n现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。\n\n这里采用**fs.renameSync(path1,path2)来实现**。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。\n\n接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：\n\n~~~ JavaScript\nvar querystring = require(\"querystring\"),\n    fs = require(\"fs\"),\n    formidable = require(\"formidable\");\n\nfunction start(response) {\n  console.log(\"Request handler 'start' was called.\");\n\n  var body = '<html>'+\n    '<head>'+\n    '<meta http-equiv=\"Content-Type\" content=\"text/html; '+\n    'charset=UTF-8\" />'+\n    '</head>'+\n    '<body>'+\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n    'method=\"post\">'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\">'+\n    '<input type=\"submit\" value=\"Upload file\" />'+\n    '</form>'+\n    '</body>'+\n    '</html>';\n\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response, request) {\n  console.log(\"Request handler 'upload' was called.\");\n\n  var form = new formidable.IncomingForm();\n  console.log(\"about to parse\");\n  form.parse(request, function(error, fields, files) {\n    console.log(\"parsing done\");\n    fs.renameSync(files.upload.path, \"/tmp/test.png\");\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.write(\"received image:<br/>\");\n    response.write(\"<img src='/show' />\");\n    response.end();\n  });\n}\n\nfunction show(response) {\n  console.log(\"Request handler 'show' was called.\");\n  fs.readFile(\"/tmp/test.png\", \"binary\", function(error, file) {\n    if(error) {\n      response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n      response.write(error + \"\\n\");\n      response.end();\n    } else {\n      response.writeHead(200, {\"Content-Type\": \"image/png\"});\n      response.write(file, \"binary\");\n      response.end();\n    }\n  });\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n~~~\n好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。\n\n### 总结与展望\n\n恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。\n\n当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。\n\n但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。\n","slug":"nodejs-learning-getting-started","published":1,"date":"2016-12-02T16:00:00.000Z","updated":"2017-11-23T07:10:12.000Z","comments":1,"photos":[],"link":"","_id":"cjaw7ec6f0082d6ykjteo5mm7","content":"<blockquote>\n<p>本文是我自己的学习笔记，整理自<a href=\"http://www.nodebeginner.org/index-zh-cn.html\" target=\"_blank\" rel=\"external\">《Node入门》</a></p>\n</blockquote>\n<h2 id=\"Node入门\"><a href=\"#Node入门\" class=\"headerlink\" title=\"Node入门\"></a>Node入门</h2><p>作者： Manuel Kiessling<br>翻译： goddyzhao &amp; GrayZhang &amp; MondayChen</p>\n<p>本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。</p>\n<h3 id=\"服务端JavaScript\"><a href=\"#服务端JavaScript\" class=\"headerlink\" title=\"服务端JavaScript\"></a>服务端JavaScript</h3><p>JavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。</p>\n<p>Node.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。</p>\n<a id=\"more\"></a>\n<p>要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。</p>\n<p>除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。</p>\n<p>因此，Node.js事实上既是一个运行时环境，同时又是一个库。</p>\n<p>要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考<a href=\"https://github.com/joyent/node/wiki/Installation\" target=\"_blank\" rel=\"external\">官方的安装指南</a>。安装完成后，继续回来阅读本书下面的内容。</p>\n<h4 id=\"“Hello-World”\"><a href=\"#“Hello-World”\" class=\"headerlink\" title=\"“Hello World”\"></a>“Hello World”</h4><p>好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。</p>\n<p>打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div></pre></td></tr></table></figure>\n<p>保存该文件，并通过Node.js来执行：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node helloworld.js</div></pre></td></tr></table></figure></p>\n<p>正常的话，就会在终端输出Hello World 。</p>\n<p>好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。</p>\n<h3 id=\"一个完整的基于Node-js的web应用\"><a href=\"#一个完整的基于Node-js的web应用\" class=\"headerlink\" title=\"一个完整的基于Node.js的web应用\"></a><strong>一个完整的基于Node.js的web应用</strong></h3><h3 id=\"用例\"><a href=\"#用例\" class=\"headerlink\" title=\"用例\"></a>用例</h3><p>我们来把目标设定得简单点，不过也要够实际才行：</p>\n<p>用户可以通过浏览器使用我们的应用。<br>当用户请求<a href=\"http://domain/start\" target=\"_blank\" rel=\"external\">http://domain/start</a> 时，可以看到一个欢迎页面，页面上有一个文件上传的表单。<br>用户可以选择一个图片并提交表单，随后文件将被上传到<a href=\"http://domain/upload\" target=\"_blank\" rel=\"external\">http://domain/upload</a>  ，该页面完成上传后会把图片显示在页面上。<br>差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。</p>\n<p>更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。</p>\n<h3 id=\"应用不同模块分析\"><a href=\"#应用不同模块分析\" class=\"headerlink\" title=\"应用不同模块分析\"></a>应用不同模块分析</h3><p>我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？</p>\n<p>我们需要提供Web页面，因此需要一个HTTP服务器<br>对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）<br>当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序<br>路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能<br>我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器<br>最后，用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节<br>我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。<br>从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。</p>\n<p>不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。</p>\n<p>听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。</p>\n<p>现在我们就来开始实现之路，先从第一个部分–HTTP服务器着手。</p>\n<h3 id=\"构建应用的模块\"><a href=\"#构建应用的模块\" class=\"headerlink\" title=\"构建应用的模块\"></a>构建应用的模块</h3><h4 id=\"一个基础的HTTP服务器\"><a href=\"#一个基础的HTTP服务器\" class=\"headerlink\" title=\"一个基础的HTTP服务器\"></a>一个基础的HTTP服务器</h4><p>当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。<br>我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？</p>\n<p>实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。</p>\n<p>这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。</p>\n<p>那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。</p>\n<p>在我的印象里，把主文件叫做index.js或多或少是个标准格式。把服务器模块放进叫server.js的文件里则很好理解。</p>\n<p>让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node server.js</div></pre></td></tr></table></figure>\n<p>接下来，打开浏览器访问<a href=\"http://localhost:8888/\" target=\"_blank\" rel=\"external\">http://localhost:8888/</a> ，你会看到一个写着“Hello World”的网页。</p>\n<p>这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。</p>\n<h4 id=\"分析HTTP服务器\"><a href=\"#分析HTTP服务器\" class=\"headerlink\" title=\"分析HTTP服务器\"></a>分析HTTP服务器</h4><p>那么接下来，让我们分析一下这个HTTP服务器的构成。</p>\n<p>第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。</p>\n<p>接下来我们调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。</p>\n<p>咱们暂时先不管 http.createServer 的括号里的那个函数定义。</p>\n<p>我们本来可以用这样的代码来启动服务器并侦听8888端口：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。</p>\n<p>最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 createServer() 的第一个参数，一个函数定义。</p>\n<p>实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。</p>\n<h4 id=\"进行函数传递\"><a href=\"#进行函数传递\" class=\"headerlink\" title=\"进行函数传递\"></a>进行函数传递</h4><p>举例来说，你可以这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">execute(say, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure>\n<p>请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！</p>\n<p>这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。</p>\n<p>当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。</p>\n<p>我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">execute(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>)</span>&#123; <span class=\"built_in\">console</span>.log(word) &#125;, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure>\n<p>我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。</p>\n<p>用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 匿名函数 。</p>\n<p>这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p>\n<h4 id=\"函数传递是如何让HTTP服务器工作的\"><a href=\"#函数传递是如何让HTTP服务器工作的\" class=\"headerlink\" title=\"函数传递是如何让HTTP服务器工作的\"></a>函数传递是如何让HTTP服务器工作的</h4><p>带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。</p>\n<p>用这样的代码也可以达到同样的目的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>也许现在我们该问这个问题了：我们为什么要用这种方式呢？</p>\n<h4 id=\"基于事件驱动的回调\"><a href=\"#基于事件驱动的回调\" class=\"headerlink\" title=\"基于事件驱动的回调\"></a>基于事件驱动的回调</h4><p>这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。</p>\n<p>你也许会想花点时间读一下Felix Geisendörfer的大作<a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\" target=\"_blank\" rel=\"external\">Understanding node.js</a>，它介绍了一些背景知识。</p>\n<p>这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。</p>\n<p>当我们使用 http.createServer 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。</p>\n<p>问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。</p>\n<p>写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。</p>\n<p>那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？</p>\n<p>嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。</p>\n<p>我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。</p>\n<p>我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。</p>\n<p>这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 回调 。</p>\n<p>至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。</p>\n<p>让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request received.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在 onRequest （我们的回调函数）触发的地方，我用 console.log 输出了一段文本。在HTTP服务器开始工作之后，也输出一段文本。</p>\n</blockquote>\n<p>当我们与往常一样，运行它node server.js时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问<a href=\"http://localhost:8888/\" target=\"_blank\" rel=\"external\">http://localhost:8888/</a> ），“Request received.”这条消息就会在命令行中出现。</p>\n<p>这就是事件驱动的异步服务器端JavaScript和它的回调啦！</p>\n<blockquote>\n<p>（请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分浏览器都会在你访问 <a href=\"http://localhost:8888/\" target=\"_blank\" rel=\"external\">http://localhost:8888/</a> 时尝试读取 <a href=\"http://localhost:8888/favicon.ico\" target=\"_blank\" rel=\"external\">http://localhost:8888/favicon.ico</a> )</p>\n</blockquote>\n<h4 id=\"服务器是如何处理请求的\"><a href=\"#服务器是如何处理请求的\" class=\"headerlink\" title=\"服务器是如何处理请求的\"></a>服务器是如何处理请求的</h4><p>好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 onRequest() 的主体部分。</p>\n<p>当回调启动，我们的 onRequest() 函数被触发的时候，有两个参数被传入： request 和 response 。</p>\n<p>它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。</p>\n<p>所以我们的代码就是：当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World”。</p>\n<p>最后，我们调用 response.end() 完成响应。</p>\n<p>目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。</p>\n<p>服务端的模块放在哪里</p>\n<p>OK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 server.js 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 index.js 的文件去调用应用的其他模块（比如 server.js 中的HTTP服务器模块）来引导和启动应用。</p>\n<p>我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 index.js 主文件使用。</p>\n<p>也许你已经注意到，我们已经在代码中使用了模块了。像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">http.createServer(...);</div></pre></td></tr></table></figure>\n<p>Node.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。</p>\n<p>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。</p>\n<p>给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">foo.createServer(...);</div></pre></td></tr></table></figure>\n<p>很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？</p>\n<p>等我们把 server.js 变成一个真正的模块，你就能搞明白了。</p>\n<p>事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 导出 到请求这个模块的脚本。</p>\n<p>目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。</p>\n<p>我们把我们的服务器脚本放到一个叫做 start 的函数里，然后我们会导出这个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>这样，我们现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。</p>\n<p>创建 index.js 文件并写入以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.start();</div></pre></td></tr></table></figure>\n<p>正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。</p>\n<p>好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p>非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。</p>\n<p>我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。</p>\n<p>对于一个非常简单的应用来说，你可以直接在回调函数 onRequest() 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。</p>\n<p>处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做<strong>路由</strong>的模块吧。</p>\n<h4 id=\"如何来进行请求的“路由”\"><a href=\"#如何来进行请求的“路由”\" class=\"headerlink\" title=\"如何来进行请求的“路由”\"></a>如何来进行请求的“路由”</h4><p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。</p>\n<p>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。</p>\n<p>我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是<strong>url</strong>和<strong>querystring</strong>模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">                               url.parse(string).query</div><div class=\"line\">                                           |</div><div class=\"line\">           url.parse(string).pathname      |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                     ------ -------------------</div><div class=\"line\">http:<span class=\"comment\">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class=\"line\">                                ---       -----</div><div class=\"line\">                                 |          |</div><div class=\"line\">                                 |          |</div><div class=\"line\">              querystring(string)[<span class=\"string\">\"foo\"</span>]    |</div><div class=\"line\">                                            |</div><div class=\"line\">                         querystring(string)[<span class=\"string\">\"hello\"</span>]</div></pre></td></tr></table></figure>\n<p>当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。</p>\n<p>现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。</p>\n<p>在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。</p>\n<p>现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。</p>\n<p>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读<a href=\"http://martinfowler.com/articles/injection.html\" target=\"_blank\" rel=\"external\">Martin Fowlers关于依赖注入的大作</a>来作为背景知识）。</p>\n<p>首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>在这里，我们传递的函数依旧什么也没做。</p>\n<p>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">bash$ node index.js</div><div class=\"line\">Request <span class=\"keyword\">for</span> /foo received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /foo</div></pre></td></tr></table></figure>\n<p>（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。</p>\n<h4 id=\"行为驱动执行\"><a href=\"#行为驱动执行\" class=\"headerlink\" title=\"行为驱动执行\"></a>行为驱动执行</h4><p>请允许我再次脱离主题，在这里谈一谈函数式编程。</p>\n<p>将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。</p>\n<p>就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。</p>\n<pre><code>嗨那个叫路由的东西，能帮我把这个路由一下吗？\n</code></pre><p>但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要名词，你需要动词。</p>\n<p>理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。</p>\n<p>我是在读了Steve Yegge的大作<a href=\"http://steve-yegge.blogspot.jp/2006/03/execution-in-kingdom-of-nouns.html\" target=\"_blank\" rel=\"external\">名词王国中的死刑</a>之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。</p>\n<h4 id=\"路由给真正的请求处理程序\"><a href=\"#路由给真正的请求处理程序\" class=\"headerlink\" title=\"路由给真正的请求处理程序\"></a>路由给真正的请求处理程序</h4><p>回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。</p>\n<p>当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理/start的“业务逻辑”就应该和处理/upload的不同。</p>\n<p>在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。</p>\n<p>我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。</p>\n<p>应用程序需要新的部件，因此加入新的模块 – 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。</p>\n<p>在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。</p>\n<p>这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。</p>\n<p>那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆if request == x then call handler y也使得系统丑陋不堪。</p>\n<p>仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎<strong>关联数组（associative array）</strong> 能完美胜任。</p>\n<p>不过结果有点令人失望，JavaScript没提供关联数组 – 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。</p>\n<p>在这方面，<a href=\"http://msdn.microsoft.com/en-us/magazine/cc163419.aspx\" target=\"_blank\" rel=\"external\">http://msdn.microsoft.com/en-us/magazine/cc163419.aspx</a> 有一个不错的介绍，我在此摘录一段：</p>\n<blockquote>\n<p>在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 – 你可以把JavaScript的对象想象成一个键为字符串类型的字典。</p>\n</blockquote>\n<p>但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！</p>\n<p>好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。</p>\n<p>我们先将这个对象引入到主文件index.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);</div></pre></td></tr></table></figure>\n<p>虽然handle并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。</p>\n<p>正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为”/“的属性，对应requestHandlers.start即可，这样我们就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。</p>\n<p>在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(handle, pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。</p>\n<p>然后我们相应地在route.js文件中修改route()函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname]();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如handle<a href=\"\">pathname</a>;的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。</p>\n<p>有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问<a href=\"http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：\" target=\"_blank\" rel=\"external\">http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">Server has started.</div><div class=\"line\">Request <span class=\"keyword\">for</span> /start received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /start</div><div class=\"line\">Request handler <span class=\"string\">'start'</span> was called.</div></pre></td></tr></table></figure>\n<p>并且在浏览器中打开<a href=\"http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：\" target=\"_blank\" rel=\"external\">http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">Request <span class=\"keyword\">for</span> / received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /</div><div class=\"line\">Request handler <span class=\"string\">'start'</span> was called.</div></pre></td></tr></table></figure>\n<h4 id=\"让请求处理程序作出响应\"><a href=\"#让请求处理程序作出响应\" class=\"headerlink\" title=\"让请求处理程序作出响应\"></a>让请求处理程序作出响应</h4><p>很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。</p>\n<p>这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们server.js文件中的onRequest函数。</p>\n<p>其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。</p>\n<h4 id=\"不好的实现方式\"><a href=\"#不好的实现方式\" class=\"headerlink\" title=\"不好的实现方式\"></a>不好的实现方式</h4><p>对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。</p>\n<p>这里我指的“直截了当的实现方式”意思是：让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。</p>\n<p>我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。</p>\n<p>让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Start\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> handle[pathname]();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"404 Not found\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。</p>\n<p>最后，我们需要对我们的server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> content = route(handle, pathname)</div><div class=\"line\">    response.write(content);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>如果我们运行重构后的应用，一切都会工作的很好：请求<a href=\"http://localhost:8888/start\" target=\"_blank\" rel=\"external\">http://localhost:8888/start</a>, 浏览器会输出“Hello Start”，请求<a href=\"http://localhost:8888/upload\" target=\"_blank\" rel=\"external\">http://localhost:8888/upload</a> 会输出“Hello Upload”,而请求<a href=\"http://localhost:8888/foo\" target=\"_blank\" rel=\"external\">http://localhost:8888/foo</a> 会输出“404 Not found”。</p>\n<p>好，那么问题在哪里呢？简单的说就是： <strong>当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了</strong>。</p>\n<p>没理解？没关系，下面就来详细解释下。</p>\n<h4 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h4><p>正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。</p>\n<p>我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。</p>\n<p>这里，我们来修改下start请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。</p>\n<p>让我们将requestHandlers.js修改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">milliSeconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &lt; startTime + milliSeconds);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  sleep(<span class=\"number\">10000</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Start\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。</p>\n<blockquote>\n<p>（当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）</p>\n</blockquote>\n<p>接下来就让我们来看看，我们的改动带来了哪些变化。</p>\n<p>如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入<a href=\"http://localhost:8888/start，\" target=\"_blank\" rel=\"external\">http://localhost:8888/start，</a> 但是先不要打开它！</p>\n<p>在第二个浏览器窗口的地址栏中输入<a href=\"http://localhost:8888/upload，\" target=\"_blank\" rel=\"external\">http://localhost:8888/upload，</a> 同样的，先不要打开它！</p>\n<p>接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。</p>\n<p>注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！</p>\n<p>这到底是为什么呢？原因就是start()包含了阻塞操作。形象的说就是“<strong>它阻塞了所有其他的处理工作</strong>”。</p>\n<p>这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。</p>\n<p>这句话的意思是说，<strong>Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理</strong> —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。</p>\n<p>然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。</p>\n<p>对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”</p>\n<p>（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——<a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\" target=\"_blank\" rel=\"external\">理解node.js的事件轮询</a>。）</p>\n<p>接下来，我们会介绍一种<strong>错误</strong>的使用非阻塞操作的方式。</p>\n<p>和上次一样，我们通过修改我们的应用来暴露问题。</p>\n<p>这次我们还是拿start请求处理程序来“开刀”。将其修改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> content = <span class=\"string\">\"empty\"</span>;</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"ls -lah\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">    content = stdout;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> content;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>上述代码中，我们引入了一个新的Node.js模块，<strong>child_process</strong>。之所以用它，是为了实现一个既简单又实用的非阻塞操作：<strong>exec()</strong>。</p>\n<p>exec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。</p>\n<p>上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。</p>\n<p>和往常一样，我们启动服务器，然后访问“<a href=\"http://localhost:8888/start”\" target=\"_blank\" rel=\"external\">http://localhost:8888/start”</a> 。</p>\n<p>之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？</p>\n<p>这个时候，你可能大致已经猜到了，exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。</p>\n<blockquote>\n<p>（如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。</p>\n</blockquote>\n<p>然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？</p>\n<p>好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。</p>\n<p>问题就在于，为了进行非阻塞工作，exec()使用了回调函数。</p>\n<p>在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">  content = stdout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行 return content ；在这个时候，content仍然是“empty”，因为传递给exec()的回调函数还未执行到——因为exec()的操作是异步的。</p>\n<p>我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。</p>\n<p>为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。</p>\n<p>那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？</p>\n<p>好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。</p>\n<h4 id=\"以非阻塞操作进行请求响应\"><a href=\"#以非阻塞操作进行请求响应\" class=\"headerlink\" title=\"以非阻塞操作进行请求响应\"></a>以非阻塞操作进行请求响应</h4><p>我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。</p>\n<p>不过，用Node.js就有这样一种实现方案： <strong>函数传递</strong>。下面就让我们来具体看看如何实现。</p>\n<p>到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -&gt; 请求路由 -&gt; 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。</p>\n<p>现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用<strong>将服务器“传递”给内容</strong>的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。</p>\n<p>原理就是如此，接下来让我们来一步步实现这种方案。</p>\n<p>先从server.js开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(handle, pathname, response);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>相对此前从route()函数获取返回值的做法，这次我们将response对象作为第三个参数传递给route()函数，并且，我们将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。</p>\n<p>下面就来看看我们的router.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。</p>\n<p>如果没有对应的请求处理器处理，我们就直接返回“404”错误。</p>\n<p>最后，我们将requestHandler.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"ls -lah\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(stdout);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。</p>\n<p>start处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。</p>\n<p>这时再次我们启动应用（node index.js），一切都会工作的很好。</p>\n<p>如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"find /\"</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>, <span class=\"attr\">maxBuffer</span>: <span class=\"number\">20000</span>*<span class=\"number\">1024</span> &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(stdout);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>这样一来，当请求<a href=\"http://localhost:8888/start\" target=\"_blank\" rel=\"external\">http://localhost:8888/start</a> 的时候，会花10秒钟的时间才载入，而当请求<a href=\"http://localhost:8888/upload\" target=\"_blank\" rel=\"external\">http://localhost:8888/upload</a> 的时候，会立即响应，纵然这个时候/start响应还在处理中。</p>\n<h4 id=\"更有用的场景\"><a href=\"#更有用的场景\" class=\"headerlink\" title=\"更有用的场景\"></a>更有用的场景</h4><p>到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。</p>\n<p>服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。</p>\n<p>好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。</p>\n<p>要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。</p>\n<p>第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。<br>第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它不在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。</p>\n<h4 id=\"处理POST请求\"><a href=\"#处理POST请求\" class=\"headerlink\" title=\"处理POST请求\"></a>处理POST请求</h4><p>考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p>\n<p>/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问<a href=\"http://localhost:8888/start\" target=\"_blank\" rel=\"external\">http://localhost:8888/start</a> 就可以看到简单的表单了，要记得重启服务器哦！</p>\n<p>你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。</p>\n<p>余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。</p>\n<p>现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。</p>\n<p>这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。</p>\n<p>为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有<strong>data事件（表示新的小数据块到达了）</strong>以及<strong>end事件（表示所有的数据都已经接收完毕）</strong>。</p>\n<p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上<strong>注册监听器（listener）</strong> 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。</p>\n<p>如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// called when a new chunk of data was received</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// called when all chunks of data have been received</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。</p>\n<p>在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。</p>\n<p>因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。</p>\n<p>还等什么，马上来实现。先从server.js开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    request.setEncoding(<span class=\"string\">\"utf8\"</span>);</div><div class=\"line\"></div><div class=\"line\">    request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postDataChunk</span>) </span>&#123;</div><div class=\"line\">      postData += postDataChunk;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received POST data chunk '\"</span>+</div><div class=\"line\">      postDataChunk + <span class=\"string\">\"'.\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      route(handle, pathname, response, postData);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给postData 变量，最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会<strong>当所有数据接收完毕后才触发，并且只触发一次</strong>。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。</p>\n<p>上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。</p>\n<p>我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。</p>\n<p>再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response, postData);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent: \"</span> + postData);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p>\n<p>我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。</p>\n<p>我们可以使用此前介绍过的querystring模块来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，以上就是关于处理POST数据的全部内容。</p>\n<h4 id=\"处理文件上传\"><a href=\"#处理文件上传\" class=\"headerlink\" title=\"处理文件上传\"></a>处理文件上传</h4><p>最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。</p>\n<p>回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。</p>\n<p>这里我们要用到的外部模块是Felix Geisendörfer开发的<strong>node-formidable模块</strong>。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。</p>\n<p>使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install formidable</div></pre></td></tr></table></figure>\n<p>如果终端输出如下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm info build Success: formidable@<span class=\"number\">1.0</span><span class=\"number\">.9</span></div><div class=\"line\">npm ok</div></pre></td></tr></table></figure>\n<p>就说明模块已经安装成功了。</p>\n<p>现在我们就可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</div></pre></td></tr></table></figure>\n<p>这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。</p>\n<p>node-formidable官方的例子展示了这两部分是如何融合在一起工作的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>),</div><div class=\"line\">    http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>),</div><div class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// parse a file upload</span></div><div class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</div><div class=\"line\">    form.parse(req, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fields, files</span>) </span>&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'content-type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">      res.write(<span class=\"string\">'received upload:\\n\\n'</span>);</div><div class=\"line\">      res.end(util.inspect(&#123;<span class=\"attr\">fields</span>: fields, <span class=\"attr\">files</span>: files&#125;));</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// show a file upload form</span></div><div class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'content-type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">  res.end(</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"text\" name=\"title\"&gt;&lt;br&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\" multiple=\"multiple\"&gt;&lt;br&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">received upload:</div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">fields</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Hello World'</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">files</span>:</div><div class=\"line\">   &#123; <span class=\"attr\">upload</span>:</div><div class=\"line\">      &#123; <span class=\"attr\">size</span>: <span class=\"number\">1558</span>,</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/tmp/1c747974a27a6292743669e91f29350b'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'us-flag.png'</span>,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'image/png'</span>,</div><div class=\"line\">        <span class=\"attr\">lastModifiedDate</span>: Tue, <span class=\"number\">21</span> Jun <span class=\"number\">2011</span> <span class=\"number\">07</span>:<span class=\"number\">02</span>:<span class=\"number\">41</span> GMT,</div><div class=\"line\">        <span class=\"attr\">_writeStream</span>: [<span class=\"built_in\">Object</span>],</div><div class=\"line\">        <span class=\"attr\">length</span>: [Getter],</div><div class=\"line\">        <span class=\"attr\">filename</span>: [Getter],</div><div class=\"line\">        <span class=\"attr\">mime</span>: [Getter] &#125; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。</p>\n<p>我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？</p>\n<p>显然，我们需要将该文件读取到我们的服务器中，使用一个叫<strong>fs</strong>的模块。</p>\n<p>我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。</p>\n<p>将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</div><div class=\"line\">    <span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\">handle[<span class=\"string\">\"/show\"</span>] = requestHandlers.show;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);</div></pre></td></tr></table></figure>\n<p>重启服务器之后，通过访问<a href=\"http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。\" target=\"_blank\" rel=\"external\">http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。</a></p>\n<p>好，最后我们要的就是：</p>\n<ul>\n<li>在/start表单中添加一个文件上传元素</li>\n<li>将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png</li>\n<li>将上传的图片内嵌到/uploadURL输出的HTML中</li>\n</ul>\n<p>第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</div><div class=\"line\">    <span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。</p>\n<p>但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。</p>\n<p>到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）</p>\n<p>我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    route(handle, pathname, response, request);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response, request);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。</p>\n<p>这里采用<strong>fs.renameSync(path1,path2)来实现</strong>。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。</p>\n<p>接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>),</div><div class=\"line\">    formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\" multiple=\"multiple\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"about to parse\"</span>);</div><div class=\"line\">  form.parse(request, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, fields, files</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"parsing done\"</span>);</div><div class=\"line\">    fs.renameSync(files.upload.path, <span class=\"string\">\"/tmp/test.png\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"received image:&lt;br/&gt;\"</span>);</div><div class=\"line\">    response.write(<span class=\"string\">\"&lt;img src='/show' /&gt;\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。</p>\n<h3 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h3><p>恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。</p>\n<p>当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。</p>\n<p>但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\"></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\" target=\"_blank\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/03/nodejs-learning-getting-started/\">http://agehua.github.io/2016/12/03/nodejs-learning-getting-started/</a></p>\n","readingTime":{"text":"21 min read","minutes":20.355,"time":1221300,"words":4071},"excerpt":"<blockquote>\n<p>本文是我自己的学习笔记，整理自<a href=\"http://www.nodebeginner.org/index-zh-cn.html\">《Node入门》</a></p>\n</blockquote>\n<h2 id=\"Node入门\"><a href=\"#Node入门\" class=\"headerlink\" title=\"Node入门\"></a>Node入门</h2><p>作者： Manuel Kiessling<br>翻译： goddyzhao &amp; GrayZhang &amp; MondayChen</p>\n<p>本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。</p>\n<h3 id=\"服务端JavaScript\"><a href=\"#服务端JavaScript\" class=\"headerlink\" title=\"服务端JavaScript\"></a>服务端JavaScript</h3><p>JavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。</p>\n<p>Node.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。</p>","more":"<p>要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。</p>\n<p>除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。</p>\n<p>因此，Node.js事实上既是一个运行时环境，同时又是一个库。</p>\n<p>要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考<a href=\"https://github.com/joyent/node/wiki/Installation\">官方的安装指南</a>。安装完成后，继续回来阅读本书下面的内容。</p>\n<h4 id=\"“Hello-World”\"><a href=\"#“Hello-World”\" class=\"headerlink\" title=\"“Hello World”\"></a>“Hello World”</h4><p>好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。</p>\n<p>打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div></pre></td></tr></table></figure>\n<p>保存该文件，并通过Node.js来执行：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node helloworld.js</div></pre></td></tr></table></figure></p>\n<p>正常的话，就会在终端输出Hello World 。</p>\n<p>好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。</p>\n<h3 id=\"一个完整的基于Node-js的web应用\"><a href=\"#一个完整的基于Node-js的web应用\" class=\"headerlink\" title=\"一个完整的基于Node.js的web应用\"></a><strong>一个完整的基于Node.js的web应用</strong></h3><h3 id=\"用例\"><a href=\"#用例\" class=\"headerlink\" title=\"用例\"></a>用例</h3><p>我们来把目标设定得简单点，不过也要够实际才行：</p>\n<p>用户可以通过浏览器使用我们的应用。<br>当用户请求<a href=\"http://domain/start\">http://domain/start</a> 时，可以看到一个欢迎页面，页面上有一个文件上传的表单。<br>用户可以选择一个图片并提交表单，随后文件将被上传到<a href=\"http://domain/upload\">http://domain/upload</a>  ，该页面完成上传后会把图片显示在页面上。<br>差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。</p>\n<p>更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。</p>\n<h3 id=\"应用不同模块分析\"><a href=\"#应用不同模块分析\" class=\"headerlink\" title=\"应用不同模块分析\"></a>应用不同模块分析</h3><p>我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？</p>\n<p>我们需要提供Web页面，因此需要一个HTTP服务器<br>对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）<br>当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序<br>路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能<br>我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器<br>最后，用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节<br>我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。<br>从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。</p>\n<p>不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。</p>\n<p>听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。</p>\n<p>现在我们就来开始实现之路，先从第一个部分–HTTP服务器着手。</p>\n<h3 id=\"构建应用的模块\"><a href=\"#构建应用的模块\" class=\"headerlink\" title=\"构建应用的模块\"></a>构建应用的模块</h3><h4 id=\"一个基础的HTTP服务器\"><a href=\"#一个基础的HTTP服务器\" class=\"headerlink\" title=\"一个基础的HTTP服务器\"></a>一个基础的HTTP服务器</h4><p>当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。<br>我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？</p>\n<p>实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。</p>\n<p>这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。</p>\n<p>那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。</p>\n<p>在我的印象里，把主文件叫做index.js或多或少是个标准格式。把服务器模块放进叫server.js的文件里则很好理解。</p>\n<p>让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node server.js</div></pre></td></tr></table></figure>\n<p>接下来，打开浏览器访问<a href=\"http://localhost:8888/\">http://localhost:8888/</a> ，你会看到一个写着“Hello World”的网页。</p>\n<p>这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。</p>\n<h4 id=\"分析HTTP服务器\"><a href=\"#分析HTTP服务器\" class=\"headerlink\" title=\"分析HTTP服务器\"></a>分析HTTP服务器</h4><p>那么接下来，让我们分析一下这个HTTP服务器的构成。</p>\n<p>第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。</p>\n<p>接下来我们调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。</p>\n<p>咱们暂时先不管 http.createServer 的括号里的那个函数定义。</p>\n<p>我们本来可以用这样的代码来启动服务器并侦听8888端口：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure></p>\n<p>这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。</p>\n<p>最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 createServer() 的第一个参数，一个函数定义。</p>\n<p>实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。</p>\n<h4 id=\"进行函数传递\"><a href=\"#进行函数传递\" class=\"headerlink\" title=\"进行函数传递\"></a>进行函数传递</h4><p>举例来说，你可以这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">execute(say, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure>\n<p>请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！</p>\n<p>这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。</p>\n<p>当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。</p>\n<p>我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\">someFunction, value</span>) </span>&#123;</div><div class=\"line\">  someFunction(value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">execute(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>)</span>&#123; <span class=\"built_in\">console</span>.log(word) &#125;, <span class=\"string\">\"Hello\"</span>);</div></pre></td></tr></table></figure>\n<p>我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。</p>\n<p>用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 匿名函数 。</p>\n<p>这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p>\n<h4 id=\"函数传递是如何让HTTP服务器工作的\"><a href=\"#函数传递是如何让HTTP服务器工作的\" class=\"headerlink\" title=\"函数传递是如何让HTTP服务器工作的\"></a>函数传递是如何让HTTP服务器工作的</h4><p>带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。</p>\n<p>用这样的代码也可以达到同样的目的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>也许现在我们该问这个问题了：我们为什么要用这种方式呢？</p>\n<h4 id=\"基于事件驱动的回调\"><a href=\"#基于事件驱动的回调\" class=\"headerlink\" title=\"基于事件驱动的回调\"></a>基于事件驱动的回调</h4><p>这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。</p>\n<p>你也许会想花点时间读一下Felix Geisendörfer的大作<a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\">Understanding node.js</a>，它介绍了一些背景知识。</p>\n<p>这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。</p>\n<p>当我们使用 http.createServer 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。</p>\n<p>问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。</p>\n<p>写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。</p>\n<p>那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？</p>\n<p>嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。</p>\n<p>我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。</p>\n<p>我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。</p>\n<p>这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 回调 。</p>\n<p>至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。</p>\n<p>让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request received.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在 onRequest （我们的回调函数）触发的地方，我用 console.log 输出了一段文本。在HTTP服务器开始工作之后，也输出一段文本。</p>\n</blockquote>\n<p>当我们与往常一样，运行它node server.js时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问<a href=\"http://localhost:8888/\">http://localhost:8888/</a> ），“Request received.”这条消息就会在命令行中出现。</p>\n<p>这就是事件驱动的异步服务器端JavaScript和它的回调啦！</p>\n<blockquote>\n<p>（请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分浏览器都会在你访问 <a href=\"http://localhost:8888/\">http://localhost:8888/</a> 时尝试读取 <a href=\"http://localhost:8888/favicon.ico\">http://localhost:8888/favicon.ico</a> )</p>\n</blockquote>\n<h4 id=\"服务器是如何处理请求的\"><a href=\"#服务器是如何处理请求的\" class=\"headerlink\" title=\"服务器是如何处理请求的\"></a>服务器是如何处理请求的</h4><p>好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 onRequest() 的主体部分。</p>\n<p>当回调启动，我们的 onRequest() 函数被触发的时候，有两个参数被传入： request 和 response 。</p>\n<p>它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。</p>\n<p>所以我们的代码就是：当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World”。</p>\n<p>最后，我们调用 response.end() 完成响应。</p>\n<p>目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。</p>\n<p>服务端的模块放在哪里</p>\n<p>OK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 server.js 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 index.js 的文件去调用应用的其他模块（比如 server.js 中的HTTP服务器模块）来引导和启动应用。</p>\n<p>我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 index.js 主文件使用。</p>\n<p>也许你已经注意到，我们已经在代码中使用了模块了。像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">http.createServer(...);</div></pre></td></tr></table></figure>\n<p>Node.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。</p>\n<p>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。</p>\n<p>给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">foo.createServer(...);</div></pre></td></tr></table></figure>\n<p>很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？</p>\n<p>等我们把 server.js 变成一个真正的模块，你就能搞明白了。</p>\n<p>事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 导出 到请求这个模块的脚本。</p>\n<p>目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。</p>\n<p>我们把我们的服务器脚本放到一个叫做 start 的函数里，然后我们会导出这个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>这样，我们现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。</p>\n<p>创建 index.js 文件并写入以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.start();</div></pre></td></tr></table></figure>\n<p>正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。</p>\n<p>好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p>非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。</p>\n<p>我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。</p>\n<p>对于一个非常简单的应用来说，你可以直接在回调函数 onRequest() 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。</p>\n<p>处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做<strong>路由</strong>的模块吧。</p>\n<h4 id=\"如何来进行请求的“路由”\"><a href=\"#如何来进行请求的“路由”\" class=\"headerlink\" title=\"如何来进行请求的“路由”\"></a>如何来进行请求的“路由”</h4><p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。</p>\n<p>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。</p>\n<p>我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是<strong>url</strong>和<strong>querystring</strong>模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">                               url.parse(string).query</div><div class=\"line\">                                           |</div><div class=\"line\">           url.parse(string).pathname      |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                       |                   |</div><div class=\"line\">                     ------ -------------------</div><div class=\"line\">http:<span class=\"comment\">//localhost:8888/start?foo=bar&amp;hello=world</span></div><div class=\"line\">                                ---       -----</div><div class=\"line\">                                 |          |</div><div class=\"line\">                                 |          |</div><div class=\"line\">              querystring(string)[<span class=\"string\">\"foo\"</span>]    |</div><div class=\"line\">                                            |</div><div class=\"line\">                         querystring(string)[<span class=\"string\">\"hello\"</span>]</div></pre></td></tr></table></figure>\n<p>当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。</p>\n<p>现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。</p>\n<p>在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。</p>\n<p>现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。</p>\n<p>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读<a href=\"http://martinfowler.com/articles/injection.html\">Martin Fowlers关于依赖注入的大作</a>来作为背景知识）。</p>\n<p>首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>在这里，我们传递的函数依旧什么也没做。</p>\n<p>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">bash$ node index.js</div><div class=\"line\">Request <span class=\"keyword\">for</span> /foo received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /foo</div></pre></td></tr></table></figure>\n<p>（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。</p>\n<h4 id=\"行为驱动执行\"><a href=\"#行为驱动执行\" class=\"headerlink\" title=\"行为驱动执行\"></a>行为驱动执行</h4><p>请允许我再次脱离主题，在这里谈一谈函数式编程。</p>\n<p>将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。</p>\n<p>就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。</p>\n<pre><code>嗨那个叫路由的东西，能帮我把这个路由一下吗？\n</code></pre><p>但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要名词，你需要动词。</p>\n<p>理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。</p>\n<p>我是在读了Steve Yegge的大作<a href=\"http://steve-yegge.blogspot.jp/2006/03/execution-in-kingdom-of-nouns.html\">名词王国中的死刑</a>之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。</p>\n<h4 id=\"路由给真正的请求处理程序\"><a href=\"#路由给真正的请求处理程序\" class=\"headerlink\" title=\"路由给真正的请求处理程序\"></a>路由给真正的请求处理程序</h4><p>回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。</p>\n<p>当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理/start的“业务逻辑”就应该和处理/upload的不同。</p>\n<p>在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。</p>\n<p>我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。</p>\n<p>应用程序需要新的部件，因此加入新的模块 – 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。</p>\n<p>在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。</p>\n<p>这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。</p>\n<p>那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆if request == x then call handler y也使得系统丑陋不堪。</p>\n<p>仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎<strong>关联数组（associative array）</strong> 能完美胜任。</p>\n<p>不过结果有点令人失望，JavaScript没提供关联数组 – 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。</p>\n<p>在这方面，<a href=\"http://msdn.microsoft.com/en-us/magazine/cc163419.aspx\">http://msdn.microsoft.com/en-us/magazine/cc163419.aspx</a> 有一个不错的介绍，我在此摘录一段：</p>\n<blockquote>\n<p>在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 – 你可以把JavaScript的对象想象成一个键为字符串类型的字典。</p>\n</blockquote>\n<p>但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！</p>\n<p>好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。</p>\n<p>我们先将这个对象引入到主文件index.js中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);</div></pre></td></tr></table></figure>\n<p>虽然handle并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。</p>\n<p>正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为”/“的属性，对应requestHandlers.start即可，这样我们就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。</p>\n<p>在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(handle, pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。</p>\n<p>然后我们相应地在route.js文件中修改route()函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname]();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如handle<a href=\"\">pathname</a>;的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。</p>\n<p>有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问<a href=\"http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：\">http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">Server has started.</div><div class=\"line\">Request <span class=\"keyword\">for</span> /start received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /start</div><div class=\"line\">Request handler <span class=\"string\">'start'</span> was called.</div></pre></td></tr></table></figure>\n<p>并且在浏览器中打开<a href=\"http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：\">http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">Request <span class=\"keyword\">for</span> / received.</div><div class=\"line\">About to route a request <span class=\"keyword\">for</span> /</div><div class=\"line\">Request handler <span class=\"string\">'start'</span> was called.</div></pre></td></tr></table></figure>\n<h4 id=\"让请求处理程序作出响应\"><a href=\"#让请求处理程序作出响应\" class=\"headerlink\" title=\"让请求处理程序作出响应\"></a>让请求处理程序作出响应</h4><p>很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。</p>\n<p>这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们server.js文件中的onRequest函数。</p>\n<p>其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。</p>\n<h4 id=\"不好的实现方式\"><a href=\"#不好的实现方式\" class=\"headerlink\" title=\"不好的实现方式\"></a>不好的实现方式</h4><p>对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。</p>\n<p>这里我指的“直截了当的实现方式”意思是：让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。</p>\n<p>我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。</p>\n<p>让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Start\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> handle[pathname]();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"404 Not found\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。</p>\n<p>最后，我们需要对我们的server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> content = route(handle, pathname)</div><div class=\"line\">    response.write(content);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>如果我们运行重构后的应用，一切都会工作的很好：请求<a href=\"http://localhost:8888/start\">http://localhost:8888/start</a>, 浏览器会输出“Hello Start”，请求<a href=\"http://localhost:8888/upload\">http://localhost:8888/upload</a> 会输出“Hello Upload”,而请求<a href=\"http://localhost:8888/foo\">http://localhost:8888/foo</a> 会输出“404 Not found”。</p>\n<p>好，那么问题在哪里呢？简单的说就是： <strong>当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了</strong>。</p>\n<p>没理解？没关系，下面就来详细解释下。</p>\n<h4 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h4><p>正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。</p>\n<p>我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。</p>\n<p>这里，我们来修改下start请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。</p>\n<p>让我们将requestHandlers.js修改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">milliSeconds</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() &lt; startTime + milliSeconds);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  sleep(<span class=\"number\">10000</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Start\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。</p>\n<blockquote>\n<p>（当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）</p>\n</blockquote>\n<p>接下来就让我们来看看，我们的改动带来了哪些变化。</p>\n<p>如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入<a href=\"http://localhost:8888/start，\">http://localhost:8888/start，</a> 但是先不要打开它！</p>\n<p>在第二个浏览器窗口的地址栏中输入<a href=\"http://localhost:8888/upload，\">http://localhost:8888/upload，</a> 同样的，先不要打开它！</p>\n<p>接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。</p>\n<p>注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！</p>\n<p>这到底是为什么呢？原因就是start()包含了阻塞操作。形象的说就是“<strong>它阻塞了所有其他的处理工作</strong>”。</p>\n<p>这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。</p>\n<p>这句话的意思是说，<strong>Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理</strong> —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。</p>\n<p>然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。</p>\n<p>对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”</p>\n<p>（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——<a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\">理解node.js的事件轮询</a>。）</p>\n<p>接下来，我们会介绍一种<strong>错误</strong>的使用非阻塞操作的方式。</p>\n<p>和上次一样，我们通过修改我们的应用来暴露问题。</p>\n<p>这次我们还是拿start请求处理程序来“开刀”。将其修改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> content = <span class=\"string\">\"empty\"</span>;</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"ls -lah\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">    content = stdout;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> content;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello Upload\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>上述代码中，我们引入了一个新的Node.js模块，<strong>child_process</strong>。之所以用它，是为了实现一个既简单又实用的非阻塞操作：<strong>exec()</strong>。</p>\n<p>exec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。</p>\n<p>上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。</p>\n<p>和往常一样，我们启动服务器，然后访问“<a href=\"http://localhost:8888/start”\">http://localhost:8888/start”</a> 。</p>\n<p>之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？</p>\n<p>这个时候，你可能大致已经猜到了，exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。</p>\n<blockquote>\n<p>（如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。</p>\n</blockquote>\n<p>然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？</p>\n<p>好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。</p>\n<p>问题就在于，为了进行非阻塞工作，exec()使用了回调函数。</p>\n<p>在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">  content = stdout;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行 return content ；在这个时候，content仍然是“empty”，因为传递给exec()的回调函数还未执行到——因为exec()的操作是异步的。</p>\n<p>我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。</p>\n<p>为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。</p>\n<p>那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？</p>\n<p>好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。</p>\n<h4 id=\"以非阻塞操作进行请求响应\"><a href=\"#以非阻塞操作进行请求响应\" class=\"headerlink\" title=\"以非阻塞操作进行请求响应\"></a>以非阻塞操作进行请求响应</h4><p>我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。</p>\n<p>不过，用Node.js就有这样一种实现方案： <strong>函数传递</strong>。下面就让我们来具体看看如何实现。</p>\n<p>到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -&gt; 请求路由 -&gt; 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。</p>\n<p>现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用<strong>将服务器“传递”给内容</strong>的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。</p>\n<p>原理就是如此，接下来让我们来一步步实现这种方案。</p>\n<p>先从server.js开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(handle, pathname, response);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>相对此前从route()函数获取返回值的做法，这次我们将response对象作为第三个参数传递给route()函数，并且，我们将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。</p>\n<p>下面就来看看我们的router.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。</p>\n<p>如果没有对应的请求处理器处理，我们就直接返回“404”错误。</p>\n<p>最后，我们将requestHandler.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"ls -lah\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(stdout);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。</p>\n<p>start处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。</p>\n<p>这时再次我们启动应用（node index.js），一切都会工作的很好。</p>\n<p>如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  exec(<span class=\"string\">\"find /\"</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">10000</span>, <span class=\"attr\">maxBuffer</span>: <span class=\"number\">20000</span>*<span class=\"number\">1024</span> &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(stdout);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>这样一来，当请求<a href=\"http://localhost:8888/start\">http://localhost:8888/start</a> 的时候，会花10秒钟的时间才载入，而当请求<a href=\"http://localhost:8888/upload\">http://localhost:8888/upload</a> 的时候，会立即响应，纵然这个时候/start响应还在处理中。</p>\n<h4 id=\"更有用的场景\"><a href=\"#更有用的场景\" class=\"headerlink\" title=\"更有用的场景\"></a>更有用的场景</h4><p>到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。</p>\n<p>服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。</p>\n<p>好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。</p>\n<p>要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。</p>\n<p>第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。<br>第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它不在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。</p>\n<h4 id=\"处理POST请求\"><a href=\"#处理POST请求\" class=\"headerlink\" title=\"处理POST请求\"></a>处理POST请求</h4><p>考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p>\n<p>/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"Hello Upload\"</span>);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问<a href=\"http://localhost:8888/start\">http://localhost:8888/start</a> 就可以看到简单的表单了，要记得重启服务器哦！</p>\n<p>你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。</p>\n<p>余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。</p>\n<p>现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。</p>\n<p>这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。</p>\n<p>为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有<strong>data事件（表示新的小数据块到达了）</strong>以及<strong>end事件（表示所有的数据都已经接收完毕）</strong>。</p>\n<p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上<strong>注册监听器（listener）</strong> 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。</p>\n<p>如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// called when a new chunk of data was received</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// called when all chunks of data have been received</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。</p>\n<p>在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。</p>\n<p>因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。</p>\n<p>还等什么，马上来实现。先从server.js开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    request.setEncoding(<span class=\"string\">\"utf8\"</span>);</div><div class=\"line\"></div><div class=\"line\">    request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postDataChunk</span>) </span>&#123;</div><div class=\"line\">      postData += postDataChunk;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Received POST data chunk '\"</span>+</div><div class=\"line\">      postDataChunk + <span class=\"string\">\"'.\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      route(handle, pathname, response, postData);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给postData 变量，最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会<strong>当所有数据接收完毕后才触发，并且只触发一次</strong>。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。</p>\n<p>上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。</p>\n<p>我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。</p>\n<p>再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response, postData);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent: \"</span> + postData);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p>\n<p>我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。</p>\n<p>我们可以使用此前介绍过的querystring模块来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div></pre></td></tr></table></figure>\n<p>好了，以上就是关于处理POST数据的全部内容。</p>\n<h4 id=\"处理文件上传\"><a href=\"#处理文件上传\" class=\"headerlink\" title=\"处理文件上传\"></a>处理文件上传</h4><p>最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。</p>\n<p>回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。</p>\n<p>这里我们要用到的外部模块是Felix Geisendörfer开发的<strong>node-formidable模块</strong>。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。</p>\n<p>使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install formidable</div></pre></td></tr></table></figure>\n<p>如果终端输出如下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm info build Success: formidable@<span class=\"number\">1.0</span><span class=\"number\">.9</span></div><div class=\"line\">npm ok</div></pre></td></tr></table></figure>\n<p>就说明模块已经安装成功了。</p>\n<p>现在我们就可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</div></pre></td></tr></table></figure>\n<p>这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。</p>\n<p>node-formidable官方的例子展示了这两部分是如何融合在一起工作的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>),</div><div class=\"line\">    http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>),</div><div class=\"line\">    util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// parse a file upload</span></div><div class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</div><div class=\"line\">    form.parse(req, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fields, files</span>) </span>&#123;</div><div class=\"line\">      res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'content-type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">      res.write(<span class=\"string\">'received upload:\\n\\n'</span>);</div><div class=\"line\">      res.end(util.inspect(&#123;<span class=\"attr\">fields</span>: fields, <span class=\"attr\">files</span>: files&#125;));</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// show a file upload form</span></div><div class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'content-type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">  res.end(</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"text\" name=\"title\"&gt;&lt;br&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\" multiple=\"multiple\"&gt;&lt;br&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div></pre></td></tr></table></figure>\n<p>如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\">received upload:</div><div class=\"line\"></div><div class=\"line\">&#123; <span class=\"attr\">fields</span>: &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Hello World'</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">files</span>:</div><div class=\"line\">   &#123; <span class=\"attr\">upload</span>:</div><div class=\"line\">      &#123; <span class=\"attr\">size</span>: <span class=\"number\">1558</span>,</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/tmp/1c747974a27a6292743669e91f29350b'</span>,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'us-flag.png'</span>,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'image/png'</span>,</div><div class=\"line\">        <span class=\"attr\">lastModifiedDate</span>: Tue, <span class=\"number\">21</span> Jun <span class=\"number\">2011</span> <span class=\"number\">07</span>:<span class=\"number\">02</span>:<span class=\"number\">41</span> GMT,</div><div class=\"line\">        <span class=\"attr\">_writeStream</span>: [<span class=\"built_in\">Object</span>],</div><div class=\"line\">        <span class=\"attr\">length</span>: [Getter],</div><div class=\"line\">        <span class=\"attr\">filename</span>: [Getter],</div><div class=\"line\">        <span class=\"attr\">mime</span>: [Getter] &#125; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。</p>\n<p>我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？</p>\n<p>显然，我们需要将该文件读取到我们的服务器中，使用一个叫<strong>fs</strong>的模块。</p>\n<p>我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。</p>\n<p>将requestHandlers.js修改为如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</div><div class=\"line\">    <span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;textarea name=\"text\" rows=\"20\" cols=\"60\"&gt;&lt;/textarea&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Submit text\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requestHandlers\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handle = &#123;&#125;</div><div class=\"line\">handle[<span class=\"string\">\"/\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/start\"</span>] = requestHandlers.start;</div><div class=\"line\">handle[<span class=\"string\">\"/upload\"</span>] = requestHandlers.upload;</div><div class=\"line\">handle[<span class=\"string\">\"/show\"</span>] = requestHandlers.show;</div><div class=\"line\"></div><div class=\"line\">server.start(router.route, handle);</div></pre></td></tr></table></figure>\n<p>重启服务器之后，通过访问<a href=\"http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。\">http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。</a></p>\n<p>好，最后我们要的就是：</p>\n<ul>\n<li>在/start表单中添加一个文件上传元素</li>\n<li>将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png</li>\n<li>将上传的图片内嵌到/uploadURL输出的HTML中</li>\n</ul>\n<p>第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</div><div class=\"line\">    <span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">  response.write(<span class=\"string\">\"You've sent the text: \"</span>+</div><div class=\"line\">  querystring.parse(postData).text);</div><div class=\"line\">  response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。</p>\n<p>但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。</p>\n<p>到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）</p>\n<p>我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    route(handle, pathname, response, request);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    handle[pathname](response, request);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"No request handler found for \"</span> + pathname);</div><div class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"404 Not found\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure>\n<p>现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。</p>\n<p>这里采用<strong>fs.renameSync(path1,path2)来实现</strong>。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。</p>\n<p>接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>),</div><div class=\"line\">    fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>),</div><div class=\"line\">    formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'start' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; '</span>+</div><div class=\"line\">    <span class=\"string\">'charset=UTF-8\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/head&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</div><div class=\"line\">    <span class=\"string\">'method=\"post\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"file\" name=\"upload\" multiple=\"multiple\"&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/form&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/body&gt;'</span>+</div><div class=\"line\">    <span class=\"string\">'&lt;/html&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(body);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'upload' was called.\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"about to parse\"</span>);</div><div class=\"line\">  form.parse(request, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, fields, files</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"parsing done\"</span>);</div><div class=\"line\">    fs.renameSync(files.upload.path, <span class=\"string\">\"/tmp/test.png\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"received image:&lt;br/&gt;\"</span>);</div><div class=\"line\">    response.write(<span class=\"string\">\"&lt;img src='/show' /&gt;\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request handler 'show' was called.\"</span>);</div><div class=\"line\">  fs.readFile(<span class=\"string\">\"/tmp/test.png\"</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, file</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">      response.write(error + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</div><div class=\"line\">      response.write(file, <span class=\"string\">\"binary\"</span>);</div><div class=\"line\">      response.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div><div class=\"line\">exports.upload = upload;</div><div class=\"line\">exports.show = show;</div></pre></td></tr></table></figure>\n<p>好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。</p>\n<h3 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h3><p>恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。</p>\n<p>当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。</p>\n<p>但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。</p>\n<hr>\n<div style=\"width:690.45px\"><div style=\"display:inline-block;width:110px\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\"><img style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/2.5/cn/88x31.png\" /></a></div><div style=\"display:inline-block;width:580px;\"><br>    本文采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/2.5/cn/\">知识共享署名 2.5 中国大陆许可协议</a>进行许可，欢迎转载，但转载请注明来自<a href=\"https://agehua.github.io/\">Agehua’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。</div></div>\n\n<p>本文链接：<a href=\"http://agehua.github.io/2016/12/03/nodejs-learning-getting-started/\">http://agehua.github.io/2016/12/03/nodejs-learning-getting-started/</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaw7ebvs0009d6yktahbspes","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebw9000ed6yketuiptvq"},{"post_id":"cjaw7ebuy0002d6yk1k3u5h9m","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebwj000id6yk9c6z1ng6"},{"post_id":"cjaw7ebvw000ad6yk14yre00n","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebwo000ld6ykefx9bqlb"},{"post_id":"cjaw7ebw2000dd6yklg3an2hg","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebwx000pd6yk1se3i86f"},{"post_id":"cjaw7ebv50004d6ykpui4ccos","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebx0000rd6yk5ugnhrb6"},{"post_id":"cjaw7ebwb000fd6ykr7v031ya","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebx8000td6ykvx3iasmr"},{"post_id":"cjaw7ebwl000jd6ykedf1baiw","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebxb000wd6ykfrzm5efd"},{"post_id":"cjaw7ebvo0008d6yk6b8vzqxl","category_id":"cjaw7ebwd000gd6yktaurin3d","_id":"cjaw7ebxe000yd6ykxhuida6f"},{"post_id":"cjaw7ebwo000md6ykzt5r5bpr","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebxh0012d6ykm2qtegzd"},{"post_id":"cjaw7ebwx000qd6ykm6a060j6","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebxn0015d6ykgkb1t4mm"},{"post_id":"cjaw7ebx1000sd6ykxpy1fxsm","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebxq0019d6ykj9hxnjf6"},{"post_id":"cjaw7ebx8000vd6yk88dz51lz","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebxx001dd6ykvq6idawx"},{"post_id":"cjaw7ebxf000zd6ykcgubw7g7","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7eby6001hd6ykc114rqmh"},{"post_id":"cjaw7ebxo0017d6yk943ra445","category_id":"cjaw7ebxh0011d6ykvpmfiasa","_id":"cjaw7ebyd001kd6ykl0h1bmpc"},{"post_id":"cjaw7ebxc000xd6ykek6dssmh","category_id":"cjaw7ebxh0011d6ykvpmfiasa","_id":"cjaw7ebyk001nd6ykdf9tv46k"},{"post_id":"cjaw7ebxr001bd6yk8m389gx8","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebyp001rd6yklbvfct46"},{"post_id":"cjaw7ebxy001fd6ykge65rgq0","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebyv001ud6ykifnuh7ip"},{"post_id":"cjaw7ebxi0014d6ykplzczbw9","category_id":"cjaw7ebxh0011d6ykvpmfiasa","_id":"cjaw7ebz2001xd6ykv1viz1ff"},{"post_id":"cjaw7eby8001id6ykckgrycuh","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebz80020d6ykwms704zj"},{"post_id":"cjaw7ebyd001ld6ykts3mjggy","category_id":"cjaw7ebxh0011d6ykvpmfiasa","_id":"cjaw7ebzb0024d6ykzl151sb0"},{"post_id":"cjaw7ebym001pd6ykdeokmvms","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebzg0027d6ykvj7udaaq"},{"post_id":"cjaw7ebys001sd6ykew0aco4p","category_id":"cjaw7ebxh0011d6ykvpmfiasa","_id":"cjaw7ebzl002bd6yks7i0haca"},{"post_id":"cjaw7ebyx001vd6yk1k19obak","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebzs002ed6yk1g9tmv8u"},{"post_id":"cjaw7ebz3001yd6ykf5kdyo3u","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ebzv002hd6ykth99swxq"},{"post_id":"cjaw7ebz80021d6ykyugil0ez","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec00002ld6ykmod9feg7"},{"post_id":"cjaw7ebzc0025d6ykvhddwd65","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec03002od6ykomhrnxx3"},{"post_id":"cjaw7ebzh0028d6ykai5f5jkl","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec08002rd6ykeqs558x6"},{"post_id":"cjaw7ebzq002cd6ykpfj7p8na","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0e002td6ykxqgv09w7"},{"post_id":"cjaw7ebzt002fd6yknh6ho6jc","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0i002wd6ykvnx6alru"},{"post_id":"cjaw7ec00002md6ykaseqnr5g","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0l002zd6yk70faq4ws"},{"post_id":"cjaw7ec03002pd6ykce904fx8","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0o0033d6ykbfx98pcp"},{"post_id":"cjaw7ec08002sd6ykjtbf1egv","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0q0036d6ykysmnq88x"},{"post_id":"cjaw7ebzv002jd6yk8xvoyg3x","category_id":"cjaw7ec03002nd6ykv1w4bk0x","_id":"cjaw7ec0s0039d6ykkic9qa8f"},{"post_id":"cjaw7ec0e002ud6ykymgkb06s","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec0x003dd6ykjehh5juz"},{"post_id":"cjaw7ec0i002xd6yke6k9n32i","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec11003gd6yk2p8gdxlo"},{"post_id":"cjaw7ec0m0030d6yk4pl8drox","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec14003jd6yk1iwtrrj0"},{"post_id":"cjaw7ec0o0034d6yknst949br","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec16003md6ykmcfosz97"},{"post_id":"cjaw7ec0q0037d6ykxkej7qv3","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec1f003qd6yklmope15c"},{"post_id":"cjaw7ec0t003bd6yk7054hrta","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec1j003sd6ykjat2pmr7"},{"post_id":"cjaw7ec0x003ed6yksf73tcd7","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec1l003vd6ykomfo0esg"},{"post_id":"cjaw7ec11003hd6yk3tz2q2a5","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec1o003yd6ykp31dnxht"},{"post_id":"cjaw7ec14003ld6ykrwk00nbd","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec1r0042d6ykpyf0wdny"},{"post_id":"cjaw7ec18003od6ykbkgy2aq7","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec210045d6yks0stncrm"},{"post_id":"cjaw7ec1f003rd6ykwzl0gdfa","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec240048d6ykhw9wsoz9"},{"post_id":"cjaw7ec1j003td6ykynv0l9r3","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec27004bd6yk57cpkrrx"},{"post_id":"cjaw7ec1m003wd6ykyl2lev0o","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec28004dd6ykbzcauefz"},{"post_id":"cjaw7ec1o003zd6ykp21mdh1s","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec2a004gd6ykp6vjr7av"},{"post_id":"cjaw7ec1s0043d6ykty4o8w4q","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec2b004id6yksmxcvl7a"},{"post_id":"cjaw7ec220046d6yklxnf7lh1","category_id":"cjaw7ebvd0006d6yklfnfvm1k","_id":"cjaw7ec2c004ld6ykl1vumnp9"},{"post_id":"cjaw7ec6f0082d6ykjteo5mm7","category_id":"cjaw7ebwd000gd6yktaurin3d","_id":"cjaw7ec6l0084d6ykkmo5v22u"}],"PostTag":[{"post_id":"cjaw7ebuy0002d6yk1k3u5h9m","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ebwn000kd6yk7omku0su"},{"post_id":"cjaw7ebuy0002d6yk1k3u5h9m","tag_id":"cjaw7ebvy000cd6ykgqqr4pyh","_id":"cjaw7ebws000nd6ykefae7j43"},{"post_id":"cjaw7ebv50004d6ykpui4ccos","tag_id":"cjaw7ebwi000hd6yk4n9vlvdn","_id":"cjaw7ebxh0013d6ykp1d4s7i0"},{"post_id":"cjaw7ebv50004d6ykpui4ccos","tag_id":"cjaw7ebwv000od6yktjqime0y","_id":"cjaw7ebxn0016d6yk11n7ag8i"},{"post_id":"cjaw7ebv50004d6ykpui4ccos","tag_id":"cjaw7ebx8000ud6ykcn66l3xp","_id":"cjaw7ebxr001ad6ykwytapb9y"},{"post_id":"cjaw7ebvo0008d6yk6b8vzqxl","tag_id":"cjaw7ebxg0010d6yk7z74x9ku","_id":"cjaw7ebxy001ed6ykkw92bfbx"},{"post_id":"cjaw7ebvs0009d6yktahbspes","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ebyc001jd6yk83wao0fc"},{"post_id":"cjaw7ebvs0009d6yktahbspes","tag_id":"cjaw7ebxq0018d6ykw61qjgld","_id":"cjaw7ebyi001md6ykyfgi5hic"},{"post_id":"cjaw7ebvw000ad6yk14yre00n","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ebyo001qd6ykzynuva1a"},{"post_id":"cjaw7ebvw000ad6yk14yre00n","tag_id":"cjaw7eby6001gd6ykr49jcqsf","_id":"cjaw7ebyu001td6ykjav4ghmw"},{"post_id":"cjaw7ebyx001vd6yk1k19obak","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ebz8001zd6ykxj1xo6lv"},{"post_id":"cjaw7ebyx001vd6yk1k19obak","tag_id":"cjaw7ebx8000ud6ykcn66l3xp","_id":"cjaw7ebzb0023d6ykhuhqibgh"},{"post_id":"cjaw7ebw2000dd6yklg3an2hg","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ebzg0026d6yk7xc8x48m"},{"post_id":"cjaw7ebw2000dd6yklg3an2hg","tag_id":"cjaw7ebyk001od6ykmxxplukm","_id":"cjaw7ebzl002ad6yk49tsxtwp"},{"post_id":"cjaw7ebw2000dd6yklg3an2hg","tag_id":"cjaw7ebz0001wd6ykjpoylt26","_id":"cjaw7ebzs002dd6yk2swnswb6"},{"post_id":"cjaw7ebwb000fd6ykr7v031ya","tag_id":"cjaw7ebza0022d6ykr1s557ga","_id":"cjaw7ebzv002gd6ykrdb1r9rd"},{"post_id":"cjaw7ebwb000fd6ykr7v031ya","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec00002kd6ykisld7yi7"},{"post_id":"cjaw7ebwl000jd6ykedf1baiw","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec0l002yd6ykhkdoc1tz"},{"post_id":"cjaw7ebwl000jd6ykedf1baiw","tag_id":"cjaw7ebzl0029d6ykzeupa9fb","_id":"cjaw7ec0n0031d6yke45rht7d"},{"post_id":"cjaw7ebwl000jd6ykedf1baiw","tag_id":"cjaw7ebzv002id6ykt0goqj7i","_id":"cjaw7ec0p0035d6ykp3ijrr6v"},{"post_id":"cjaw7ebwl000jd6ykedf1baiw","tag_id":"cjaw7ec06002qd6yky6ot4wxj","_id":"cjaw7ec0s0038d6ykoos1qbsz"},{"post_id":"cjaw7ebwo000md6ykzt5r5bpr","tag_id":"cjaw7ebwi000hd6yk4n9vlvdn","_id":"cjaw7ec0w003cd6ykuclmwhzo"},{"post_id":"cjaw7ebwo000md6ykzt5r5bpr","tag_id":"cjaw7ec0h002vd6yk8pfu6rgl","_id":"cjaw7ec0z003fd6yk04okazs4"},{"post_id":"cjaw7ebwx000qd6ykm6a060j6","tag_id":"cjaw7ec0n0032d6ykqqyuhwyk","_id":"cjaw7ec14003kd6ykekv4o407"},{"post_id":"cjaw7ebwx000qd6ykm6a060j6","tag_id":"cjaw7ec0s003ad6yk0u69bn18","_id":"cjaw7ec17003nd6ykoi6ces7a"},{"post_id":"cjaw7ebx1000sd6ykxpy1fxsm","tag_id":"cjaw7ec0n0032d6ykqqyuhwyk","_id":"cjaw7ec1n003xd6ykjmsiqvo9"},{"post_id":"cjaw7ebx1000sd6ykxpy1fxsm","tag_id":"cjaw7ec1e003pd6yk3re6et9f","_id":"cjaw7ec1q0040d6yk1g075os5"},{"post_id":"cjaw7ec1j003td6ykynv0l9r3","tag_id":"cjaw7ebx8000ud6ykcn66l3xp","_id":"cjaw7ec1v0044d6ykxu3mm26t"},{"post_id":"cjaw7ec1j003td6ykynv0l9r3","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec230047d6ykj33f427d"},{"post_id":"cjaw7ebx8000vd6yk88dz51lz","tag_id":"cjaw7ec1l003ud6ykpuscx4e4","_id":"cjaw7ec26004ad6ykby3zfhm3"},{"post_id":"cjaw7ebxc000xd6ykek6dssmh","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec27004cd6yk9s7sd99c"},{"post_id":"cjaw7ebxc000xd6ykek6dssmh","tag_id":"cjaw7ec1r0041d6ykp80btfe0","_id":"cjaw7ec29004fd6ykub8nyinx"},{"post_id":"cjaw7ebxf000zd6ykcgubw7g7","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec2a004hd6yk6swm120t"},{"post_id":"cjaw7ebxf000zd6ykcgubw7g7","tag_id":"cjaw7ec240049d6ykmuy9wg0o","_id":"cjaw7ec2c004jd6ykor2ue5tk"},{"post_id":"cjaw7ebxi0014d6ykplzczbw9","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec2e004md6yk5u12fn9k"},{"post_id":"cjaw7ebxi0014d6ykplzczbw9","tag_id":"cjaw7ec28004ed6yke0ajq1pv","_id":"cjaw7ec2e004nd6yk6hag1kcm"},{"post_id":"cjaw7ebxo0017d6yk943ra445","tag_id":"cjaw7ec2c004kd6yk04osfafc","_id":"cjaw7ec2l004qd6ykuvh09qp3"},{"post_id":"cjaw7ebxo0017d6yk943ra445","tag_id":"cjaw7ec2f004od6ykml7j3phw","_id":"cjaw7ec2l004rd6ykrmrtsi3g"},{"post_id":"cjaw7ebxr001bd6yk8m389gx8","tag_id":"cjaw7ec2j004pd6ykyvd89lt8","_id":"cjaw7ec2o004vd6ykwufodu82"},{"post_id":"cjaw7ebxr001bd6yk8m389gx8","tag_id":"cjaw7ec2m004sd6ykuoa2evek","_id":"cjaw7ec2p004wd6yk7htiom4x"},{"post_id":"cjaw7ebxr001bd6yk8m389gx8","tag_id":"cjaw7ec2n004td6ykzhh8nml2","_id":"cjaw7ec2q004yd6yk1wpe799c"},{"post_id":"cjaw7ebxy001fd6ykge65rgq0","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec2q004zd6yk0cfrqc0j"},{"post_id":"cjaw7ebxy001fd6ykge65rgq0","tag_id":"cjaw7ec2o004ud6yk45thvwed","_id":"cjaw7ec2q0051d6ykmboz5cl1"},{"post_id":"cjaw7eby8001id6ykckgrycuh","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec2r0052d6ykpa281s5t"},{"post_id":"cjaw7eby8001id6ykckgrycuh","tag_id":"cjaw7ec2p004xd6yk4byzr49h","_id":"cjaw7ec2r0054d6ykztuljm44"},{"post_id":"cjaw7ebyd001ld6ykts3mjggy","tag_id":"cjaw7ec0n0032d6ykqqyuhwyk","_id":"cjaw7ec2u0056d6ykoux3vzmb"},{"post_id":"cjaw7ebyd001ld6ykts3mjggy","tag_id":"cjaw7ec2r0053d6ykb5l0vsbu","_id":"cjaw7ec2u0057d6yk2sphlf98"},{"post_id":"cjaw7ebym001pd6ykdeokmvms","tag_id":"cjaw7ec2s0055d6ykkwpx9aki","_id":"cjaw7ec2v0059d6ykkg5ws0jc"},{"post_id":"cjaw7ebys001sd6ykew0aco4p","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec2w005bd6yki594m7wt"},{"post_id":"cjaw7ebys001sd6ykew0aco4p","tag_id":"cjaw7ec2u0058d6ykv7odinp3","_id":"cjaw7ec2w005cd6yk0w13k58s"},{"post_id":"cjaw7ebz3001yd6ykf5kdyo3u","tag_id":"cjaw7ec2v005ad6ykhut2ws9b","_id":"cjaw7ec2x005ed6yko99jnen8"},{"post_id":"cjaw7ebz80021d6ykyugil0ez","tag_id":"cjaw7ec2s0055d6ykkwpx9aki","_id":"cjaw7ec2y005gd6yk8p964le8"},{"post_id":"cjaw7ebzc0025d6ykvhddwd65","tag_id":"cjaw7ebwi000hd6yk4n9vlvdn","_id":"cjaw7ec2z005id6ykhd4qfo2e"},{"post_id":"cjaw7ebzc0025d6ykvhddwd65","tag_id":"cjaw7ec2x005fd6yk8fs5m0w4","_id":"cjaw7ec2z005jd6ykod2nwye5"},{"post_id":"cjaw7ebzh0028d6ykai5f5jkl","tag_id":"cjaw7ec2v005ad6ykhut2ws9b","_id":"cjaw7ec31005md6ykbuz205wp"},{"post_id":"cjaw7ebzh0028d6ykai5f5jkl","tag_id":"cjaw7ec2z005kd6ykgpr71ucq","_id":"cjaw7ec31005nd6yk4zn86wy2"},{"post_id":"cjaw7ebzq002cd6ykpfj7p8na","tag_id":"cjaw7ec2v005ad6ykhut2ws9b","_id":"cjaw7ec33005qd6ykv3mbbdeq"},{"post_id":"cjaw7ebzq002cd6ykpfj7p8na","tag_id":"cjaw7ec31005od6ykqi0lvyor","_id":"cjaw7ec33005rd6ykgl8u3bmt"},{"post_id":"cjaw7ebzt002fd6yknh6ho6jc","tag_id":"cjaw7ebwi000hd6yk4n9vlvdn","_id":"cjaw7ec34005td6yktq1gmbww"},{"post_id":"cjaw7ebzt002fd6yknh6ho6jc","tag_id":"cjaw7ec2j004pd6ykyvd89lt8","_id":"cjaw7ec34005ud6ykb6vsusow"},{"post_id":"cjaw7ebzv002jd6yk8xvoyg3x","tag_id":"cjaw7ec33005sd6ykz5awl9cx","_id":"cjaw7ec35005wd6yko07aetmk"},{"post_id":"cjaw7ec00002md6ykaseqnr5g","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec36005yd6yke39d9y76"},{"post_id":"cjaw7ec00002md6ykaseqnr5g","tag_id":"cjaw7ec35005vd6ykfteuswyn","_id":"cjaw7ec36005zd6yk56rn11yz"},{"post_id":"cjaw7ec03002pd6ykce904fx8","tag_id":"cjaw7ec36005xd6yk5v7tcqym","_id":"cjaw7ec3a0063d6yks87r6t7c"},{"post_id":"cjaw7ec03002pd6ykce904fx8","tag_id":"cjaw7ec360060d6yktotro495","_id":"cjaw7ec3a0064d6ykso7g0iue"},{"post_id":"cjaw7ec03002pd6ykce904fx8","tag_id":"cjaw7ec370061d6ykekzgbhq5","_id":"cjaw7ec3c0066d6ykja0abqxb"},{"post_id":"cjaw7ec08002sd6ykjtbf1egv","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec3c0067d6ykkptvxs98"},{"post_id":"cjaw7ec08002sd6ykjtbf1egv","tag_id":"cjaw7ec390062d6ykjgx36214","_id":"cjaw7ec3d0069d6yk0qxz1m38"},{"post_id":"cjaw7ec0e002ud6ykymgkb06s","tag_id":"cjaw7ec3a0065d6yks7jdo7as","_id":"cjaw7ec3f006bd6ykzhidiv2g"},{"post_id":"cjaw7ec0e002ud6ykymgkb06s","tag_id":"cjaw7ec36005xd6yk5v7tcqym","_id":"cjaw7ec3f006cd6yklqoe0f4e"},{"post_id":"cjaw7ec0i002xd6yke6k9n32i","tag_id":"cjaw7ec3e006ad6yk62y41dlb","_id":"cjaw7ec3g006ed6yk74okyarz"},{"post_id":"cjaw7ec0m0030d6yk4pl8drox","tag_id":"cjaw7ec3f006dd6ykgp9r3emu","_id":"cjaw7ec3h006hd6ykw46q8vpb"},{"post_id":"cjaw7ec0m0030d6yk4pl8drox","tag_id":"cjaw7ec3g006fd6ykok77qxbv","_id":"cjaw7ec3h006id6ykq9yk30u3"},{"post_id":"cjaw7ec0o0034d6yknst949br","tag_id":"cjaw7ec3h006gd6ykt9t6r9rs","_id":"cjaw7ec3i006kd6ykxts8svo3"},{"post_id":"cjaw7ec0o0034d6yknst949br","tag_id":"cjaw7ebvm0007d6ykooqxf565","_id":"cjaw7ec3j006ld6ykdzd5b2cr"},{"post_id":"cjaw7ec0q0037d6ykxkej7qv3","tag_id":"cjaw7ec3i006jd6ykreabnd5a","_id":"cjaw7ec3z006pd6yke3i4fwue"},{"post_id":"cjaw7ec0q0037d6ykxkej7qv3","tag_id":"cjaw7ec3j006md6ykghigj8xh","_id":"cjaw7ec3z006qd6ykkqo8ffr7"},{"post_id":"cjaw7ec0q0037d6ykxkej7qv3","tag_id":"cjaw7ec3x006nd6ykf19b8gk1","_id":"cjaw7ec40006sd6yk2h0wiz8g"},{"post_id":"cjaw7ec0t003bd6yk7054hrta","tag_id":"cjaw7ec3z006od6ykk92k8oad","_id":"cjaw7ec41006vd6ykfe0ysmjt"},{"post_id":"cjaw7ec0t003bd6yk7054hrta","tag_id":"cjaw7ec3z006rd6ykaq5tzn1l","_id":"cjaw7ec42006wd6yk4u6euyez"},{"post_id":"cjaw7ec0t003bd6yk7054hrta","tag_id":"cjaw7ec40006td6yk8lngoewz","_id":"cjaw7ec42006yd6yksvh36rsr"},{"post_id":"cjaw7ec0x003ed6yksf73tcd7","tag_id":"cjaw7ec41006ud6yk963jl0nv","_id":"cjaw7ec430070d6ykoc4nneax"},{"post_id":"cjaw7ec0x003ed6yksf73tcd7","tag_id":"cjaw7ec42006xd6ykk76l5vn1","_id":"cjaw7ec430071d6ykcwue3kkp"},{"post_id":"cjaw7ec11003hd6yk3tz2q2a5","tag_id":"cjaw7ec43006zd6yk55h1qd94","_id":"cjaw7ec460074d6ykc8kmwxuu"},{"post_id":"cjaw7ec11003hd6yk3tz2q2a5","tag_id":"cjaw7ec40006td6yk8lngoewz","_id":"cjaw7ec460075d6yk1idcnswv"},{"post_id":"cjaw7ec14003ld6ykrwk00nbd","tag_id":"cjaw7ec440073d6ykmfqdcdj0","_id":"cjaw7ec480078d6yk0ik7xie3"},{"post_id":"cjaw7ec14003ld6ykrwk00nbd","tag_id":"cjaw7ec470076d6yk7esikqbi","_id":"cjaw7ec480079d6yku9vspq4v"},{"post_id":"cjaw7ec18003od6ykbkgy2aq7","tag_id":"cjaw7ec43006zd6yk55h1qd94","_id":"cjaw7ec49007cd6yk4qtxug2c"},{"post_id":"cjaw7ec18003od6ykbkgy2aq7","tag_id":"cjaw7ec40006td6yk8lngoewz","_id":"cjaw7ec4a007dd6yknnrwxexx"},{"post_id":"cjaw7ec1f003rd6ykwzl0gdfa","tag_id":"cjaw7ec49007bd6ykz6ff01q4","_id":"cjaw7ec4d007hd6ykkv82j8m4"},{"post_id":"cjaw7ec1f003rd6ykwzl0gdfa","tag_id":"cjaw7ec440073d6ykmfqdcdj0","_id":"cjaw7ec4e007id6yk9dmsj3l8"},{"post_id":"cjaw7ec1f003rd6ykwzl0gdfa","tag_id":"cjaw7ec40006td6yk8lngoewz","_id":"cjaw7ec4e007kd6ykd11oqq2q"},{"post_id":"cjaw7ec1m003wd6ykyl2lev0o","tag_id":"cjaw7ec4d007gd6yk8ku7v34l","_id":"cjaw7ec4g007md6ykjyrrxniq"},{"post_id":"cjaw7ec1m003wd6ykyl2lev0o","tag_id":"cjaw7ec4e007jd6ykhfprfa3e","_id":"cjaw7ec4g007nd6yk8w91peam"},{"post_id":"cjaw7ec1m003wd6ykyl2lev0o","tag_id":"cjaw7ebz0001wd6ykjpoylt26","_id":"cjaw7ec4h007pd6yka0my3hls"},{"post_id":"cjaw7ec1o003zd6ykp21mdh1s","tag_id":"cjaw7ec4d007gd6yk8ku7v34l","_id":"cjaw7ec4j007rd6ykwdzf46xk"},{"post_id":"cjaw7ec1o003zd6ykp21mdh1s","tag_id":"cjaw7ec4e007jd6ykhfprfa3e","_id":"cjaw7ec4j007sd6ykja8ji11f"},{"post_id":"cjaw7ec1o003zd6ykp21mdh1s","tag_id":"cjaw7ebz0001wd6ykjpoylt26","_id":"cjaw7ec4l007ud6ykt0dmu16l"},{"post_id":"cjaw7ec1s0043d6ykty4o8w4q","tag_id":"cjaw7ec4h007qd6ykbr0xdap7","_id":"cjaw7ec4n007xd6ykum2auvl8"},{"post_id":"cjaw7ec1s0043d6ykty4o8w4q","tag_id":"cjaw7ec4j007td6ykjluh5ug6","_id":"cjaw7ec4o007yd6ykwkhnyj75"},{"post_id":"cjaw7ec1s0043d6ykty4o8w4q","tag_id":"cjaw7ec4l007vd6yk7vcp08jz","_id":"cjaw7ec4o007zd6yk03rnxwk4"},{"post_id":"cjaw7ec220046d6yklxnf7lh1","tag_id":"cjaw7ec4l007vd6yk7vcp08jz","_id":"cjaw7ec4o0080d6ykov9qh6df"},{"post_id":"cjaw7ec220046d6yklxnf7lh1","tag_id":"cjaw7ebz0001wd6ykjpoylt26","_id":"cjaw7ec4p0081d6ykpv645ql6"},{"post_id":"cjaw7ec6f0082d6ykjteo5mm7","tag_id":"cjaw7ebxg0010d6yk7z74x9ku","_id":"cjaw7ec6m0085d6ykh60gjf79"},{"post_id":"cjaw7ec6f0082d6ykjteo5mm7","tag_id":"cjaw7ec6k0083d6yk7xgku2ve","_id":"cjaw7ec6n0086d6yk5wwa8o50"}],"Tag":[{"name":"ANDROID","_id":"cjaw7ebvm0007d6ykooqxf565"},{"name":"Open souces","_id":"cjaw7ebvy000cd6ykgqqr4pyh"},{"name":"Java","_id":"cjaw7ebwi000hd6yk4n9vlvdn"},{"name":"multi-thread","_id":"cjaw7ebwv000od6yktjqime0y"},{"name":"Interview Knowledge","_id":"cjaw7ebx8000ud6ykcn66l3xp"},{"name":"read","_id":"cjaw7ebxg0010d6yk7z74x9ku"},{"name":"google map","_id":"cjaw7ebxq0018d6ykw61qjgld"},{"name":"third-party signin","_id":"cjaw7eby6001gd6ykr49jcqsf"},{"name":"new features","_id":"cjaw7ebyk001od6ykmxxplukm"},{"name":"Basic Knowledge","_id":"cjaw7ebz0001wd6ykjpoylt26"},{"name":"reading","_id":"cjaw7ebza0022d6ykr1s557ga"},{"name":"GCM","_id":"cjaw7ebzl0029d6ykzeupa9fb"},{"name":"azure","_id":"cjaw7ebzv002id6ykt0goqj7i"},{"name":"notification","_id":"cjaw7ec06002qd6yky6ot4wxj"},{"name":"byte[]","_id":"cjaw7ec0h002vd6yk8pfu6rgl"},{"name":"JNI","_id":"cjaw7ec0n0032d6ykqqyuhwyk"},{"name":"AES","_id":"cjaw7ec0s003ad6yk0u69bn18"},{"name":"android source code","_id":"cjaw7ec1e003pd6yk3re6et9f"},{"name":"gson","_id":"cjaw7ec1l003ud6ykpuscx4e4"},{"name":"qiniu","_id":"cjaw7ec1r0041d6ykp80btfe0"},{"name":"webview","_id":"cjaw7ec240049d6ykmuy9wg0o"},{"name":"LocationListener","_id":"cjaw7ec28004ed6yke0ajq1pv"},{"name":"RxJava","_id":"cjaw7ec2c004kd6yk04osfafc"},{"name":"RxAndroid","_id":"cjaw7ec2f004od6ykml7j3phw"},{"name":"ThreadLocal","_id":"cjaw7ec2j004pd6ykyvd89lt8"},{"name":"HandlerThread","_id":"cjaw7ec2m004sd6ykuoa2evek"},{"name":"Looper","_id":"cjaw7ec2n004td6ykzhh8nml2"},{"name":"remove admob","_id":"cjaw7ec2o004ud6yk45thvwed"},{"name":"Singleton","_id":"cjaw7ec2p004xd6yk4byzr49h"},{"name":"publickey","_id":"cjaw7ec2r0053d6ykb5l0vsbu"},{"name":"gradle","_id":"cjaw7ec2s0055d6ykkwpx9aki"},{"name":"exitApplication","_id":"cjaw7ec2u0058d6ykv7odinp3"},{"name":"Hexo","_id":"cjaw7ec2v005ad6ykhut2ws9b"},{"name":"genericity","_id":"cjaw7ec2x005fd6yk8fs5m0w4"},{"name":"Hexo structure","_id":"cjaw7ec2z005kd6ykgpr71ucq"},{"name":"EJS","_id":"cjaw7ec31005od6ykqi0lvyor"},{"name":"IM Company","_id":"cjaw7ec33005sd6ykz5awl9cx"},{"name":"Patch Update","_id":"cjaw7ec35005vd6ykfteuswyn"},{"name":"linux","_id":"cjaw7ec36005xd6yk5v7tcqym"},{"name":"iterm","_id":"cjaw7ec360060d6yktotro495"},{"name":"scp","_id":"cjaw7ec370061d6ykekzgbhq5"},{"name":"multi-process","_id":"cjaw7ec390062d6ykjgx36214"},{"name":"svn server","_id":"cjaw7ec3a0065d6yks7jdo7as"},{"name":"HTTPS","_id":"cjaw7ec3e006ad6yk62y41dlb"},{"name":"Injection","_id":"cjaw7ec3f006dd6ykgp9r3emu"},{"name":"assertion","_id":"cjaw7ec3g006fd6ykok77qxbv"},{"name":"Annotation","_id":"cjaw7ec3h006gd6ykt9t6r9rs"},{"name":"Android Framework","_id":"cjaw7ec3i006jd6ykreabnd5a"},{"name":"EIT","_id":"cjaw7ec3j006md6ykghigj8xh"},{"name":"Object-oriented","_id":"cjaw7ec3x006nd6ykf19b8gk1"},{"name":"HOOK","_id":"cjaw7ec3z006od6ykk92k8oad"},{"name":"Android system service","_id":"cjaw7ec3z006rd6ykaq5tzn1l"},{"name":"Binder","_id":"cjaw7ec40006td6yk8lngoewz"},{"name":"TimerTask","_id":"cjaw7ec41006ud6yk963jl0nv"},{"name":"handler","_id":"cjaw7ec42006xd6ykk76l5vn1"},{"name":"AIDL","_id":"cjaw7ec43006zd6yk55h1qd94"},{"name":"AOSP","_id":"cjaw7ec440073d6ykmfqdcdj0"},{"name":"sdk compile","_id":"cjaw7ec470076d6yk7esikqbi"},{"name":"AMS","_id":"cjaw7ec49007bd6ykz6ff01q4"},{"name":"PBOC","_id":"cjaw7ec4d007gd6yk8ku7v34l"},{"name":"PBOC 2.0","_id":"cjaw7ec4e007jd6ykhfprfa3e"},{"name":"Alfred Workflow","_id":"cjaw7ec4h007qd6ykbr0xdap7"},{"name":"Electron","_id":"cjaw7ec4j007td6ykjluh5ug6"},{"name":"JavaScript","_id":"cjaw7ec4l007vd6yk7vcp08jz"},{"name":"nodejs","_id":"cjaw7ec6k0083d6yk7xgku2ve"}]}}